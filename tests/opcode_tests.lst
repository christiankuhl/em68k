F00:0001       TESTSTATUS equ $ffffff00
F00:0002       
F00:0003       ; Populate Exception Vectors
F00:0004       ;
F00:0005           org $00000   
F00:0006         dc.l    $000003F0  ; Vector = 0   Reset Supervisor Stack Pointer
               S01:00000000:  00 00 03 F0
F00:0007         dc.l    $00000400  ; Vector = 1   Reset Initial PC
               S01:00000004:  00 00 04 00
F00:0008         dc.l    $22222222  ; Vector = 2   Bus Error
               S01:00000008:  22 22 22 22
F00:0009         dc.l    $30303033  ; Vector = 3   Address Error
               S01:0000000C:  30 30 30 33
F00:0010         dc.l    $44444444  ; Vector = 4   Illegal Instruction
               S01:00000010:  44 44 44 44
F00:0011         dc.l    $55555555  ; Vector = 5   Zero Divide
               S01:00000014:  55 55 55 55
F00:0012         dc.l    $0000F010  ; Vector = 6   CHK Instruction
               S01:00000018:  00 00 F0 10
F00:0013         dc.l    $0000F020  ; Vector = 7   TRAPV Instruction
               S01:0000001C:  00 00 F0 20
F00:0014         dc.l    $88888888  ; Vector = 8   Privilege Violation 
               S01:00000020:  88 88 88 88
F00:0015         dc.l    $99999999  ; Vector = 9   Trace
               S01:00000024:  99 99 99 99
F00:0016         dc.l    $aaaaaaaa  ; Vector = 10  Line A Emulator
               S01:00000028:  AA AA AA AA
F00:0017         dc.l    $bbbbbbbb  ; Vector = 11  Line F Emulator
               S01:0000002C:  BB BB BB BB
F00:0018         
F00:0019           org $00060   
F00:0020         dc.l    $12121212  ; Vector = 24  Spurrious Interrupt
               S02:00000060:  12 12 12 12
F00:0021         dc.l    $11111111  ; Vector = 25  Level 1 Interrupt Autovector
               S02:00000064:  11 11 11 11
F00:0022         dc.l    $22222222  ; Vector = 26  Level 2 Interrupt Autovector
               S02:00000068:  22 22 22 22
F00:0023         dc.l    $33333333  ; Vector = 27  Level 3 Interrupt Autovector
               S02:0000006C:  33 33 33 33
F00:0024         dc.l    $44444444  ; Vector = 28  Level 4 Interrupt Autovector
               S02:00000070:  44 44 44 44
F00:0025         dc.l    $55555555  ; Vector = 29  Level 5 Interrupt Autovector
               S02:00000074:  55 55 55 55
F00:0026         dc.l    $66666666  ; Vector = 30  Level 6 Interrupt Autovector
               S02:00000078:  66 66 66 66
F00:0027         dc.l    $77777777  ; Vector = 31  Level 7 Interrupt Autovector
               S02:0000007C:  77 77 77 77
F00:0028         
F00:0029       
F00:0030       ; Loop here when all tests pass
F00:0031       ;
F00:0032           org $00F000 
F00:0033       
F00:0034       ALL_DONE:
F00:0035           move #$2700,sr
               S03:0000F000:  46 FC 27 00
F00:0036           stop #$2700
               S03:0000F004:  4E 72 27 00
F00:0037       
F00:0038        
F00:0039       ; Exception Vector = 6   CHK Instruction
F00:0040       ;
F00:0041           org $00F010 
F00:0042         
F00:0043       EXCEPTION_6:
F00:0044                   move.l #$EEEE0006,d6      ; Set d6 to the exception vector 
               S04:0000F010:  2C 3C EE EE 00 06
F00:0045                   rte
               S04:0000F016:  4E 73
F00:0046                 
F00:0047       
F00:0048        
F00:0049       ; Exception Vector = 7   TRAPV Instruction
F00:0050       ;
F00:0051           org $00F020 
F00:0052         
F00:0053       EXCEPTION_7:
F00:0054                   move.l #$12345678,d0      ; Set d6 to the exception vector 
               S05:0000F020:  20 3C 12 34 56 78
F00:0055                   rte
               S05:0000F026:  4E 73
F00:0056                 
F00:0057       
F00:0058       
F00:0059       ; Beginning of opcode tests
F00:0060       ;
F00:0061           org $000400 
F00:0062       
F00:0063          move.l #$000003F0,a7      ; populate stack pointer
               S06:00000400:  2E 7C 00 00 03 F0
F00:0064       
F00:0065       
F00:0066          jsr op_ORI_TO_CCR
               S06:00000406:  4E B9 00 00 05 82
F00:0067          jsr op_ORI_TO_SR
               S06:0000040C:  4E B9 00 00 05 CA
F00:0068          jsr op_EORI_TO_CCR
               S06:00000412:  4E B9 00 00 06 12
F00:0069          jsr op_EORI_TO_SR
               S06:00000418:  4E B9 00 00 06 5E
F00:0070          jsr op_ANDI_TO_CCR
               S06:0000041E:  4E B9 00 00 06 AA
F00:0071          jsr op_ANDI_TO_SR
               S06:00000424:  4E B9 00 00 06 F6
F00:0072          jsr op_BTST
               S06:0000042A:  4E B9 00 00 07 42
F00:0073          jsr op_BCHG
               S06:00000430:  4E B9 00 00 0C 68
F00:0074          jsr op_BCLR
               S06:00000436:  4E B9 00 00 11 42
F00:0075          jsr op_BSET
               S06:0000043C:  4E B9 00 00 15 EE
F00:0076          jsr op_MOVEP
               S06:00000442:  4E B9 00 00 1A E0
F00:0077          jsr op_BOOL_I
               S06:00000448:  4E B9 00 00 1B 9A
F00:0078          jsr op_BSR
               S06:0000044E:  4E B9 00 00 1E 06
F00:0079          jsr op_CMP_I
               S06:00000454:  4E B9 00 00 1E 5A
F00:0080          jsr op_ADD_I
               S06:0000045A:  4E B9 00 00 21 42
F00:0081          jsr op_SUB_I
               S06:00000460:  4E B9 00 00 23 7E
F00:0082          jsr op_MOVE
               S06:00000466:  4E B9 00 00 25 BA
F00:0083          jsr op_MOVE_xxx_FLAGS
               S06:0000046C:  4E B9 00 00 28 90
F00:0084          jsr op_EXT
               S06:00000472:  4E B9 00 00 2B 84
F00:0085          jsr op_SWAP
               S06:00000478:  4E B9 00 00 2B DC
F00:0086          jsr op_LEAPEA 
               S06:0000047E:  4E B9 00 00 2C 0E
F00:0087          jsr op_TAS 
               S06:00000484:  4E B9 00 00 2C F0
F00:0088          jsr op_TST 
               S06:0000048A:  4E B9 00 00 2D 3C
F00:0089          jsr op_LINKS 
               S06:00000490:  4E B9 00 00 2D B2
F00:0090          jsr op_MOVE_USP
               S06:00000496:  4E B9 00 00 2D E8
F00:0091          jsr op_CHK
               S06:0000049C:  4E B9 00 00 2E 14
F00:0092          jsr op_NEGS
               S06:000004A2:  4E B9 00 00 2E 68
F00:0093          jsr op_CLR
               S06:000004A8:  4E B9 00 00 33 94
F00:0094          jsr op_MOVEM
               S06:000004AE:  4E B9 00 00 34 06
F00:0095          jsr op_TRAPV
               S06:000004B4:  4E B9 00 00 38 78
F00:0096          jsr op_RTR
               S06:000004BA:  4E B9 00 00 38 B6
F00:0097          jsr op_BCC
               S06:000004C0:  4E B9 00 00 38 F2
F00:0098          jsr op_DBCC
               S06:000004C6:  4E B9 00 00 39 A4
F00:0099          jsr op_SCC
               S06:000004CC:  4E B9 00 00 39 F0
F00:0100          jsr op_ADDQ
               S06:000004D2:  4E B9 00 00 3A 34
F00:0101          jsr op_SUBQ
               S06:000004D8:  4E B9 00 00 3B 64
F00:0102          jsr op_MOVEQ
               S06:000004DE:  4E B9 00 00 3C 94
F00:0103          jsr op_DIVU
               S06:000004E4:  4E B9 00 00 3C DC
F00:0104          jsr op_DIVS
               S06:000004EA:  4E B9 00 00 3D 60
F00:0105          jsr op_OR
               S06:000004F0:  4E B9 00 00 3D E4
F00:0106          jsr op_AND
               S06:000004F6:  4E B9 00 00 3F 20
F00:0107          jsr op_EOR
               S06:000004FC:  4E B9 00 00 40 5C
F00:0108          jsr op_CMP
               S06:00000502:  4E B9 00 00 41 06
F00:0109          jsr op_CMPA
               S06:00000508:  4E B9 00 00 41 B0
F00:0110          jsr op_CMPM
               S06:0000050E:  4E B9 00 00 42 4A
F00:0111          jsr op_ADD
               S06:00000514:  4E B9 00 00 43 34
F00:0112          jsr op_SUB
               S06:0000051A:  4E B9 00 00 44 70
F00:0113          jsr op_ADDA
               S06:00000520:  4E B9 00 00 45 AC
F00:0114          jsr op_SUBA
               S06:00000526:  4E B9 00 00 46 30
F00:0115          jsr op_ADDX
               S06:0000052C:  4E B9 00 00 46 B4
F00:0116          jsr op_SUBX
               S06:00000532:  4E B9 00 00 48 1E
F00:0117          jsr op_MULU
               S06:00000538:  4E B9 00 00 49 8A
F00:0118          jsr op_MULS
               S06:0000053E:  4E B9 00 00 4A 08
F00:0119          jsr op_EXG
               S06:00000544:  4E B9 00 00 4A 86
F00:0120          jsr op_ROx
               S06:0000054A:  4E B9 00 00 4B 16
F00:0121          jsr op_ROXx
               S06:00000550:  4E B9 00 00 4E 18
F00:0122          jsr op_SHIFTS2
               S06:00000556:  4E B9 00 00 54 28
F00:0123          jsr op_SHIFTS
               S06:0000055C:  4E B9 00 00 51 1A
F00:0124          jsr op_ABCD
               S06:00000562:  4E B9 00 00 57 2A
F00:0125          jsr op_SBCD
               S06:00000568:  4E B9 00 00 58 A6
F00:0126          jsr op_NBCD
               S06:0000056E:  4E B9 00 00 5A 22
F00:0127       
F00:0128          jmp ALL_DONE
               S06:00000574:  4E F9 00 00 F0 00
F00:0129       
F00:0130          
F00:0131       
F00:0132       BSR_FAR1:       move.l #$33333333,d3
               S06:0000057A:  26 3C 33 33 33 33
F00:0133                       rts
               S06:00000580:  4E 75
F00:0134       
F00:0135       ;-----------------------------------------------------------
F00:0136       ;-----------------------------------------------------------
F00:0137       ; OPCODE : ORI_TO_CCR
F00:0138       ;-----------------------------------------------------------
F00:0139       ;-----------------------------------------------------------
F00:0140       op_ORI_TO_CCR: 
F00:0141       
F00:0142           ori.b #$FF,CCR
               S06:00000582:  00 3C 00 FF
F00:0143           bpl ORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:00000586:  6A 00 00 36
F00:0144           bne ORI_TO_CCR_FAIL     ; branch if N clear
               S06:0000058A:  66 00 00 32
F00:0145           bvc ORI_TO_CCR_FAIL     ; branch if V clear 
               S06:0000058E:  68 00 00 2E
F00:0146           bcc ORI_TO_CCR_FAIL     ; branch if C clear 
               S06:00000592:  64 00 00 2A
F00:0147           
F00:0148           move #$00,CCR
               S06:00000596:  44 FC 00 00
F00:0149           ori.b #$00,CCR
               S06:0000059A:  00 3C 00 00
F00:0150           beq ORI_TO_CCR_FAIL     ; branch if Z set  
               S06:0000059E:  67 00 00 1E
F00:0151           bmi ORI_TO_CCR_FAIL     ; branch if N set  
               S06:000005A2:  6B 00 00 1A
F00:0152           bvs ORI_TO_CCR_FAIL     ; branch if V set  
               S06:000005A6:  69 00 00 16
F00:0153           bcs ORI_TO_CCR_FAIL     ; branch if C set  
               S06:000005AA:  65 00 00 12
F00:0154          
F00:0155           move #$2700,SR         ; Put flags back to initial value
               S06:000005AE:  46 FC 27 00
F00:0156       
F00:0157           movea #TESTSTATUS,a0
               S06:000005B2:  30 7C FF 00
F00:0158           move.b #$1,$00(a0)
               S06:000005B6:  11 7C 00 01 00 00
F00:0159           rts
               S06:000005BC:  4E 75
F00:0160           
F00:0161       ORI_TO_CCR_FAIL: 
F00:0162           movea #TESTSTATUS,a0
               S06:000005BE:  30 7C FF 00
F00:0163           move.b #$2,$00(a0)
               S06:000005C2:  11 7C 00 02 00 00
F00:0164           rts
               S06:000005C8:  4E 75
F00:0165          
F00:0166       ;-----------------------------------------------------------
F00:0167       ;-----------------------------------------------------------
F00:0168       ; OPCODE : ORI_TO_SR
F00:0169       ;-----------------------------------------------------------
F00:0170       ;-----------------------------------------------------------
F00:0171       op_ORI_TO_SR: 
F00:0172       
F00:0173           ori.w #$2FFF,SR
               S06:000005CA:  00 7C 2F FF
F00:0174           bpl ORI_TO_SR_FAIL     ; branch if Z clear  
               S06:000005CE:  6A 00 00 36
F00:0175           bne ORI_TO_SR_FAIL     ; branch if N clear
               S06:000005D2:  66 00 00 32
F00:0176           bvc ORI_TO_SR_FAIL     ; branch if V clear 
               S06:000005D6:  68 00 00 2E
F00:0177           bcc ORI_TO_SR_FAIL     ; branch if C clear 
               S06:000005DA:  64 00 00 2A
F00:0178           
F00:0179           move #$2000,SR
               S06:000005DE:  46 FC 20 00
F00:0180           ori.w #$0000,SR
               S06:000005E2:  00 7C 00 00
F00:0181           beq ORI_TO_SR_FAIL     ; branch if Z set  
               S06:000005E6:  67 00 00 1E
F00:0182           bmi ORI_TO_SR_FAIL     ; branch if N set  
               S06:000005EA:  6B 00 00 1A
F00:0183           bvs ORI_TO_SR_FAIL     ; branch if V set  
               S06:000005EE:  69 00 00 16
F00:0184           bcs ORI_TO_SR_FAIL     ; branch if C set  
               S06:000005F2:  65 00 00 12
F00:0185          
F00:0186           move #$2700,SR        ; Put flags back to initial value
               S06:000005F6:  46 FC 27 00
F00:0187       
F00:0188           movea #TESTSTATUS,a0
               S06:000005FA:  30 7C FF 00
F00:0189           move.b #$1,$01(a0)
               S06:000005FE:  11 7C 00 01 00 01
F00:0190           rts
               S06:00000604:  4E 75
F00:0191           
F00:0192       ORI_TO_SR_FAIL:
F00:0193           movea #TESTSTATUS,a0
               S06:00000606:  30 7C FF 00
F00:0194           move.b #$2,$01(a0)
               S06:0000060A:  11 7C 00 02 00 01
F00:0195           rts
               S06:00000610:  4E 75
F00:0196       
F00:0197       ;-----------------------------------------------------------
F00:0198       ;-----------------------------------------------------------
F00:0199       ; OPCODE : EORI_TO_CCR
F00:0200       ;-----------------------------------------------------------
F00:0201       ;-----------------------------------------------------------
F00:0202       op_EORI_TO_CCR: 
F00:0203       
F00:0204           move #$00,CCR
               S06:00000612:  44 FC 00 00
F00:0205           eori.b #$FF,CCR
               S06:00000616:  0A 3C 00 FF
F00:0206           bpl EORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:0000061A:  6A 00 00 36
F00:0207           bne EORI_TO_CCR_FAIL     ; branch if N clear
               S06:0000061E:  66 00 00 32
F00:0208           bvc EORI_TO_CCR_FAIL     ; branch if V clear 
               S06:00000622:  68 00 00 2E
F00:0209           bcc EORI_TO_CCR_FAIL     ; branch if C clear 
               S06:00000626:  64 00 00 2A
F00:0210           
F00:0211           move #$00,CCR
               S06:0000062A:  44 FC 00 00
F00:0212           eori.b #$00,CCR
               S06:0000062E:  0A 3C 00 00
F00:0213           beq EORI_TO_CCR_FAIL     ; branch if Z set  
               S06:00000632:  67 00 00 1E
F00:0214           bmi EORI_TO_CCR_FAIL     ; branch if N set  
               S06:00000636:  6B 00 00 1A
F00:0215           bvs EORI_TO_CCR_FAIL     ; branch if V set  
               S06:0000063A:  69 00 00 16
F00:0216           bcs EORI_TO_CCR_FAIL     ; branch if C set  
               S06:0000063E:  65 00 00 12
F00:0217          
F00:0218           move #$2700,SR         ; Put flags back to initial value
               S06:00000642:  46 FC 27 00
F00:0219       
F00:0220           movea #TESTSTATUS,a0
               S06:00000646:  30 7C FF 00
F00:0221           move.b #$1,$02(a0)
               S06:0000064A:  11 7C 00 01 00 02
F00:0222           rts
               S06:00000650:  4E 75
F00:0223           
F00:0224       EORI_TO_CCR_FAIL:
F00:0225           movea #TESTSTATUS,a0
               S06:00000652:  30 7C FF 00
F00:0226           move.b #$2,$02(a0)
               S06:00000656:  11 7C 00 02 00 02
F00:0227           rts
               S06:0000065C:  4E 75
F00:0228       
F00:0229       ;-----------------------------------------------------------
F00:0230       ;-----------------------------------------------------------
F00:0231       ; OPCODE : EORI_TO_SR
F00:0232       ;-----------------------------------------------------------
F00:0233       ;-----------------------------------------------------------
F00:0234       op_EORI_TO_SR: 
F00:0235       
F00:0236           move #$2000,SR
               S06:0000065E:  46 FC 20 00
F00:0237           eori.w #$0FFF,SR
               S06:00000662:  0A 7C 0F FF
F00:0238           bpl EORI_TO_SR_FAIL     ; branch if Z clear  
               S06:00000666:  6A 00 00 36
F00:0239           bne EORI_TO_SR_FAIL     ; branch if N clear
               S06:0000066A:  66 00 00 32
F00:0240           bvc EORI_TO_SR_FAIL     ; branch if V clear 
               S06:0000066E:  68 00 00 2E
F00:0241           bcc EORI_TO_SR_FAIL     ; branch if C clear 
               S06:00000672:  64 00 00 2A
F00:0242           
F00:0243           move #$2000,SR
               S06:00000676:  46 FC 20 00
F00:0244           eori.w #$0000,SR
               S06:0000067A:  0A 7C 00 00
F00:0245           beq EORI_TO_SR_FAIL     ; branch if Z set  
               S06:0000067E:  67 00 00 1E
F00:0246           bmi EORI_TO_SR_FAIL     ; branch if N set  
               S06:00000682:  6B 00 00 1A
F00:0247           bvs EORI_TO_SR_FAIL     ; branch if V set  
               S06:00000686:  69 00 00 16
F00:0248           bcs EORI_TO_SR_FAIL     ; branch if C set  
               S06:0000068A:  65 00 00 12
F00:0249          
F00:0250           move #$2700,SR        ; Put flags back to initial value
               S06:0000068E:  46 FC 27 00
F00:0251       
F00:0252           movea #TESTSTATUS,a0
               S06:00000692:  30 7C FF 00
F00:0253           move.b #$1,$03(a0)
               S06:00000696:  11 7C 00 01 00 03
F00:0254           rts
               S06:0000069C:  4E 75
F00:0255           
F00:0256       EORI_TO_SR_FAIL:
F00:0257           movea #TESTSTATUS,a0
               S06:0000069E:  30 7C FF 00
F00:0258           move.b #$2,$03(a0)
               S06:000006A2:  11 7C 00 02 00 03
F00:0259           rts
               S06:000006A8:  4E 75
F00:0260       
F00:0261       ;-----------------------------------------------------------
F00:0262       ;-----------------------------------------------------------
F00:0263       ; OPCODE : ANDI_TO_CCR
F00:0264       ;-----------------------------------------------------------
F00:0265       ;-----------------------------------------------------------
F00:0266       op_ANDI_TO_CCR: 
F00:0267       
F00:0268           move #$FF,CCR
               S06:000006AA:  44 FC 00 FF
F00:0269           andi.b #$FF,CCR
               S06:000006AE:  02 3C 00 FF
F00:0270           bpl ANDI_TO_CCR_FAIL     ; branch if Z clear  
               S06:000006B2:  6A 00 00 36
F00:0271           bne ANDI_TO_CCR_FAIL     ; branch if N clear
               S06:000006B6:  66 00 00 32
F00:0272           bvc ANDI_TO_CCR_FAIL     ; branch if V clear 
               S06:000006BA:  68 00 00 2E
F00:0273           bcc ANDI_TO_CCR_FAIL     ; branch if C clear 
               S06:000006BE:  64 00 00 2A
F00:0274           
F00:0275           move #$FF,CCR
               S06:000006C2:  44 FC 00 FF
F00:0276           andi.b #$00,CCR
               S06:000006C6:  02 3C 00 00
F00:0277           beq ANDI_TO_CCR_FAIL     ; branch if Z set  
               S06:000006CA:  67 00 00 1E
F00:0278           bmi ANDI_TO_CCR_FAIL     ; branch if N set  
               S06:000006CE:  6B 00 00 1A
F00:0279           bvs ANDI_TO_CCR_FAIL     ; branch if V set  
               S06:000006D2:  69 00 00 16
F00:0280           bcs ANDI_TO_CCR_FAIL     ; branch if C set  
               S06:000006D6:  65 00 00 12
F00:0281          
F00:0282           move #$2700,SR         ; Put flags back to initial value
               S06:000006DA:  46 FC 27 00
F00:0283       
F00:0284           movea #TESTSTATUS,a0
               S06:000006DE:  30 7C FF 00
F00:0285           move.b #$1,$04(a0)
               S06:000006E2:  11 7C 00 01 00 04
F00:0286           rts
               S06:000006E8:  4E 75
F00:0287           
F00:0288       ANDI_TO_CCR_FAIL:
F00:0289           movea #TESTSTATUS,a0
               S06:000006EA:  30 7C FF 00
F00:0290           move.b #$2,$04(a0)
               S06:000006EE:  11 7C 00 02 00 04
F00:0291           rts
               S06:000006F4:  4E 75
F00:0292       
F00:0293       ;-----------------------------------------------------------
F00:0294       ;-----------------------------------------------------------
F00:0295       ; OPCODE : ANDI_TO_SR
F00:0296       ;-----------------------------------------------------------
F00:0297       ;-----------------------------------------------------------
F00:0298       op_ANDI_TO_SR: 
F00:0299           move #$20FF,SR
               S06:000006F6:  46 FC 20 FF
F00:0300           andi.w #$FFFF,SR
               S06:000006FA:  02 7C FF FF
F00:0301           bpl ANDI_TO_SR_FAIL     ; branch if Z clear  
               S06:000006FE:  6A 00 00 36
F00:0302           bne ANDI_TO_SR_FAIL     ; branch if N clear
               S06:00000702:  66 00 00 32
F00:0303           bvc ANDI_TO_SR_FAIL     ; branch if V clear 
               S06:00000706:  68 00 00 2E
F00:0304           bcc ANDI_TO_SR_FAIL     ; branch if C clear 
               S06:0000070A:  64 00 00 2A
F00:0305           
F00:0306           move #$20FF,SR
               S06:0000070E:  46 FC 20 FF
F00:0307           andi.w #$FF00,SR
               S06:00000712:  02 7C FF 00
F00:0308           beq ANDI_TO_SR_FAIL     ; branch if Z set  
               S06:00000716:  67 00 00 1E
F00:0309           bmi ANDI_TO_SR_FAIL     ; branch if N set  
               S06:0000071A:  6B 00 00 1A
F00:0310           bvs ANDI_TO_SR_FAIL     ; branch if V set  
               S06:0000071E:  69 00 00 16
F00:0311           bcs ANDI_TO_SR_FAIL     ; branch if C set  
               S06:00000722:  65 00 00 12
F00:0312          
F00:0313           move #$2700,SR         ; Put flags back to initial value
               S06:00000726:  46 FC 27 00
F00:0314       
F00:0315           movea #TESTSTATUS,a0
               S06:0000072A:  30 7C FF 00
F00:0316           move.b #$1,$05(a0)
               S06:0000072E:  11 7C 00 01 00 05
F00:0317           rts
               S06:00000734:  4E 75
F00:0318           
F00:0319       ANDI_TO_SR_FAIL:
F00:0320           movea #TESTSTATUS,a0
               S06:00000736:  30 7C FF 00
F00:0321           move.b #$2,$05(a0)
               S06:0000073A:  11 7C 00 02 00 05
F00:0322           rts
               S06:00000740:  4E 75
F00:0323         
F00:0324       ;-----------------------------------------------------------
F00:0325       ;-----------------------------------------------------------
F00:0326       ; OPCODE : BTST
F00:0327       ;-----------------------------------------------------------
F00:0328       ;-----------------------------------------------------------
F00:0329       op_BTST: 
F00:0330       
F00:0331       ;  Bit Number Static 
F00:0332           
F00:0333                   ; EA = Dn  - LONG only
F00:0334                   move.l #$80000001,d0      ; populate test data
               S06:00000742:  20 3C 80 00 00 01
F00:0335                   btst.l #0,d0              
               S06:00000748:  08 00 00 00
F00:0336                   beq BTST_FAIL               ; branch if Z set
               S06:0000074C:  67 00 05 0E
F00:0337                   btst.l #1,d0              ; 
               S06:00000750:  08 00 00 01
F00:0338                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000754:  66 00 05 06
F00:0339                   btst.l #31,d0             ; 
               S06:00000758:  08 00 00 1F
F00:0340                   beq BTST_FAIL               ; branch if Z set
               S06:0000075C:  67 00 04 FE
F00:0341                   
F00:0342                   
F00:0343                   ; EA = (An)  - BYTE only
F00:0344                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000760:  20 7C 00 00 01 00
F00:0345                   move.b #$81,(a0)          ; populate test data
               S06:00000766:  10 BC 00 81
F00:0346                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:0000076A:  12 10
F00:0347                   btst.b #0,(a0)            
               S06:0000076C:  08 10 00 00
F00:0348                   beq BTST_FAIL               ; branch if Z set
               S06:00000770:  67 00 04 EA
F00:0349                   btst.b #1,(a0)            ; 
               S06:00000774:  08 10 00 01
F00:0350                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000778:  66 00 04 E2
F00:0351                   btst.b #7,(a0)            ; 
               S06:0000077C:  08 10 00 07
F00:0352                   beq BTST_FAIL               ; branch if Z set
               S06:00000780:  67 00 04 DA
F00:0353                   
F00:0354                   
F00:0355                   ; EA = (An)+  - BYTE only
F00:0356                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000784:  20 7C 00 00 01 00
F00:0357                   move.b #$01,(a0)+         ; populate test data
               S06:0000078A:  10 FC 00 01
F00:0358                   move.b #$FC,(a0)+         ; populate test data
               S06:0000078E:  10 FC 00 FC
F00:0359                   move.b #$80,(a0)+         ; populate test data
               S06:00000792:  10 FC 00 80
F00:0360                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000796:  20 7C 00 00 01 00
F00:0361                   btst.b #0,(a0)+            
               S06:0000079C:  08 18 00 00
F00:0362                   beq BTST_FAIL               ; branch if Z set
               S06:000007A0:  67 00 04 BA
F00:0363                   btst.b #1,(a0)+           ; 
               S06:000007A4:  08 18 00 01
F00:0364                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007A8:  66 00 04 B2
F00:0365                   btst.b #7,(a0)+           ; 
               S06:000007AC:  08 18 00 07
F00:0366                   beq BTST_FAIL               ; branch if Z set
               S06:000007B0:  67 00 04 AA
F00:0367               
F00:0368               
F00:0369                   ; EA = -(An)  - BYTE only
F00:0370                   move.l #$00000100,a0      ; point to memory to address
               S06:000007B4:  20 7C 00 00 01 00
F00:0371                   move.b #$80,(a0)+         ; populate test data
               S06:000007BA:  10 FC 00 80
F00:0372                   move.b #$FC,(a0)+         ; populate test data
               S06:000007BE:  10 FC 00 FC
F00:0373                   move.b #$01,(a0)+         ; populate test data
               S06:000007C2:  10 FC 00 01
F00:0374                   move.l #$00000103,a0      ; point to memory to address 
               S06:000007C6:  20 7C 00 00 01 03
F00:0375                   btst.b #0,-(a0)            
               S06:000007CC:  08 20 00 00
F00:0376                   beq BTST_FAIL               ; branch if Z set
               S06:000007D0:  67 00 04 8A
F00:0377                   btst.b #1,-(a0)           ; 
               S06:000007D4:  08 20 00 01
F00:0378                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007D8:  66 00 04 82
F00:0379                   btst.b #7,-(a0)           ; 
               S06:000007DC:  08 20 00 07
F00:0380                   beq BTST_FAIL               ; branch if Z set
               S06:000007E0:  67 00 04 7A
F00:0381               
F00:0382               
F00:0383                   ; EA = n(An)  - BYTE only
F00:0384                   move.l #$00000100,a0      ; point to memory to address
               S06:000007E4:  20 7C 00 00 01 00
F00:0385                   move.b #$01,(a0)+         ; populate test data
               S06:000007EA:  10 FC 00 01
F00:0386                   move.b #$FC,(a0)+         ; populate test data
               S06:000007EE:  10 FC 00 FC
F00:0387                   move.b #$80,(a0)+         ; populate test data
               S06:000007F2:  10 FC 00 80
F00:0388                   move.l #$00000100,a0      ; point to memory to address
               S06:000007F6:  20 7C 00 00 01 00
F00:0389                   btst.b #0,0(a0)            
               S06:000007FC:  08 28 00 00 00 00
F00:0390                   beq BTST_FAIL               ; branch if Z set
               S06:00000802:  67 00 04 58
F00:0391                   btst.b #1,1(a0)           ; 
               S06:00000806:  08 28 00 01 00 01
F00:0392                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000080C:  66 00 04 4E
F00:0393                   btst.b #7,2(a0)           ; 
               S06:00000810:  08 28 00 07 00 02
F00:0394                   beq BTST_FAIL               ; branch if Z set
               S06:00000816:  67 00 04 44
F00:0395               
F00:0396               
F00:0397                   ; EA = n(An,R.W)  - BYTE only
F00:0398                   move.l #$00000100,a0      ; point to memory to address
               S06:0000081A:  20 7C 00 00 01 00
F00:0399                   move.l #$00000000,a1      ; point to memory to address
               S06:00000820:  22 7C 00 00 00 00
F00:0400                   move.l #$00000001,a2      ; point to memory to address
               S06:00000826:  24 7C 00 00 00 01
F00:0401                   move.l #$00000000,d0      ; point to memory to address
               S06:0000082C:  20 3C 00 00 00 00
F00:0402                   move.l #$00000001,d1      ; point to memory to address
               S06:00000832:  22 3C 00 00 00 01
F00:0403                   btst.b #0,0(a0,d0.w)            
               S06:00000838:  08 30 00 00 00 00
F00:0404                   beq BTST_FAIL               ; branch if Z set
               S06:0000083E:  67 00 04 1C
F00:0405                   btst.b #1,0(a0,d1.w)      ; 
               S06:00000842:  08 30 00 01 10 00
F00:0406                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000848:  66 00 04 12
F00:0407                   btst.b #7,1(a0,d1.w)      ; 
               S06:0000084C:  08 30 00 07 10 01
F00:0408                   beq BTST_FAIL               ; branch if Z set
               S06:00000852:  67 00 04 08
F00:0409                   ; EA = n(An,R.L)  - BYTE only
F00:0410                   btst.b #0,0(a0,d0.l)  
               S06:00000856:  08 30 00 00 08 00
F00:0411                   beq BTST_FAIL               ; branch if Z set
               S06:0000085C:  67 00 03 FE
F00:0412                   btst.b #1,0(a0,d1.l)      ; 
               S06:00000860:  08 30 00 01 18 00
F00:0413                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000866:  66 00 03 F4
F00:0414                   btst.b #7,1(a0,d1.l)      ; 
               S06:0000086A:  08 30 00 07 18 01
F00:0415                   beq BTST_FAIL               ; branch if Z set
               S06:00000870:  67 00 03 EA
F00:0416                   ; EA = n(An,A.W)  - BYTE only
F00:0417                   btst.b #0,0(a0,a1.w)            
               S06:00000874:  08 30 00 00 90 00
F00:0418                   beq BTST_FAIL               ; branch if Z set
               S06:0000087A:  67 00 03 E0
F00:0419                   btst.b #1,0(a0,a2.w)      ; 
               S06:0000087E:  08 30 00 01 A0 00
F00:0420                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000884:  66 00 03 D6
F00:0421                   btst.b #7,1(a0,a2.w)      ; 
               S06:00000888:  08 30 00 07 A0 01
F00:0422                   beq BTST_FAIL               ; branch if Z set
               S06:0000088E:  67 00 03 CC
F00:0423                   ; EA = n(An,A.L)  - BYTE only
F00:0424                   btst.b #0,0(a0,a1.l)  
               S06:00000892:  08 30 00 00 98 00
F00:0425                   beq BTST_FAIL               ; branch if Z set
               S06:00000898:  67 00 03 C2
F00:0426                   btst.b #1,0(a0,a2.l)      ; 
               S06:0000089C:  08 30 00 01 A8 00
F00:0427                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008A2:  66 00 03 B8
F00:0428                   btst.b #7,1(a0,a2.l)      ; 
               S06:000008A6:  08 30 00 07 A8 01
F00:0429                   beq BTST_FAIL               ; branch if Z set
               S06:000008AC:  67 00 03 AE
F00:0430               
F00:0431               
F00:0432                   ; EA = x.W  - BYTE only
F00:0433                   btst.b #0,$0100            
               S06:000008B0:  08 39 00 00 00 00 01 00
F00:0434                   beq BTST_FAIL               ; branch if Z set
               S06:000008B8:  67 00 03 A2
F00:0435                   btst.b #1,$0101           ; 
               S06:000008BC:  08 39 00 01 00 00 01 01
F00:0436                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008C4:  66 00 03 96
F00:0437                   btst.b #7,$0102           ; 
               S06:000008C8:  08 39 00 07 00 00 01 02
F00:0438                   beq BTST_FAIL               ; branch if Z set
               S06:000008D0:  67 00 03 8A
F00:0439               
F00:0440               
F00:0441                   ; EA = x.L  - BYTE only
F00:0442                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000008D4:  20 7C 00 0F 01 00
F00:0443                   move.b #$01,(a0)+         ; populate test data
               S06:000008DA:  10 FC 00 01
F00:0444                   move.b #$FC,(a0)+         ; populate test data
               S06:000008DE:  10 FC 00 FC
F00:0445                   move.b #$80,(a0)+         ; populate test data
               S06:000008E2:  10 FC 00 80
F00:0446                   btst.b #0,$000F0100 
               S06:000008E6:  08 39 00 00 00 0F 01 00
F00:0447                   beq BTST_FAIL               ; branch if Z set
               S06:000008EE:  67 00 03 6C
F00:0448                   btst.b #1,$000F0101       ; 
               S06:000008F2:  08 39 00 01 00 0F 01 01
F00:0449                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008FA:  66 00 03 60
F00:0450                   btst.b #7,$000F0102       ; 
               S06:000008FE:  08 39 00 07 00 0F 01 02
F00:0451                   beq BTST_FAIL               ; branch if Z set
               S06:00000906:  67 00 03 54
F00:0452               
F00:0453       
F00:0454       
F00:0455                   ; EA = x(PC)  - BYTE only
F00:0456                   lea op_BTST(pc),a5
               S06:0000090A:  4B FA FE 36
F00:0457                   btst.b #0,op_BTST(pc) 
               S06:0000090E:  08 3A 00 00 FE 30
F00:0458                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000914:  66 00 03 46
F00:0459                   btst.b #3,op_BTST0(pc)     ; 
               S06:00000918:  08 3A 00 03 00 2E
F00:0460                   beq BTST_FAIL               ; branch if Z set
               S06:0000091E:  67 00 03 3C
F00:0461                   btst.b #6,op_BTST12(pc)    ; 
               S06:00000922:  08 3A 00 06 00 9C
F00:0462                   beq BTST_FAIL               ; branch if Z set
               S06:00000928:  67 00 03 32
F00:0463           
F00:0464                   ; EA = n(PC,R.W)  - BYTE only
F00:0465                   move.l #$00000100,a0      ; point to memory to address
               S06:0000092C:  20 7C 00 00 01 00
F00:0466                   move.l #$00000000,a1      ; point to memory to address
               S06:00000932:  22 7C 00 00 00 00
F00:0467                   move.l #$00000001,a2      ; point to memory to address
               S06:00000938:  24 7C 00 00 00 01
F00:0468                   move.l #$00000000,d0      ; point to memory to address
               S06:0000093E:  20 3C 00 00 00 00
F00:0469                   move.l #$00000001,d1      ; point to memory to address
               S06:00000944:  22 3C 00 00 00 01
F00:0470           
F00:0471       op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)            
               S06:0000094A:  08 3B 00 00 00 FC
F00:0472                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000950:  66 00 03 0A
F00:0473                   
F00:0474                   lea op_BTST1(pc,d1.w),a5
               S06:00000954:  4B FB 10 02
F00:0475       op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      ; 
               S06:00000958:  08 3B 00 01 10 FC
F00:0476                   beq BTST_FAIL               ; branch if Z set
               S06:0000095E:  67 00 02 FC
F00:0477       op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      ; 
               S06:00000962:  08 3B 00 07 10 FC
F00:0478                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000968:  66 00 02 F2
F00:0479                   ; EA = n(PC,R.L)  - BYTE only
F00:0480       op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)  
               S06:0000096C:  08 3B 00 00 08 FC
F00:0481                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000972:  66 00 02 E8
F00:0482       op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      ; 
               S06:00000976:  08 3B 00 01 18 FC
F00:0483                   beq BTST_FAIL               ; branch if Z set
               S06:0000097C:  67 00 02 DE
F00:0484       op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      ; 
               S06:00000980:  08 3B 00 07 18 FC
F00:0485                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000986:  66 00 02 D4
F00:0486                   ; EA = n(PC,A.W)  - BYTE only
F00:0487       op_BTST6    btst.b #0,op_BTST6(pc,a1.w)            
               S06:0000098A:  08 3B 00 00 90 FC
F00:0488                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000990:  66 00 02 CA
F00:0489       op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      ; 
               S06:00000994:  08 3B 00 01 A0 FC
F00:0490                   beq BTST_FAIL               ; branch if Z set
               S06:0000099A:  67 00 02 C0
F00:0491       op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      ; 
               S06:0000099E:  08 3B 00 07 A0 FC
F00:0492                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009A4:  66 00 02 B6
F00:0493                   ; EA = n(PC,A.L)  - BYTE only
F00:0494       op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)  
               S06:000009A8:  08 3B 00 00 98 FC
F00:0495                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009AE:  66 00 02 AC
F00:0496       op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      ; 
               S06:000009B2:  08 3B 00 01 A8 FC
F00:0497                   beq BTST_FAIL               ; branch if Z set
               S06:000009B8:  67 00 02 A2
F00:0498       op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      ; 
               S06:000009BC:  08 3B 00 07 A8 FC
F00:0499       op_BTST12:  bne BTST_FAIL               ; branch if Z clear  
               S06:000009C2:  66 00 02 98
F00:0500        
F00:0501       
F00:0502       
F00:0503       ; Bit Number Dynamic
F00:0504           
F00:0505                   ; EA = Dn  - LONG only
F00:0506                   move.l #$80000001,d0      ; populate test data
               S06:000009C6:  20 3C 80 00 00 01
F00:0507                   move.l #0,d5              ; populate bit number to test
               S06:000009CC:  2A 3C 00 00 00 00
F00:0508                   move.l #1,d6              ; populate bit number to test
               S06:000009D2:  2C 3C 00 00 00 01
F00:0509                   move.l #31,d7              ; populate bit number to test
               S06:000009D8:  2E 3C 00 00 00 1F
F00:0510                   
F00:0511                   btst.l d5,d0              
               S06:000009DE:  0B 00
F00:0512                   beq BTST_FAIL               ; branch if Z set
               S06:000009E0:  67 00 02 7A
F00:0513                   btst.l d6,d0              ; 
               S06:000009E4:  0D 00
F00:0514                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009E6:  66 00 02 74
F00:0515                   btst.l d7,d0             ; 
               S06:000009EA:  0F 00
F00:0516                   beq BTST_FAIL               ; branch if Z set
               S06:000009EC:  67 00 02 6E
F00:0517                   
F00:0518                   
F00:0519                   ; EA = (An)  - BYTE only
F00:0520                   move.l #0,d5              ; populate bit number to test
               S06:000009F0:  2A 3C 00 00 00 00
F00:0521                   move.l #1,d6              ; populate bit number to test
               S06:000009F6:  2C 3C 00 00 00 01
F00:0522                   move.l #7,d7              ; populate bit number to test           
               S06:000009FC:  2E 3C 00 00 00 07
F00:0523                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000A02:  20 7C 00 00 01 00
F00:0524                   move.b #$81,(a0)          ; populate test data
               S06:00000A08:  10 BC 00 81
F00:0525                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000A0C:  12 10
F00:0526                   btst.b d5,(a0)            
               S06:00000A0E:  0B 10
F00:0527                   beq BTST_FAIL               ; branch if Z set
               S06:00000A10:  67 00 02 4A
F00:0528                   btst.b d6,(a0)            ; 
               S06:00000A14:  0D 10
F00:0529                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A16:  66 00 02 44
F00:0530                   btst.b d7,(a0)            ; 
               S06:00000A1A:  0F 10
F00:0531                   beq BTST_FAIL               ; branch if Z set
               S06:00000A1C:  67 00 02 3E
F00:0532                   
F00:0533       ; ---
F00:0534       
F00:0535           
F00:0536                   ; EA = (An)+  - BYTE only
F00:0537                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000A20:  20 7C 00 00 01 00
F00:0538                   move.b #$01,(a0)+         ; populate test data
               S06:00000A26:  10 FC 00 01
F00:0539                   move.b #$FC,(a0)+         ; populate test data
               S06:00000A2A:  10 FC 00 FC
F00:0540                   move.b #$80,(a0)+         ; populate test data
               S06:00000A2E:  10 FC 00 80
F00:0541                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000A32:  20 7C 00 00 01 00
F00:0542                   btst.b d5,(a0)+            
               S06:00000A38:  0B 18
F00:0543                   beq BTST_FAIL               ; branch if Z set
               S06:00000A3A:  67 00 02 20
F00:0544                   btst.b d6,(a0)+           ; 
               S06:00000A3E:  0D 18
F00:0545                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A40:  66 00 02 1A
F00:0546                   btst.b d7,(a0)+           ; 
               S06:00000A44:  0F 18
F00:0547                   beq BTST_FAIL               ; branch if Z set
               S06:00000A46:  67 00 02 14
F00:0548               
F00:0549               
F00:0550                   ; EA = -(An)  - BYTE only
F00:0551                   move.l #$00000100,a0      ; point to memory to address
               S06:00000A4A:  20 7C 00 00 01 00
F00:0552                   move.b #$80,(a0)+         ; populate test data
               S06:00000A50:  10 FC 00 80
F00:0553                   move.b #$FC,(a0)+         ; populate test data
               S06:00000A54:  10 FC 00 FC
F00:0554                   move.b #$01,(a0)+         ; populate test data
               S06:00000A58:  10 FC 00 01
F00:0555                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000A5C:  20 7C 00 00 01 03
F00:0556                   btst.b d5,-(a0)            
               S06:00000A62:  0B 20
F00:0557                   beq BTST_FAIL               ; branch if Z set
               S06:00000A64:  67 00 01 F6
F00:0558                   btst.b d6,-(a0)           ; 
               S06:00000A68:  0D 20
F00:0559                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A6A:  66 00 01 F0
F00:0560                   btst.b d7,-(a0)           ; 
               S06:00000A6E:  0F 20
F00:0561                   beq BTST_FAIL               ; branch if Z set
               S06:00000A70:  67 00 01 EA
F00:0562               
F00:0563               
F00:0564                   ; EA = n(An)  - BYTE only
F00:0565                   move.l #$00000100,a0      ; point to memory to address
               S06:00000A74:  20 7C 00 00 01 00
F00:0566                   move.b #$01,(a0)+         ; populate test data
               S06:00000A7A:  10 FC 00 01
F00:0567                   move.b #$FC,(a0)+         ; populate test data
               S06:00000A7E:  10 FC 00 FC
F00:0568                   move.b #$80,(a0)+         ; populate test data
               S06:00000A82:  10 FC 00 80
F00:0569                   move.l #$00000100,a0      ; point to memory to address
               S06:00000A86:  20 7C 00 00 01 00
F00:0570                   btst.b d5,0(a0)            
               S06:00000A8C:  0B 28 00 00
F00:0571                   beq BTST_FAIL               ; branch if Z set
               S06:00000A90:  67 00 01 CA
F00:0572                   btst.b d6,1(a0)           ; 
               S06:00000A94:  0D 28 00 01
F00:0573                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A98:  66 00 01 C2
F00:0574                   btst.b d7,2(a0)           ; 
               S06:00000A9C:  0F 28 00 02
F00:0575                   beq BTST_FAIL               ; branch if Z set
               S06:00000AA0:  67 00 01 BA
F00:0576               
F00:0577               
F00:0578                   ; EA = n(An,R.W)  - BYTE only
F00:0579                   move.l #$00000100,a0      ; point to memory to address
               S06:00000AA4:  20 7C 00 00 01 00
F00:0580                   move.l #$00000000,a1      ; point to memory to address
               S06:00000AAA:  22 7C 00 00 00 00
F00:0581                   move.l #$00000001,a2      ; point to memory to address
               S06:00000AB0:  24 7C 00 00 00 01
F00:0582                   move.l #$00000000,d0      ; point to memory to address
               S06:00000AB6:  20 3C 00 00 00 00
F00:0583                   move.l #$00000001,d1      ; point to memory to address
               S06:00000ABC:  22 3C 00 00 00 01
F00:0584                   btst.b d5,0(a0,d0.w)            
               S06:00000AC2:  0B 30 00 00
F00:0585                   beq BTST_FAIL               ; branch if Z set
               S06:00000AC6:  67 00 01 94
F00:0586                   btst.b d6,0(a0,d1.w)      ; 
               S06:00000ACA:  0D 30 10 00
F00:0587                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000ACE:  66 00 01 8C
F00:0588                   btst.b d7,1(a0,d1.w)      ; 
               S06:00000AD2:  0F 30 10 01
F00:0589                   beq BTST_FAIL               ; branch if Z set
               S06:00000AD6:  67 00 01 84
F00:0590                   ; EA = n(An,R.L)  - BYTE only
F00:0591                   btst.b d5,0(a0,d0.l)  
               S06:00000ADA:  0B 30 08 00
F00:0592                   beq BTST_FAIL               ; branch if Z set
               S06:00000ADE:  67 00 01 7C
F00:0593                   btst.b d6,0(a0,d1.l)      ; 
               S06:00000AE2:  0D 30 18 00
F00:0594                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000AE6:  66 00 01 74
F00:0595                   btst.b d7,1(a0,d1.l)      ; 
               S06:00000AEA:  0F 30 18 01
F00:0596                   beq BTST_FAIL               ; branch if Z set
               S06:00000AEE:  67 00 01 6C
F00:0597                   ; EA = n(An,A.W)  - BYTE only
F00:0598                   btst.b d5,0(a0,a1.w)            
               S06:00000AF2:  0B 30 90 00
F00:0599                   beq BTST_FAIL               ; branch if Z set
               S06:00000AF6:  67 00 01 64
F00:0600                   btst.b d6,0(a0,a2.w)      ; 
               S06:00000AFA:  0D 30 A0 00
F00:0601                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000AFE:  66 00 01 5C
F00:0602                   btst.b d7,1(a0,a2.w)      ; 
               S06:00000B02:  0F 30 A0 01
F00:0603                   beq BTST_FAIL               ; branch if Z set
               S06:00000B06:  67 00 01 54
F00:0604                   ; EA = n(An,A.L)  - BYTE only
F00:0605                   btst.b d5,0(a0,a1.l)  
               S06:00000B0A:  0B 30 98 00
F00:0606                   beq BTST_FAIL               ; branch if Z set
               S06:00000B0E:  67 00 01 4C
F00:0607                   btst.b d6,0(a0,a2.l)      ; 
               S06:00000B12:  0D 30 A8 00
F00:0608                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000B16:  66 00 01 44
F00:0609                   btst.b d7,1(a0,a2.l)      ; 
               S06:00000B1A:  0F 30 A8 01
F00:0610                   beq BTST_FAIL               ; branch if Z set
               S06:00000B1E:  67 00 01 3C
F00:0611               
F00:0612               
F00:0613                   ; EA = x.W  - BYTE only
F00:0614                   btst.b d5,$0100            
               S06:00000B22:  0B 39 00 00 01 00
F00:0615                   beq BTST_FAIL               ; branch if Z set
               S06:00000B28:  67 00 01 32
F00:0616                   btst.b d6,$0101           ; 
               S06:00000B2C:  0D 39 00 00 01 01
F00:0617                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000B32:  66 00 01 28
F00:0618                   btst.b d7,$0102           ; 
               S06:00000B36:  0F 39 00 00 01 02
F00:0619                   beq BTST_FAIL               ; branch if Z set
               S06:00000B3C:  67 00 01 1E
F00:0620               
F00:0621               
F00:0622                   ; EA = x.L  - BYTE only
F00:0623                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000B40:  20 7C 00 0F 01 00
F00:0624                   move.b #$01,(a0)+         ; populate test data
               S06:00000B46:  10 FC 00 01
F00:0625                   move.b #$FC,(a0)+         ; populate test data
               S06:00000B4A:  10 FC 00 FC
F00:0626                   move.b #$80,(a0)+         ; populate test data
               S06:00000B4E:  10 FC 00 80
F00:0627                   btst.b d5,$000F0100 
               S06:00000B52:  0B 39 00 0F 01 00
F00:0628                   beq BTST_FAIL               ; branch if Z set
               S06:00000B58:  67 00 01 02
F00:0629                   btst.b d6,$000F0101       ; 
               S06:00000B5C:  0D 39 00 0F 01 01
F00:0630                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000B62:  66 00 00 F8
F00:0631                   btst.b d7,$000F0102       ; 
               S06:00000B66:  0F 39 00 0F 01 02
F00:0632                   beq BTST_FAIL               ; branch if Z set
               S06:00000B6C:  67 00 00 EE
F00:0633               
F00:0634               
F00:0635                   ; EA = x(PC)  - BYTE only
F00:0636                   move.l #3,d6              ; populate bit number to test
               S06:00000B70:  2C 3C 00 00 00 03
F00:0637                   move.l #6,d7              ; populate bit number to test
               S06:00000B76:  2E 3C 00 00 00 06
F00:0638                   lea op_BTST(pc),a5
               S06:00000B7C:  4B FA FB C4
F00:0639                   btst.b d5,op_BTST(pc) 
               S06:00000B80:  0B 3A FB C0
F00:0640                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000B84:  66 00 00 D6
F00:0641                   btst.b d6,op_BTST0(pc)     ; 
               S06:00000B88:  0D 3A FD C0
F00:0642                   beq BTST_FAIL               ; branch if Z set
               S06:00000B8C:  67 00 00 CE
F00:0643                   btst.b d7,op_BTST12(pc)    ; 
               S06:00000B90:  0F 3A FE 30
F00:0644                   beq BTST_FAIL               ; branch if Z set
               S06:00000B94:  67 00 00 C6
F00:0645         
F00:0646         
F00:0647                   ; EA = n(PC,R.W)  - BYTE only
F00:0648                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B98:  20 7C 00 00 01 00
F00:0649                   move.l #$00000000,a1      ; point to memory to address
               S06:00000B9E:  22 7C 00 00 00 00
F00:0650                   move.l #$00000001,a2      ; point to memory to address
               S06:00000BA4:  24 7C 00 00 00 01
F00:0651                   move.l #$00000000,d0      ; point to memory to address
               S06:00000BAA:  20 3C 00 00 00 00
F00:0652                   move.l #$00000001,d1      ; point to memory to address
               S06:00000BB0:  22 3C 00 00 00 01
F00:0653                   move.l #1,d6              ; populate bit number to test
               S06:00000BB6:  2C 3C 00 00 00 01
F00:0654                   move.l #7,d7              ; populate bit number to test
               S06:00000BBC:  2E 3C 00 00 00 07
F00:0655           
F00:0656       op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)            
               S06:00000BC2:  0B 3B 00 FE
F00:0657                   beq BTST_FAIL               ; branch if Z set            
               S06:00000BC6:  67 00 00 94
F00:0658                   lea op_BTST21(pc,d1.w),a5
               S06:00000BCA:  4B FB 10 02
F00:0659       op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      ; 
               S06:00000BCE:  0D 3B 10 FE
F00:0660                   beq BTST_FAIL               ; branch if Z set
               S06:00000BD2:  67 00 00 88
F00:0661       op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      ; 
               S06:00000BD6:  0F 3B 10 FE
F00:0662                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000BDA:  66 00 00 80
F00:0663                   ; EA = n(PC,R.L)  - BYTE only
F00:0664       op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)  
               S06:00000BDE:  0B 3B 08 FE
F00:0665                   beq BTST_FAIL               ; branch if Z set
               S06:00000BE2:  67 00 00 78
F00:0666       op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      ; 
               S06:00000BE6:  0D 3B 18 FE
F00:0667                   beq BTST_FAIL               ; branch if Z set
               S06:00000BEA:  67 00 00 70
F00:0668       op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      ; 
               S06:00000BEE:  0F 3B 18 FE
F00:0669                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000BF2:  66 00 00 68
F00:0670                   ; EA = n(PC,A.W)  - BYTE only
F00:0671       op_BTST26   btst.b d5,op_BTST26(pc,a1.w)            
               S06:00000BF6:  0B 3B 90 FE
F00:0672                   beq BTST_FAIL               ; branch if Z set
               S06:00000BFA:  67 00 00 60
F00:0673       op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      ; 
               S06:00000BFE:  0D 3B A0 FE
F00:0674                   beq BTST_FAIL               ; branch if Z set
               S06:00000C02:  67 00 00 58
F00:0675       op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      ; 
               S06:00000C06:  0F 3B A0 FE
F00:0676                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000C0A:  66 00 00 50
F00:0677                   ; EA = n(PC,A.L)  - BYTE only
F00:0678       op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)  
               S06:00000C0E:  0B 3B 98 FE
F00:0679                   beq BTST_FAIL               ; branch if Z set
               S06:00000C12:  67 00 00 48
F00:0680       op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      ; 
               S06:00000C16:  0D 3B A8 FE
F00:0681                   beq BTST_FAIL               ; branch if Z set
               S06:00000C1A:  67 00 00 40
F00:0682       op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      ; 
               S06:00000C1E:  0F 3B A8 FE
F00:0683       op_BTST32:  bne BTST_FAIL               ; branch if Z clear  
               S06:00000C22:  66 00 00 38
F00:0684        
F00:0685                   ; EA = #x  - BYTE only
F00:0686       
F00:0687                   move.l #0,d5              ; populate bit number to test
               S06:00000C26:  2A 3C 00 00 00 00
F00:0688                   move.l #3,d6              ; populate bit number to test
               S06:00000C2C:  2C 3C 00 00 00 03
F00:0689                   move.l #7,d7              ; populate bit number to test
               S06:00000C32:  2E 3C 00 00 00 07
F00:0690                   
F00:0691                   btst.b d5,#$88
               S06:00000C38:  0B 3C 00 88
F00:0692                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000C3C:  66 00 00 1E
F00:0693                   btst.b d6,#$88
               S06:00000C40:  0D 3C 00 88
F00:0694                   beq BTST_FAIL               ; branch if Z set
               S06:00000C44:  67 00 00 16
F00:0695                   btst.b d7,#$88
               S06:00000C48:  0F 3C 00 88
F00:0696                   beq BTST_FAIL               ; branch if Z set
               S06:00000C4C:  67 00 00 0E
F00:0697                   
F00:0698           movea #TESTSTATUS,a0
               S06:00000C50:  30 7C FF 00
F00:0699           move.b #$1,$06(a0)
               S06:00000C54:  11 7C 00 01 00 06
F00:0700           rts
               S06:00000C5A:  4E 75
F00:0701           
F00:0702       BTST_FAIL: 
F00:0703          movea #TESTSTATUS,a0
               S06:00000C5C:  30 7C FF 00
F00:0704          move.b #$2,$06(a0)
               S06:00000C60:  11 7C 00 02 00 06
F00:0705          rts
               S06:00000C66:  4E 75
F00:0706        
F00:0707         
F00:0708       ;-----------------------------------------------------------
F00:0709       ;-----------------------------------------------------------
F00:0710       ; OPCODE : BCHG
F00:0711       ;-----------------------------------------------------------
F00:0712       ;-----------------------------------------------------------
F00:0713       op_BCHG: 
F00:0714       
F00:0715       
F00:0716       ;  Bit Number Static 
F00:0717           
F00:0718                   ; EA = Dn  - LONG only
F00:0719                   move.l #$80000001,d0      ; populate test data
               S06:00000C68:  20 3C 80 00 00 01
F00:0720                   bchg.l #0,d0              
               S06:00000C6E:  08 40 00 00
F00:0721                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C72:  67 00 04 C2
F00:0722                   bchg.l #1,d0              ; 
               S06:00000C76:  08 40 00 01
F00:0723                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C7A:  66 00 04 BA
F00:0724                   bchg.l #31,d0             ; 
               S06:00000C7E:  08 40 00 1F
F00:0725                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C82:  67 00 04 B2
F00:0726                   cmpi.l #$00000002,d0
               S06:00000C86:  0C 80 00 00 00 02
F00:0727                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C8C:  66 00 04 A8
F00:0728       
F00:0729                   
F00:0730                   ; EA = (An)  - BYTE only
F00:0731                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000C90:  20 7C 00 00 01 00
F00:0732                   move.b #$81,(a0)          ; populate test data
               S06:00000C96:  10 BC 00 81
F00:0733                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000C9A:  12 10
F00:0734                   bchg.b #0,(a0)            
               S06:00000C9C:  08 50 00 00
F00:0735                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CA0:  67 00 04 94
F00:0736                   bchg.b #1,(a0)            ; 
               S06:00000CA4:  08 50 00 01
F00:0737                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CA8:  66 00 04 8C
F00:0738                   bchg.b #7,(a0)            ; 
               S06:00000CAC:  08 50 00 07
F00:0739                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CB0:  67 00 04 84
F00:0740                   cmpi.b #$02,(a0)
               S06:00000CB4:  0C 10 00 02
F00:0741                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CB8:  66 00 04 7C
F00:0742                   
F00:0743                   ; EA = (An)+  - BYTE only
F00:0744                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CBC:  20 7C 00 00 01 00
F00:0745                   move.b #$01,(a0)+         ; populate test data
               S06:00000CC2:  10 FC 00 01
F00:0746                   move.b #$FC,(a0)+         ; populate test data
               S06:00000CC6:  10 FC 00 FC
F00:0747                   move.b #$80,(a0)+         ; populate test data
               S06:00000CCA:  10 FC 00 80
F00:0748                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CCE:  20 7C 00 00 01 00
F00:0749                   bchg.b #0,(a0)+            
               S06:00000CD4:  08 58 00 00
F00:0750                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CD8:  67 00 04 5C
F00:0751                   bchg.b #1,(a0)+           ; 
               S06:00000CDC:  08 58 00 01
F00:0752                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CE0:  66 00 04 54
F00:0753                   bchg.b #7,(a0)+           ; 
               S06:00000CE4:  08 58 00 07
F00:0754                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CE8:  67 00 04 4C
F00:0755                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CEC:  20 7C 00 00 01 00
F00:0756                   cmpi.b #$00,(a0)+
               S06:00000CF2:  0C 18 00 00
F00:0757                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CF6:  66 00 04 3E
F00:0758                   cmpi.b #$FE,(a0)+
               S06:00000CFA:  0C 18 00 FE
F00:0759                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CFE:  66 00 04 36
F00:0760                   cmpi.b #$00,(a0)+
               S06:00000D02:  0C 18 00 00
F00:0761                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D06:  66 00 04 2E
F00:0762               
F00:0763                   ; EA = -(An)  - BYTE only
F00:0764                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D0A:  20 7C 00 00 01 00
F00:0765                   move.b #$80,(a0)+         ; populate test data
               S06:00000D10:  10 FC 00 80
F00:0766                   move.b #$FC,(a0)+         ; populate test data
               S06:00000D14:  10 FC 00 FC
F00:0767                   move.b #$01,(a0)+         ; populate test data
               S06:00000D18:  10 FC 00 01
F00:0768                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000D1C:  20 7C 00 00 01 03
F00:0769                   bchg.b #0,-(a0)            
               S06:00000D22:  08 60 00 00
F00:0770                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D26:  67 00 04 0E
F00:0771                   bchg.b #1,-(a0)           ; 
               S06:00000D2A:  08 60 00 01
F00:0772                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D2E:  66 00 04 06
F00:0773                   bchg.b #7,-(a0)           ; 
               S06:00000D32:  08 60 00 07
F00:0774                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D36:  67 00 03 FE
F00:0775                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000D3A:  20 7C 00 00 01 03
F00:0776                   cmpi.b #$00,-(a0)
               S06:00000D40:  0C 20 00 00
F00:0777                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D44:  66 00 03 F0
F00:0778                   cmpi.b #$FE,-(a0)
               S06:00000D48:  0C 20 00 FE
F00:0779                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D4C:  66 00 03 E8
F00:0780                   cmpi.b #$00,-(a0)
               S06:00000D50:  0C 20 00 00
F00:0781                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D54:  66 00 03 E0
F00:0782               
F00:0783               
F00:0784                   ; EA = n(An)  - BYTE only
F00:0785                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D58:  20 7C 00 00 01 00
F00:0786                   move.b #$01,(a0)+         ; populate test data
               S06:00000D5E:  10 FC 00 01
F00:0787                   move.b #$FC,(a0)+         ; populate test data
               S06:00000D62:  10 FC 00 FC
F00:0788                   move.b #$80,(a0)+         ; populate test data
               S06:00000D66:  10 FC 00 80
F00:0789                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D6A:  20 7C 00 00 01 00
F00:0790                   bchg.b #0,0(a0)            
               S06:00000D70:  08 68 00 00 00 00
F00:0791                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D76:  67 00 03 BE
F00:0792                   bchg.b #1,1(a0)           ; 
               S06:00000D7A:  08 68 00 01 00 01
F00:0793                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D80:  66 00 03 B4
F00:0794                   bchg.b #7,2(a0)           ; 
               S06:00000D84:  08 68 00 07 00 02
F00:0795                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D8A:  67 00 03 AA
F00:0796                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D8E:  20 7C 00 00 01 00
F00:0797                   cmpi.b #$00,(a0)+
               S06:00000D94:  0C 18 00 00
F00:0798                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D98:  66 00 03 9C
F00:0799                   cmpi.b #$FE,(a0)+
               S06:00000D9C:  0C 18 00 FE
F00:0800                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DA0:  66 00 03 94
F00:0801                   cmpi.b #$00,(a0)+
               S06:00000DA4:  0C 18 00 00
F00:0802                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DA8:  66 00 03 8C
F00:0803                       
F00:0804                       
F00:0805                   ; EA = n(An,D.W)  - BYTE only
F00:0806                   move.l #$00000100,a0      ; point to memory to address
               S06:00000DAC:  20 7C 00 00 01 00
F00:0807                   move.l #$00000000,a1      ; point to memory to address
               S06:00000DB2:  22 7C 00 00 00 00
F00:0808                   move.l #$00000001,a2      ; point to memory to address
               S06:00000DB8:  24 7C 00 00 00 01
F00:0809                   move.l #$00000000,d0      ; point to memory to address
               S06:00000DBE:  20 3C 00 00 00 00
F00:0810                   move.l #$00000001,d1      ; point to memory to address
               S06:00000DC4:  22 3C 00 00 00 01
F00:0811                   bchg.b #0,0(a0,d0.w)            
               S06:00000DCA:  08 70 00 00 00 00
F00:0812                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DD0:  66 00 03 64
F00:0813                   bchg.b #1,0(a0,d1.w)      ; 
               S06:00000DD4:  08 70 00 01 10 00
F00:0814                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DDA:  67 00 03 5A
F00:0815                   bchg.b #7,1(a0,d1.w)      ; 
               S06:00000DDE:  08 70 00 07 10 01
F00:0816                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DE4:  66 00 03 50
F00:0817                   ; EA = n(An,D.L)  - BYTE only
F00:0818                   bchg.b #0,0(a0,d0.l)  
               S06:00000DE8:  08 70 00 00 08 00
F00:0819                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DEE:  67 00 03 46
F00:0820                   bchg.b #1,0(a0,d1.l)      ; 
               S06:00000DF2:  08 70 00 01 18 00
F00:0821                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DF8:  66 00 03 3C
F00:0822                   bchg.b #7,1(a0,d1.l)      ; 
               S06:00000DFC:  08 70 00 07 18 01
F00:0823                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E02:  67 00 03 32
F00:0824                   ; EA = n(An,A.W)  - BYTE only
F00:0825                   bchg.b #0,0(a0,a1.w)            
               S06:00000E06:  08 70 00 00 90 00
F00:0826                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E0C:  66 00 03 28
F00:0827                   bchg.b #1,0(a0,a2.w)      ; 
               S06:00000E10:  08 70 00 01 A0 00
F00:0828                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E16:  67 00 03 1E
F00:0829                   bchg.b #7,1(a0,a2.w)      ; 
               S06:00000E1A:  08 70 00 07 A0 01
F00:0830                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E20:  66 00 03 14
F00:0831                   ; EA = n(An,A.L)  - BYTE only
F00:0832                   bchg.b #0,0(a0,a1.l)  
               S06:00000E24:  08 70 00 00 98 00
F00:0833                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E2A:  67 00 03 0A
F00:0834                   bchg.b #1,0(a0,a2.l)      ; 
               S06:00000E2E:  08 70 00 01 A8 00
F00:0835                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E34:  66 00 03 00
F00:0836                   bchg.b #7,1(a0,a2.l)      ; 
               S06:00000E38:  08 70 00 07 A8 01
F00:0837                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E3E:  67 00 02 F6
F00:0838                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000E42:  20 7C 00 00 01 00
F00:0839                   cmpi.b #$00,(a0)+
               S06:00000E48:  0C 18 00 00
F00:0840                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E4C:  66 00 02 E8
F00:0841                   cmpi.b #$FE,(a0)+
               S06:00000E50:  0C 18 00 FE
F00:0842                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E54:  66 00 02 E0
F00:0843                   cmpi.b #$00,(a0)+
               S06:00000E58:  0C 18 00 00
F00:0844                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E5C:  66 00 02 D8
F00:0845           
F00:0846               
F00:0847                   ; EA = x.W  - BYTE only
F00:0848                   bchg.b #0,$0100            
               S06:00000E60:  08 79 00 00 00 00 01 00
F00:0849                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E68:  66 00 02 CC
F00:0850                   bchg.b #1,$0101           ; 
               S06:00000E6C:  08 79 00 01 00 00 01 01
F00:0851                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E74:  67 00 02 C0
F00:0852                   bchg.b #7,$0102           ; 
               S06:00000E78:  08 79 00 07 00 00 01 02
F00:0853                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E80:  66 00 02 B4
F00:0854                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000E84:  20 7C 00 00 01 00
F00:0855                   cmpi.b #$01,(a0)+
               S06:00000E8A:  0C 18 00 01
F00:0856                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E8E:  66 00 02 A6
F00:0857                   cmpi.b #$FC,(a0)+
               S06:00000E92:  0C 18 00 FC
F00:0858                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E96:  66 00 02 9E
F00:0859                   cmpi.b #$80,(a0)+
               S06:00000E9A:  0C 18 00 80
F00:0860                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E9E:  66 00 02 96
F00:0861                   
F00:0862                   ; EA = x.L  - BYTE only
F00:0863                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000EA2:  20 7C 00 0F 01 00
F00:0864                   move.b #$01,(a0)+         ; populate test data
               S06:00000EA8:  10 FC 00 01
F00:0865                   move.b #$FC,(a0)+         ; populate test data
               S06:00000EAC:  10 FC 00 FC
F00:0866                   move.b #$80,(a0)+         ; populate test data
               S06:00000EB0:  10 FC 00 80
F00:0867                   bchg.b #0,$000F0100 
               S06:00000EB4:  08 79 00 00 00 0F 01 00
F00:0868                   beq BCHG_FAIL               ; branch if Z set
               S06:00000EBC:  67 00 02 78
F00:0869                   bchg.b #1,$000F0101       ; 
               S06:00000EC0:  08 79 00 01 00 0F 01 01
F00:0870                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000EC8:  66 00 02 6C
F00:0871                   bchg.b #7,$000F0102       ; 
               S06:00000ECC:  08 79 00 07 00 0F 01 02
F00:0872                   beq BCHG_FAIL               ; branch if Z set
               S06:00000ED4:  67 00 02 60
F00:0873                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000ED8:  20 7C 00 00 01 00
F00:0874                   cmpi.b #$01,(a0)+
               S06:00000EDE:  0C 18 00 01
F00:0875                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000EE2:  66 00 02 52
F00:0876                   cmpi.b #$FC,(a0)+
               S06:00000EE6:  0C 18 00 FC
F00:0877                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000EEA:  66 00 02 4A
F00:0878                   cmpi.b #$80,(a0)+
               S06:00000EEE:  0C 18 00 80
F00:0879                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000EF2:  66 00 02 42
F00:0880                   
F00:0881       
F00:0882       ; Bit Number Dynamic
F00:0883           
F00:0884                   ; EA = Dn  - LONG only
F00:0885                   move.l #$80000001,d0      ; populate test data
               S06:00000EF6:  20 3C 80 00 00 01
F00:0886                   move.l #0,d5              ; populate bit number to test
               S06:00000EFC:  2A 3C 00 00 00 00
F00:0887                   move.l #1,d6              ; populate bit number to test
               S06:00000F02:  2C 3C 00 00 00 01
F00:0888                   move.l #31,d7              ; populate bit number to test
               S06:00000F08:  2E 3C 00 00 00 1F
F00:0889                   
F00:0890                   bchg.l d5,d0              
               S06:00000F0E:  0B 40
F00:0891                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F10:  67 00 02 24
F00:0892                   bchg.l d6,d0              ; 
               S06:00000F14:  0D 40
F00:0893                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F16:  66 00 02 1E
F00:0894                   bchg.l d7,d0             ; 
               S06:00000F1A:  0F 40
F00:0895                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F1C:  67 00 02 18
F00:0896                   cmpi.l #$00000002,d0
               S06:00000F20:  0C 80 00 00 00 02
F00:0897                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F26:  66 00 02 0E
F00:0898       
F00:0899                   
F00:0900                   ; EA = (An)  - BYTE only
F00:0901                   move.l #0,d5              ; populate bit number to test
               S06:00000F2A:  2A 3C 00 00 00 00
F00:0902                   move.l #1,d6              ; populate bit number to test
               S06:00000F30:  2C 3C 00 00 00 01
F00:0903                   move.l #7,d7              ; populate bit number to test           
               S06:00000F36:  2E 3C 00 00 00 07
F00:0904                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000F3C:  20 7C 00 00 01 00
F00:0905                   move.b #$81,(a0)          ; populate test data
               S06:00000F42:  10 BC 00 81
F00:0906                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000F46:  12 10
F00:0907                   bchg.b d5,(a0)            
               S06:00000F48:  0B 50
F00:0908                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F4A:  67 00 01 EA
F00:0909                   bchg.b d6,(a0)            ; 
               S06:00000F4E:  0D 50
F00:0910                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F50:  66 00 01 E4
F00:0911                   bchg.b d7,(a0)            ; 
               S06:00000F54:  0F 50
F00:0912                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F56:  67 00 01 DE
F00:0913                   cmpi.b #$02,(a0)
               S06:00000F5A:  0C 10 00 02
F00:0914                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F5E:  66 00 01 D6
F00:0915                   
F00:0916           
F00:0917                   ; EA = (An)+  - BYTE only
F00:0918                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F62:  20 7C 00 00 01 00
F00:0919                   move.b #$01,(a0)+         ; populate test data
               S06:00000F68:  10 FC 00 01
F00:0920                   move.b #$FC,(a0)+         ; populate test data
               S06:00000F6C:  10 FC 00 FC
F00:0921                   move.b #$80,(a0)+         ; populate test data
               S06:00000F70:  10 FC 00 80
F00:0922                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F74:  20 7C 00 00 01 00
F00:0923                   bchg.b d5,(a0)+            
               S06:00000F7A:  0B 58
F00:0924                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F7C:  67 00 01 B8
F00:0925                   bchg.b d6,(a0)+           ; 
               S06:00000F80:  0D 58
F00:0926                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F82:  66 00 01 B2
F00:0927                   bchg.b d7,(a0)+           ; 
               S06:00000F86:  0F 58
F00:0928                   beq BCHG_FAIL               ; branch if Z set
               S06:00000F88:  67 00 01 AC
F00:0929                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F8C:  20 7C 00 00 01 00
F00:0930                   cmpi.b #$00,(a0)+
               S06:00000F92:  0C 18 00 00
F00:0931                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F96:  66 00 01 9E
F00:0932                   cmpi.b #$FE,(a0)+
               S06:00000F9A:  0C 18 00 FE
F00:0933                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000F9E:  66 00 01 96
F00:0934                   cmpi.b #$00,(a0)+
               S06:00000FA2:  0C 18 00 00
F00:0935                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000FA6:  66 00 01 8E
F00:0936                       
F00:0937                   ; EA = -(An)  - BYTE only
F00:0938                   move.l #$00000100,a0      ; point to memory to address
               S06:00000FAA:  20 7C 00 00 01 00
F00:0939                   move.b #$80,(a0)+         ; populate test data
               S06:00000FB0:  10 FC 00 80
F00:0940                   move.b #$FC,(a0)+         ; populate test data
               S06:00000FB4:  10 FC 00 FC
F00:0941                   move.b #$01,(a0)+         ; populate test data
               S06:00000FB8:  10 FC 00 01
F00:0942                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000FBC:  20 7C 00 00 01 03
F00:0943                   bchg.b d5,-(a0)            
               S06:00000FC2:  0B 60
F00:0944                   beq BCHG_FAIL               ; branch if Z set
               S06:00000FC4:  67 00 01 70
F00:0945                   bchg.b d6,-(a0)           ; 
               S06:00000FC8:  0D 60
F00:0946                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000FCA:  66 00 01 6A
F00:0947                   bchg.b d7,-(a0)           ; 
               S06:00000FCE:  0F 60
F00:0948                   beq BCHG_FAIL               ; branch if Z set
               S06:00000FD0:  67 00 01 64
F00:0949                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000FD4:  20 7C 00 00 01 03
F00:0950                   cmpi.b #$00,-(a0)
               S06:00000FDA:  0C 20 00 00
F00:0951                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000FDE:  66 00 01 56
F00:0952                   cmpi.b #$FE,-(a0)
               S06:00000FE2:  0C 20 00 FE
F00:0953                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000FE6:  66 00 01 4E
F00:0954                   cmpi.b #$00,-(a0)
               S06:00000FEA:  0C 20 00 00
F00:0955                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000FEE:  66 00 01 46
F00:0956                       
F00:0957                   ; EA = n(An)  - BYTE only
F00:0958                   move.l #$00000100,a0      ; point to memory to address
               S06:00000FF2:  20 7C 00 00 01 00
F00:0959                   move.b #$01,(a0)+         ; populate test data
               S06:00000FF8:  10 FC 00 01
F00:0960                   move.b #$FC,(a0)+         ; populate test data
               S06:00000FFC:  10 FC 00 FC
F00:0961                   move.b #$80,(a0)+         ; populate test data
               S06:00001000:  10 FC 00 80
F00:0962                   move.l #$00000100,a0      ; point to memory to address
               S06:00001004:  20 7C 00 00 01 00
F00:0963                   bchg.b d5,0(a0)            
               S06:0000100A:  0B 68 00 00
F00:0964                   beq BCHG_FAIL               ; branch if Z set
               S06:0000100E:  67 00 01 26
F00:0965                   bchg.b d6,1(a0)           ; 
               S06:00001012:  0D 68 00 01
F00:0966                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001016:  66 00 01 1E
F00:0967                   bchg.b d7,2(a0)           ; 
               S06:0000101A:  0F 68 00 02
F00:0968                   beq BCHG_FAIL               ; branch if Z set
               S06:0000101E:  67 00 01 16
F00:0969                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001022:  20 7C 00 00 01 00
F00:0970                   cmpi.b #$00,(a0)+
               S06:00001028:  0C 18 00 00
F00:0971                   bne BCHG_FAIL               ; branch if Z clear  
               S06:0000102C:  66 00 01 08
F00:0972                   cmpi.b #$FE,(a0)+
               S06:00001030:  0C 18 00 FE
F00:0973                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001034:  66 00 01 00
F00:0974                   cmpi.b #$00,(a0)+
               S06:00001038:  0C 18 00 00
F00:0975                   bne BCHG_FAIL               ; branch if Z clear  
               S06:0000103C:  66 00 00 F8
F00:0976                       
F00:0977                   ; EA = n(An,R.W)  - BYTE only
F00:0978                   move.l #$00000100,a0      ; point to memory to address
               S06:00001040:  20 7C 00 00 01 00
F00:0979                   move.l #$00000000,a1      ; point to memory to address
               S06:00001046:  22 7C 00 00 00 00
F00:0980                   move.l #$00000001,a2      ; point to memory to address
               S06:0000104C:  24 7C 00 00 00 01
F00:0981                   move.l #$00000000,d0      ; point to memory to address
               S06:00001052:  20 3C 00 00 00 00
F00:0982                   move.l #$00000001,d1      ; point to memory to address
               S06:00001058:  22 3C 00 00 00 01
F00:0983                   bchg.b d5,0(a0,d0.w)            
               S06:0000105E:  0B 70 00 00
F00:0984                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001062:  66 00 00 D2
F00:0985                   bchg.b d6,0(a0,d1.w)      ; 
               S06:00001066:  0D 70 10 00
F00:0986                   beq BCHG_FAIL               ; branch if Z set
               S06:0000106A:  67 00 00 CA
F00:0987                   bchg.b d7,1(a0,d1.w)      ; 
               S06:0000106E:  0F 70 10 01
F00:0988                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001072:  66 00 00 C2
F00:0989                   ; EA = n(An,R.L)  - BYTE only
F00:0990                   bchg.b d5,0(a0,d0.l)  
               S06:00001076:  0B 70 08 00
F00:0991                   beq BCHG_FAIL               ; branch if Z set
               S06:0000107A:  67 00 00 BA
F00:0992                   bchg.b d6,0(a0,d1.l)      ; 
               S06:0000107E:  0D 70 18 00
F00:0993                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001082:  66 00 00 B2
F00:0994                   bchg.b d7,1(a0,d1.l)      ; 
               S06:00001086:  0F 70 18 01
F00:0995                   beq BCHG_FAIL               ; branch if Z set
               S06:0000108A:  67 00 00 AA
F00:0996                   ; EA = n(An,A.W)  - BYTE only
F00:0997                   bchg.b d5,0(a0,a1.w)            
               S06:0000108E:  0B 70 90 00
F00:0998                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001092:  66 00 00 A2
F00:0999                   bchg.b d6,0(a0,a2.w)      ; 
               S06:00001096:  0D 70 A0 00
F00:1000                   beq BCHG_FAIL               ; branch if Z set
               S06:0000109A:  67 00 00 9A
F00:1001                   bchg.b d7,1(a0,a2.w)      ; 
               S06:0000109E:  0F 70 A0 01
F00:1002                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010A2:  66 00 00 92
F00:1003                   ; EA = n(An,A.L)  - BYTE only
F00:1004                   bchg.b d5,0(a0,a1.l)  
               S06:000010A6:  0B 70 98 00
F00:1005                   beq BCHG_FAIL               ; branch if Z set
               S06:000010AA:  67 00 00 8A
F00:1006                   bchg.b d6,0(a0,a2.l)      ; 
               S06:000010AE:  0D 70 A8 00
F00:1007                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010B2:  66 00 00 82
F00:1008                   bchg.b d7,1(a0,a2.l)      ; 
               S06:000010B6:  0F 70 A8 01
F00:1009                   beq BCHG_FAIL               ; branch if Z set
               S06:000010BA:  67 00 00 7A
F00:1010                   cmpi.b #$00,(a0)+
               S06:000010BE:  0C 18 00 00
F00:1011                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010C2:  66 00 00 72
F00:1012                   
F00:1013                   ; EA = x.W  - BYTE only
F00:1014                   bchg.b d5,$0100            
               S06:000010C6:  0B 79 00 00 01 00
F00:1015                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010CC:  66 00 00 68
F00:1016                   bchg.b d6,$0101           ; 
               S06:000010D0:  0D 79 00 00 01 01
F00:1017                   beq BCHG_FAIL               ; branch if Z set
               S06:000010D6:  67 00 00 5E
F00:1018                   bchg.b d7,$0102           ; 
               S06:000010DA:  0F 79 00 00 01 02
F00:1019                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010E0:  66 00 00 54
F00:1020                   cmpi.b #$FC,(a0)+
               S06:000010E4:  0C 18 00 FC
F00:1021                   bne BCHG_FAIL               ; branch if Z clear  
               S06:000010E8:  66 00 00 4C
F00:1022                           
F00:1023                   ; EA = x.L  - BYTE only
F00:1024                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000010EC:  20 7C 00 0F 01 00
F00:1025                   move.b #$01,(a0)+         ; populate test data
               S06:000010F2:  10 FC 00 01
F00:1026                   move.b #$FC,(a0)+         ; populate test data
               S06:000010F6:  10 FC 00 FC
F00:1027                   move.b #$80,(a0)+         ; populate test data
               S06:000010FA:  10 FC 00 80
F00:1028                   bchg.b d5,$000F0100 
               S06:000010FE:  0B 79 00 0F 01 00
F00:1029                   beq BCHG_FAIL               ; branch if Z set
               S06:00001104:  67 00 00 30
F00:1030                   bchg.b d6,$000F0101       ; 
               S06:00001108:  0D 79 00 0F 01 01
F00:1031                   bne BCHG_FAIL               ; branch if Z clear  
               S06:0000110E:  66 00 00 26
F00:1032                   bchg.b d7,$000F0102       ; 
               S06:00001112:  0F 79 00 0F 01 02
F00:1033                   beq BCHG_FAIL               ; branch if Z set
               S06:00001118:  67 00 00 1C
F00:1034                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:0000111C:  20 7C 00 0F 01 01
F00:1035                   cmpi.b #$FE,(a0)
               S06:00001122:  0C 10 00 FE
F00:1036                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00001126:  66 00 00 0E
F00:1037                           
F00:1038       
F00:1039           movea #TESTSTATUS,a0
               S06:0000112A:  30 7C FF 00
F00:1040           move.b #$1,$07(a0)
               S06:0000112E:  11 7C 00 01 00 07
F00:1041           rts
               S06:00001134:  4E 75
F00:1042           
F00:1043       BCHG_FAIL:
F00:1044           movea #TESTSTATUS,a0
               S06:00001136:  30 7C FF 00
F00:1045           move.b #$2,$07(a0)
               S06:0000113A:  11 7C 00 02 00 07
F00:1046           rts
               S06:00001140:  4E 75
F00:1047       
F00:1048         
F00:1049       ;-----------------------------------------------------------
F00:1050       ;-----------------------------------------------------------
F00:1051       ; OPCODE : BCLR
F00:1052       ;-----------------------------------------------------------
F00:1053       ;-----------------------------------------------------------
F00:1054       op_BCLR: 
F00:1055       
F00:1056       
F00:1057       ;  Bit Number Static 
F00:1058           
F00:1059                   ; EA = Dn  - LONG only
F00:1060                   move.l #$FF0000FF,d0      ; populate test data
               S06:00001142:  20 3C FF 00 00 FF
F00:1061                   bclr.l #0,d0              
               S06:00001148:  08 80 00 00
F00:1062                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000114C:  67 00 04 94
F00:1063                   bclr.l #1,d0              ; 
               S06:00001150:  08 80 00 01
F00:1064                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001154:  67 00 04 8C
F00:1065                   bclr.l #15,d0             ; 
               S06:00001158:  08 80 00 0F
F00:1066                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000115C:  66 00 04 84
F00:1067                   bclr.l #31,d0             ; 
               S06:00001160:  08 80 00 1F
F00:1068                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001164:  67 00 04 7C
F00:1069                   cmpi.l #$7F0000FC,d0
               S06:00001168:  0C 80 7F 00 00 FC
F00:1070                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000116E:  66 00 04 72
F00:1071       
F00:1072                   
F00:1073                   ; EA = (An)  - BYTE only
F00:1074                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001172:  20 7C 00 00 01 00
F00:1075                   move.b #$0F,(a0)          ; populate test data
               S06:00001178:  10 BC 00 0F
F00:1076                   bclr.b #0,(a0)            
               S06:0000117C:  08 90 00 00
F00:1077                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001180:  67 00 04 60
F00:1078                   bclr.b #7,(a0)            ; 
               S06:00001184:  08 90 00 07
F00:1079                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001188:  66 00 04 58
F00:1080                   cmpi.b #$0E,(a0)
               S06:0000118C:  0C 10 00 0E
F00:1081                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001190:  66 00 04 50
F00:1082                   
F00:1083                   ; EA = (An)+  - BYTE only
F00:1084                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001194:  20 7C 00 00 01 00
F00:1085                   move.b #$01,(a0)+         ; populate test data
               S06:0000119A:  10 FC 00 01
F00:1086                   move.b #$00,(a0)+         ; populate test data
               S06:0000119E:  10 FC 00 00
F00:1087                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000011A2:  20 7C 00 00 01 00
F00:1088                   bclr.b #0,(a0)+            
               S06:000011A8:  08 98 00 00
F00:1089                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011AC:  67 00 04 34
F00:1090                   bclr.b #1,(a0)+           ; 
               S06:000011B0:  08 98 00 01
F00:1091                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011B4:  66 00 04 2C
F00:1092                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000011B8:  20 7C 00 00 01 00
F00:1093                   cmpi.b #$00,(a0)+
               S06:000011BE:  0C 18 00 00
F00:1094                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011C2:  66 00 04 1E
F00:1095                   cmpi.b #$00,(a0)+
               S06:000011C6:  0C 18 00 00
F00:1096                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011CA:  66 00 04 16
F00:1097        
F00:1098               
F00:1099                   ; EA = -(An)  - BYTE only
F00:1100                   move.l #$00000100,a0      ; point to memory to address
               S06:000011CE:  20 7C 00 00 01 00
F00:1101                   move.b #$01,(a0)+         ; populate test data
               S06:000011D4:  10 FC 00 01
F00:1102                   move.b #$80,(a0)+         ; populate test data
               S06:000011D8:  10 FC 00 80
F00:1103                   bclr.b #7,-(a0)            
               S06:000011DC:  08 A0 00 07
F00:1104                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011E0:  67 00 04 00
F00:1105                   bclr.b #0,-(a0)           ; 
               S06:000011E4:  08 A0 00 00
F00:1106                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011E8:  67 00 03 F8
F00:1107                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:000011EC:  20 7C 00 00 01 02
F00:1108                   cmpi.b #$00,-(a0)
               S06:000011F2:  0C 20 00 00
F00:1109                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011F6:  66 00 03 EA
F00:1110                   cmpi.b #$00,-(a0)
               S06:000011FA:  0C 20 00 00
F00:1111                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011FE:  66 00 03 E2
F00:1112       
F00:1113               
F00:1114                   ; EA = n(An)  - BYTE only
F00:1115                   move.l #$00000100,a0      ; point to memory to address
               S06:00001202:  20 7C 00 00 01 00
F00:1116                   move.b #$FF,(a0)+         ; populate test data
               S06:00001208:  10 FC 00 FF
F00:1117                   move.b #$FF,(a0)+         ; populate test data
               S06:0000120C:  10 FC 00 FF
F00:1118                   move.l #$00000100,a0      ; point to memory to address
               S06:00001210:  20 7C 00 00 01 00
F00:1119                   bclr.b #0,0(a0)            
               S06:00001216:  08 A8 00 00 00 00
F00:1120                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000121C:  67 00 03 C4
F00:1121                   bclr.b #4,1(a0)           ; 
               S06:00001220:  08 A8 00 04 00 01
F00:1122                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001226:  67 00 03 BA
F00:1123                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000122A:  20 7C 00 00 01 00
F00:1124                   cmpi.b #$FE,(a0)+
               S06:00001230:  0C 18 00 FE
F00:1125                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001234:  66 00 03 AC
F00:1126                   cmpi.b #$EF,(a0)+
               S06:00001238:  0C 18 00 EF
F00:1127                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000123C:  66 00 03 A4
F00:1128       
F00:1129                       
F00:1130                   ; EA = n(An,D.W)  - BYTE only
F00:1131                   move.l #$00000100,a0      ; point to memory to address
               S06:00001240:  20 7C 00 00 01 00
F00:1132                   move.l #$00000000,a1      ; point to memory to address
               S06:00001246:  22 7C 00 00 00 00
F00:1133                   move.l #$00000001,a2      ; point to memory to address
               S06:0000124C:  24 7C 00 00 00 01
F00:1134                   move.l #$00000000,d0      ; point to memory to address
               S06:00001252:  20 3C 00 00 00 00
F00:1135                   move.l #$00000001,d1      ; point to memory to address
               S06:00001258:  22 3C 00 00 00 01
F00:1136                   move.b #$FF,(a0)+         ; populate test data
               S06:0000125E:  10 FC 00 FF
F00:1137                   move.b #$FF,(a0)+         ; populate test data
               S06:00001262:  10 FC 00 FF
F00:1138                   move.l #$00000100,a0      ; point to memory to address
               S06:00001266:  20 7C 00 00 01 00
F00:1139                   bclr.b #0,0(a0,d0.w)            
               S06:0000126C:  08 B0 00 00 00 00
F00:1140                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001272:  67 00 03 6E
F00:1141                   bclr.b #1,0(a0,d1.w)      ; 
               S06:00001276:  08 B0 00 01 10 00
F00:1142                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000127C:  67 00 03 64
F00:1143                   bclr.b #2,1(a0,d1.w)      ; 
               S06:00001280:  08 B0 00 02 10 01
F00:1144                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001286:  66 00 03 5A
F00:1145                   ; EA = n(An,D.L)  - BYTE only
F00:1146                   bclr.b #3,0(a0,d0.l)  
               S06:0000128A:  08 B0 00 03 08 00
F00:1147                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001290:  67 00 03 50
F00:1148                   bclr.b #4,0(a0,d1.l)      ; 
               S06:00001294:  08 B0 00 04 18 00
F00:1149                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000129A:  67 00 03 46
F00:1150                   bclr.b #5,1(a0,d1.l)      ; 
               S06:0000129E:  08 B0 00 05 18 01
F00:1151                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012A4:  66 00 03 3C
F00:1152                   ; EA = n(An,A.W)  - BYTE only
F00:1153                   bclr.b #6,0(a0,a1.w)            
               S06:000012A8:  08 B0 00 06 90 00
F00:1154                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012AE:  67 00 03 32
F00:1155                   bclr.b #1,0(a0,a2.w)      ; 
               S06:000012B2:  08 B0 00 01 A0 00
F00:1156                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012B8:  66 00 03 28
F00:1157                   bclr.b #7,1(a0,a2.w)      ; 
               S06:000012BC:  08 B0 00 07 A0 01
F00:1158                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012C2:  67 00 03 1E
F00:1159                   ; EA = n(An,A.L)  - BYTE only
F00:1160                   bclr.b #0,0(a0,a1.l)  
               S06:000012C6:  08 B0 00 00 98 00
F00:1161                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012CC:  66 00 03 14
F00:1162                   bclr.b #0,0(a0,a2.l)      ; 
               S06:000012D0:  08 B0 00 00 A8 00
F00:1163                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012D6:  67 00 03 0A
F00:1164                   bclr.b #1,1(a0,a2.l)      ; 
               S06:000012DA:  08 B0 00 01 A8 01
F00:1165                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012E0:  66 00 03 00
F00:1166                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000012E4:  20 7C 00 00 01 00
F00:1167                   cmpi.b #$B6,(a0)+
               S06:000012EA:  0C 18 00 B6
F00:1168                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012EE:  66 00 02 F2
F00:1169                   cmpi.b #$EC,(a0)+
               S06:000012F2:  0C 18 00 EC
F00:1170                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012F6:  66 00 02 EA
F00:1171                   cmpi.b #$59,(a0)+
               S06:000012FA:  0C 18 00 59
F00:1172                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012FE:  67 00 02 E2
F00:1173           
F00:1174               
F00:1175                   ; EA = x.W  - BYTE only
F00:1176                   move.l #$00000100,a0      ; point to memory to address
               S06:00001302:  20 7C 00 00 01 00
F00:1177                   move.b #$FF,(a0)+         ; populate test data
               S06:00001308:  10 FC 00 FF
F00:1178                   bclr.b #0,$0100            
               S06:0000130C:  08 B9 00 00 00 00 01 00
F00:1179                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001314:  67 00 02 CC
F00:1180                   bclr.b #1,$0100           ; 
               S06:00001318:  08 B9 00 01 00 00 01 00
F00:1181                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001320:  67 00 02 C0
F00:1182                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001324:  20 7C 00 00 01 00
F00:1183                   cmpi.b #$FC,(a0)+
               S06:0000132A:  0C 18 00 FC
F00:1184                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000132E:  66 00 02 B2
F00:1185       
F00:1186                   
F00:1187                   ; EA = x.L  - BYTE only
F00:1188                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001332:  20 7C 00 0F 01 00
F00:1189                   move.b #$FF,(a0)          ; populate test data
               S06:00001338:  10 BC 00 FF
F00:1190                   bclr.b #0,$000F0100 
               S06:0000133C:  08 B9 00 00 00 0F 01 00
F00:1191                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001344:  67 00 02 9C
F00:1192                   bclr.b #1,$000F0100       ; 
               S06:00001348:  08 B9 00 01 00 0F 01 00
F00:1193                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001350:  67 00 02 90
F00:1194                   bclr.b #2,$000F0100       ; 
               S06:00001354:  08 B9 00 02 00 0F 01 00
F00:1195                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000135C:  67 00 02 84
F00:1196                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001360:  20 7C 00 0F 01 00
F00:1197                   cmpi.b #$F8,(a0)+
               S06:00001366:  0C 18 00 F8
F00:1198                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000136A:  66 00 02 76
F00:1199       
F00:1200       
F00:1201       ; Bit Number Dynamic
F00:1202           
F00:1203                   ; EA = Dn  - LONG only
F00:1204                   move.l #$FF00FF00,d0      ; populate test data
               S06:0000136E:  20 3C FF 00 FF 00
F00:1205                   move.l #0,d5              ; populate bit number to test
               S06:00001374:  2A 3C 00 00 00 00
F00:1206                   move.l #1,d6              ; populate bit number to test
               S06:0000137A:  2C 3C 00 00 00 01
F00:1207                   move.l #31,d7              ; populate bit number to test
               S06:00001380:  2E 3C 00 00 00 1F
F00:1208                   
F00:1209                   bclr.l d5,d0              
               S06:00001386:  0B 80
F00:1210                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001388:  66 00 02 58
F00:1211                   bclr.l d6,d0              ; 
               S06:0000138C:  0D 80
F00:1212                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000138E:  66 00 02 52
F00:1213                   bclr.l d7,d0             ; 
               S06:00001392:  0F 80
F00:1214                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001394:  67 00 02 4C
F00:1215                   cmpi.l #$7F00FF00,d0
               S06:00001398:  0C 80 7F 00 FF 00
F00:1216                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000139E:  66 00 02 42
F00:1217       
F00:1218                   
F00:1219                   ; EA = (An)  - BYTE only
F00:1220                   move.l #0,d5              ; populate bit number to test
               S06:000013A2:  2A 3C 00 00 00 00
F00:1221                   move.l #1,d6              ; populate bit number to test
               S06:000013A8:  2C 3C 00 00 00 01
F00:1222                   move.l #7,d7              ; populate bit number to test           
               S06:000013AE:  2E 3C 00 00 00 07
F00:1223                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:000013B4:  20 7C 00 00 01 00
F00:1224                   move.b #$81,(a0)          ; populate test data
               S06:000013BA:  10 BC 00 81
F00:1225                   bclr.b d5,(a0)            
               S06:000013BE:  0B 90
F00:1226                   beq BCLR_FAIL;               ; branch if Z set
               S06:000013C0:  67 00 02 20
F00:1227                   bclr.b d6,(a0)            ; 
               S06:000013C4:  0D 90
F00:1228                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000013C6:  66 00 02 1A
F00:1229                   bclr.b d7,(a0)            ; 
               S06:000013CA:  0F 90
F00:1230                   beq BCLR_FAIL;               ; branch if Z set
               S06:000013CC:  67 00 02 14
F00:1231                   cmpi.b #$00,(a0)
               S06:000013D0:  0C 10 00 00
F00:1232                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000013D4:  66 00 02 0C
F00:1233                   
F00:1234           
F00:1235                   ; EA = (An)+  - BYTE only
F00:1236                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000013D8:  20 7C 00 00 01 00
F00:1237                   move.b #$01,(a0)+         ; populate test data
               S06:000013DE:  10 FC 00 01
F00:1238                   move.b #$FC,(a0)+         ; populate test data
               S06:000013E2:  10 FC 00 FC
F00:1239                   move.b #$80,(a0)+         ; populate test data
               S06:000013E6:  10 FC 00 80
F00:1240                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000013EA:  20 7C 00 00 01 00
F00:1241                   bclr.b d5,(a0)+            
               S06:000013F0:  0B 98
F00:1242                   beq BCLR_FAIL;               ; branch if Z set
               S06:000013F2:  67 00 01 EE
F00:1243                   bclr.b d6,(a0)+           ; 
               S06:000013F6:  0D 98
F00:1244                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000013F8:  66 00 01 E8
F00:1245                   bclr.b d7,(a0)+           ; 
               S06:000013FC:  0F 98
F00:1246                   beq BCLR_FAIL;               ; branch if Z set
               S06:000013FE:  67 00 01 E2
F00:1247                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001402:  20 7C 00 00 01 00
F00:1248                   cmpi.b #$00,(a0)+
               S06:00001408:  0C 18 00 00
F00:1249                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000140C:  66 00 01 D4
F00:1250                   cmpi.b #$FC,(a0)+
               S06:00001410:  0C 18 00 FC
F00:1251                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001414:  66 00 01 CC
F00:1252                   cmpi.b #$00,(a0)+
               S06:00001418:  0C 18 00 00
F00:1253                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000141C:  66 00 01 C4
F00:1254                       
F00:1255                   ; EA = -(An)  - BYTE only
F00:1256                   move.l #$00000100,a0      ; point to memory to address
               S06:00001420:  20 7C 00 00 01 00
F00:1257                   move.b #$80,(a0)+         ; populate test data
               S06:00001426:  10 FC 00 80
F00:1258                   move.b #$FC,(a0)+         ; populate test data
               S06:0000142A:  10 FC 00 FC
F00:1259                   move.b #$01,(a0)+         ; populate test data
               S06:0000142E:  10 FC 00 01
F00:1260                   move.l #$00000103,a0      ; point to memory to address 
               S06:00001432:  20 7C 00 00 01 03
F00:1261                   bclr.b d5,-(a0)            
               S06:00001438:  0B A0
F00:1262                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000143A:  67 00 01 A6
F00:1263                   bclr.b d6,-(a0)           ; 
               S06:0000143E:  0D A0
F00:1264                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001440:  66 00 01 A0
F00:1265                   bclr.b d7,-(a0)           ; 
               S06:00001444:  0F A0
F00:1266                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001446:  67 00 01 9A
F00:1267                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:0000144A:  20 7C 00 00 01 03
F00:1268                   cmpi.b #$00,-(a0)
               S06:00001450:  0C 20 00 00
F00:1269                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001454:  66 00 01 8C
F00:1270                   cmpi.b #$FC,-(a0)
               S06:00001458:  0C 20 00 FC
F00:1271                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000145C:  66 00 01 84
F00:1272                   cmpi.b #$00,-(a0)
               S06:00001460:  0C 20 00 00
F00:1273                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001464:  66 00 01 7C
F00:1274                       
F00:1275                   ; EA = n(An)  - BYTE only
F00:1276                   move.l #$00000100,a0      ; point to memory to address
               S06:00001468:  20 7C 00 00 01 00
F00:1277                   move.b #$01,(a0)+         ; populate test data
               S06:0000146E:  10 FC 00 01
F00:1278                   move.b #$FC,(a0)+         ; populate test data
               S06:00001472:  10 FC 00 FC
F00:1279                   move.b #$80,(a0)+         ; populate test data
               S06:00001476:  10 FC 00 80
F00:1280                   move.l #$00000100,a0      ; point to memory to address
               S06:0000147A:  20 7C 00 00 01 00
F00:1281                   bclr.b d5,0(a0)            
               S06:00001480:  0B A8 00 00
F00:1282                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001484:  67 00 01 5C
F00:1283                   bclr.b d6,1(a0)           ; 
               S06:00001488:  0D A8 00 01
F00:1284                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000148C:  66 00 01 54
F00:1285                   bclr.b d7,2(a0)           ; 
               S06:00001490:  0F A8 00 02
F00:1286                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001494:  67 00 01 4C
F00:1287                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001498:  20 7C 00 00 01 00
F00:1288                   cmpi.b #$00,(a0)+
               S06:0000149E:  0C 18 00 00
F00:1289                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000014A2:  66 00 01 3E
F00:1290                   cmpi.b #$FC,(a0)+
               S06:000014A6:  0C 18 00 FC
F00:1291                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000014AA:  66 00 01 36
F00:1292                   cmpi.b #$00,(a0)+
               S06:000014AE:  0C 18 00 00
F00:1293                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000014B2:  66 00 01 2E
F00:1294                       
F00:1295                   ; EA = n(An,R.W)  - BYTE only
F00:1296                   move.l #$00000100,a0      ; point to memory to address
               S06:000014B6:  20 7C 00 00 01 00
F00:1297                   move.b #$FF,(a0)+         ; populate test data
               S06:000014BC:  10 FC 00 FF
F00:1298                   move.b #$FF,(a0)+         ; populate test data
               S06:000014C0:  10 FC 00 FF
F00:1299                   move.b #$FF,(a0)+         ; populate test data
               S06:000014C4:  10 FC 00 FF
F00:1300                   move.l #$00000103,a0      ; point to memory to address 
               S06:000014C8:  20 7C 00 00 01 03
F00:1301                   move.l #$00000100,a0      ; point to memory to address
               S06:000014CE:  20 7C 00 00 01 00
F00:1302                   move.l #$00000000,a1      ; point to memory to address
               S06:000014D4:  22 7C 00 00 00 00
F00:1303                   move.l #$00000001,a2      ; point to memory to address
               S06:000014DA:  24 7C 00 00 00 01
F00:1304                   move.l #$00000000,d0      ; point to memory to address
               S06:000014E0:  20 3C 00 00 00 00
F00:1305                   move.l #$00000001,d1      ; point to memory to address
               S06:000014E6:  22 3C 00 00 00 01
F00:1306                   bclr.b d5,0(a0,d0.w)            
               S06:000014EC:  0B B0 00 00
F00:1307                   beq BCLR_FAIL;               ; branch if Z set
               S06:000014F0:  67 00 00 F0
F00:1308                   bclr.b d6,0(a0,d1.w)      ; 
               S06:000014F4:  0D B0 10 00
F00:1309                   beq BCLR_FAIL;               ; branch if Z set
               S06:000014F8:  67 00 00 E8
F00:1310                   bclr.b d7,1(a0,d1.w)      ; 
               S06:000014FC:  0F B0 10 01
F00:1311                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001500:  67 00 00 E0
F00:1312                   ; EA = n(An,R.L)  - BYTE only
F00:1313                   bclr.b d5,0(a0,d0.l)  
               S06:00001504:  0B B0 08 00
F00:1314                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001508:  66 00 00 D8
F00:1315                   bclr.b d6,0(a0,d1.l)      ; 
               S06:0000150C:  0D B0 18 00
F00:1316                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001510:  66 00 00 D0
F00:1317                   bclr.b d7,1(a0,d1.l)      ; 
               S06:00001514:  0F B0 18 01
F00:1318                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001518:  66 00 00 C8
F00:1319                   ; EA = n(An,A.W)  - BYTE only
F00:1320                   bclr.b d5,0(a0,a1.w)            
               S06:0000151C:  0B B0 90 00
F00:1321                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001520:  66 00 00 C0
F00:1322                   bclr.b d6,0(a0,a2.w)      ; 
               S06:00001524:  0D B0 A0 00
F00:1323                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001528:  66 00 00 B8
F00:1324                   bclr.b d7,1(a0,a2.w)      ; 
               S06:0000152C:  0F B0 A0 01
F00:1325                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001530:  66 00 00 B0
F00:1326                   ; EA = n(An,A.L)  - BYTE only
F00:1327                   bclr.b d5,0(a0,a1.l)  
               S06:00001534:  0B B0 98 00
F00:1328                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001538:  66 00 00 A8
F00:1329                   bclr.b d6,0(a0,a2.l)      ; 
               S06:0000153C:  0D B0 A8 00
F00:1330                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001540:  66 00 00 A0
F00:1331                   bclr.b d7,1(a0,a2.l)      ; 
               S06:00001544:  0F B0 A8 01
F00:1332                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001548:  66 00 00 98
F00:1333                   move.l #$00000100,a0      ; point to memory to address 
               S06:0000154C:  20 7C 00 00 01 00
F00:1334                   cmpi.b #$FE,(a0)
               S06:00001552:  0C 10 00 FE
F00:1335                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001556:  66 00 00 8A
F00:1336                   
F00:1337                   ; EA = x.W  - BYTE only
F00:1338                   move.l #$00000100,a0      ; point to memory to address
               S06:0000155A:  20 7C 00 00 01 00
F00:1339                   move.b #$FF,(a0)+         ; populate test data
               S06:00001560:  10 FC 00 FF
F00:1340                   move.b #$FF,(a0)+         ; populate test data
               S06:00001564:  10 FC 00 FF
F00:1341                   move.b #$FF,(a0)+         ; populate test data
               S06:00001568:  10 FC 00 FF
F00:1342                   bclr.b d5,$0100            
               S06:0000156C:  0B B9 00 00 01 00
F00:1343                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001572:  67 00 00 6E
F00:1344                   bclr.b d6,$0101           ; 
               S06:00001576:  0D B9 00 00 01 01
F00:1345                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000157C:  67 00 00 64
F00:1346                   bclr.b d7,$0102           ; 
               S06:00001580:  0F B9 00 00 01 02
F00:1347                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001586:  67 00 00 5A
F00:1348                   move.l #$00000100,a0      ; point to memory to address
               S06:0000158A:  20 7C 00 00 01 00
F00:1349                   cmpi.b #$FE,(a0)+
               S06:00001590:  0C 18 00 FE
F00:1350                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001594:  66 00 00 4C
F00:1351                           
F00:1352                   ; EA = x.L  - BYTE only
F00:1353                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001598:  20 7C 00 0F 01 00
F00:1354                   move.b #$01,(a0)+         ; populate test data
               S06:0000159E:  10 FC 00 01
F00:1355                   move.b #$FC,(a0)+         ; populate test data
               S06:000015A2:  10 FC 00 FC
F00:1356                   move.b #$80,(a0)+         ; populate test data
               S06:000015A6:  10 FC 00 80
F00:1357                   bclr.b d5,$000F0100 
               S06:000015AA:  0B B9 00 0F 01 00
F00:1358                   beq BCLR_FAIL;               ; branch if Z set
               S06:000015B0:  67 00 00 30
F00:1359                   bclr.b d6,$000F0101       ; 
               S06:000015B4:  0D B9 00 0F 01 01
F00:1360                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000015BA:  66 00 00 26
F00:1361                   bclr.b d7,$000F0102       ; 
               S06:000015BE:  0F B9 00 0F 01 02
F00:1362                   beq BCLR_FAIL;               ; branch if Z set
               S06:000015C4:  67 00 00 1C
F00:1363                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:000015C8:  20 7C 00 0F 01 01
F00:1364                   cmpi.b #$FC,(a0)
               S06:000015CE:  0C 10 00 FC
F00:1365                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000015D2:  66 00 00 0E
F00:1366                           
F00:1367       
F00:1368           movea #TESTSTATUS,a0
               S06:000015D6:  30 7C FF 00
F00:1369           move.b #$1,$08(a0)
               S06:000015DA:  11 7C 00 01 00 08
F00:1370           rts
               S06:000015E0:  4E 75
F00:1371           
F00:1372       BCLR_FAIL:
F00:1373           movea #TESTSTATUS,a0
               S06:000015E2:  30 7C FF 00
F00:1374           move.b #$2,$08(a0)
               S06:000015E6:  11 7C 00 02 00 08
F00:1375           rts
               S06:000015EC:  4E 75
F00:1376       
F00:1377         
F00:1378       ;-----------------------------------------------------------
F00:1379       ;-----------------------------------------------------------
F00:1380       ; OPCODE : BSET
F00:1381       ;-----------------------------------------------------------
F00:1382       ;-----------------------------------------------------------
F00:1383       op_BSET: 
F00:1384       
F00:1385       
F00:1386       ;  Bit Number Static 
F00:1387           
F00:1388                   ; EA = Dn  - LONG only
F00:1389                   move.l #$00000000,d0      ; populate test data
               S06:000015EE:  20 3C 00 00 00 00
F00:1390                   bset.l #0,d0              
               S06:000015F4:  08 C0 00 00
F00:1391                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015F8:  66 00 04 DA
F00:1392                   bset.l #1,d0              ; 
               S06:000015FC:  08 C0 00 01
F00:1393                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001600:  66 00 04 D2
F00:1394                   bset.l #15,d0             ; 
               S06:00001604:  08 C0 00 0F
F00:1395                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001608:  66 00 04 CA
F00:1396                   bset.l #31,d0             ; 
               S06:0000160C:  08 C0 00 1F
F00:1397                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001610:  66 00 04 C2
F00:1398                   cmpi.l #$80008003,d0
               S06:00001614:  0C 80 80 00 80 03
F00:1399                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000161A:  66 00 04 B8
F00:1400       
F00:1401                   
F00:1402                   ; EA = (An)  - BYTE only
F00:1403                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:0000161E:  20 7C 00 00 01 00
F00:1404                   move.b #$00,(a0)          ; populate test data
               S06:00001624:  10 BC 00 00
F00:1405                   bset.b #0,(a0)            
               S06:00001628:  08 D0 00 00
F00:1406                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000162C:  66 00 04 A6
F00:1407                   bset.b #7,(a0)            ; 
               S06:00001630:  08 D0 00 07
F00:1408                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001634:  66 00 04 9E
F00:1409                   cmpi.b #$81,(a0)
               S06:00001638:  0C 10 00 81
F00:1410                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000163C:  66 00 04 96
F00:1411                   
F00:1412                   ; EA = (An)+  - BYTE only
F00:1413                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001640:  20 7C 00 00 01 00
F00:1414                   move.b #$00,(a0)+         ; populate test data
               S06:00001646:  10 FC 00 00
F00:1415                   move.b #$00,(a0)+         ; populate test data
               S06:0000164A:  10 FC 00 00
F00:1416                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000164E:  20 7C 00 00 01 00
F00:1417                   bset.b #0,(a0)+            
               S06:00001654:  08 D8 00 00
F00:1418                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001658:  66 00 04 7A
F00:1419                   bset.b #1,(a0)+           ; 
               S06:0000165C:  08 D8 00 01
F00:1420                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001660:  66 00 04 72
F00:1421                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001664:  20 7C 00 00 01 00
F00:1422                   cmpi.b #$01,(a0)+
               S06:0000166A:  0C 18 00 01
F00:1423                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000166E:  66 00 04 64
F00:1424                   cmpi.b #$02,(a0)+
               S06:00001672:  0C 18 00 02
F00:1425                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001676:  66 00 04 5C
F00:1426        
F00:1427               
F00:1428                   ; EA = -(An)  - BYTE only
F00:1429                   move.l #$00000100,a0      ; point to memory to address
               S06:0000167A:  20 7C 00 00 01 00
F00:1430                   move.b #$00,(a0)+         ; populate test data
               S06:00001680:  10 FC 00 00
F00:1431                   move.b #$00,(a0)+         ; populate test data
               S06:00001684:  10 FC 00 00
F00:1432                   bset.b #7,-(a0)            
               S06:00001688:  08 E0 00 07
F00:1433                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000168C:  66 00 04 46
F00:1434                   bset.b #0,-(a0)           ; 
               S06:00001690:  08 E0 00 00
F00:1435                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001694:  66 00 04 3E
F00:1436                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:00001698:  20 7C 00 00 01 02
F00:1437                   cmpi.b #$80,-(a0)
               S06:0000169E:  0C 20 00 80
F00:1438                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016A2:  66 00 04 30
F00:1439                   cmpi.b #$01,-(a0)
               S06:000016A6:  0C 20 00 01
F00:1440                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016AA:  66 00 04 28
F00:1441       
F00:1442               
F00:1443                   ; EA = n(An)  - BYTE only
F00:1444                   move.l #$00000100,a0      ; point to memory to address
               S06:000016AE:  20 7C 00 00 01 00
F00:1445                   move.b #$00,(a0)+         ; populate test data
               S06:000016B4:  10 FC 00 00
F00:1446                   move.b #$00,(a0)+         ; populate test data
               S06:000016B8:  10 FC 00 00
F00:1447                   move.l #$00000100,a0      ; point to memory to address
               S06:000016BC:  20 7C 00 00 01 00
F00:1448                   bset.b #0,0(a0)            
               S06:000016C2:  08 E8 00 00 00 00
F00:1449                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016C8:  66 00 04 0A
F00:1450                   bset.b #4,1(a0)           ; 
               S06:000016CC:  08 E8 00 04 00 01
F00:1451                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016D2:  66 00 04 00
F00:1452                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000016D6:  20 7C 00 00 01 00
F00:1453                   cmpi.b #$01,(a0)+
               S06:000016DC:  0C 18 00 01
F00:1454                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016E0:  66 00 03 F2
F00:1455                   cmpi.b #$10,(a0)+
               S06:000016E4:  0C 18 00 10
F00:1456                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016E8:  66 00 03 EA
F00:1457       
F00:1458                       
F00:1459                   ; EA = n(An,D.W)  - BYTE only
F00:1460                   move.l #$00000100,a0      ; point to memory to address
               S06:000016EC:  20 7C 00 00 01 00
F00:1461                   move.l #$00000000,a1      ; point to memory to address
               S06:000016F2:  22 7C 00 00 00 00
F00:1462                   move.l #$00000004,a2      ; point to memory to address
               S06:000016F8:  24 7C 00 00 00 04
F00:1463                   move.l #$00000000,d0      ; point to memory to address
               S06:000016FE:  20 3C 00 00 00 00
F00:1464                   move.l #$00000001,d1      ; point to memory to address
               S06:00001704:  22 3C 00 00 00 01
F00:1465                   move.b #$00,(a0)+         ; populate test data
               S06:0000170A:  10 FC 00 00
F00:1466                   move.b #$00,(a0)+         ; populate test data
               S06:0000170E:  10 FC 00 00
F00:1467                   move.b #$00,(a0)+         ; populate test data
               S06:00001712:  10 FC 00 00
F00:1468                   move.b #$00,(a0)+         ; populate test data
               S06:00001716:  10 FC 00 00
F00:1469                   move.b #$00,(a0)+         ; populate test data
               S06:0000171A:  10 FC 00 00
F00:1470                   move.b #$00,(a0)+         ; populate test data
               S06:0000171E:  10 FC 00 00
F00:1471                   move.b #$00,(a0)+         ; populate test data
               S06:00001722:  10 FC 00 00
F00:1472                   move.b #$00,(a0)+         ; populate test data
               S06:00001726:  10 FC 00 00
F00:1473                   move.b #$00,(a0)+         ; populate test data
               S06:0000172A:  10 FC 00 00
F00:1474                   move.b #$00,(a0)+         ; populate test data
               S06:0000172E:  10 FC 00 00
F00:1475                   move.l #$00000100,a0      ; point to memory to address
               S06:00001732:  20 7C 00 00 01 00
F00:1476                   bset.b #0,0(a0,d0.w)            
               S06:00001738:  08 F0 00 00 00 00
F00:1477                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000173E:  66 00 03 94
F00:1478                   bset.b #1,0(a0,d1.w)      ; 
               S06:00001742:  08 F0 00 01 10 00
F00:1479                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001748:  66 00 03 8A
F00:1480                   bset.b #2,1(a0,d1.w)      ; 
               S06:0000174C:  08 F0 00 02 10 01
F00:1481                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001752:  66 00 03 80
F00:1482                   ; EA = n(An,D.L)  - BYTE only
F00:1483                   bset.b #3,2(a0,d0.l)  
               S06:00001756:  08 F0 00 03 08 02
F00:1484                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000175C:  66 00 03 76
F00:1485                   bset.b #4,0(a0,d1.l)      ; 
               S06:00001760:  08 F0 00 04 18 00
F00:1486                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001766:  66 00 03 6C
F00:1487                   bset.b #5,1(a0,d1.l)      ; 
               S06:0000176A:  08 F0 00 05 18 01
F00:1488                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001770:  66 00 03 62
F00:1489                   ; EA = n(An,A.W)  - BYTE only
F00:1490                   bset.b #6,0(a0,a1.w)            
               S06:00001774:  08 F0 00 06 90 00
F00:1491                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000177A:  66 00 03 58
F00:1492                   bset.b #1,0(a0,a2.w)      ; 
               S06:0000177E:  08 F0 00 01 A0 00
F00:1493                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001784:  66 00 03 4E
F00:1494                   bset.b #7,1(a0,a2.w)      ; 
               S06:00001788:  08 F0 00 07 A0 01
F00:1495                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000178E:  66 00 03 44
F00:1496                   ; EA = n(An,A.L)  - BYTE only
F00:1497                   bset.b #0,2(a0,a2.l)  
               S06:00001792:  08 F0 00 00 A8 02
F00:1498                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001798:  66 00 03 3A
F00:1499                   bset.b #0,3(a0,a2.l)      ; 
               S06:0000179C:  08 F0 00 00 A8 03
F00:1500                   bne BSET_FAIL               ; branch if Z clear  
               S06:000017A2:  66 00 03 30
F00:1501                   bset.b #1,4(a0,a2.l)      ; 
               S06:000017A6:  08 F0 00 01 A8 04
F00:1502                   bne BSET_FAIL               ; branch if Z clear  
               S06:000017AC:  66 00 03 26
F00:1503                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000017B0:  20 7C 00 00 01 00
F00:1504                   cmpi.l #$41122C00,(a0)+
               S06:000017B6:  0C 98 41 12 2C 00
F00:1505                   bne BSET_FAIL               ; branch if Z clear  
               S06:000017BC:  66 00 03 16
F00:1506                   cmpi.l #$02800101,(a0)+
               S06:000017C0:  0C 98 02 80 01 01
F00:1507                   bne BSET_FAIL;
               S06:000017C6:  66 00 03 0C
F00:1508        
F00:1509       
F00:1510               
F00:1511                   ; EA = x.W  - BYTE only
F00:1512                   move.l #$00000100,a0      ; point to memory to address
               S06:000017CA:  20 7C 00 00 01 00
F00:1513                   move.b #$00,(a0)+         ; populate test data
               S06:000017D0:  10 FC 00 00
F00:1514                   bset.b #0,$0100            
               S06:000017D4:  08 F9 00 00 00 00 01 00
F00:1515                   bne BSET_FAIL               ; branch if Z clear  
               S06:000017DC:  66 00 02 F6
F00:1516                   bset.b #1,$0100           ; 
               S06:000017E0:  08 F9 00 01 00 00 01 00
F00:1517                   bne BSET_FAIL               ; branch if Z clear  
               S06:000017E8:  66 00 02 EA
F00:1518                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000017EC:  20 7C 00 00 01 00
F00:1519                   cmpi.b #$03,(a0)+
               S06:000017F2:  0C 18 00 03
F00:1520                   bne BSET_FAIL;
               S06:000017F6:  66 00 02 DC
F00:1521       
F00:1522                   
F00:1523                   ; EA = x.L  - BYTE only
F00:1524                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000017FA:  20 7C 00 0F 01 00
F00:1525                   move.b #$00,(a0)          ; populate test data
               S06:00001800:  10 BC 00 00
F00:1526                   bset.b #0,$000F0100 
               S06:00001804:  08 F9 00 00 00 0F 01 00
F00:1527                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000180C:  66 00 02 C6
F00:1528                   bset.b #1,$000F0100       ; 
               S06:00001810:  08 F9 00 01 00 0F 01 00
F00:1529                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001818:  66 00 02 BA
F00:1530                   bset.b #2,$000F0100       ; 
               S06:0000181C:  08 F9 00 02 00 0F 01 00
F00:1531                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001824:  66 00 02 AE
F00:1532                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001828:  20 7C 00 0F 01 00
F00:1533                   cmpi.b #$07,(a0)+
               S06:0000182E:  0C 18 00 07
F00:1534                   bne BSET_FAIL;
               S06:00001832:  66 00 02 A0
F00:1535       
F00:1536       
F00:1537       ; Bit Number Dynamic
F00:1538           
F00:1539                   ; EA = Dn  - LONG only
F00:1540                   move.l #$00000000,d0      ; populate test data
               S06:00001836:  20 3C 00 00 00 00
F00:1541                   move.l #0,d5              ; populate bit number to test
               S06:0000183C:  2A 3C 00 00 00 00
F00:1542                   move.l #1,d6              ; populate bit number to test
               S06:00001842:  2C 3C 00 00 00 01
F00:1543                   move.l #31,d7              ; populate bit number to test
               S06:00001848:  2E 3C 00 00 00 1F
F00:1544                   
F00:1545                   bset.l d5,d0              
               S06:0000184E:  0B C0
F00:1546                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001850:  66 00 02 82
F00:1547                   bset.l d6,d0              ; 
               S06:00001854:  0D C0
F00:1548                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001856:  66 00 02 7C
F00:1549                   bset.l d7,d0             ; 
               S06:0000185A:  0F C0
F00:1550                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000185C:  66 00 02 76
F00:1551                   cmpi.l #$80000003,d0
               S06:00001860:  0C 80 80 00 00 03
F00:1552                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001866:  66 00 02 6C
F00:1553       
F00:1554                   
F00:1555                   ; EA = (An)  - BYTE only
F00:1556                   move.l #0,d5              ; populate bit number to test
               S06:0000186A:  2A 3C 00 00 00 00
F00:1557                   move.l #1,d6              ; populate bit number to test
               S06:00001870:  2C 3C 00 00 00 01
F00:1558                   move.l #7,d7              ; populate bit number to test           
               S06:00001876:  2E 3C 00 00 00 07
F00:1559                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:0000187C:  20 7C 00 00 01 00
F00:1560                   move.b #$00,(a0)          ; populate test data
               S06:00001882:  10 BC 00 00
F00:1561                   bset.b d5,(a0)            
               S06:00001886:  0B D0
F00:1562                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001888:  66 00 02 4A
F00:1563                   bset.b d6,(a0)            ; 
               S06:0000188C:  0D D0
F00:1564                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000188E:  66 00 02 44
F00:1565                   bset.b d7,(a0)            ; 
               S06:00001892:  0F D0
F00:1566                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001894:  66 00 02 3E
F00:1567                   cmpi.b #$83,(a0)
               S06:00001898:  0C 10 00 83
F00:1568                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000189C:  66 00 02 36
F00:1569                   
F00:1570           
F00:1571                   ; EA = (An)+  - BYTE only
F00:1572                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000018A0:  20 7C 00 00 01 00
F00:1573                   move.b #$00,(a0)+         ; populate test data
               S06:000018A6:  10 FC 00 00
F00:1574                   move.b #$00,(a0)+         ; populate test data
               S06:000018AA:  10 FC 00 00
F00:1575                   move.b #$00,(a0)+         ; populate test data
               S06:000018AE:  10 FC 00 00
F00:1576                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000018B2:  20 7C 00 00 01 00
F00:1577                   bset.b d5,(a0)+            
               S06:000018B8:  0B D8
F00:1578                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018BA:  66 00 02 18
F00:1579                   bset.b d6,(a0)+           ; 
               S06:000018BE:  0D D8
F00:1580                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018C0:  66 00 02 12
F00:1581                   bset.b d7,(a0)+           ; 
               S06:000018C4:  0F D8
F00:1582                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018C6:  66 00 02 0C
F00:1583                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000018CA:  20 7C 00 00 01 00
F00:1584                   cmpi.b #$01,(a0)+
               S06:000018D0:  0C 18 00 01
F00:1585                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018D4:  66 00 01 FE
F00:1586                   cmpi.b #$02,(a0)+
               S06:000018D8:  0C 18 00 02
F00:1587                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018DC:  66 00 01 F6
F00:1588                   cmpi.b #$80,(a0)+
               S06:000018E0:  0C 18 00 80
F00:1589                   bne BSET_FAIL               ; branch if Z clear  
               S06:000018E4:  66 00 01 EE
F00:1590                       
F00:1591                   ; EA = -(An)  - BYTE only
F00:1592                   move.l #$00000100,a0      ; point to memory to address
               S06:000018E8:  20 7C 00 00 01 00
F00:1593                   move.b #$00,(a0)+         ; populate test data
               S06:000018EE:  10 FC 00 00
F00:1594                   move.b #$00,(a0)+         ; populate test data
               S06:000018F2:  10 FC 00 00
F00:1595                   move.b #$00,(a0)+         ; populate test data
               S06:000018F6:  10 FC 00 00
F00:1596                   move.l #$00000103,a0      ; point to memory to address 
               S06:000018FA:  20 7C 00 00 01 03
F00:1597                   bset.b d5,-(a0)            
               S06:00001900:  0B E0
F00:1598                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001902:  66 00 01 D0
F00:1599                   bset.b d6,-(a0)           ; 
               S06:00001906:  0D E0
F00:1600                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001908:  66 00 01 CA
F00:1601                   bset.b d7,-(a0)           ; 
               S06:0000190C:  0F E0
F00:1602                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000190E:  66 00 01 C4
F00:1603                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00001912:  20 7C 00 00 01 03
F00:1604                   cmpi.b #$01,-(a0)
               S06:00001918:  0C 20 00 01
F00:1605                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000191C:  66 00 01 B6
F00:1606                   cmpi.b #$02,-(a0)
               S06:00001920:  0C 20 00 02
F00:1607                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001924:  66 00 01 AE
F00:1608                   cmpi.b #$80,-(a0)
               S06:00001928:  0C 20 00 80
F00:1609                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000192C:  66 00 01 A6
F00:1610                       
F00:1611                   ; EA = n(An)  - BYTE only
F00:1612                   move.l #$00000100,a0      ; point to memory to address
               S06:00001930:  20 7C 00 00 01 00
F00:1613                   move.b #$00,(a0)+         ; populate test data
               S06:00001936:  10 FC 00 00
F00:1614                   move.b #$00,(a0)+         ; populate test data
               S06:0000193A:  10 FC 00 00
F00:1615                   move.b #$00,(a0)+         ; populate test data
               S06:0000193E:  10 FC 00 00
F00:1616                   move.l #$00000100,a0      ; point to memory to address
               S06:00001942:  20 7C 00 00 01 00
F00:1617                   bset.b d5,0(a0)            
               S06:00001948:  0B E8 00 00
F00:1618                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000194C:  66 00 01 86
F00:1619                   bset.b d6,1(a0)           ; 
               S06:00001950:  0D E8 00 01
F00:1620                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001954:  66 00 01 7E
F00:1621                   bset.b d7,2(a0)           ; 
               S06:00001958:  0F E8 00 02
F00:1622                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000195C:  66 00 01 76
F00:1623                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001960:  20 7C 00 00 01 00
F00:1624                   cmpi.b #$01,(a0)+
               S06:00001966:  0C 18 00 01
F00:1625                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000196A:  66 00 01 68
F00:1626                   cmpi.b #$02,(a0)+
               S06:0000196E:  0C 18 00 02
F00:1627                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001972:  66 00 01 60
F00:1628                   cmpi.b #$80,(a0)+
               S06:00001976:  0C 18 00 80
F00:1629                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000197A:  66 00 01 58
F00:1630                       
F00:1631                   ; EA = n(An,R.W)  - BYTE only
F00:1632                   move.l #$00000100,a0      ; point to memory to address
               S06:0000197E:  20 7C 00 00 01 00
F00:1633                   move.b #$00,(a0)+         ; populate test data
               S06:00001984:  10 FC 00 00
F00:1634                   move.b #$00,(a0)+         ; populate test data
               S06:00001988:  10 FC 00 00
F00:1635                   move.b #$00,(a0)+         ; populate test data
               S06:0000198C:  10 FC 00 00
F00:1636                   move.b #$00,(a0)+         ; populate test data
               S06:00001990:  10 FC 00 00
F00:1637                   move.b #$00,(a0)+         ; populate test data
               S06:00001994:  10 FC 00 00
F00:1638                   move.b #$00,(a0)+         ; populate test data
               S06:00001998:  10 FC 00 00
F00:1639                   move.b #$00,(a0)+         ; populate test data
               S06:0000199C:  10 FC 00 00
F00:1640                   move.b #$00,(a0)+         ; populate test data
               S06:000019A0:  10 FC 00 00
F00:1641                   move.b #$00,(a0)+         ; populate test data
               S06:000019A4:  10 FC 00 00
F00:1642                   move.b #$00,(a0)+         ; populate test data
               S06:000019A8:  10 FC 00 00
F00:1643                   move.b #$00,(a0)+         ; populate test data
               S06:000019AC:  10 FC 00 00
F00:1644                   move.b #$00,(a0)+         ; populate test data
               S06:000019B0:  10 FC 00 00
F00:1645                   move.l #$00000100,a0      ; point to memory to address
               S06:000019B4:  20 7C 00 00 01 00
F00:1646                   move.l #$00000000,a1      ; point to memory to address
               S06:000019BA:  22 7C 00 00 00 00
F00:1647                   move.l #$00000001,a2      ; point to memory to address
               S06:000019C0:  24 7C 00 00 00 01
F00:1648                   move.l #$00000000,d0      ; point to memory to address
               S06:000019C6:  20 3C 00 00 00 00
F00:1649                   move.l #$00000001,d1      ; point to memory to address
               S06:000019CC:  22 3C 00 00 00 01
F00:1650                   bset.b d5,0(a0,d0.w)            
               S06:000019D2:  0B F0 00 00
F00:1651                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019D6:  66 00 00 FC
F00:1652                   bset.b d6,0(a0,d1.w)      ; 
               S06:000019DA:  0D F0 10 00
F00:1653                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019DE:  66 00 00 F4
F00:1654                   bset.b d7,1(a0,d1.w)      ; 
               S06:000019E2:  0F F0 10 01
F00:1655                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019E6:  66 00 00 EC
F00:1656                   ; EA = n(An,R.L)  - BYTE only
F00:1657                   bset.b d5,2(a0,d0.l)  
               S06:000019EA:  0B F0 08 02
F00:1658                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019EE:  66 00 00 E4
F00:1659                   bset.b d6,3(a0,d1.l)      ; 
               S06:000019F2:  0D F0 18 03
F00:1660                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019F6:  66 00 00 DC
F00:1661                   bset.b d7,4(a0,d1.l)      ; 
               S06:000019FA:  0F F0 18 04
F00:1662                   bne BSET_FAIL               ; branch if Z clear  
               S06:000019FE:  66 00 00 D4
F00:1663                   ; EA = n(An,A.W)  - BYTE only
F00:1664                   bset.b d5,5(a0,a1.w)            
               S06:00001A02:  0B F0 90 05
F00:1665                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A06:  66 00 00 CC
F00:1666                   bset.b d6,6(a0,a2.w)      ; 
               S06:00001A0A:  0D F0 A0 06
F00:1667                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A0E:  66 00 00 C4
F00:1668                   bset.b d7,7(a0,a2.w)      ; 
               S06:00001A12:  0F F0 A0 07
F00:1669                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A16:  66 00 00 BC
F00:1670                   ; EA = n(An,A.L)  - BYTE only
F00:1671                   bset.b d5,8(a0,a1.l)  
               S06:00001A1A:  0B F0 98 08
F00:1672                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A1E:  66 00 00 B4
F00:1673                   bset.b d6,9(a0,a2.l)      ; 
               S06:00001A22:  0D F0 A8 09
F00:1674                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A26:  66 00 00 AC
F00:1675                   bset.b d7,10(a0,a2.l)      ; 
               S06:00001A2A:  0F F0 A8 0A
F00:1676                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A2E:  66 00 00 A4
F00:1677                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001A32:  20 7C 00 00 01 00
F00:1678                   cmpi.l #$01028100,(a0)+
               S06:00001A38:  0C 98 01 02 81 00
F00:1679                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A3E:  66 00 00 94
F00:1680                   cmpi.l #$02810002,(a0)+
               S06:00001A42:  0C 98 02 81 00 02
F00:1681                   bne BSET_FAIL;
               S06:00001A48:  66 00 00 8A
F00:1682        
F00:1683                   
F00:1684                   ; EA = x.W  - BYTE only
F00:1685                   move.l #$00000100,a0      ; point to memory to address
               S06:00001A4C:  20 7C 00 00 01 00
F00:1686                   move.b #$00,(a0)+         ; populate test data
               S06:00001A52:  10 FC 00 00
F00:1687                   move.b #$00,(a0)+         ; populate test data
               S06:00001A56:  10 FC 00 00
F00:1688                   move.b #$00,(a0)+         ; populate test data
               S06:00001A5A:  10 FC 00 00
F00:1689                   bset.b d5,$0100            
               S06:00001A5E:  0B F9 00 00 01 00
F00:1690                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A64:  66 00 00 6E
F00:1691                   bset.b d6,$0100           ; 
               S06:00001A68:  0D F9 00 00 01 00
F00:1692                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A6E:  66 00 00 64
F00:1693                   bset.b d7,$0100           ; 
               S06:00001A72:  0F F9 00 00 01 00
F00:1694                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A78:  66 00 00 5A
F00:1695                   move.l #$00000100,a0      ; point to memory to address
               S06:00001A7C:  20 7C 00 00 01 00
F00:1696                   cmpi.b #$83,(a0)+
               S06:00001A82:  0C 18 00 83
F00:1697                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001A86:  66 00 00 4C
F00:1698                           
F00:1699                   ; EA = x.L  - BYTE only
F00:1700                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001A8A:  20 7C 00 0F 01 00
F00:1701                   move.b #$00,(a0)+         ; populate test data
               S06:00001A90:  10 FC 00 00
F00:1702                   move.b #$00,(a0)+         ; populate test data
               S06:00001A94:  10 FC 00 00
F00:1703                   move.b #$00,(a0)+         ; populate test data
               S06:00001A98:  10 FC 00 00
F00:1704                   bset.b d5,$000F0100 
               S06:00001A9C:  0B F9 00 0F 01 00
F00:1705                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001AA2:  66 00 00 30
F00:1706                   bset.b d6,$000F0100       ; 
               S06:00001AA6:  0D F9 00 0F 01 00
F00:1707                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001AAC:  66 00 00 26
F00:1708                   bset.b d7,$000F0100       ; 
               S06:00001AB0:  0F F9 00 0F 01 00
F00:1709                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001AB6:  66 00 00 1C
F00:1710                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001ABA:  20 7C 00 0F 01 00
F00:1711                   cmpi.b #$83,(a0)
               S06:00001AC0:  0C 10 00 83
F00:1712                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001AC4:  66 00 00 0E
F00:1713                           
F00:1714           movea #TESTSTATUS,a0
               S06:00001AC8:  30 7C FF 00
F00:1715           move.b #$1,$09(a0)
               S06:00001ACC:  11 7C 00 01 00 09
F00:1716           rts
               S06:00001AD2:  4E 75
F00:1717           
F00:1718       BSET_FAIL:
F00:1719           movea #TESTSTATUS,a0
               S06:00001AD4:  30 7C FF 00
F00:1720           move.b #$1,$09(a0)
               S06:00001AD8:  11 7C 00 01 00 09
F00:1721           rts
               S06:00001ADE:  4E 75
F00:1722       
F00:1723       ;-----------------------------------------------------------
F00:1724       ;-----------------------------------------------------------
F00:1725       ; OPCODE : MOVEP
F00:1726       ;-----------------------------------------------------------
F00:1727       ;-----------------------------------------------------------
F00:1728       op_MOVEP: 
F00:1729       
F00:1730       ; Dn --> x(An)
F00:1731                   move.l #$00000100,a0  
               S06:00001AE0:  20 7C 00 00 01 00
F00:1732                   move.l #$12345678,d0  
               S06:00001AE6:  20 3C 12 34 56 78
F00:1733                   move.l #$AABBCCDD,d1  
               S06:00001AEC:  22 3C AA BB CC DD
F00:1734                   move.l #0,(a0)
               S06:00001AF2:  20 BC 00 00 00 00
F00:1735                   move.l #0,4(a0)
               S06:00001AF8:  21 7C 00 00 00 00 00 04
F00:1736                   
F00:1737                   movep.w d0,0(a0)      ; even offset   
               S06:00001B00:  01 88 00 00
F00:1738                   movep.w d1,1(a0)      ; odd offset
               S06:00001B04:  03 88 00 01
F00:1739                   
F00:1740                   movep.l d0,4(a0)      ; even offset   
               S06:00001B08:  01 C8 00 04
F00:1741                   movep.l d1,5(a0)      ; odd offset
               S06:00001B0C:  03 C8 00 05
F00:1742                   
F00:1743                   cmpi.l #$56CC78DD,(a0)
               S06:00001B10:  0C 90 56 CC 78 DD
F00:1744                   bne MOVEP_FAIL;
               S06:00001B16:  66 00 00 76
F00:1745                   cmpi.l #$12AA34BB,4(a0)
               S06:00001B1A:  0C A8 12 AA 34 BB 00 04
F00:1746                   bne MOVEP_FAIL;
               S06:00001B22:  66 00 00 6A
F00:1747                   cmpi.l #$56CC78DD,8(a0)
               S06:00001B26:  0C A8 56 CC 78 DD 00 08
F00:1748                   bne MOVEP_FAIL;
               S06:00001B2E:  66 00 00 5E
F00:1749                   
F00:1750                   
F00:1751       ; x(An)--> Dn
F00:1752                   move.l #$5a5a5a5a,d0  
               S06:00001B32:  20 3C 5A 5A 5A 5A
F00:1753                   move.l #$5a5a5a5a,d1  
               S06:00001B38:  22 3C 5A 5A 5A 5A
F00:1754                   move.l #$5a5a5a5a,d2  
               S06:00001B3E:  24 3C 5A 5A 5A 5A
F00:1755                   move.l #$5a5a5a5a,d3  
               S06:00001B44:  26 3C 5A 5A 5A 5A
F00:1756                   
F00:1757                   movep.w 0(a0),d0      ; even offset   
               S06:00001B4A:  01 08 00 00
F00:1758                   movep.w 1(a0),d1      ; odd offset
               S06:00001B4E:  03 08 00 01
F00:1759                   
F00:1760                   movep.l 4(a0),d2      ; even offset   
               S06:00001B52:  05 48 00 04
F00:1761                   movep.l 5(a0),d3      ; odd offset
               S06:00001B56:  07 48 00 05
F00:1762                   
F00:1763                   cmpi.l #$5a5a5678,d0
               S06:00001B5A:  0C 80 5A 5A 56 78
F00:1764                   bne MOVEP_FAIL;
               S06:00001B60:  66 00 00 2C
F00:1765                   cmpi.l #$5a5aCCDD,d1
               S06:00001B64:  0C 81 5A 5A CC DD
F00:1766                   bne MOVEP_FAIL;
               S06:00001B6A:  66 00 00 22
F00:1767                   cmpi.l #$12345678,d2
               S06:00001B6E:  0C 82 12 34 56 78
F00:1768                   bne MOVEP_FAIL;
               S06:00001B74:  66 00 00 18
F00:1769                   cmpi.l #$AABBCCDD,d3
               S06:00001B78:  0C 83 AA BB CC DD
F00:1770                   bne MOVEP_FAIL;
               S06:00001B7E:  66 00 00 0E
F00:1771           
F00:1772                   movea #TESTSTATUS,a0
               S06:00001B82:  30 7C FF 00
F00:1773                   move.b #$1,$0a(a0)
               S06:00001B86:  11 7C 00 01 00 0A
F00:1774                   rts
               S06:00001B8C:  4E 75
F00:1775       
F00:1776       MOVEP_FAIL: 
F00:1777           movea #TESTSTATUS,a0
               S06:00001B8E:  30 7C FF 00
F00:1778           move.b #$2,$0a(a0)
               S06:00001B92:  11 7C 00 02 00 0A
F00:1779           rts
               S06:00001B98:  4E 75
F00:1780       
F00:1781       ;-----------------------------------------------------------
F00:1782       ;-----------------------------------------------------------
F00:1783       ; OPCODE : BOOL_I
F00:1784       ;-----------------------------------------------------------
F00:1785       ;-----------------------------------------------------------
F00:1786       op_BOOL_I: 
F00:1787               
F00:1788           ; Dn -- BYTE
F00:1789                   move.l #$12345678,d0  
               S06:00001B9A:  20 3C 12 34 56 78
F00:1790                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001BA0:  44 FC 00 0F
F00:1791                   ori.b  #$FF,d0
               S06:00001BA4:  00 00 00 FF
F00:1792                   eori.b #$5A,d0
               S06:00001BA8:  0A 00 00 5A
F00:1793                   and.b  #$F0,d0
               S06:00001BAC:  C0 3C 00 F0
F00:1794                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001BB0:  69 00 02 40
F00:1795                   bcs BOOL_I_FAIL;
               S06:00001BB4:  65 00 02 3C
F00:1796                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001BB8:  6A 00 02 38
F00:1797                   and.b  #$00,d0
               S06:00001BBC:  C0 3C 00 00
F00:1798                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001BC0:  6B 00 02 30
F00:1799                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001BC4:  66 00 02 2C
F00:1800       
F00:1801           ; Dn -- WORD
F00:1802                   move.l #$12345678,d1  
               S06:00001BC8:  22 3C 12 34 56 78
F00:1803                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001BCE:  44 FC 00 0F
F00:1804                   ori.w  #$FFFF,d1
               S06:00001BD2:  00 41 FF FF
F00:1805                   eori.w #$5A5A,d1
               S06:00001BD6:  0A 41 5A 5A
F00:1806                   and.w  #$F0F0,d1
               S06:00001BDA:  C2 7C F0 F0
F00:1807                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001BDE:  69 00 02 12
F00:1808                   bcs BOOL_I_FAIL;
               S06:00001BE2:  65 00 02 0E
F00:1809                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001BE6:  6A 00 02 0A
F00:1810                   and.w  #$0000,d1
               S06:00001BEA:  C2 7C 00 00
F00:1811                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001BEE:  6B 00 02 02
F00:1812                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001BF2:  66 00 01 FE
F00:1813       
F00:1814           ; Dn -- LONG
F00:1815                   move.l #$12345678,d2  
               S06:00001BF6:  24 3C 12 34 56 78
F00:1816                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001BFC:  44 FC 00 0F
F00:1817                   ori.l  #$FFFFFFFF,d2
               S06:00001C00:  00 82 FF FF FF FF
F00:1818                   eori.l #$5A5A5A5A,d2
               S06:00001C06:  0A 82 5A 5A 5A 5A
F00:1819                   and.l  #$F0F0F0F0,d2
               S06:00001C0C:  C4 BC F0 F0 F0 F0
F00:1820                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001C12:  69 00 01 DE
F00:1821                   bcs BOOL_I_FAIL;
               S06:00001C16:  65 00 01 DA
F00:1822                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001C1A:  6A 00 01 D6
F00:1823                   and.l  #$00000000,d2
               S06:00001C1E:  C4 BC 00 00 00 00
F00:1824                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001C24:  6B 00 01 CC
F00:1825                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001C28:  66 00 01 C8
F00:1826       
F00:1827           
F00:1828           ; (An) -- BYTE
F00:1829                   move.l #$00000100,a0  
               S06:00001C2C:  20 7C 00 00 01 00
F00:1830                   move.l #$12345678,(a0)  
               S06:00001C32:  20 BC 12 34 56 78
F00:1831                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001C38:  44 FC 00 0F
F00:1832                   ori.b  #$FF,(a0)
               S06:00001C3C:  00 10 00 FF
F00:1833                   eori.b #$5A,(a0)
               S06:00001C40:  0A 10 00 5A
F00:1834                   and.b  #$F0,(a0)
               S06:00001C44:  02 10 00 F0
F00:1835                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001C48:  69 00 01 A8
F00:1836                   bcs BOOL_I_FAIL;
               S06:00001C4C:  65 00 01 A4
F00:1837                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001C50:  6A 00 01 A0
F00:1838                   and.b  #$00,(a0)
               S06:00001C54:  02 10 00 00
F00:1839                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001C58:  6B 00 01 98
F00:1840                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001C5C:  66 00 01 94
F00:1841                   cmpi.b #$00,(a0)
               S06:00001C60:  0C 10 00 00
F00:1842                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001C64:  66 00 01 8C
F00:1843                   
F00:1844           ; (An) -- WORD
F00:1845                   move.l #$12345678,(a0)  
               S06:00001C68:  20 BC 12 34 56 78
F00:1846                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001C6E:  44 FC 00 0F
F00:1847                   ori.w  #$FFFF,(a0)
               S06:00001C72:  00 50 FF FF
F00:1848                   eori.w #$5A5A,(a0)
               S06:00001C76:  0A 50 5A 5A
F00:1849                   and.w  #$F0F0,(a0)
               S06:00001C7A:  02 50 F0 F0
F00:1850                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001C7E:  69 00 01 72
F00:1851                   bcs BOOL_I_FAIL;
               S06:00001C82:  65 00 01 6E
F00:1852                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001C86:  6A 00 01 6A
F00:1853                   and.w  #$0000,(a0)
               S06:00001C8A:  02 50 00 00
F00:1854                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001C8E:  6B 00 01 62
F00:1855                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001C92:  66 00 01 5E
F00:1856                   cmpi.w #$00,(a0)
               S06:00001C96:  0C 50 00 00
F00:1857                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001C9A:  66 00 01 56
F00:1858                   
F00:1859           ; (An) -- LONG
F00:1860                   move.l #$12345678,(a0)  
               S06:00001C9E:  20 BC 12 34 56 78
F00:1861                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001CA4:  44 FC 00 0F
F00:1862                   ori.l  #$FFFFFFFF,(a0)
               S06:00001CA8:  00 90 FF FF FF FF
F00:1863                   eori.l #$5A5A5A5A,(a0)
               S06:00001CAE:  0A 90 5A 5A 5A 5A
F00:1864                   and.l  #$F0F0F0F0,(a0)
               S06:00001CB4:  02 90 F0 F0 F0 F0
F00:1865                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001CBA:  69 00 01 36
F00:1866                   bcs BOOL_I_FAIL;
               S06:00001CBE:  65 00 01 32
F00:1867                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001CC2:  6A 00 01 2E
F00:1868                   and.l  #$00000000,(a0)
               S06:00001CC6:  02 90 00 00 00 00
F00:1869                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001CCC:  6B 00 01 24
F00:1870                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001CD0:  66 00 01 20
F00:1871                   cmpi.l #$00,(a0)
               S06:00001CD4:  0C 90 00 00 00 00
F00:1872                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001CDA:  66 00 01 16
F00:1873                   
F00:1874       
F00:1875       
F00:1876           ; (An)+ -- BYTE
F00:1877                   move.l #$00000100,a0  
               S06:00001CDE:  20 7C 00 00 01 00
F00:1878                   move.l #$00A5FF88,(a0)  
               S06:00001CE4:  20 BC 00 A5 FF 88
F00:1879                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001CEA:  44 FC 00 0F
F00:1880                   
F00:1881                   ori.b  #$F5,(a0)+
               S06:00001CEE:  00 18 00 F5
F00:1882                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001CF2:  6A 00 00 FE
F00:1883                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001CF6:  67 00 00 FA
F00:1884                   
F00:1885                   eori.b #$FF,(a0)+
               S06:00001CFA:  0A 18 00 FF
F00:1886                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001CFE:  6B 00 00 F2
F00:1887                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001D02:  67 00 00 EE
F00:1888                   
F00:1889                   and.b  #$AA,(a0)+
               S06:00001D06:  02 18 00 AA
F00:1890                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001D0A:  6A 00 00 E6
F00:1891                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001D0E:  67 00 00 E2
F00:1892                   
F00:1893                   move.l #$00000100,a0  
               S06:00001D12:  20 7C 00 00 01 00
F00:1894                   cmpi.l #$F55AAA88,(a0)
               S06:00001D18:  0C 90 F5 5A AA 88
F00:1895                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001D1E:  66 00 00 D2
F00:1896                   
F00:1897                   
F00:1898           ; (An)+ -- WORD
F00:1899                   move.l #$00000100,a0  
               S06:00001D22:  20 7C 00 00 01 00
F00:1900                   move.l #$00000104,a1  
               S06:00001D28:  22 7C 00 00 01 04
F00:1901                   move.l #$00005a5a,(a0)  
               S06:00001D2E:  20 BC 00 00 5A 5A
F00:1902                   move.l #$12345678,(a1)  
               S06:00001D34:  22 BC 12 34 56 78
F00:1903                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001D3A:  44 FC 00 0F
F00:1904                   
F00:1905                   ori.w  #$5678,(a0)+
               S06:00001D3E:  00 58 56 78
F00:1906                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001D42:  6B 00 00 AE
F00:1907                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001D46:  67 00 00 AA
F00:1908                   
F00:1909                   eori.w #$FFFF,(a0)+
               S06:00001D4A:  0A 58 FF FF
F00:1910                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001D4E:  6A 00 00 A2
F00:1911                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001D52:  67 00 00 9E
F00:1912                   
F00:1913                   and.w  #$A55A,(a0)+
               S06:00001D56:  02 58 A5 5A
F00:1914                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001D5A:  6B 00 00 96
F00:1915                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001D5E:  67 00 00 92
F00:1916                   
F00:1917                   move.l #$00000100,a0  
               S06:00001D62:  20 7C 00 00 01 00
F00:1918                   cmpi.l #$5678a5a5,(a0)
               S06:00001D68:  0C 90 56 78 A5 A5
F00:1919                   move.l #$00000104,a0  
               S06:00001D6E:  20 7C 00 00 01 04
F00:1920                   cmpi.l #$00105678,(a0)
               S06:00001D74:  0C 90 00 10 56 78
F00:1921                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001D7A:  66 00 00 76
F00:1922                   
F00:1923           ; (An)+ -- LONG
F00:1924                   move.l #$00000100,a0  
               S06:00001D7E:  20 7C 00 00 01 00
F00:1925                   move.l #$00000000,(a0)+  
               S06:00001D84:  20 FC 00 00 00 00
F00:1926                   move.l #$5a5a5a5a,(a0)+  
               S06:00001D8A:  20 FC 5A 5A 5A 5A
F00:1927                   move.l #$FFFFFFFF,(a0)+  
               S06:00001D90:  20 FC FF FF FF FF
F00:1928                   move.l #$00000100,a0  
               S06:00001D96:  20 7C 00 00 01 00
F00:1929                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001D9C:  44 FC 00 0F
F00:1930                   
F00:1931                   ori.l  #$12345678,(a0)+
               S06:00001DA0:  00 98 12 34 56 78
F00:1932                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001DA6:  6B 00 00 4A
F00:1933                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001DAA:  67 00 00 46
F00:1934                   
F00:1935                   eori.l #$FFFFFFFF,(a0)+
               S06:00001DAE:  0A 98 FF FF FF FF
F00:1936                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001DB4:  6A 00 00 3C
F00:1937                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001DB8:  67 00 00 38
F00:1938                   
F00:1939                   and.l  #$A5A5A55A,(a0)+
               S06:00001DBC:  02 98 A5 A5 A5 5A
F00:1940                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001DC2:  6A 00 00 2E
F00:1941                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001DC6:  67 00 00 2A
F00:1942                   
F00:1943                   move.l #$00000100,a0  
               S06:00001DCA:  20 7C 00 00 01 00
F00:1944                   cmpi.l #$12345678,(a0)+
               S06:00001DD0:  0C 98 12 34 56 78
F00:1945                   cmpi.l #$a5a5a5a5,(a0)+
               S06:00001DD6:  0C 98 A5 A5 A5 A5
F00:1946                   cmpi.l #$a5a5a55a,(a0)+
               S06:00001DDC:  0C 98 A5 A5 A5 5A
F00:1947                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001DE2:  66 00 00 0E
F00:1948                   
F00:1949                   movea #TESTSTATUS,a0
               S06:00001DE6:  30 7C FF 00
F00:1950                   move.b #$1,$0b(a0)
               S06:00001DEA:  11 7C 00 01 00 0B
F00:1951                   rts
               S06:00001DF0:  4E 75
F00:1952       
F00:1953       BOOL_I_FAIL: 
F00:1954           movea #TESTSTATUS,a0
               S06:00001DF2:  30 7C FF 00
F00:1955           move.b #$2,$0b(a0)
               S06:00001DF6:  11 7C 00 02 00 0B
F00:1956           rts
               S06:00001DFC:  4E 75
F00:1957       
F00:1958       ;-----------------------------------------------------------
F00:1959       ;-----------------------------------------------------------
F00:1960       ; OPCODE : BSR
F00:1961       ;-----------------------------------------------------------
F00:1962       ;-----------------------------------------------------------
F00:1963       
F00:1964            
F00:1965       BSR_CLOSE1:     move.l #$11111111,d1
               S06:00001DFE:  22 3C 11 11 11 11
F00:1966                       rts
               S06:00001E04:  4E 75
F00:1967        
F00:1968       
F00:1969       
F00:1970       op_BSR:         bsr.s BSR_CLOSE1        ; Negative 8-bit displacement
               S06:00001E06:  61 F6
F00:1971                       bsr.s BSR_CLOSE2        ; Positive 8-bit displacement
               S06:00001E08:  61 3C
F00:1972                       bsr.w BSR_FAR1          ; Negative 16-bit displacement
               S06:00001E0A:  61 00 E7 6E
F00:1973                       bsr.w BSR_FAR2          ; Positive 16-bit displacement
               S06:00001E0E:  61 00 1A CE
F00:1974                       
F00:1975                       cmpi.l #$11111111,d1
               S06:00001E12:  0C 81 11 11 11 11
F00:1976                       bne BSR_FAIL;
               S06:00001E18:  66 00 00 34
F00:1977                       cmpi.l #$22222222,d2
               S06:00001E1C:  0C 82 22 22 22 22
F00:1978                       bne BSR_FAIL;
               S06:00001E22:  66 00 00 2A
F00:1979                       cmpi.l #$33333333,d3
               S06:00001E26:  0C 83 33 33 33 33
F00:1980                       bne BSR_FAIL;
               S06:00001E2C:  66 00 00 20
F00:1981                       cmpi.l #$44444444,d4
               S06:00001E30:  0C 84 44 44 44 44
F00:1982                       bne BSR_FAIL;
               S06:00001E36:  66 00 00 16
F00:1983                       
F00:1984                       movea #TESTSTATUS,a0
               S06:00001E3A:  30 7C FF 00
F00:1985                       move.b #$1,$0c(a0)
               S06:00001E3E:  11 7C 00 01 00 0C
F00:1986                       rts   
               S06:00001E44:  4E 75
F00:1987                       
F00:1988                       
F00:1989       BSR_CLOSE2:     move.l #$22222222,d2
               S06:00001E46:  24 3C 22 22 22 22
F00:1990                       rts
               S06:00001E4C:  4E 75
F00:1991       
F00:1992       BSR_FAIL:
F00:1993           movea #TESTSTATUS,a0
               S06:00001E4E:  30 7C FF 00
F00:1994           move.b #$2,$0c(a0)
               S06:00001E52:  11 7C 00 02 00 0C
F00:1995           rts
               S06:00001E58:  4E 75
F00:1996       
F00:1997       ;-----------------------------------------------------------
F00:1998       ;-----------------------------------------------------------
F00:1999       ; OPCODE : op_CMP_I
F00:2000       ;-----------------------------------------------------------
F00:2001       ;-----------------------------------------------------------
F00:2002       op_CMP_I: 
F00:2003       
F00:2004                   move.l #$00000100,a0 
               S06:00001E5A:  20 7C 00 00 01 00
F00:2005                   move.l #$00000100,(a0) 
               S06:00001E60:  20 BC 00 00 01 00
F00:2006        
F00:2007           ; REGISTER - BYTE
F00:2008                   move.l #$FFFFFF80,d0  
               S06:00001E66:  20 3C FF FF FF 80
F00:2009                   cmpi.b #$80,d0
               S06:00001E6C:  0C 00 00 80
F00:2010                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E70:  66 00 02 C4
F00:2011                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E74:  6B 00 02 C0
F00:2012                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E78:  65 00 02 BC
F00:2013                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E7C:  69 00 02 B8
F00:2014                   
F00:2015                   move.l #$FFFFF000,d1  
               S06:00001E80:  22 3C FF FF F0 00
F00:2016                   cmpi.b #$00,d1
               S06:00001E86:  0C 01 00 00
F00:2017                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E8A:  66 00 02 AA
F00:2018                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E8E:  6B 00 02 A6
F00:2019                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E92:  65 00 02 A2
F00:2020                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E96:  69 00 02 9E
F00:2021                   
F00:2022                   move.l #$FFFFFF02,d2  
               S06:00001E9A:  24 3C FF FF FF 02
F00:2023                   cmpi.b #$FF,d2
               S06:00001EA0:  0C 02 00 FF
F00:2024                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EA4:  67 00 02 90
F00:2025                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EA8:  6B 00 02 8C
F00:2026                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EAC:  64 00 02 88
F00:2027                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EB0:  69 00 02 84
F00:2028                       
F00:2029                   move.l #$FFFFFF7F,d3  
               S06:00001EB4:  26 3C FF FF FF 7F
F00:2030                   cmpi.b #$FF,d3
               S06:00001EBA:  0C 03 00 FF
F00:2031                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EBE:  67 00 02 76
F00:2032                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl  #FIXME
               S06:00001EC2:  6A 00 02 72
F00:2033                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EC6:  64 00 02 6E
F00:2034                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001ECA:  68 00 02 6A
F00:2035                
F00:2036                
F00:2037           ; REGISTER - WORD
F00:2038                   move.l #$FFFF8000,d0  
               S06:00001ECE:  20 3C FF FF 80 00
F00:2039                   cmpi.w #$8000,d0
               S06:00001ED4:  0C 40 80 00
F00:2040                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001ED8:  66 00 02 5C
F00:2041                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EDC:  6B 00 02 58
F00:2042                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EE0:  65 00 02 54
F00:2043                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EE4:  69 00 02 50
F00:2044                   
F00:2045                   move.l #$FFF00000,d1  
               S06:00001EE8:  22 3C FF F0 00 00
F00:2046                   cmpi.w #$0000,d1
               S06:00001EEE:  0C 41 00 00
F00:2047                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EF2:  66 00 02 42
F00:2048                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EF6:  6B 00 02 3E
F00:2049                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EFA:  65 00 02 3A
F00:2050                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EFE:  69 00 02 36
F00:2051                   
F00:2052                   move.l #$FFFF0002,d2  
               S06:00001F02:  24 3C FF FF 00 02
F00:2053                   cmpi.w #$FFFF,d2
               S06:00001F08:  0C 42 FF FF
F00:2054                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F0C:  67 00 02 28
F00:2055                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F10:  6B 00 02 24
F00:2056                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F14:  64 00 02 20
F00:2057                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F18:  69 00 02 1C
F00:2058                       
F00:2059                   move.l #$FFFF7FFF,d3  
               S06:00001F1C:  26 3C FF FF 7F FF
F00:2060                   cmpi.w #$FFFF,d3
               S06:00001F22:  0C 43 FF FF
F00:2061                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F26:  67 00 02 0E
F00:2062                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F2A:  6A 00 02 0A
F00:2063                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F2E:  64 00 02 06
F00:2064                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F32:  68 00 02 02
F00:2065                   
F00:2066           ; REGISTER - LONG
F00:2067                   move.l #$80000000,d0  
               S06:00001F36:  20 3C 80 00 00 00
F00:2068                   cmpi.l #$80000000,d0
               S06:00001F3C:  0C 80 80 00 00 00
F00:2069                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F42:  66 00 01 F2
F00:2070                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F46:  6B 00 01 EE
F00:2071                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F4A:  65 00 01 EA
F00:2072                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F4E:  69 00 01 E6
F00:2073                   
F00:2074                   move.l #$00000000,d1  
               S06:00001F52:  22 3C 00 00 00 00
F00:2075                   cmpi.l #$00000000,d1
               S06:00001F58:  0C 81 00 00 00 00
F00:2076                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F5E:  66 00 01 D6
F00:2077                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F62:  6B 00 01 D2
F00:2078                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F66:  65 00 01 CE
F00:2079                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F6A:  69 00 01 CA
F00:2080                   
F00:2081                   move.l #$00000002,d2  
               S06:00001F6E:  24 3C 00 00 00 02
F00:2082                   cmpi.l #$FFFFFFFF,d2
               S06:00001F74:  0C 82 FF FF FF FF
F00:2083                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F7A:  67 00 01 BA
F00:2084                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F7E:  6B 00 01 B6
F00:2085                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F82:  64 00 01 B2
F00:2086                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F86:  69 00 01 AE
F00:2087                       
F00:2088                   move.l #$7FFFFFFF,d3  
               S06:00001F8A:  26 3C 7F FF FF FF
F00:2089                   cmpi.l #$FFFFFFFF,d3
               S06:00001F90:  0C 83 FF FF FF FF
F00:2090                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F96:  67 00 01 9E
F00:2091                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F9A:  6A 00 01 9A
F00:2092                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F9E:  64 00 01 96
F00:2093                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FA2:  68 00 01 92
F00:2094                   
F00:2095                   
F00:2096                   
F00:2097       
F00:2098           ; EA=x(An,Dn) - BYTE
F00:2099                   move.l #$00000100,a0  
               S06:00001FA6:  20 7C 00 00 01 00
F00:2100                   move.l #$00000004,d7  
               S06:00001FAC:  2E 3C 00 00 00 04
F00:2101                   
F00:2102                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001FB2:  21 BC FF FF FF 80 70 0C
F00:2103                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001FBA:  21 BC FF FF FF 80 70 0C
F00:2104                   cmpi.b #$80,15(a0,d7)
               S06:00001FC2:  0C 30 00 80 70 0F
F00:2105                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FC8:  66 00 01 6C
F00:2106                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FCC:  6B 00 01 68
F00:2107                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FD0:  65 00 01 64
F00:2108                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FD4:  69 00 01 60
F00:2109                   
F00:2110                   move.l #$FFFFF000,12(a0,d7)
               S06:00001FD8:  21 BC FF FF F0 00 70 0C
F00:2111                   cmpi.b #$00,15(a0,d7)
               S06:00001FE0:  0C 30 00 00 70 0F
F00:2112                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FE6:  66 00 01 4E
F00:2113                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FEA:  6B 00 01 4A
F00:2114                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FEE:  65 00 01 46
F00:2115                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FF2:  69 00 01 42
F00:2116                   
F00:2117                   move.l #$FFFFFF02,12(a0,d7)
               S06:00001FF6:  21 BC FF FF FF 02 70 0C
F00:2118                   cmpi.b #$FF,15(a0,d7)
               S06:00001FFE:  0C 30 00 FF 70 0F
F00:2119                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002004:  67 00 01 30
F00:2120                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002008:  6B 00 01 2C
F00:2121                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000200C:  64 00 01 28
F00:2122                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002010:  69 00 01 24
F00:2123                       
F00:2124                   move.l #$FFFFFF7F,12(a0,d7)
               S06:00002014:  21 BC FF FF FF 7F 70 0C
F00:2125                   cmpi.b #$FF,15(a0,d7)
               S06:0000201C:  0C 30 00 FF 70 0F
F00:2126                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002022:  67 00 01 12
F00:2127                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002026:  6A 00 01 0E
F00:2128                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000202A:  64 00 01 0A
F00:2129                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000202E:  68 00 01 06
F00:2130                
F00:2131                
F00:2132           ; EA=x(An,Dn) - WORD
F00:2133                   move.l #$FFFF8000,12(a0,d7)
               S06:00002032:  21 BC FF FF 80 00 70 0C
F00:2134                   cmpi.w #$8000,14(a0,d7)
               S06:0000203A:  0C 70 80 00 70 0E
F00:2135                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002040:  66 00 00 F4
F00:2136                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002044:  6B 00 00 F0
F00:2137                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002048:  65 00 00 EC
F00:2138                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000204C:  69 00 00 E8
F00:2139                   
F00:2140                   move.l #$FFF00000,12(a0,d7)
               S06:00002050:  21 BC FF F0 00 00 70 0C
F00:2141                   cmpi.w #$0000,14(a0,d7)
               S06:00002058:  0C 70 00 00 70 0E
F00:2142                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000205E:  66 00 00 D6
F00:2143                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002062:  6B 00 00 D2
F00:2144                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002066:  65 00 00 CE
F00:2145                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000206A:  69 00 00 CA
F00:2146                   
F00:2147                   move.l #$FFFF0002,12(a0,d7)
               S06:0000206E:  21 BC FF FF 00 02 70 0C
F00:2148                   cmpi.w #$FFFF,14(a0,d7)
               S06:00002076:  0C 70 FF FF 70 0E
F00:2149                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000207C:  67 00 00 B8
F00:2150                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002080:  6B 00 00 B4
F00:2151                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002084:  64 00 00 B0
F00:2152                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002088:  69 00 00 AC
F00:2153                       
F00:2154                   move.l #$FFFF7FFF,12(a0,d7)
               S06:0000208C:  21 BC FF FF 7F FF 70 0C
F00:2155                   cmpi.w #$FFFF,14(a0,d7)
               S06:00002094:  0C 70 FF FF 70 0E
F00:2156                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000209A:  67 00 00 9A
F00:2157                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000209E:  6A 00 00 96
F00:2158                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020A2:  64 00 00 92
F00:2159                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020A6:  68 00 00 8E
F00:2160                   
F00:2161           ; EA=x(An,Dn) - LONG
F00:2162                   move.l #$80000000,12(a0,d7)
               S06:000020AA:  21 BC 80 00 00 00 70 0C
F00:2163                   cmpi.l #$80000000,12(a0,d7)
               S06:000020B2:  0C B0 80 00 00 00 70 0C
F00:2164                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020BA:  66 00 00 7A
F00:2165                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020BE:  6B 00 00 76
F00:2166                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020C2:  65 00 00 72
F00:2167                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020C6:  69 00 00 6E
F00:2168                   
F00:2169                   move.l #$00000000,12(a0,d7)
               S06:000020CA:  21 BC 00 00 00 00 70 0C
F00:2170                   cmpi.l #$00000000,12(a0,d7)
               S06:000020D2:  0C B0 00 00 00 00 70 0C
F00:2171                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020DA:  66 00 00 5A
F00:2172                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020DE:  6B 00 00 56
F00:2173                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020E2:  65 00 00 52
F00:2174                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020E6:  69 00 00 4E
F00:2175                   
F00:2176                   move.l #$00000002,12(a0,d7)
               S06:000020EA:  21 BC 00 00 00 02 70 0C
F00:2177                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:000020F2:  0C B0 FF FF FF FF 70 0C
F00:2178                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020FA:  67 00 00 3A
F00:2179                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020FE:  6B 00 00 36
F00:2180                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002102:  64 00 00 32
F00:2181                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002106:  69 00 00 2E
F00:2182                       
F00:2183                   move.l #$7FFFFFFF,12(a0,d7)
               S06:0000210A:  21 BC 7F FF FF FF 70 0C
F00:2184                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:00002112:  0C B0 FF FF FF FF 70 0C
F00:2185                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000211A:  67 00 00 1A
F00:2186                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000211E:  6A 00 00 16
F00:2187                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002122:  64 00 00 12
F00:2188                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs     
               S06:00002126:  68 00 00 0E
F00:2189                   
F00:2190                   movea #TESTSTATUS,a0
               S06:0000212A:  30 7C FF 00
F00:2191                   move.b #$1,$0d(a0)
               S06:0000212E:  11 7C 00 01 00 0D
F00:2192                   rts
               S06:00002134:  4E 75
F00:2193                   
F00:2194       CMP_I_FAIL:
F00:2195           movea #TESTSTATUS,a0
               S06:00002136:  30 7C FF 00
F00:2196           move.b #$2,$0d(a0)
               S06:0000213A:  11 7C 00 02 00 0D
F00:2197           rts
               S06:00002140:  4E 75
F00:2198         
F00:2199       ;-----------------------------------------------------------
F00:2200       ;-----------------------------------------------------------
F00:2201       ; OPCODE : ADD_I
F00:2202       ;-----------------------------------------------------------
F00:2203       ;-----------------------------------------------------------
F00:2204       op_ADD_I: 
F00:2205           
F00:2206           ; EA = Dn  - Byte
F00:2207                   move.l #$12345678,d0      ; populate test data
               S06:00002142:  20 3C 12 34 56 78
F00:2208                   addi.b #0,d0                          
               S06:00002148:  06 00 00 00
F00:2209                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000214C:  67 00 02 24
F00:2210                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002150:  6B 00 02 20
F00:2211                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002154:  65 00 02 1C
F00:2212                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002158:  69 00 02 18
F00:2213                   addi.b #$10,d0                            
               S06:0000215C:  06 00 00 10
F00:2214                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002160:  67 00 02 10
F00:2215                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002164:  6A 00 02 0C
F00:2216                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002168:  65 00 02 08
F00:2217                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000216C:  68 00 02 04
F00:2218                   addi.b #$A5,d0                            
               S06:00002170:  06 00 00 A5
F00:2219                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002174:  67 00 01 FC
F00:2220                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002178:  6B 00 01 F8
F00:2221                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000217C:  64 00 01 F4
F00:2222                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002180:  68 00 01 F0
F00:2223                   cmpi.b #$2D,d0                            
               S06:00002184:  0C 00 00 2D
F00:2224                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002188:  66 00 01 E8
F00:2225                   
F00:2226           ; EA = Dn  - WORD
F00:2227                   move.l #$12345678,d0      ; populate test data
               S06:0000218C:  20 3C 12 34 56 78
F00:2228                   addi.w #0,d0                          
               S06:00002192:  06 40 00 00
F00:2229                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002196:  67 00 01 DA
F00:2230                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000219A:  6B 00 01 D6
F00:2231                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000219E:  65 00 01 D2
F00:2232                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000021A2:  69 00 01 CE
F00:2233                   addi.w #$7000,d0                          
               S06:000021A6:  06 40 70 00
F00:2234                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021AA:  67 00 01 C6
F00:2235                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021AE:  6A 00 01 C2
F00:2236                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000021B2:  65 00 01 BE
F00:2237                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000021B6:  68 00 01 BA
F00:2238                   addi.w #$A55A,d0                          
               S06:000021BA:  06 40 A5 5A
F00:2239                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021BE:  67 00 01 B2
F00:2240                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021C2:  6B 00 01 AE
F00:2241                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000021C6:  64 00 01 AA
F00:2242                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000021CA:  68 00 01 A6
F00:2243                   cmpi.w #$6BD2,d0                          
               S06:000021CE:  0C 40 6B D2
F00:2244                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021D2:  66 00 01 9E
F00:2245           
F00:2246           ; EA = Dn  - LONG
F00:2247                   move.l #$12345678,d0      ; populate test data
               S06:000021D6:  20 3C 12 34 56 78
F00:2248                   addi.l #0,d0                          
               S06:000021DC:  06 80 00 00 00 00
F00:2249                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021E2:  67 00 01 8E
F00:2250                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021E6:  6B 00 01 8A
F00:2251                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000021EA:  65 00 01 86
F00:2252                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000021EE:  69 00 01 82
F00:2253                   addi.l #$F0000000,d0                          
               S06:000021F2:  06 80 F0 00 00 00
F00:2254                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021F8:  67 00 01 78
F00:2255                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021FC:  6B 00 01 74
F00:2256                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002200:  64 00 01 70
F00:2257                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002204:  69 00 01 6C
F00:2258                   addi.l #$855AA55A,d0                          
               S06:00002208:  06 80 85 5A A5 5A
F00:2259                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000220E:  67 00 01 62
F00:2260                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002212:  6A 00 01 5E
F00:2261                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002216:  65 00 01 5A
F00:2262                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000221A:  69 00 01 56
F00:2263                   addi.l #$A0000000,d0                          
               S06:0000221E:  06 80 A0 00 00 00
F00:2264                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002224:  68 00 01 4C
F00:2265                   cmpi.l #$278EFBD2,d0                          
               S06:00002228:  0C 80 27 8E FB D2
F00:2266                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000222E:  66 00 01 42
F00:2267           
F00:2268           
F00:2269       
F00:2270           ; EA = x.L  - Byte
F00:2271                   move.l #$000F0100,a0      ; populate test data
               S06:00002232:  20 7C 00 0F 01 00
F00:2272                   move.l #$12345678,(a0)     ; populate test data
               S06:00002238:  20 BC 12 34 56 78
F00:2273                   addi.b #0,$000F0103                           
               S06:0000223E:  06 39 00 00 00 0F 01 03
F00:2274                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002246:  67 00 01 2A
F00:2275                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000224A:  6B 00 01 26
F00:2276                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000224E:  65 00 01 22
F00:2277                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002252:  69 00 01 1E
F00:2278                   addi.b #$10,$000F0103                         
               S06:00002256:  06 39 00 10 00 0F 01 03
F00:2279                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000225E:  67 00 01 12
F00:2280                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002262:  6A 00 01 0E
F00:2281                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002266:  65 00 01 0A
F00:2282                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000226A:  68 00 01 06
F00:2283                   addi.b #$A5,$000F0103                         
               S06:0000226E:  06 39 00 A5 00 0F 01 03
F00:2284                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002276:  67 00 00 FA
F00:2285                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000227A:  6B 00 00 F6
F00:2286                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000227E:  64 00 00 F2
F00:2287                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002282:  68 00 00 EE
F00:2288                   cmpi.b #$2D,$000F0103                         
               S06:00002286:  0C 39 00 2D 00 0F 01 03
F00:2289                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000228E:  66 00 00 E2
F00:2290                   
F00:2291           ; EA = x.L- WORD
F00:2292                   move.l #$000F0100,a0      ; populate test data
               S06:00002292:  20 7C 00 0F 01 00
F00:2293                   move.l #$12345678,(a0)     ; populate test data
               S06:00002298:  20 BC 12 34 56 78
F00:2294                   addi.w #0,$000F0100                           
               S06:0000229E:  06 79 00 00 00 0F 01 00
F00:2295                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022A6:  67 00 00 CA
F00:2296                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022AA:  6B 00 00 C6
F00:2297                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000022AE:  65 00 00 C2
F00:2298                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000022B2:  69 00 00 BE
F00:2299                   addi.w #$7000,$000F0100                           
               S06:000022B6:  06 79 70 00 00 0F 01 00
F00:2300                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022BE:  67 00 00 B2
F00:2301                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022C2:  6A 00 00 AE
F00:2302                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000022C6:  65 00 00 AA
F00:2303                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000022CA:  68 00 00 A6
F00:2304                   addi.w #$A55A,$000F0100                           
               S06:000022CE:  06 79 A5 5A 00 0F 01 00
F00:2305                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022D6:  67 00 00 9A
F00:2306                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022DA:  6B 00 00 96
F00:2307                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000022DE:  64 00 00 92
F00:2308                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000022E2:  68 00 00 8E
F00:2309                   cmpi.w #$278E,$000F0100                           
               S06:000022E6:  0C 79 27 8E 00 0F 01 00
F00:2310                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022EE:  66 00 00 82
F00:2311           
F00:2312           ; EA = x.L- LONG
F00:2313                   move.l #$12345678,$000F0100  ; populate test data
               S06:000022F2:  23 FC 12 34 56 78 00 0F 01 00
F00:2314                   addi.l #0,$000F0100                           
               S06:000022FC:  06 B9 00 00 00 00 00 0F 01 00
F00:2315                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002306:  67 00 00 6A
F00:2316                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000230A:  6B 00 00 66
F00:2317                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000230E:  65 00 00 62
F00:2318                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002312:  69 00 00 5E
F00:2319                   addi.l #$F0000000,$000F0100                           
               S06:00002316:  06 B9 F0 00 00 00 00 0F 01 00
F00:2320                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002320:  67 00 00 50
F00:2321                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002324:  6B 00 00 4C
F00:2322                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002328:  64 00 00 48
F00:2323                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000232C:  69 00 00 44
F00:2324                   addi.l #$855AA55A,$000F0100                           
               S06:00002330:  06 B9 85 5A A5 5A 00 0F 01 00
F00:2325                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000233A:  67 00 00 36
F00:2326                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000233E:  6A 00 00 32
F00:2327                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002342:  65 00 00 2E
F00:2328                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002346:  69 00 00 2A
F00:2329                   addi.l #$A0000000,$000F0100                           
               S06:0000234A:  06 B9 A0 00 00 00 00 0F 01 00
F00:2330                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002354:  68 00 00 1C
F00:2331                   cmpi.l #$278EFBD2,$000F0100                           
               S06:00002358:  0C B9 27 8E FB D2 00 0F 01 00
F00:2332                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002362:  66 00 00 0E
F00:2333           
F00:2334                   movea #TESTSTATUS,a0
               S06:00002366:  30 7C FF 00
F00:2335                   move.b #$1,$0e(a0)
               S06:0000236A:  11 7C 00 01 00 0E
F00:2336                   rts
               S06:00002370:  4E 75
F00:2337       
F00:2338       ADD_I_FAIL:
F00:2339           movea #TESTSTATUS,a0
               S06:00002372:  30 7C FF 00
F00:2340           move.b #$2,$0e(a0)
               S06:00002376:  11 7C 00 02 00 0E
F00:2341           rts
               S06:0000237C:  4E 75
F00:2342       
F00:2343       ;-----------------------------------------------------------
F00:2344       ;-----------------------------------------------------------
F00:2345       ; OPCODE : SUB_I
F00:2346       ;-----------------------------------------------------------
F00:2347       ;-----------------------------------------------------------
F00:2348       op_SUB_I: 
F00:2349           
F00:2350           ; EA = Dn  - Byte
F00:2351                   move.l #$12345678,d0      ; populate test data
               S06:0000237E:  20 3C 12 34 56 78
F00:2352                   subi.b #0,d0                          
               S06:00002384:  04 00 00 00
F00:2353                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002388:  67 00 02 24
F00:2354                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000238C:  6B 00 02 20
F00:2355                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002390:  65 00 02 1C
F00:2356                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002394:  69 00 02 18
F00:2357                   subi.b #$10,d0                            
               S06:00002398:  04 00 00 10
F00:2358                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000239C:  67 00 02 10
F00:2359                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000023A0:  6B 00 02 0C
F00:2360                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000023A4:  65 00 02 08
F00:2361                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000023A8:  69 00 02 04
F00:2362                   subi.b #$A5,d0                            
               S06:000023AC:  04 00 00 A5
F00:2363                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000023B0:  67 00 01 FC
F00:2364                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000023B4:  6A 00 01 F8
F00:2365                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000023B8:  64 00 01 F4
F00:2366                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000023BC:  68 00 01 F0
F00:2367                   cmpi.b #$C3,d0                            
               S06:000023C0:  0C 00 00 C3
F00:2368                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000023C4:  66 00 01 E8
F00:2369                   
F00:2370           ; EA = Dn  - WORD
F00:2371                   move.l #$12345678,d0      ; populate test data
               S06:000023C8:  20 3C 12 34 56 78
F00:2372                   subi.w #0,d0                          
               S06:000023CE:  04 40 00 00
F00:2373                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000023D2:  67 00 01 DA
F00:2374                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000023D6:  6B 00 01 D6
F00:2375                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000023DA:  65 00 01 D2
F00:2376                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000023DE:  69 00 01 CE
F00:2377                   subi.w #$7000,d0                          
               S06:000023E2:  04 40 70 00
F00:2378                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000023E6:  67 00 01 C6
F00:2379                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000023EA:  6A 00 01 C2
F00:2380                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000023EE:  64 00 01 BE
F00:2381                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000023F2:  69 00 01 BA
F00:2382                   subi.w #$A55A,d0                          
               S06:000023F6:  04 40 A5 5A
F00:2383                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000023FA:  67 00 01 B2
F00:2384                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000023FE:  6B 00 01 AE
F00:2385                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002402:  65 00 01 AA
F00:2386                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002406:  69 00 01 A6
F00:2387                   cmpi.w #$411E,d0                          
               S06:0000240A:  0C 40 41 1E
F00:2388                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000240E:  66 00 01 9E
F00:2389           
F00:2390           ; EA = Dn  - LONG
F00:2391                   move.l #$12345678,d0      ; populate test data
               S06:00002412:  20 3C 12 34 56 78
F00:2392                   subi.l #0,d0                          
               S06:00002418:  04 80 00 00 00 00
F00:2393                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000241E:  67 00 01 8E
F00:2394                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002422:  6B 00 01 8A
F00:2395                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002426:  65 00 01 86
F00:2396                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000242A:  69 00 01 82
F00:2397                   subi.l #$F0000000,d0                          
               S06:0000242E:  04 80 F0 00 00 00
F00:2398                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002434:  67 00 01 78
F00:2399                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002438:  6B 00 01 74
F00:2400                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000243C:  64 00 01 70
F00:2401                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002440:  69 00 01 6C
F00:2402                   subi.l #$855AA55A,d0                          
               S06:00002444:  04 80 85 5A A5 5A
F00:2403                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000244A:  67 00 01 62
F00:2404                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000244E:  6A 00 01 5E
F00:2405                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002452:  64 00 01 5A
F00:2406                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002456:  68 00 01 56
F00:2407                   subi.l #$A0000000,d0                          
               S06:0000245A:  04 80 A0 00 00 00
F00:2408                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002460:  69 00 01 4C
F00:2409                   cmpi.l #$FCD9B11E,d0                          
               S06:00002464:  0C 80 FC D9 B1 1E
F00:2410                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000246A:  66 00 01 42
F00:2411           
F00:2412           
F00:2413       
F00:2414           ; EA = x.L  - Byte
F00:2415                   move.l #$000F0100,a0      ; populate test data
               S06:0000246E:  20 7C 00 0F 01 00
F00:2416                   move.l #$12345678,(a0)     ; populate test data
               S06:00002474:  20 BC 12 34 56 78
F00:2417                   subi.b #0,$000F0103                           
               S06:0000247A:  04 39 00 00 00 0F 01 03
F00:2418                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002482:  67 00 01 2A
F00:2419                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002486:  6B 00 01 26
F00:2420                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000248A:  65 00 01 22
F00:2421                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000248E:  69 00 01 1E
F00:2422                   subi.b #$10,$000F0103                         
               S06:00002492:  04 39 00 10 00 0F 01 03
F00:2423                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000249A:  67 00 01 12
F00:2424                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000249E:  6B 00 01 0E
F00:2425                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000024A2:  65 00 01 0A
F00:2426                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000024A6:  69 00 01 06
F00:2427                   subi.b #$A5,$000F0103                         
               S06:000024AA:  04 39 00 A5 00 0F 01 03
F00:2428                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000024B2:  67 00 00 FA
F00:2429                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000024B6:  6A 00 00 F6
F00:2430                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000024BA:  64 00 00 F2
F00:2431                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000024BE:  68 00 00 EE
F00:2432                   cmpi.b #$C3,$000F0103                         
               S06:000024C2:  0C 39 00 C3 00 0F 01 03
F00:2433                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000024CA:  66 00 00 E2
F00:2434                   
F00:2435           ; EA = x.L- WORD
F00:2436                   move.l #$000F0100,a0      ; populate test data
               S06:000024CE:  20 7C 00 0F 01 00
F00:2437                   move.l #$12345678,(a0)     ; populate test data
               S06:000024D4:  20 BC 12 34 56 78
F00:2438                   subi.w #0,$000F0100                           
               S06:000024DA:  04 79 00 00 00 0F 01 00
F00:2439                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000024E2:  67 00 00 CA
F00:2440                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000024E6:  6B 00 00 C6
F00:2441                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000024EA:  65 00 00 C2
F00:2442                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000024EE:  69 00 00 BE
F00:2443                   subi.w #$7000,$000F0100                           
               S06:000024F2:  04 79 70 00 00 0F 01 00
F00:2444                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000024FA:  67 00 00 B2
F00:2445                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000024FE:  6A 00 00 AE
F00:2446                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002502:  64 00 00 AA
F00:2447                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002506:  69 00 00 A6
F00:2448                   subi.w #$A55A,$000F0100                           
               S06:0000250A:  04 79 A5 5A 00 0F 01 00
F00:2449                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002512:  67 00 00 9A
F00:2450                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002516:  6A 00 00 96
F00:2451                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000251A:  64 00 00 92
F00:2452                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000251E:  69 00 00 8E
F00:2453                   cmpi.w #$FCDA,$000F0100                           
               S06:00002522:  0C 79 FC DA 00 0F 01 00
F00:2454                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000252A:  66 00 00 82
F00:2455           
F00:2456           ; EA = x.L- LONG
F00:2457                   move.l #$12345678,$000F0100  ; populate test data
               S06:0000252E:  23 FC 12 34 56 78 00 0F 01 00
F00:2458                   subi.l #0,$000F0100                           
               S06:00002538:  04 B9 00 00 00 00 00 0F 01 00
F00:2459                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002542:  67 00 00 6A
F00:2460                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002546:  6B 00 00 66
F00:2461                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000254A:  65 00 00 62
F00:2462                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000254E:  69 00 00 5E
F00:2463                   subi.l #$F0000000,$000F0100                           
               S06:00002552:  04 B9 F0 00 00 00 00 0F 01 00
F00:2464                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000255C:  67 00 00 50
F00:2465                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002560:  6B 00 00 4C
F00:2466                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002564:  64 00 00 48
F00:2467                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002568:  69 00 00 44
F00:2468                   subi.l #$855AA55A,$000F0100                           
               S06:0000256C:  04 B9 85 5A A5 5A 00 0F 01 00
F00:2469                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002576:  67 00 00 36
F00:2470                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000257A:  6A 00 00 32
F00:2471                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000257E:  64 00 00 2E
F00:2472                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002582:  68 00 00 2A
F00:2473                   subi.l #$A0000000,$000F0100                           
               S06:00002586:  04 B9 A0 00 00 00 00 0F 01 00
F00:2474                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002590:  69 00 00 1C
F00:2475                   cmpi.l #$FCD9B11E,$000F0100                           
               S06:00002594:  0C B9 FC D9 B1 1E 00 0F 01 00
F00:2476                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000259E:  66 00 00 0E
F00:2477                   
F00:2478                   movea #TESTSTATUS,a0
               S06:000025A2:  30 7C FF 00
F00:2479                   move.b #$1,$0f(a0)
               S06:000025A6:  11 7C 00 01 00 0F
F00:2480                   rts
               S06:000025AC:  4E 75
F00:2481           
F00:2482       SUB_I_FAIL:
F00:2483           movea #TESTSTATUS,a0
               S06:000025AE:  30 7C FF 00
F00:2484           move.b #$2,$0f(a0) 
               S06:000025B2:  11 7C 00 02 00 0F
F00:2485           rts
               S06:000025B8:  4E 75
F00:2486       ;-----------------------------------------------------------
F00:2487       ;-----------------------------------------------------------
F00:2488       ; OPCODE : MOVE
F00:2489       ;-----------------------------------------------------------
F00:2490       ;-----------------------------------------------------------
F00:2491       op_MOVE: 
F00:2492                   move.l #$11223344,d0
               S06:000025BA:  20 3C 11 22 33 44
F00:2493                   move.l #$55667788,d1
               S06:000025C0:  22 3C 55 66 77 88
F00:2494                   move.l #$8899aabb,d2
               S06:000025C6:  24 3C 88 99 AA BB
F00:2495                   move.l #$ccddeeff,d3
               S06:000025CC:  26 3C CC DD EE FF
F00:2496                   move.l #$00000000,d4
               S06:000025D2:  28 3C 00 00 00 00
F00:2497                   move.l #$00000000,d5
               S06:000025D8:  2A 3C 00 00 00 00
F00:2498                   move.l #$00000000,d6
               S06:000025DE:  2C 3C 00 00 00 00
F00:2499                   move.l #$00000000,d7         
               S06:000025E4:  2E 3C 00 00 00 00
F00:2500                   move.l #$44332211,a0
               S06:000025EA:  20 7C 44 33 22 11
F00:2501                   move.l #$88776655,a1
               S06:000025F0:  22 7C 88 77 66 55
F00:2502                   move.l #$bbaa9988,a2
               S06:000025F6:  24 7C BB AA 99 88
F00:2503                   move.l #$ffeeddcc,a3
               S06:000025FC:  26 7C FF EE DD CC
F00:2504                   
F00:2505                   move.b d0,d4              ; BYTE - DATA REGISTER
               S06:00002602:  18 00
F00:2506                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002604:  67 00 02 7E
F00:2507                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002608:  6B 00 02 7A
F00:2508                   cmpi.l #$00000044,d4                          
               S06:0000260C:  0C 84 00 00 00 44
F00:2509                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002612:  66 00 02 70
F00:2510               
F00:2511                   move.w d1,d5              ; WORD - DATA REGISTER
               S06:00002616:  3A 01
F00:2512                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002618:  67 00 02 6A
F00:2513                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000261C:  6B 00 02 66
F00:2514                   cmpi.l #$00007788,d5                          
               S06:00002620:  0C 85 00 00 77 88
F00:2515                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002626:  66 00 02 5C
F00:2516               
F00:2517                   move.l d2,d6              ; LONG - DATA REGISTER
               S06:0000262A:  2C 02
F00:2518                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000262C:  67 00 02 56
F00:2519                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002630:  6A 00 02 52
F00:2520                   cmpi.l #$8899aabb,d6                          
               S06:00002634:  0C 86 88 99 AA BB
F00:2521                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000263A:  66 00 02 48
F00:2522       
F00:2523                   move.w a1,d5              ; WORD - ADDRESS REGISTER
               S06:0000263E:  3A 09
F00:2524                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002640:  67 00 02 42
F00:2525                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002644:  6B 00 02 3E
F00:2526                   cmpi.l #$00006655,d5                          
               S06:00002648:  0C 85 00 00 66 55
F00:2527                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000264E:  66 00 02 34
F00:2528               
F00:2529                   move.l a2,d6              ; LONG - ADDRESS REGISTER
               S06:00002652:  2C 0A
F00:2530                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002654:  67 00 02 2E
F00:2531                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002658:  6A 00 02 2A
F00:2532                   cmpi.l #$bbaa9988,d6                         
               S06:0000265C:  0C 86 BB AA 99 88
F00:2533                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002662:  66 00 02 20
F00:2534                   
F00:2535           
F00:2536                   movea.w d2,a4             ; WORD - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:00002666:  38 42
F00:2537                   cmpa.l d2,a4                          
               S06:00002668:  B9 C2
F00:2538                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
               S06:0000266A:  67 00 02 18
F00:2539               
F00:2540                   movea.l d1,a5             ; LONG - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:0000266E:  2A 41
F00:2541                   cmpa.l d1,a5                         
               S06:00002670:  BB C1
F00:2542                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002672:  66 00 02 10
F00:2543               
F00:2544       
F00:2545       
F00:2546         ; Too mamy EA combinations to test,so we focus on a few of the more complicted EA's 
F00:2547         
F00:2548                   move.l #$11223344,d0
               S06:00002676:  20 3C 11 22 33 44
F00:2549                   move.l #$00010100,d1
               S06:0000267C:  22 3C 00 01 01 00
F00:2550                   move.l #$8899aabb,d2
               S06:00002682:  24 3C 88 99 AA BB
F00:2551                   move.l #$00000001,d3
               S06:00002688:  26 3C 00 00 00 01
F00:2552                   move.l #$00000000,d4
               S06:0000268E:  28 3C 00 00 00 00
F00:2553                   move.l #$00000000,d5
               S06:00002694:  2A 3C 00 00 00 00
F00:2554                   move.l #$00000000,d6
               S06:0000269A:  2C 3C 00 00 00 00
F00:2555                   move.l #$00000000,d7         
               S06:000026A0:  2E 3C 00 00 00 00
F00:2556                   move.l #$00000000,a0
               S06:000026A6:  20 7C 00 00 00 00
F00:2557                   move.l #$00010100,a1
               S06:000026AC:  22 7C 00 01 01 00
F00:2558       
F00:2559           ; x(An,AL) --> x.L
F00:2560                   move.b #$5A,4(a0,a1.l)    ; BYTE 
               S06:000026B2:  11 BC 00 5A 98 04
F00:2561                   lea 4(a0,a1.l),a3    
               S06:000026B8:  47 F0 98 04
F00:2562                   move.b 4(a0,a1.l),$00010105    
               S06:000026BC:  13 F0 98 04 00 01 01 05
F00:2563                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000026C4:  67 00 01 BE
F00:2564                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000026C8:  6B 00 01 BA
F00:2565                   cmpi.b #$5A,5(a0,a1.l)                            
               S06:000026CC:  0C 30 00 5A 98 05
F00:2566                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000026D2:  66 00 01 B0
F00:2567                       
F00:2568           ; x.L --> n(An,Dw)
F00:2569       MOVE2:      move.b  $00010105,7(a0,d1.w)    ; BYTE  
               S06:000026D6:  11 B9 00 01 01 05 10 07
F00:2570                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000026DE:  67 00 01 A4
F00:2571                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000026E2:  6B 00 01 A0
F00:2572                   cmpi.b #$5A,7(a0,d1.w)                            
               S06:000026E6:  0C 30 00 5A 10 07
F00:2573                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000026EC:  66 00 01 96
F00:2574                       
F00:2575           ; x(PC,Ds) --> x.w
F00:2576                   move.b  MOVE1(pc,d3),$0100 ; BYTE  
               S06:000026F0:  13 FB 30 7E 00 00 01 00
F00:2577                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000026F8:  67 00 01 8A
F00:2578                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000026FC:  6A 00 01 86
F00:2579                   cmpi.b #$B9,1+MOVE2                            
               S06:00002700:  0C 39 00 B9 00 00 26 D7
F00:2580                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002708:  66 00 01 7A
F00:2581                           
F00:2582           ; #x -->    n(An,AL)
F00:2583                   move.b  #$78,7(a0,d1.w)    ; BYTE  
               S06:0000270C:  11 BC 00 78 10 07
F00:2584                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002712:  67 00 01 70
F00:2585                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002716:  6B 00 01 6C
F00:2586                   cmpi.b #$78,7(a0,d1.w)                         
               S06:0000271A:  0C 30 00 78 10 07
F00:2587                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002720:  66 00 01 62
F00:2588               
F00:2589                   move.l #$11223344,d0
               S06:00002724:  20 3C 11 22 33 44
F00:2590                   move.l #$00010100,d1
               S06:0000272A:  22 3C 00 01 01 00
F00:2591                   move.l #$8899aabb,d2
               S06:00002730:  24 3C 88 99 AA BB
F00:2592                   move.l #$00000002,d3
               S06:00002736:  26 3C 00 00 00 02
F00:2593                   moveq #$00,d4
               S06:0000273C:  78 00
F00:2594                   moveq #$00,d5
               S06:0000273E:  7A 00
F00:2595                   moveq #$00,d6
               S06:00002740:  7C 00
F00:2596                   moveq #$00,d7         
               S06:00002742:  7E 00
F00:2597                   suba.l a0,a0
               S06:00002744:  91 C8
F00:2598                   move.l #$00010100,a1
               S06:00002746:  22 7C 00 01 01 00
F00:2599                   
F00:2600           ; x(An,AL) --> x.L
F00:2601                   move.w #$5A5A,4(a0,a1.l)    ; WORD  
               S06:0000274C:  31 BC 5A 5A 98 04
F00:2602                   lea 4(a0,a1.l),a4    
               S06:00002752:  49 F0 98 04
F00:2603                   move.w 4(a0,a1.l),$00010104    
               S06:00002756:  33 F0 98 04 00 01 01 04
F00:2604                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000275E:  67 00 01 24
F00:2605                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002762:  6B 00 01 20
F00:2606                   cmpi.w #$5A5A,4(a0,a1.l)                          
               S06:00002766:  0C 70 5A 5A 98 04
F00:2607                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000276C:  66 00 01 16
F00:2608                       
F00:2609           ; x.L --> n(An,Dw)
F00:2610       MOVE1:      move.w  $00010104,6(a0,d1.w)    ; WORD  
               S06:00002770:  31 B9 00 01 01 04 10 06
F00:2611                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002778:  67 00 01 0A
F00:2612                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000277C:  6B 00 01 06
F00:2613                   cmpi.w #$5A5A,6(a0,d1.w)                          
               S06:00002780:  0C 70 5A 5A 10 06
F00:2614                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002786:  66 00 00 FC
F00:2615                       
F00:2616           ; x(PC,Ds) --> x.w
F00:2617                   move.w  MOVE1(pc,d3),$0100 ; WORD  
               S06:0000278A:  33 FB 30 E4 00 00 01 00
F00:2618                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002792:  67 00 00 F0
F00:2619                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002796:  6B 00 00 EC
F00:2620                   cmpi.w #$6700,8+MOVE1                 
               S06:0000279A:  0C 79 67 00 00 00 27 78
F00:2621                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000027A2:  66 00 00 E0
F00:2622                           
F00:2623           ; #x -->    n(An,AL)
F00:2624                   move.w  #$7878,6(a0,d1.w)    ; WORD  
               S06:000027A6:  31 BC 78 78 10 06
F00:2625                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000027AC:  67 00 00 D6
F00:2626                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000027B0:  6B 00 00 D2
F00:2627                   cmpi.w #$7878,6(a0,d1.w)                           
               S06:000027B4:  0C 70 78 78 10 06
F00:2628                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000027BA:  66 00 00 C8
F00:2629               
F00:2630       ; ---
F00:2631               
F00:2632                   move.l #$11223344,d0
               S06:000027BE:  20 3C 11 22 33 44
F00:2633                   move.l #$00010100,d1
               S06:000027C4:  22 3C 00 01 01 00
F00:2634                   move.l #$8899aabb,d2
               S06:000027CA:  24 3C 88 99 AA BB
F00:2635                   move.l #$00000002,d3
               S06:000027D0:  26 3C 00 00 00 02
F00:2636                   move.l #$00000000,d4
               S06:000027D6:  28 3C 00 00 00 00
F00:2637                   move.l #$00000000,d5
               S06:000027DC:  2A 3C 00 00 00 00
F00:2638                   move.l #$00000000,d6
               S06:000027E2:  2C 3C 00 00 00 00
F00:2639                   move.l #$00000000,d7         
               S06:000027E8:  2E 3C 00 00 00 00
F00:2640                   move.l #$00000000,a0
               S06:000027EE:  20 7C 00 00 00 00
F00:2641                   move.l #$00010100,a1
               S06:000027F4:  22 7C 00 01 01 00
F00:2642                   
F00:2643           ; x(An,AL) --> x.L
F00:2644                   move.l #$5A5A1234,4(a0,a1.l)    ; LONG  
               S06:000027FA:  21 BC 5A 5A 12 34 98 04
F00:2645                   lea 4(a0,a1.l),a4    
               S06:00002802:  49 F0 98 04
F00:2646                   move.l 4(a0,a1.l),$00010104    
               S06:00002806:  23 F0 98 04 00 01 01 04
F00:2647                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000280E:  67 00 00 74
F00:2648                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002812:  6B 00 00 70
F00:2649                   cmpi.l #$5A5A1234,4(a0,a1.l)                          
               S06:00002816:  0C B0 5A 5A 12 34 98 04
F00:2650                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000281E:  66 00 00 64
F00:2651                       
F00:2652           ; x.L --> n(An,Dw)
F00:2653       MOVE3:      move.l  $00010104,6(a0,d1.w)    ; LONG  
               S06:00002822:  21 B9 00 01 01 04 10 06
F00:2654                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000282A:  67 00 00 58
F00:2655                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000282E:  6B 00 00 54
F00:2656                   cmpi.l #$5A5A1234,6(a0,d1.w)                          
               S06:00002832:  0C B0 5A 5A 12 34 10 06
F00:2657                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000283A:  66 00 00 48
F00:2658                       
F00:2659           ; x(PC,Ds) --> x.w
F00:2660                   move.l  MOVE3(pc,d3),$0100 ; LONG  
               S06:0000283E:  23 FB 30 E2 00 00 01 00
F00:2661                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002846:  67 00 00 3C
F00:2662                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000284A:  6B 00 00 38
F00:2663                   cmpi.l #$67000058,8+MOVE3           
               S06:0000284E:  0C B9 67 00 00 58 00 00 28 2A
F00:2664                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002858:  66 00 00 2A
F00:2665                           
F00:2666           ; #x -->    n(An,AL)
F00:2667                   move.l  #$78782323,6(a0,d1.w)    ; LONG  
               S06:0000285C:  21 BC 78 78 23 23 10 06
F00:2668                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002864:  67 00 00 1E
F00:2669                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002868:  6B 00 00 1A
F00:2670                   cmpi.l #$78782323,6(a0,d1.w)                           
               S06:0000286C:  0C B0 78 78 23 23 10 06
F00:2671                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002874:  66 00 00 0E
F00:2672               
F00:2673       
F00:2674                movea #TESTSTATUS,a0
               S06:00002878:  30 7C FF 00
F00:2675                move.b #$1,$10(a0)        
               S06:0000287C:  11 7C 00 01 00 10
F00:2676                rts
               S06:00002882:  4E 75
F00:2677       
F00:2678       MOVE_FAIL:
F00:2679           movea #TESTSTATUS,a0
               S06:00002884:  30 7C FF 00
F00:2680           move.b #$2,$10(a0)
               S06:00002888:  11 7C 00 02 00 10
F00:2681           rts
               S06:0000288E:  4E 75
F00:2682       
F00:2683       ;-----------------------------------------------------------
F00:2684       ;-----------------------------------------------------------
F00:2685       ; OPCODE : MOVE_xxx_FLAGS
F00:2686       ;-----------------------------------------------------------
F00:2687       ;-----------------------------------------------------------
F00:2688       op_MOVE_xxx_FLAGS: 
F00:2689       
F00:2690           ; Move_To_SR
F00:2691           
F00:2692           ; Dn
F00:2693           
F00:2694                   move.w #$2FFF,d0
               S06:00002890:  30 3C 2F FF
F00:2695                   move d0,SR 
               S06:00002894:  46 C0
F00:2696                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002896:  6A 00 02 E0
F00:2697                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:0000289A:  66 00 02 DC
F00:2698                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000289E:  68 00 02 D8
F00:2699                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000028A2:  64 00 02 D4
F00:2700                   move.w #$2F00,d0
               S06:000028A6:  30 3C 2F 00
F00:2701                   move d0,CCR 
               S06:000028AA:  44 C0
F00:2702                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000028AC:  67 00 02 CA
F00:2703                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000028B0:  6B 00 02 C6
F00:2704                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000028B4:  69 00 02 C2
F00:2705                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000028B8:  65 00 02 BE
F00:2706           
F00:2707                   move.w #$2000,d0
               S06:000028BC:  30 3C 20 00
F00:2708                   move d0,SR 
               S06:000028C0:  46 C0
F00:2709                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000028C2:  67 00 02 B4
F00:2710                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000028C6:  6B 00 02 B0
F00:2711                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000028CA:  69 00 02 AC
F00:2712                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000028CE:  65 00 02 A8
F00:2713              
F00:2714           ; (An)
F00:2715                   move.l #$00000100,a0
               S06:000028D2:  20 7C 00 00 01 00
F00:2716                   move.w #$2FFF,(a0)
               S06:000028D8:  30 BC 2F FF
F00:2717                   move (a0),SR 
               S06:000028DC:  46 D0
F00:2718                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000028DE:  6A 00 02 98
F00:2719                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000028E2:  66 00 02 94
F00:2720                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000028E6:  68 00 02 90
F00:2721                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000028EA:  64 00 02 8C
F00:2722           
F00:2723                   move.w #$2000,(a0)
               S06:000028EE:  30 BC 20 00
F00:2724                   move (a0),SR 
               S06:000028F2:  46 D0
F00:2725                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000028F4:  67 00 02 82
F00:2726                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000028F8:  6B 00 02 7E
F00:2727                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000028FC:  69 00 02 7A
F00:2728                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002900:  65 00 02 76
F00:2729                   
F00:2730           ; (An)+
F00:2731                   move.l #$00000100,a0
               S06:00002904:  20 7C 00 00 01 00
F00:2732                   move.w #$2FFF,(a0)
               S06:0000290A:  30 BC 2F FF
F00:2733                   move (a0)+,SR 
               S06:0000290E:  46 D8
F00:2734                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002910:  6A 00 02 66
F00:2735                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002914:  66 00 02 62
F00:2736                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002918:  68 00 02 5E
F00:2737                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:0000291C:  64 00 02 5A
F00:2738           
F00:2739                   move.w #$2000,(a0)
               S06:00002920:  30 BC 20 00
F00:2740                   move (a0)+,SR 
               S06:00002924:  46 D8
F00:2741                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002926:  67 00 02 50
F00:2742                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000292A:  6B 00 02 4C
F00:2743                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:0000292E:  69 00 02 48
F00:2744                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002932:  65 00 02 44
F00:2745                        
F00:2746           ; -(An)
F00:2747                   move.l #$00000102,a0
               S06:00002936:  20 7C 00 00 01 02
F00:2748                   move.w #$2FFF,(a0)
               S06:0000293C:  30 BC 2F FF
F00:2749                   move (a0)+,SR 
               S06:00002940:  46 D8
F00:2750                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002942:  6A 00 02 34
F00:2751                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002946:  66 00 02 30
F00:2752                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000294A:  68 00 02 2C
F00:2753                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:0000294E:  64 00 02 28
F00:2754           
F00:2755                   move.w #$2000,(a0)
               S06:00002952:  30 BC 20 00
F00:2756                   move (a0)+,SR 
               S06:00002956:  46 D8
F00:2757                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002958:  67 00 02 1E
F00:2758                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000295C:  6B 00 02 1A
F00:2759                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002960:  69 00 02 16
F00:2760                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002964:  65 00 02 12
F00:2761                                   
F00:2762           ; n(An)
F00:2763                   move.l #$00000102,a0
               S06:00002968:  20 7C 00 00 01 02
F00:2764                   move.w #$2FFF,2(a0)
               S06:0000296E:  31 7C 2F FF 00 02
F00:2765                   move 2(a0),SR 
               S06:00002974:  46 E8 00 02
F00:2766                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002978:  6A 00 01 FE
F00:2767                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:0000297C:  66 00 01 FA
F00:2768                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002980:  68 00 01 F6
F00:2769                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002984:  64 00 01 F2
F00:2770           
F00:2771                   move.w #$2000,2(a0)
               S06:00002988:  31 7C 20 00 00 02
F00:2772                   move 2(a0),SR 
               S06:0000298E:  46 E8 00 02
F00:2773                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002992:  67 00 01 E4
F00:2774                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002996:  6B 00 01 E0
F00:2775                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:0000299A:  69 00 01 DC
F00:2776                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000299E:  65 00 01 D8
F00:2777                                           
F00:2778           ; n(An,Rn.l)
F00:2779                   move.l #$00000100,a0
               S06:000029A2:  20 7C 00 00 01 00
F00:2780                   move.l #$00000002,d0
               S06:000029A8:  20 3C 00 00 00 02
F00:2781                   move.w #$2FFF,2(a0,d0.l)
               S06:000029AE:  31 BC 2F FF 08 02
F00:2782                   move 2(a0,d0.l),SR 
               S06:000029B4:  46 F0 08 02
F00:2783                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000029B8:  6A 00 01 BE
F00:2784                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000029BC:  66 00 01 BA
F00:2785                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000029C0:  68 00 01 B6
F00:2786                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000029C4:  64 00 01 B2
F00:2787           
F00:2788                   move.w #$2000,2(a0,d0.l)
               S06:000029C8:  31 BC 20 00 08 02
F00:2789                   move 2(a0,d0.l),SR 
               S06:000029CE:  46 F0 08 02
F00:2790                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000029D2:  67 00 01 A4
F00:2791                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000029D6:  6B 00 01 A0
F00:2792                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000029DA:  69 00 01 9C
F00:2793                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000029DE:  65 00 01 98
F00:2794                                                      
F00:2795           ; x.W
F00:2796                   move.w #$2FFF,$0100
               S06:000029E2:  33 FC 2F FF 00 00 01 00
F00:2797                   move $0100,SR 
               S06:000029EA:  46 F9 00 00 01 00
F00:2798                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000029F0:  6A 00 01 86
F00:2799                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000029F4:  66 00 01 82
F00:2800                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000029F8:  68 00 01 7E
F00:2801                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000029FC:  64 00 01 7A
F00:2802           
F00:2803                   move.w #$2000,$0100
               S06:00002A00:  33 FC 20 00 00 00 01 00
F00:2804                   move $0100,SR 
               S06:00002A08:  46 F9 00 00 01 00
F00:2805                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002A0E:  67 00 01 68
F00:2806                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002A12:  6B 00 01 64
F00:2807                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002A16:  69 00 01 60
F00:2808                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002A1A:  65 00 01 5C
F00:2809                                                                
F00:2810           ; x.L
F00:2811                   move.w #$2FFF,$00010100
               S06:00002A1E:  33 FC 2F FF 00 01 01 00
F00:2812                   move $00010100,SR 
               S06:00002A26:  46 F9 00 01 01 00
F00:2813                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002A2C:  6A 00 01 4A
F00:2814                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002A30:  66 00 01 46
F00:2815                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002A34:  68 00 01 42
F00:2816                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002A38:  64 00 01 3E
F00:2817           
F00:2818       MOVE4:      move.w #$2000,$00010100
               S06:00002A3C:  33 FC 20 00 00 01 01 00
F00:2819                   move $00010100,SR 
               S06:00002A44:  46 F9 00 01 01 00
F00:2820                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002A4A:  67 00 01 2C
F00:2821                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002A4E:  6B 00 01 28
F00:2822                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002A52:  69 00 01 24
F00:2823                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002A56:  65 00 01 20
F00:2824                                                                          
F00:2825           ; x(PC)
F00:2826                   move MOVE4+2(pc),SR 
               S06:00002A5A:  46 FA FF E2
F00:2827                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002A5E:  67 00 01 18
F00:2828                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002A62:  6B 00 01 14
F00:2829                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002A66:  69 00 01 10
F00:2830                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002A6A:  65 00 01 0C
F00:2831                                                                          
F00:2832           ; x(PC,d0.l)
F00:2833                   move.l #$00000000,d0
               S06:00002A6E:  20 3C 00 00 00 00
F00:2834                   move MOVE4+2(pc,d0.l),SR 
               S06:00002A74:  46 FB 08 C8
F00:2835                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002A78:  67 00 00 FE
F00:2836                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002A7C:  6B 00 00 FA
F00:2837                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002A80:  69 00 00 F6
F00:2838                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002A84:  65 00 00 F2
F00:2839                   move MOVE4+2(pc,d0.l),CCR 
               S06:00002A88:  44 FB 08 B4
F00:2840                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002A8C:  67 00 00 EA
F00:2841                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002A90:  6B 00 00 E6
F00:2842                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002A94:  69 00 00 E2
F00:2843                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002A98:  65 00 00 DE
F00:2844                                                                          
F00:2845           ; #x
F00:2846                   move #$2FFF,SR 
               S06:00002A9C:  46 FC 2F FF
F00:2847                   bne MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002AA0:  66 00 00 D6
F00:2848                   bpl MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002AA4:  6A 00 00 D2
F00:2849                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002AA8:  68 00 00 CE
F00:2850                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002AAC:  64 00 00 CA
F00:2851                   
F00:2852                   
F00:2853                   
F00:2854        ; MOVE_From_SR
F00:2855       
F00:2856                   
F00:2857                   
F00:2858           ; Dn
F00:2859                   move #$275A,SR        ; Initial value
               S06:00002AB0:  46 FC 27 5A
F00:2860                   move SR,d0
               S06:00002AB4:  40 C0
F00:2861                   cmpi.w #$271A,d0
               S06:00002AB6:  0C 40 27 1A
F00:2862                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002ABA:  66 00 00 BC
F00:2863                        
F00:2864           ; (An)
F00:2865                   move.l #$00000100,a0
               S06:00002ABE:  20 7C 00 00 01 00
F00:2866                   move #$275A,SR        ; Initial value
               S06:00002AC4:  46 FC 27 5A
F00:2867                   move SR,(a0)
               S06:00002AC8:  40 D0
F00:2868                   cmpi.w #$271A,(a0)
               S06:00002ACA:  0C 50 27 1A
F00:2869                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002ACE:  66 00 00 A8
F00:2870                              
F00:2871           ; (An)+
F00:2872                   move.l #$00000100,a0
               S06:00002AD2:  20 7C 00 00 01 00
F00:2873                   move #$257A,SR        ; Initial value
               S06:00002AD8:  46 FC 25 7A
F00:2874                   move SR,(a0)+
               S06:00002ADC:  40 D8
F00:2875                   move.l #$00000100,a0
               S06:00002ADE:  20 7C 00 00 01 00
F00:2876                   cmpi.w #$251A,(a0)+
               S06:00002AE4:  0C 58 25 1A
F00:2877                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002AE8:  66 00 00 8E
F00:2878                                          
F00:2879           ; -(An)
F00:2880                   move.l #$00000102,a0
               S06:00002AEC:  20 7C 00 00 01 02
F00:2881                   move #$2766,SR        ; Initial value
               S06:00002AF2:  46 FC 27 66
F00:2882                   move SR,-(a0)
               S06:00002AF6:  40 E0
F00:2883                   move.l #$00000100,a0
               S06:00002AF8:  20 7C 00 00 01 00
F00:2884                   cmpi.w #$2706,(a0)
               S06:00002AFE:  0C 50 27 06
F00:2885                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002B02:  66 00 00 74
F00:2886                                                
F00:2887           ; x(An)
F00:2888                   move.l #$00000102,a0
               S06:00002B06:  20 7C 00 00 01 02
F00:2889                   move #$2733,SR        ; Initial value
               S06:00002B0C:  46 FC 27 33
F00:2890                   move SR,4(a0)
               S06:00002B10:  40 E8 00 04
F00:2891                   cmpi.w #$2713,4(a0)
               S06:00002B14:  0C 68 27 13 00 04
F00:2892                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002B1A:  66 00 00 5C
F00:2893                                                    
F00:2894           ; x(An,rn)
F00:2895                   move.l #$00000102,a0
               S06:00002B1E:  20 7C 00 00 01 02
F00:2896                   move.l #$00000004,d0
               S06:00002B24:  20 3C 00 00 00 04
F00:2897                   move #$275a,SR        ; Initial value
               S06:00002B2A:  46 FC 27 5A
F00:2898                   move SR,4(a0,d0.l)
               S06:00002B2E:  40 F0 08 04
F00:2899                   cmpi.w #$271a,4(a0,d0.l)
               S06:00002B32:  0C 70 27 1A 08 04
F00:2900                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002B38:  66 00 00 3E
F00:2901                                                               
F00:2902           ; x.W
F00:2903                   move #$2777,SR        ; Initial value
               S06:00002B3C:  46 FC 27 77
F00:2904                   move SR,$0102
               S06:00002B40:  40 F9 00 00 01 02
F00:2905                   cmpi.w #$2717,$0102
               S06:00002B46:  0C 79 27 17 00 00 01 02
F00:2906                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002B4E:  66 00 00 28
F00:2907                                                                    
F00:2908           ; x.L
F00:2909                   move #$2777,SR        ; Initial value
               S06:00002B52:  46 FC 27 77
F00:2910                   move SR,$10102
               S06:00002B56:  40 F9 00 01 01 02
F00:2911                   cmpi.w #$2717,$10102
               S06:00002B5C:  0C 79 27 17 00 01 01 02
F00:2912                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002B64:  66 00 00 12
F00:2913                   
F00:2914                   
F00:2915                   
F00:2916                   move #$2700,SR        ; Put flags back to initial value
               S06:00002B68:  46 FC 27 00
F00:2917       
F00:2918                   movea #TESTSTATUS,a0
               S06:00002B6C:  30 7C FF 00
F00:2919                   move.b #$1,$11(a0)
               S06:00002B70:  11 7C 00 01 00 11
F00:2920                   rts
               S06:00002B76:  4E 75
F00:2921       
F00:2922       MOVE_FLAGS_FAIL: 
F00:2923           movea #TESTSTATUS,a0
               S06:00002B78:  30 7C FF 00
F00:2924           move.b #$2,$11(a0)
               S06:00002B7C:  11 7C 00 02 00 11
F00:2925           rts
               S06:00002B82:  4E 75
F00:2926       
F00:2927       ;-----------------------------------------------------------
F00:2928       ;-----------------------------------------------------------
F00:2929       ; OPCODE : EXT
F00:2930       ;-----------------------------------------------------------
F00:2931       ;-----------------------------------------------------------
F00:2932       op_EXT: 
F00:2933       
F00:2934                   move.l #$0000007F,d0
               S06:00002B84:  20 3C 00 00 00 7F
F00:2935                   move.l #$00008FFF,d1
               S06:00002B8A:  22 3C 00 00 8F FF
F00:2936                   move.l #$00000000,d2
               S06:00002B90:  24 3C 00 00 00 00
F00:2937                   
F00:2938                   ext.w d0
               S06:00002B96:  48 80
F00:2939                   bmi EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002B98:  6B 00 00 36
F00:2940                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002B9C:  67 00 00 32
F00:2941                   cmpi.l #$0000007F,d0
               S06:00002BA0:  0C 80 00 00 00 7F
F00:2942                   bne EXT_FAIL;                   ; branch if Z set  
               S06:00002BA6:  66 00 00 28
F00:2943                   
F00:2944                   ext.l d1
               S06:00002BAA:  48 C1
F00:2945                   bpl EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002BAC:  6A 00 00 22
F00:2946                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002BB0:  67 00 00 1E
F00:2947                   cmpi.l #$FFFF8FFF,d1
               S06:00002BB4:  0C 81 FF FF 8F FF
F00:2948                   bne EXT_FAIL;                   ; branch if Z set  
               S06:00002BBA:  66 00 00 14
F00:2949                   
F00:2950                   ext.l d2
               S06:00002BBE:  48 C2
F00:2951                   bne EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002BC0:  66 00 00 0E
F00:2952       
F00:2953                   movea #TESTSTATUS,a0
               S06:00002BC4:  30 7C FF 00
F00:2954                   move.b #$1,$12(a0)
               S06:00002BC8:  11 7C 00 01 00 12
F00:2955                   rts
               S06:00002BCE:  4E 75
F00:2956       
F00:2957       EXT_FAIL: 
F00:2958           movea #TESTSTATUS,a0
               S06:00002BD0:  30 7C FF 00
F00:2959           move.b #$2,$12(a0)
               S06:00002BD4:  11 7C 00 02 00 12
F00:2960           rts
               S06:00002BDA:  4E 75
F00:2961                    
F00:2962       ;-----------------------------------------------------------
F00:2963       ;-----------------------------------------------------------
F00:2964       ; OPCODE : SWAP
F00:2965       ;-----------------------------------------------------------
F00:2966       ;-----------------------------------------------------------
F00:2967       op_SWAP: 
F00:2968       
F00:2969                   move.l #$12345678,d0
               S06:00002BDC:  20 3C 12 34 56 78
F00:2970                   
F00:2971                   swap d0
               S06:00002BE2:  48 40
F00:2972                   bmi SWAP_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002BE4:  6B 00 00 1C
F00:2973                   beq SWAP_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002BE8:  67 00 00 18
F00:2974                   cmpi.l #$56781234,d0
               S06:00002BEC:  0C 80 56 78 12 34
F00:2975                   bne SWAP_FAIL;                   ; branch if Z set  
               S06:00002BF2:  66 00 00 0E
F00:2976       
F00:2977                   movea #TESTSTATUS,a0
               S06:00002BF6:  30 7C FF 00
F00:2978                   move.b #$1,$13(a0)
               S06:00002BFA:  11 7C 00 01 00 13
F00:2979                   rts
               S06:00002C00:  4E 75
F00:2980       
F00:2981       SWAP_FAIL:
F00:2982           movea #TESTSTATUS,a0
               S06:00002C02:  30 7C FF 00
F00:2983           move.b #$2,$13(a0) 
               S06:00002C06:  11 7C 00 02 00 13
F00:2984           rts
               S06:00002C0C:  4E 75
F00:2985                    
F00:2986       ;-----------------------------------------------------------
F00:2987       ;-----------------------------------------------------------
F00:2988       ; OPCODE : LEA_PEA
F00:2989       ;-----------------------------------------------------------
F00:2990       ;-----------------------------------------------------------
F00:2991       op_LEAPEA: 
F00:2992       
F00:2993                   move.l #$00345678,a0
               S06:00002C0E:  20 7C 00 34 56 78
F00:2994                   move.l #$00000000,d4
               S06:00002C14:  28 3C 00 00 00 00
F00:2995                   
F00:2996           ; (An)      
F00:2997                   lea (a0),a6
               S06:00002C1A:  4D D0
F00:2998                   move.l a6,d0
               S06:00002C1C:  20 0E
F00:2999                   cmpi.l #$00345678,d0
               S06:00002C1E:  0C 80 00 34 56 78
F00:3000                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C24:  66 00 00 BE
F00:3001                   pea (a0)
               S06:00002C28:  48 50
F00:3002                   cmpi.l #$00345678,(a7)
               S06:00002C2A:  0C 97 00 34 56 78
F00:3003                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C30:  66 00 00 B2
F00:3004                   addq #4,a7            ; Restore Stack Pointer
               S06:00002C34:  58 4F
F00:3005                   
F00:3006           ; x(An)     
F00:3007                   lea 4(a0),a6
               S06:00002C36:  4D E8 00 04
F00:3008                   move.l a6,d0
               S06:00002C3A:  20 0E
F00:3009                   cmpi.l #$0034567C,d0
               S06:00002C3C:  0C 80 00 34 56 7C
F00:3010                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C42:  66 00 00 A0
F00:3011                   pea 4(a0)
               S06:00002C46:  48 68 00 04
F00:3012                   cmpi.l #$0034567C,(a7)
               S06:00002C4A:  0C 97 00 34 56 7C
F00:3013                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C50:  66 00 00 92
F00:3014                   addq #4,a7            ; Restore Stack Pointer         
               S06:00002C54:  58 4F
F00:3015       
F00:3016           ; x(An,Dn.l)        
F00:3017                   lea 4(a0,d4),a6
               S06:00002C56:  4D F0 40 04
F00:3018                   move.l a6,d0
               S06:00002C5A:  20 0E
F00:3019                   cmpi.l #$0034567C,d0
               S06:00002C5C:  0C 80 00 34 56 7C
F00:3020                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C62:  66 00 00 80
F00:3021                   pea 4(a0,d4.l)
               S06:00002C66:  48 70 48 04
F00:3022                   cmpi.l #$0034567C,(a7)
               S06:00002C6A:  0C 97 00 34 56 7C
F00:3023                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C70:  66 00 00 72
F00:3024                   addq #4,a7            ; Restore Stack Pointer
               S06:00002C74:  58 4F
F00:3025                   
F00:3026           ; x.W       
F00:3027                   lea $1234,a6
               S06:00002C76:  4D F9 00 00 12 34
F00:3028                   move.l a6,d0
               S06:00002C7C:  20 0E
F00:3029                   cmpi.w #$1234,d0
               S06:00002C7E:  0C 40 12 34
F00:3030                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C82:  66 00 00 60
F00:3031                   pea $1234
               S06:00002C86:  48 79 00 00 12 34
F00:3032                   cmpi.l #$00001234,(a7)
               S06:00002C8C:  0C 97 00 00 12 34
F00:3033                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002C92:  66 00 00 50
F00:3034                   addq #4,a7            ; Restore Stack Pointer
               S06:00002C96:  58 4F
F00:3035                  
F00:3036           ; x.L       
F00:3037                   lea $00345678,a6
               S06:00002C98:  4D F9 00 34 56 78
F00:3038                   move.l a6,d0
               S06:00002C9E:  20 0E
F00:3039                   cmp.l a6,d0
               S06:00002CA0:  B0 8E
F00:3040                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002CA2:  66 00 00 40
F00:3041                   pea $00345678
               S06:00002CA6:  48 79 00 34 56 78
F00:3042                   cmpi.l #$00345678,(a7)
               S06:00002CAC:  0C 97 00 34 56 78
F00:3043                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002CB2:  66 00 00 30
F00:3044                   addq #4,a7            ; Restore Stack Pointer
               S06:00002CB6:  58 4F
F00:3045                  
F00:3046           ; x(PC)     
F00:3047                   lea LEA1(pc),a6
               S06:00002CB8:  4D FA 00 0A
F00:3048                   move.l a6,d0
               S06:00002CBC:  20 0E
F00:3049                   cmp.l a6,d0
               S06:00002CBE:  B0 8E
F00:3050                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002CC0:  66 00 00 22
F00:3051       LEA1:       pea LEA1(pc)
               S06:00002CC4:  48 7A FF FE
F00:3052                   cmpi.l #$0000241E,(a7)
               S06:00002CC8:  0C 97 00 00 24 1E
F00:3053                   beq LEAPEA_FAIL;                   ; branch if Z clear  
               S06:00002CCE:  67 00 00 14
F00:3054                   addq #4,a7            ; Restore Stack Pointer
               S06:00002CD2:  58 4F
F00:3055       
F00:3056       
F00:3057       
F00:3058                 
F00:3059                   move #$2700,SR        ; Put flags back to initial value
               S06:00002CD4:  46 FC 27 00
F00:3060       
F00:3061                   movea #TESTSTATUS,a0
               S06:00002CD8:  30 7C FF 00
F00:3062                   move.b #$1,$14(a0)
               S06:00002CDC:  11 7C 00 01 00 14
F00:3063                   rts
               S06:00002CE2:  4E 75
F00:3064           
F00:3065       LEAPEA_FAIL:
F00:3066           movea #TESTSTATUS,a0
               S06:00002CE4:  30 7C FF 00
F00:3067           move.b #$2,$14(a0)
               S06:00002CE8:  11 7C 00 02 00 14
F00:3068           rts
               S06:00002CEE:  4E 75
F00:3069                    
F00:3070       ;-----------------------------------------------------------
F00:3071       ;-----------------------------------------------------------
F00:3072       ; OPCODE : LEA_TAS
F00:3073       ;-----------------------------------------------------------
F00:3074       ;-----------------------------------------------------------
F00:3075       op_TAS: 
F00:3076       
F00:3077           ; Test just one addressing mode
F00:3078       
F00:3079                   move.l #$00000100,a0
               S06:00002CF0:  20 7C 00 00 01 00
F00:3080                   
F00:3081           ; (An)      
F00:3082                   move.b #$00,(a0)
               S06:00002CF6:  10 BC 00 00
F00:3083                   bmi TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002CFA:  6B 00 00 34
F00:3084                   bne TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002CFE:  66 00 00 30
F00:3085                   tas (a0)
               S06:00002D02:  4A D0
F00:3086                   cmpi.b #$80,(a0)
               S06:00002D04:  0C 10 00 80
F00:3087                   bne TAS_FAIL;                   ; branch if Z set  
               S06:00002D08:  66 00 00 26
F00:3088                   move.b #$F5,(a0)
               S06:00002D0C:  10 BC 00 F5
F00:3089                   tas (a0)
               S06:00002D10:  4A D0
F00:3090                   bpl TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D12:  6A 00 00 1C
F00:3091                   beq TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D16:  67 00 00 18
F00:3092                   tas (a0)
               S06:00002D1A:  4A D0
F00:3093                   cmpi.b #$F5,(a0)
               S06:00002D1C:  0C 10 00 F5
F00:3094                   bne TAS_FAIL                   ; branch if Z set  
               S06:00002D20:  66 00 00 0E
F00:3095       
F00:3096                   movea #TESTSTATUS,a0
               S06:00002D24:  30 7C FF 00
F00:3097                   move.b #$1,$15(a0)
               S06:00002D28:  11 7C 00 01 00 15
F00:3098                   rts
               S06:00002D2E:  4E 75
F00:3099                   
F00:3100       TAS_FAIL: 
F00:3101           movea #TESTSTATUS,a0
               S06:00002D30:  30 7C FF 00
F00:3102           move.b #$2,$15(a0)
               S06:00002D34:  11 7C 00 02 00 15
F00:3103           rts
               S06:00002D3A:  4E 75
F00:3104       
F00:3105       ;-----------------------------------------------------------
F00:3106       ;-----------------------------------------------------------
F00:3107       ; OPCODE : LEA_TST
F00:3108       ;-----------------------------------------------------------
F00:3109       ;-----------------------------------------------------------
F00:3110       op_TST: 
F00:3111       
F00:3112           ; Test just one addressing mode
F00:3113       
F00:3114                   move.l #$00000100,a0
               S06:00002D3C:  20 7C 00 00 01 00
F00:3115                   
F00:3116           ; (An) - BYTE       
F00:3117                   move.b #$00,(a0)
               S06:00002D42:  10 BC 00 00
F00:3118                   tst.b (a0)
               S06:00002D46:  4A 10
F00:3119                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D48:  6B 00 00 5C
F00:3120                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D4C:  66 00 00 58
F00:3121                   move.b #$F5,(a0)
               S06:00002D50:  10 BC 00 F5
F00:3122                   tst.b (a0)
               S06:00002D54:  4A 10
F00:3123                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D56:  6A 00 00 4E
F00:3124                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D5A:  67 00 00 4A
F00:3125                   
F00:3126           ; (An) - WORD       
F00:3127                   move.w #$0000,(a0)
               S06:00002D5E:  30 BC 00 00
F00:3128                   tst.w (a0)
               S06:00002D62:  4A 50
F00:3129                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D64:  6B 00 00 40
F00:3130                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D68:  66 00 00 3C
F00:3131                   move.w #$F567,(a0)
               S06:00002D6C:  30 BC F5 67
F00:3132                   tst.w (a0)
               S06:00002D70:  4A 50
F00:3133                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D72:  6A 00 00 32
F00:3134                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D76:  67 00 00 2E
F00:3135                   
F00:3136           ; (An) - LONG       
F00:3137                   move.l #$00000000,(a0)
               S06:00002D7A:  20 BC 00 00 00 00
F00:3138                   tst.l (a0)
               S06:00002D80:  4A 90
F00:3139                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D82:  6B 00 00 22
F00:3140                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D86:  66 00 00 1E
F00:3141                   move.l #$F56789ab,(a0)
               S06:00002D8A:  20 BC F5 67 89 AB
F00:3142                   tst.l (a0)
               S06:00002D90:  4A 90
F00:3143                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002D92:  6A 00 00 12
F00:3144                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D96:  67 00 00 0E
F00:3145       
F00:3146                   movea #TESTSTATUS,a0
               S06:00002D9A:  30 7C FF 00
F00:3147                   move.b #$1,$16(a0)
               S06:00002D9E:  11 7C 00 01 00 16
F00:3148                   rts
               S06:00002DA4:  4E 75
F00:3149       
F00:3150       TST_FAIL:
F00:3151           movea #TESTSTATUS,a0
               S06:00002DA6:  30 7C FF 00
F00:3152           move.b #$2,$16(a0)
               S06:00002DAA:  11 7C 00 02 00 16
F00:3153           rts   
               S06:00002DB0:  4E 75
F00:3154            
F00:3155       ;-----------------------------------------------------------
F00:3156       ;-----------------------------------------------------------
F00:3157       ; OPCODE : LINKS
F00:3158       ;-----------------------------------------------------------
F00:3159       ;-----------------------------------------------------------
F00:3160       op_LINKS: 
F00:3161       
F00:3162                   move.l #$11223344,a0
               S06:00002DB2:  20 7C 11 22 33 44
F00:3163                   move.l #$11223344,d0
               S06:00002DB8:  20 3C 11 22 33 44
F00:3164                   link a0,#$0
               S06:00002DBE:  4E 50 00 00
F00:3165                   cmpi.l #$11223344,(a7)
               S06:00002DC2:  0C 97 11 22 33 44
F00:3166                   
F00:3167                   unlk a0
               S06:00002DC8:  4E 58
F00:3168                   cmp.l d0,a0
               S06:00002DCA:  B1 C0
F00:3169                   bne LINK_FAIL;                   ; branch if Z set  
               S06:00002DCC:  66 00 00 0E
F00:3170       
F00:3171                   movea #TESTSTATUS,a0
               S06:00002DD0:  30 7C FF 00
F00:3172                   move.b #$1,$17(a0)
               S06:00002DD4:  11 7C 00 01 00 17
F00:3173                   rts
               S06:00002DDA:  4E 75
F00:3174       
F00:3175       LINK_FAIL:
F00:3176           movea #TESTSTATUS,a0
               S06:00002DDC:  30 7C FF 00
F00:3177           move.b #$2,$17(a0)
               S06:00002DE0:  11 7C 00 02 00 17
F00:3178           rts
               S06:00002DE6:  4E 75
F00:3179       
F00:3180       ;-----------------------------------------------------------
F00:3181       ;-----------------------------------------------------------
F00:3182       ; OPCODE : MOVE_USP
F00:3183       ;-----------------------------------------------------------
F00:3184       ;-----------------------------------------------------------
F00:3185       op_MOVE_USP: 
F00:3186       
F00:3187                   move.l #$11223344,a0
               S06:00002DE8:  20 7C 11 22 33 44
F00:3188                   move USP,a3
               S06:00002DEE:  4E 6B
F00:3189                   move a0,USP
               S06:00002DF0:  4E 60
F00:3190                   move USP,a1
               S06:00002DF2:  4E 69
F00:3191                   cmp.l a0,a1
               S06:00002DF4:  B3 C8
F00:3192                   bne MOVE_USP_FAIL;                   ; branch if Z set  
               S06:00002DF6:  66 00 00 10
F00:3193                   move a3,USP
               S06:00002DFA:  4E 63
F00:3194       
F00:3195                   movea #TESTSTATUS,a0
               S06:00002DFC:  30 7C FF 00
F00:3196                   move.b #$1,$18(a0)
               S06:00002E00:  11 7C 00 01 00 18
F00:3197                   rts
               S06:00002E06:  4E 75
F00:3198       
F00:3199       MOVE_USP_FAIL:
F00:3200           movea #TESTSTATUS,a0
               S06:00002E08:  30 7C FF 00
F00:3201           move.b #$2,$18(a0)
               S06:00002E0C:  11 7C 00 02 00 18
F00:3202           rts
               S06:00002E12:  4E 75
F00:3203       
F00:3204       ;-----------------------------------------------------------
F00:3205       ;-----------------------------------------------------------
F00:3206       ; OPCODE : CHK
F00:3207       ;-----------------------------------------------------------
F00:3208       ;-----------------------------------------------------------
F00:3209       op_CHK: 
F00:3210                   move.w #$1122,d0
               S06:00002E14:  30 3C 11 22
F00:3211                   move.w #$1122,d1
               S06:00002E18:  32 3C 11 22
F00:3212                   chk d0,d1 
               S06:00002E1C:  43 80
F00:3213                   
F00:3214                   nop
               S06:00002E1E:  4E 71
F00:3215                   nop
               S06:00002E20:  4E 71
F00:3216                   
F00:3217                   move.w #$1122,d1
               S06:00002E22:  32 3C 11 22
F00:3218                   chk #$1122,d1 
               S06:00002E26:  43 BC 11 22
F00:3219                           
F00:3220           ; Comment out when using Easy68K
F00:3221                   move.w #$1122,d1
               S06:00002E2A:  32 3C 11 22
F00:3222                   chk #00122,d1 
               S06:00002E2E:  43 BC 00 7A
F00:3223                   cmp.l #$EEEE0006,d6
               S06:00002E32:  BC BC EE EE 00 06
F00:3224                   bne CHK_FAIL;                   ; branch if Z set  
               S06:00002E38:  66 00 00 22
F00:3225       
F00:3226                   move.w #$1122,d0      
               S06:00002E3C:  30 3C 11 22
F00:3227                   move.w #$8000,d1
               S06:00002E40:  32 3C 80 00
F00:3228                   chk d0,d1 
               S06:00002E44:  43 80
F00:3229                   cmp.l #$EEEE0006,d6
               S06:00002E46:  BC BC EE EE 00 06
F00:3230                   bne CHK_FAIL;                   ; branch if Z set  
               S06:00002E4C:  66 00 00 0E
F00:3231       
F00:3232                   movea #TESTSTATUS,a0
               S06:00002E50:  30 7C FF 00
F00:3233                   move.b #$1,$19(a0)
               S06:00002E54:  11 7C 00 01 00 19
F00:3234                   rts
               S06:00002E5A:  4E 75
F00:3235             
F00:3236       CHK_FAIL: 
F00:3237           movea #TESTSTATUS,a0
               S06:00002E5C:  30 7C FF 00
F00:3238           move.b #$2,$19(a0)
               S06:00002E60:  11 7C 00 02 00 19
F00:3239           rts
               S06:00002E66:  4E 75
F00:3240       
F00:3241       ;-----------------------------------------------------------
F00:3242       ;-----------------------------------------------------------
F00:3243       ; OPCODE : NEGS
F00:3244       ;-----------------------------------------------------------
F00:3245       ;-----------------------------------------------------------
F00:3246       op_NEGS: 
F00:3247       
F00:3248           ; NOT - BYTE
F00:3249                   move.l #$00000100,a0
               S06:00002E68:  20 7C 00 00 01 00
F00:3250                   move.l #$00000000,d0
               S06:00002E6E:  20 3C 00 00 00 00
F00:3251                   not.b d0
               S06:00002E74:  46 00
F00:3252                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002E76:  6A 00 05 10
F00:3253                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002E7A:  67 00 05 0C
F00:3254                   not.b d0
               S06:00002E7E:  46 00
F00:3255                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002E80:  6B 00 05 06
F00:3256                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002E84:  66 00 05 02
F00:3257                   cmpi.b #$00,d0
               S06:00002E88:  0C 00 00 00
F00:3258                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002E8C:  66 00 04 FA
F00:3259                   move.b #$80,(a0)
               S06:00002E90:  10 BC 00 80
F00:3260                   not.b (a0)
               S06:00002E94:  46 10
F00:3261                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002E96:  6B 00 04 F0
F00:3262                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002E9A:  67 00 04 EC
F00:3263                   not.b (a0)
               S06:00002E9E:  46 10
F00:3264                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002EA0:  6A 00 04 E6
F00:3265                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EA4:  67 00 04 E2
F00:3266                   cmpi.b #$80,(a0)
               S06:00002EA8:  0C 10 00 80
F00:3267                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EAC:  66 00 04 DA
F00:3268       
F00:3269           ; NOT - WORD
F00:3270                   move.l #$00000100,a0
               S06:00002EB0:  20 7C 00 00 01 00
F00:3271                   move.l #$00000000,d0
               S06:00002EB6:  20 3C 00 00 00 00
F00:3272                   not.w d0
               S06:00002EBC:  46 40
F00:3273                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002EBE:  6A 00 04 C8
F00:3274                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EC2:  67 00 04 C4
F00:3275                   not.w d0
               S06:00002EC6:  46 40
F00:3276                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002EC8:  6B 00 04 BE
F00:3277                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002ECC:  66 00 04 BA
F00:3278                   cmpi.w #$0000,d0
               S06:00002ED0:  0C 40 00 00
F00:3279                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002ED4:  66 00 04 B2
F00:3280                   move.w #$5a5a,(a0)
               S06:00002ED8:  30 BC 5A 5A
F00:3281                   not.w (a0)
               S06:00002EDC:  46 50
F00:3282                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002EDE:  6A 00 04 A8
F00:3283                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EE2:  67 00 04 A4
F00:3284                   not.w (a0)
               S06:00002EE6:  46 50
F00:3285                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002EE8:  6B 00 04 9E
F00:3286                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EEC:  67 00 04 9A
F00:3287                   cmpi.w #$5a5a,(a0)
               S06:00002EF0:  0C 50 5A 5A
F00:3288                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002EF4:  66 00 04 92
F00:3289       
F00:3290           ; NOT - LONG
F00:3291                   move.l #$00000100,a0
               S06:00002EF8:  20 7C 00 00 01 00
F00:3292                   move.l #$00000000,d0
               S06:00002EFE:  20 3C 00 00 00 00
F00:3293                   not.l d0
               S06:00002F04:  46 80
F00:3294                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002F06:  6A 00 04 80
F00:3295                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F0A:  67 00 04 7C
F00:3296                   not.l d0
               S06:00002F0E:  46 80
F00:3297                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002F10:  6B 00 04 76
F00:3298                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F14:  66 00 04 72
F00:3299                   cmpi.l #$00000000,d0
               S06:00002F18:  0C 80 00 00 00 00
F00:3300                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F1E:  66 00 04 68
F00:3301                   move.l #$5a5a1234,(a0)
               S06:00002F22:  20 BC 5A 5A 12 34
F00:3302                   not.l (a0)
               S06:00002F28:  46 90
F00:3303                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002F2A:  6A 00 04 5C
F00:3304                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F2E:  67 00 04 58
F00:3305                   not.l (a0)
               S06:00002F32:  46 90
F00:3306                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002F34:  6B 00 04 52
F00:3307                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F38:  67 00 04 4E
F00:3308                   cmpi.l #$5a5a1234,(a0)
               S06:00002F3C:  0C 90 5A 5A 12 34
F00:3309                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F42:  66 00 04 44
F00:3310       
F00:3311       ; ----- 
F00:3312       
F00:3313           ; NEG - BYTE
F00:3314                   move.l #$00000100,a0
               S06:00002F46:  20 7C 00 00 01 00
F00:3315                   move.l #$00000000,d0
               S06:00002F4C:  20 3C 00 00 00 00
F00:3316                   move.l #$00000080,d1
               S06:00002F52:  22 3C 00 00 00 80
F00:3317                   neg.b d0
               S06:00002F58:  44 00
F00:3318                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002F5A:  6B 00 04 2C
F00:3319                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002F5E:  66 00 04 28
F00:3320                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002F62:  65 00 04 24
F00:3321                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002F66:  69 00 04 20
F00:3322                   neg.b d1
               S06:00002F6A:  44 01
F00:3323                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002F6C:  6A 00 04 1A
F00:3324                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F70:  67 00 04 16
F00:3325                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002F74:  64 00 04 12
F00:3326                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002F78:  68 00 04 0E
F00:3327                   cmpi.b #$80,d1
               S06:00002F7C:  0C 01 00 80
F00:3328                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002F80:  66 00 04 06
F00:3329                   move.b #$7F,(a0)
               S06:00002F84:  10 BC 00 7F
F00:3330                   neg.b (a0)
               S06:00002F88:  44 10
F00:3331                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002F8A:  6A 00 03 FC
F00:3332                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F8E:  67 00 03 F8
F00:3333                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002F92:  64 00 03 F4
F00:3334                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002F96:  69 00 03 F0
F00:3335                   move.b #$F5,(a0)
               S06:00002F9A:  10 BC 00 F5
F00:3336                   neg.b (a0)
               S06:00002F9E:  44 10
F00:3337                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002FA0:  6B 00 03 E6
F00:3338                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FA4:  67 00 03 E2
F00:3339                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002FA8:  64 00 03 DE
F00:3340                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002FAC:  69 00 03 DA
F00:3341                   cmpi.b #$0B,(a0)
               S06:00002FB0:  0C 10 00 0B
F00:3342                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002FB4:  66 00 03 D2
F00:3343       
F00:3344       ; -----         
F00:3345       
F00:3346           ; NEG - WORD
F00:3347                   move.l #$00000100,a0
               S06:00002FB8:  20 7C 00 00 01 00
F00:3348                   move.l #$00000000,d0
               S06:00002FBE:  20 3C 00 00 00 00
F00:3349                   move.l #$00008000,d1
               S06:00002FC4:  22 3C 00 00 80 00
F00:3350                   neg.w d0
               S06:00002FCA:  44 40
F00:3351                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002FCC:  6B 00 03 BA
F00:3352                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002FD0:  66 00 03 B6
F00:3353                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002FD4:  65 00 03 B2
F00:3354                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002FD8:  69 00 03 AE
F00:3355                   neg.w d1
               S06:00002FDC:  44 41
F00:3356                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002FDE:  6A 00 03 A8
F00:3357                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FE2:  67 00 03 A4
F00:3358                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002FE6:  64 00 03 A0
F00:3359                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002FEA:  68 00 03 9C
F00:3360                   cmpi.w #$8000,d1
               S06:00002FEE:  0C 41 80 00
F00:3361                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002FF2:  66 00 03 94
F00:3362                   move.w #$7FFF,(a0)
               S06:00002FF6:  30 BC 7F FF
F00:3363                   neg.w (a0)
               S06:00002FFA:  44 50
F00:3364                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002FFC:  6A 00 03 8A
F00:3365                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003000:  67 00 03 86
F00:3366                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003004:  64 00 03 82
F00:3367                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00003008:  69 00 03 7E
F00:3368                   move.w #$F578,(a0)
               S06:0000300C:  30 BC F5 78
F00:3369                   neg.w (a0)
               S06:00003010:  44 50
F00:3370                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00003012:  6B 00 03 74
F00:3371                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003016:  67 00 03 70
F00:3372                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000301A:  64 00 03 6C
F00:3373                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:0000301E:  69 00 03 68
F00:3374                   cmpi.w #$0A88,(a0)
               S06:00003022:  0C 50 0A 88
F00:3375                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003026:  66 00 03 60
F00:3376       
F00:3377       ; -----         
F00:3378       
F00:3379           ; NEG - LONG
F00:3380                   move.l #$00000100,a0
               S06:0000302A:  20 7C 00 00 01 00
F00:3381                   move.l #$00000000,d0
               S06:00003030:  20 3C 00 00 00 00
F00:3382                   move.l #$80000000,d1
               S06:00003036:  22 3C 80 00 00 00
F00:3383                   neg.l d0
               S06:0000303C:  44 80
F00:3384                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000303E:  6B 00 03 48
F00:3385                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00003042:  66 00 03 44
F00:3386                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00003046:  65 00 03 40
F00:3387                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:0000304A:  69 00 03 3C
F00:3388                   neg.l d1
               S06:0000304E:  44 81
F00:3389                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003050:  6A 00 03 36
F00:3390                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003054:  67 00 03 32
F00:3391                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003058:  64 00 03 2E
F00:3392                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:0000305C:  68 00 03 2A
F00:3393                   cmpi.l #$80000000,d1
               S06:00003060:  0C 81 80 00 00 00
F00:3394                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003066:  66 00 03 20
F00:3395                   move.l #$7FFFFFFF,(a0)
               S06:0000306A:  20 BC 7F FF FF FF
F00:3396                   neg.l (a0)
               S06:00003070:  44 90
F00:3397                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003072:  6A 00 03 14
F00:3398                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003076:  67 00 03 10
F00:3399                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000307A:  64 00 03 0C
F00:3400                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:0000307E:  69 00 03 08
F00:3401                   move.l #$F5781234,(a0)
               S06:00003082:  20 BC F5 78 12 34
F00:3402                   neg.l (a0)
               S06:00003088:  44 90
F00:3403                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000308A:  6B 00 02 FC
F00:3404                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000308E:  67 00 02 F8
F00:3405                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003092:  64 00 02 F4
F00:3406                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00003096:  69 00 02 F0
F00:3407                   cmpi.l #$0A87EDCC,(a0)
               S06:0000309A:  0C 90 0A 87 ED CC
F00:3408                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000030A0:  66 00 02 E6
F00:3409       
F00:3410       
F00:3411       ; -----         
F00:3412       
F00:3413           ; NEGX - BYTE
F00:3414                   move.l #$00000100,a0
               S06:000030A4:  20 7C 00 00 01 00
F00:3415                   move.l #$00000000,d0
               S06:000030AA:  20 3C 00 00 00 00
F00:3416                   move.l #$00000080,d1
               S06:000030B0:  22 3C 00 00 00 80
F00:3417                   ori.b #$10,CCR        ; Set X Flag
               S06:000030B6:  00 3C 00 10
F00:3418                   negx.b d0
               S06:000030BA:  40 00
F00:3419                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000030BC:  6A 00 02 CA
F00:3420                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000030C0:  67 00 02 C6
F00:3421                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000030C4:  64 00 02 C2
F00:3422                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:000030C8:  69 00 02 BE
F00:3423                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000030CC:  02 3C 00 EF
F00:3424                   negx.b d0
               S06:000030D0:  40 00
F00:3425                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000030D2:  6B 00 02 B4
F00:3426                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000030D6:  67 00 02 B0
F00:3427                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000030DA:  64 00 02 AC
F00:3428                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000030DE:  69 00 02 A8
F00:3429                   ori.b #$10,CCR        ; Set X Flag
               S06:000030E2:  00 3C 00 10
F00:3430                   negx.b d1
               S06:000030E6:  40 01
F00:3431                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000030E8:  6B 00 02 9E
F00:3432                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030EC:  67 00 02 9A
F00:3433                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000030F0:  64 00 02 96
F00:3434                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000030F4:  69 00 02 92
F00:3435                   cmpi.b #$7F,d1
               S06:000030F8:  0C 01 00 7F
F00:3436                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:000030FC:  66 00 02 8A
F00:3437                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00003100:  02 3C 00 EF
F00:3438                   negx.b d1
               S06:00003104:  40 01
F00:3439                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003106:  6A 00 02 80
F00:3440                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000310A:  67 00 02 7C
F00:3441                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000310E:  64 00 02 78
F00:3442                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00003112:  69 00 02 74
F00:3443                   cmpi.b #$81,d1
               S06:00003116:  0C 01 00 81
F00:3444                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000311A:  66 00 02 6C
F00:3445                   move.b #$7F,(a0)
               S06:0000311E:  10 BC 00 7F
F00:3446                   ori.b #$10,CCR        ; Set X Flag
               S06:00003122:  00 3C 00 10
F00:3447                   negx.b (a0)
               S06:00003126:  40 10
F00:3448                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003128:  6A 00 02 5E
F00:3449                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000312C:  67 00 02 5A
F00:3450                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003130:  64 00 02 56
F00:3451                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00003134:  69 00 02 52
F00:3452                   move.b #$7F,(a0)
               S06:00003138:  10 BC 00 7F
F00:3453                   andi.b #$EF,CCR       ; Clear X Flag
               S06:0000313C:  02 3C 00 EF
F00:3454                   negx.b (a0)
               S06:00003140:  40 10
F00:3455                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003142:  6A 00 02 44
F00:3456                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003146:  67 00 02 40
F00:3457                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000314A:  64 00 02 3C
F00:3458                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:0000314E:  69 00 02 38
F00:3459                   move.b #$F5,(a0)
               S06:00003152:  10 BC 00 F5
F00:3460                   ori.b #$10,CCR        ; Set X Flag
               S06:00003156:  00 3C 00 10
F00:3461                   negx.b (a0)
               S06:0000315A:  40 10
F00:3462                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000315C:  6B 00 02 2A
F00:3463                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003160:  67 00 02 26
F00:3464                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003164:  64 00 02 22
F00:3465                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00003168:  69 00 02 1E
F00:3466                   cmpi.b #$0A,(a0)
               S06:0000316C:  0C 10 00 0A
F00:3467                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003170:  66 00 02 16
F00:3468                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00003174:  02 3C 00 EF
F00:3469                   negx.b (a0)
               S06:00003178:  40 10
F00:3470                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000317A:  6A 00 02 0C
F00:3471                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000317E:  67 00 02 08
F00:3472                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003182:  64 00 02 04
F00:3473                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00003186:  69 00 02 00
F00:3474                   cmpi.b #$F6,(a0)
               S06:0000318A:  0C 10 00 F6
F00:3475                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000318E:  66 00 01 F8
F00:3476       
F00:3477           
F00:3478       
F00:3479       ; -----         
F00:3480       
F00:3481           ; NEGX - WORD
F00:3482                   move.l #$00000100,a0
               S06:00003192:  20 7C 00 00 01 00
F00:3483                   move.l #$00000000,d0
               S06:00003198:  20 3C 00 00 00 00
F00:3484                   move.l #$00008000,d1
               S06:0000319E:  22 3C 00 00 80 00
F00:3485                   ori.b #$10,CCR        ; Set X Flag
               S06:000031A4:  00 3C 00 10
F00:3486                   negx.w d0
               S06:000031A8:  40 40
F00:3487                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000031AA:  6A 00 01 DC
F00:3488                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000031AE:  67 00 01 D8
F00:3489                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000031B2:  64 00 01 D4
F00:3490                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:000031B6:  69 00 01 D0
F00:3491                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000031BA:  02 3C 00 EF
F00:3492                   negx.w d0
               S06:000031BE:  40 40
F00:3493                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000031C0:  6B 00 01 C6
F00:3494                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000031C4:  67 00 01 C2
F00:3495                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000031C8:  64 00 01 BE
F00:3496                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000031CC:  69 00 01 BA
F00:3497                   ori.b #$10,CCR        ; Set X Flag
               S06:000031D0:  00 3C 00 10
F00:3498                   negx.w d1
               S06:000031D4:  40 41
F00:3499                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000031D6:  6B 00 01 B0
F00:3500                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000031DA:  67 00 01 AC
F00:3501                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000031DE:  64 00 01 A8
F00:3502                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000031E2:  69 00 01 A4
F00:3503                   cmpi.w #$7FFF,d1
               S06:000031E6:  0C 41 7F FF
F00:3504                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:000031EA:  66 00 01 9C
F00:3505                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000031EE:  02 3C 00 EF
F00:3506                   negx.w d1
               S06:000031F2:  40 41
F00:3507                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000031F4:  6A 00 01 92
F00:3508                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000031F8:  67 00 01 8E
F00:3509                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000031FC:  64 00 01 8A
F00:3510                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00003200:  69 00 01 86
F00:3511                   cmpi.w #$8001,d1
               S06:00003204:  0C 41 80 01
F00:3512                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003208:  66 00 01 7E
F00:3513                   move.w #$7FFF,(a0)
               S06:0000320C:  30 BC 7F FF
F00:3514                   ori.b #$10,CCR        ; Set X Flag
               S06:00003210:  00 3C 00 10
F00:3515                   negx.w (a0)
               S06:00003214:  40 50
F00:3516                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003216:  6A 00 01 70
F00:3517                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000321A:  67 00 01 6C
F00:3518                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000321E:  64 00 01 68
F00:3519                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00003222:  69 00 01 64
F00:3520                   move.w #$F567,(a0)            
               S06:00003226:  30 BC F5 67
F00:3521                   andi.b #$EF,CCR       ; Clear X Flag
               S06:0000322A:  02 3C 00 EF
F00:3522                   negx.w (a0)
               S06:0000322E:  40 50
F00:3523                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003230:  6B 00 01 56
F00:3524                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003234:  67 00 01 52
F00:3525                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003238:  64 00 01 4E
F00:3526                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:0000323C:  69 00 01 4A
F00:3527                   move.w #$F567,(a0)
               S06:00003240:  30 BC F5 67
F00:3528                   ori.b #$10,CCR        ; Set X Flag
               S06:00003244:  00 3C 00 10
F00:3529                   negx.w (a0)
               S06:00003248:  40 50
F00:3530                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000324A:  6B 00 01 3C
F00:3531                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000324E:  67 00 01 38
F00:3532                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003252:  64 00 01 34
F00:3533                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00003256:  69 00 01 30
F00:3534                   cmpi.w #$0A98,(a0)
               S06:0000325A:  0C 50 0A 98
F00:3535                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000325E:  66 00 01 28
F00:3536                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00003262:  02 3C 00 EF
F00:3537                   negx.w (a0)
               S06:00003266:  40 50
F00:3538                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00003268:  6A 00 01 1E
F00:3539                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000326C:  67 00 01 1A
F00:3540                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003270:  64 00 01 16
F00:3541                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00003274:  69 00 01 12
F00:3542                   cmpi.w #$F568,(a0)
               S06:00003278:  0C 50 F5 68
F00:3543                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000327C:  66 00 01 0A
F00:3544       
F00:3545                   
F00:3546       ; -----         
F00:3547           ; NEGX - LONG
F00:3548                   move.l #$00000100,a0
               S06:00003280:  20 7C 00 00 01 00
F00:3549                   move.l #$00000000,d0
               S06:00003286:  20 3C 00 00 00 00
F00:3550                   move.l #$80000000,d1
               S06:0000328C:  22 3C 80 00 00 00
F00:3551                   ori.b #$10,CCR        ; Set X Flag
               S06:00003292:  00 3C 00 10
F00:3552                   negx.l d0
               S06:00003296:  40 80
F00:3553                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00003298:  6A 00 00 EE
F00:3554                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:0000329C:  67 00 00 EA
F00:3555                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000032A0:  64 00 00 E6
F00:3556                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:000032A4:  69 00 00 E2
F00:3557                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000032A8:  02 3C 00 EF
F00:3558                   negx.l d0
               S06:000032AC:  40 80
F00:3559                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000032AE:  6B 00 00 D8
F00:3560                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000032B2:  67 00 00 D4
F00:3561                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000032B6:  64 00 00 D0
F00:3562                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000032BA:  69 00 00 CC
F00:3563                   ori.b #$10,CCR        ; Set X Flag
               S06:000032BE:  00 3C 00 10
F00:3564                   negx.l d1
               S06:000032C2:  40 81
F00:3565                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000032C4:  6B 00 00 C2
F00:3566                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000032C8:  67 00 00 BE
F00:3567                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000032CC:  64 00 00 BA
F00:3568                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000032D0:  69 00 00 B6
F00:3569                   cmpi.l #$7FFFFFFF,d1
               S06:000032D4:  0C 81 7F FF FF FF
F00:3570                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:000032DA:  66 00 00 AC
F00:3571                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000032DE:  02 3C 00 EF
F00:3572                   negx.l d1
               S06:000032E2:  40 81
F00:3573                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000032E4:  6A 00 00 A2
F00:3574                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000032E8:  67 00 00 9E
F00:3575                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000032EC:  64 00 00 9A
F00:3576                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000032F0:  69 00 00 96
F00:3577                   cmpi.l #$80000001,d1
               S06:000032F4:  0C 81 80 00 00 01
F00:3578                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000032FA:  66 00 00 8C
F00:3579                   move.l #$7FFF,(a0)
               S06:000032FE:  20 BC 00 00 7F FF
F00:3580                   ori.b #$10,CCR        ; Set X Flag
               S06:00003304:  00 3C 00 10
F00:3581                   negx.l (a0)
               S06:00003308:  40 90
F00:3582                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:0000330A:  6A 00 00 7C
F00:3583                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000330E:  67 00 00 78
F00:3584                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00003312:  64 00 00 74
F00:3585                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00003316:  69 00 00 70
F00:3586                   move.l #$F5671234,(a0)            
               S06:0000331A:  20 BC F5 67 12 34
F00:3587                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00003320:  02 3C 00 EF
F00:3588                   negx.l (a0)
               S06:00003324:  40 90
F00:3589                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00003326:  6B 00 00 60
F00:3590                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000332A:  67 00 00 5C
F00:3591                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000332E:  64 00 00 58
F00:3592                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00003332:  69 00 00 54
F00:3593                   move.l #$F5675678,(a0)
               S06:00003336:  20 BC F5 67 56 78
F00:3594                   ori.b #$10,CCR        ; Set X Flag
               S06:0000333C:  00 3C 00 10
F00:3595                   negx.l (a0)
               S06:00003340:  40 90
F00:3596                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00003342:  6B 00 00 44
F00:3597                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003346:  67 00 00 40
F00:3598                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000334A:  64 00 00 3C
F00:3599                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:0000334E:  69 00 00 38
F00:3600                   cmpi.l #$0A98A987,(a0)
               S06:00003352:  0C 90 0A 98 A9 87
F00:3601                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003358:  66 00 00 2E
F00:3602                   andi.b #$EF,CCR       ; Clear X Flag
               S06:0000335C:  02 3C 00 EF
F00:3603                   negx.l (a0)
               S06:00003360:  40 90
F00:3604                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00003362:  6A 00 00 24
F00:3605                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003366:  67 00 00 20
F00:3606                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000336A:  64 00 00 1C
F00:3607                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:0000336E:  69 00 00 18
F00:3608                   cmpi.l #$F5675679,(a0)
               S06:00003372:  0C 90 F5 67 56 79
F00:3609                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00003378:  66 00 00 0E
F00:3610       
F00:3611               movea #TESTSTATUS,a0
               S06:0000337C:  30 7C FF 00
F00:3612               move.b #$1,$1a(a0)
               S06:00003380:  11 7C 00 01 00 1A
F00:3613               rts
               S06:00003386:  4E 75
F00:3614       
F00:3615               NEGS_FAIL:
F00:3616                   movea #TESTSTATUS,a0
               S06:00003388:  30 7C FF 00
F00:3617                   move.b #$2,$1a(a0)
               S06:0000338C:  11 7C 00 02 00 1A
F00:3618                   rts
               S06:00003392:  4E 75
F00:3619       
F00:3620              
F00:3621       ; -----         
F00:3622       
F00:3623       op_CLR:
F00:3624           ; CLR - BYTE
F00:3625                   move.l #$00000100,a0
               S06:00003394:  20 7C 00 00 01 00
F00:3626                   move.l #$12345678,d0
               S06:0000339A:  20 3C 12 34 56 78
F00:3627                   move.l #$12345678,d1                   
               S06:000033A0:  22 3C 12 34 56 78
F00:3628                   move.l #$12345678,d2                   
               S06:000033A6:  24 3C 12 34 56 78
F00:3629                   move.l #$12345600,d4                   
               S06:000033AC:  28 3C 12 34 56 00
F00:3630                   move.l #$12340000,d5                   
               S06:000033B2:  2A 3C 12 34 00 00
F00:3631                   move.l #$00000000,d6                   
               S06:000033B8:  2C 3C 00 00 00 00
F00:3632                   
F00:3633                   clr.b d0
               S06:000033BE:  42 00
F00:3634                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033C0:  66 00 00 38
F00:3635                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000033C4:  6B 00 00 34
F00:3636                   cmp.l d0,d4
               S06:000033C8:  B8 80
F00:3637                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033CA:  66 00 00 2E
F00:3638                   
F00:3639                   clr.w d1
               S06:000033CE:  42 41
F00:3640                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033D0:  66 00 00 28
F00:3641                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000033D4:  6B 00 00 24
F00:3642                   cmp.l d1,d5
               S06:000033D8:  BA 81
F00:3643                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033DA:  66 00 00 1E
F00:3644                   
F00:3645                   clr.l d2
               S06:000033DE:  42 82
F00:3646                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033E0:  66 00 00 18
F00:3647                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000033E4:  6B 00 00 14
F00:3648                   cmp.l d2,d6
               S06:000033E8:  BC 82
F00:3649                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000033EA:  66 00 00 0E
F00:3650       
F00:3651                   movea #TESTSTATUS,a0
               S06:000033EE:  30 7C FF 00
F00:3652                   move.b #$1,$1b(a0)
               S06:000033F2:  11 7C 00 01 00 1B
F00:3653                   rts      
               S06:000033F8:  4E 75
F00:3654                   
F00:3655       CLR_FAIL:
F00:3656           movea #TESTSTATUS,a0
               S06:000033FA:  30 7C FF 00
F00:3657           move.b #$2,$1b(a0)
               S06:000033FE:  11 7C 00 02 00 1B
F00:3658           rts
               S06:00003404:  4E 75
F00:3659                                 
F00:3660       ;-----------------------------------------------------------
F00:3661       ;-----------------------------------------------------------
F00:3662       ; OPCODE : MOVEM
F00:3663       ;-----------------------------------------------------------
F00:3664       ;-----------------------------------------------------------
F00:3665       op_MOVEM: 
F00:3666       
F00:3667           ; WORD  Registers --> Memory
F00:3668                   move.l #$0000d0d0,d0
               S06:00003406:  20 3C 00 00 D0 D0
F00:3669                   move.l #$0000d1d1,d1
               S06:0000340C:  22 3C 00 00 D1 D1
F00:3670                   move.l #$0000d2d2,d2
               S06:00003412:  24 3C 00 00 D2 D2
F00:3671                   move.l #$0000d3d3,d3
               S06:00003418:  26 3C 00 00 D3 D3
F00:3672                   move.l #$0000d4d4,d4
               S06:0000341E:  28 3C 00 00 D4 D4
F00:3673                   move.l #$0000d5d5,d5
               S06:00003424:  2A 3C 00 00 D5 D5
F00:3674                   move.l #$0000d6d6,d6
               S06:0000342A:  2C 3C 00 00 D6 D6
F00:3675                   move.l #$0000d7d7,d7
               S06:00003430:  2E 3C 00 00 D7 D7
F00:3676                   move.l #$00000a0a,a0
               S06:00003436:  20 7C 00 00 0A 0A
F00:3677                   move.l #$00001a1a,a1
               S06:0000343C:  22 7C 00 00 1A 1A
F00:3678                   move.l #$00002a2a,a2
               S06:00003442:  24 7C 00 00 2A 2A
F00:3679                   move.l #$00003a3a,a3
               S06:00003448:  26 7C 00 00 3A 3A
F00:3680                   move.l #$00004a4a,a4
               S06:0000344E:  28 7C 00 00 4A 4A
F00:3681                   move.l #$00005a5a,a5
               S06:00003454:  2A 7C 00 00 5A 5A
F00:3682                   move.l #$00006a6a,a6
               S06:0000345A:  2C 7C 00 00 6A 6A
F00:3683                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3684                   
F00:3685                   movem.w D0-D7/A0-A7,$00000100  
               S06:00003460:  48 B9 FF FF 00 00 01 00
F00:3686                   
F00:3687                   move.l #$00000100,a0
               S06:00003468:  20 7C 00 00 01 00
F00:3688                   
F00:3689                   cmp.w (a0)+,d0            
               S06:0000346E:  B0 58
F00:3690                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003470:  66 00 03 FA
F00:3691                   cmp.w (a0)+,d1            
               S06:00003474:  B2 58
F00:3692                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003476:  66 00 03 F4
F00:3693                   cmp.w (a0)+,d2            
               S06:0000347A:  B4 58
F00:3694                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000347C:  66 00 03 EE
F00:3695                   cmp.w (a0)+,d3            
               S06:00003480:  B6 58
F00:3696                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003482:  66 00 03 E8
F00:3697                   cmp.w (a0)+,d4            
               S06:00003486:  B8 58
F00:3698                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003488:  66 00 03 E2
F00:3699                   cmp.w (a0)+,d5            
               S06:0000348C:  BA 58
F00:3700                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000348E:  66 00 03 DC
F00:3701                   cmp.w (a0)+,d6            
               S06:00003492:  BC 58
F00:3702                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003494:  66 00 03 D6
F00:3703                   cmp.w (a0)+,d7            
               S06:00003498:  BE 58
F00:3704                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000349A:  66 00 03 D0
F00:3705       
F00:3706                   cmp.w #$0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:0000349E:  0C 58 0A 0A
F00:3707                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034A2:  66 00 03 C8
F00:3708        
F00:3709                   cmp.w (a0)+,a1
               S06:000034A6:  B2 D8
F00:3710                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034A8:  66 00 03 C2
F00:3711                   cmp.w (a0)+,a2
               S06:000034AC:  B4 D8
F00:3712                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034AE:  66 00 03 BC
F00:3713                   cmp.w (a0)+,a3
               S06:000034B2:  B6 D8
F00:3714                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034B4:  66 00 03 B6
F00:3715                   cmp.w (a0)+,a4
               S06:000034B8:  B8 D8
F00:3716                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034BA:  66 00 03 B0
F00:3717                   cmp.w (a0)+,a5
               S06:000034BE:  BA D8
F00:3718                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034C0:  66 00 03 AA
F00:3719                   cmp.w (a0)+,a6
               S06:000034C4:  BC D8
F00:3720                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000034C6:  66 00 03 A4
F00:3721                 
F00:3722       
F00:3723       
F00:3724       
F00:3725           ; LONG  Registers --> Memory
F00:3726                   move.l #$d0d0d0d0,d0
               S06:000034CA:  20 3C D0 D0 D0 D0
F00:3727                   move.l #$d1d1d1d1,d1
               S06:000034D0:  22 3C D1 D1 D1 D1
F00:3728                   move.l #$d2d2d2d2,d2
               S06:000034D6:  24 3C D2 D2 D2 D2
F00:3729                   move.l #$d3d3d3d3,d3
               S06:000034DC:  26 3C D3 D3 D3 D3
F00:3730                   move.l #$d4d4d4d4,d4
               S06:000034E2:  28 3C D4 D4 D4 D4
F00:3731                   move.l #$d5d5d5d5,d5
               S06:000034E8:  2A 3C D5 D5 D5 D5
F00:3732                   move.l #$d6d6d6d6,d6
               S06:000034EE:  2C 3C D6 D6 D6 D6
F00:3733                   move.l #$d7d7d7d7,d7
               S06:000034F4:  2E 3C D7 D7 D7 D7
F00:3734                   move.l #$0a0a0a0a,a0
               S06:000034FA:  20 7C 0A 0A 0A 0A
F00:3735                   move.l #$1a1a1a1a,a1
               S06:00003500:  22 7C 1A 1A 1A 1A
F00:3736                   move.l #$2a2a2a2a,a2
               S06:00003506:  24 7C 2A 2A 2A 2A
F00:3737                   move.l #$3a3a3a3a,a3
               S06:0000350C:  26 7C 3A 3A 3A 3A
F00:3738                   move.l #$4a4a4a4a,a4
               S06:00003512:  28 7C 4A 4A 4A 4A
F00:3739                   move.l #$5a5a5a5a,a5
               S06:00003518:  2A 7C 5A 5A 5A 5A
F00:3740                   move.l #$6a6a6a6a,a6
               S06:0000351E:  2C 7C 6A 6A 6A 6A
F00:3741                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3742                   
F00:3743                   
F00:3744                   movem.l D0-D7/A0-A7,$00000120  
               S06:00003524:  48 F9 FF FF 00 00 01 20
F00:3745                   
F00:3746                   move.l #$00000120,a0
               S06:0000352C:  20 7C 00 00 01 20
F00:3747                   
F00:3748                   cmp.l (a0)+,d0            
               S06:00003532:  B0 98
F00:3749                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003534:  66 00 03 36
F00:3750                   cmp.l (a0)+,d1            
               S06:00003538:  B2 98
F00:3751                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000353A:  66 00 03 30
F00:3752                   cmp.l (a0)+,d2            
               S06:0000353E:  B4 98
F00:3753                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003540:  66 00 03 2A
F00:3754                   cmp.l (a0)+,d3            
               S06:00003544:  B6 98
F00:3755                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003546:  66 00 03 24
F00:3756                   cmp.l (a0)+,d4            
               S06:0000354A:  B8 98
F00:3757                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000354C:  66 00 03 1E
F00:3758                   cmp.l (a0)+,d5            
               S06:00003550:  BA 98
F00:3759                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003552:  66 00 03 18
F00:3760                   cmp.l (a0)+,d6            
               S06:00003556:  BC 98
F00:3761                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003558:  66 00 03 12
F00:3762                   cmp.l (a0)+,d7            
               S06:0000355C:  BE 98
F00:3763                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000355E:  66 00 03 0C
F00:3764       
F00:3765                   cmp.l #$0A0A0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:00003562:  0C 98 0A 0A 0A 0A
F00:3766                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003568:  66 00 03 02
F00:3767        
F00:3768                   cmp.l (a0)+,a1
               S06:0000356C:  B3 D8
F00:3769                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000356E:  66 00 02 FC
F00:3770                   cmp.l (a0)+,a2
               S06:00003572:  B5 D8
F00:3771                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003574:  66 00 02 F6
F00:3772                   cmp.l (a0)+,a3
               S06:00003578:  B7 D8
F00:3773                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000357A:  66 00 02 F0
F00:3774                   cmp.l (a0)+,a4
               S06:0000357E:  B9 D8
F00:3775                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003580:  66 00 02 EA
F00:3776                   cmp.l (a0)+,a5
               S06:00003584:  BB D8
F00:3777                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003586:  66 00 02 E4
F00:3778                   cmp.l (a0)+,a6
               S06:0000358A:  BD D8
F00:3779                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000358C:  66 00 02 DE
F00:3780            ; ----
F00:3781       
F00:3782       
F00:3783           ; WORD  Registers --> Memory  -(An) EA Mode
F00:3784                   move.l #$0000d0d0,d0
               S06:00003590:  20 3C 00 00 D0 D0
F00:3785                   move.l #$0000d1d1,d1
               S06:00003596:  22 3C 00 00 D1 D1
F00:3786                   move.l #$0000d2d2,d2
               S06:0000359C:  24 3C 00 00 D2 D2
F00:3787                   move.l #$0000d3d3,d3
               S06:000035A2:  26 3C 00 00 D3 D3
F00:3788                   move.l #$0000d4d4,d4
               S06:000035A8:  28 3C 00 00 D4 D4
F00:3789                   move.l #$0000d5d5,d5
               S06:000035AE:  2A 3C 00 00 D5 D5
F00:3790                   move.l #$0000d6d6,d6
               S06:000035B4:  2C 3C 00 00 D6 D6
F00:3791                   move.l #$0000d7d7,d7
               S06:000035BA:  2E 3C 00 00 D7 D7
F00:3792                   move.l #$00000a0a,a0
               S06:000035C0:  20 7C 00 00 0A 0A
F00:3793                   move.l #$00001a1a,a1
               S06:000035C6:  22 7C 00 00 1A 1A
F00:3794                   move.l #$00002a2a,a2
               S06:000035CC:  24 7C 00 00 2A 2A
F00:3795                   move.l #$00003a3a,a3
               S06:000035D2:  26 7C 00 00 3A 3A
F00:3796                   move.l #$00004a4a,a4
               S06:000035D8:  28 7C 00 00 4A 4A
F00:3797                   move.l #$00005a5a,a5
               S06:000035DE:  2A 7C 00 00 5A 5A
F00:3798                   move.l #$00006a6a,a6
               S06:000035E4:  2C 7C 00 00 6A 6A
F00:3799                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3800                  
F00:3801                   move.l #$000001A0,a0
               S06:000035EA:  20 7C 00 00 01 A0
F00:3802                   movem.w D0-D7/A0-A7,-(a0)  
               S06:000035F0:  48 A0 FF FF
F00:3803                   
F00:3804                   move.l #$0000019E,a0
               S06:000035F4:  20 7C 00 00 01 9E
F00:3805                   
F00:3806                   cmp.w -(a0),a6            
               S06:000035FA:  BC E0
F00:3807                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000035FC:  66 00 02 6E
F00:3808                   cmp.w -(a0),a5            
               S06:00003600:  BA E0
F00:3809                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003602:  66 00 02 68
F00:3810                   cmp.w -(a0),a4            
               S06:00003606:  B8 E0
F00:3811                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003608:  66 00 02 62
F00:3812                   cmp.w -(a0),a3            
               S06:0000360C:  B6 E0
F00:3813                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000360E:  66 00 02 5C
F00:3814                   cmp.w -(a0),a2            
               S06:00003612:  B4 E0
F00:3815                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003614:  66 00 02 56
F00:3816                   cmp.w -(a0),a1            
               S06:00003618:  B2 E0
F00:3817                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000361A:  66 00 02 50
F00:3818                   cmp.w -(a0),a0            
               S06:0000361E:  B0 E0
F00:3819                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3820                   cmp.w -(a0),d7            
               S06:00003620:  BE 60
F00:3821                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003622:  66 00 02 48
F00:3822                   cmp.w -(a0),d6
               S06:00003626:  BC 60
F00:3823                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003628:  66 00 02 42
F00:3824                   cmp.w -(a0),d5
               S06:0000362C:  BA 60
F00:3825                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000362E:  66 00 02 3C
F00:3826                   cmp.w -(a0),d4
               S06:00003632:  B8 60
F00:3827                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003634:  66 00 02 36
F00:3828                   cmp.w -(a0),d3
               S06:00003638:  B6 60
F00:3829                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000363A:  66 00 02 30
F00:3830                   cmp.w -(a0),d2
               S06:0000363E:  B4 60
F00:3831                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003640:  66 00 02 2A
F00:3832                   cmp.w -(a0),d1
               S06:00003644:  B2 60
F00:3833                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003646:  66 00 02 24
F00:3834                   cmp.w -(a0),d0
               S06:0000364A:  B0 60
F00:3835                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000364C:  66 00 02 1E
F00:3836                 
F00:3837       
F00:3838       
F00:3839       
F00:3840           ; LONG  Registers --> Memory   -(An) EA Mode
F00:3841                   move.l #$d0d0d0d0,d0
               S06:00003650:  20 3C D0 D0 D0 D0
F00:3842                   move.l #$d1d1d1d1,d1
               S06:00003656:  22 3C D1 D1 D1 D1
F00:3843                   move.l #$d2d2d2d2,d2
               S06:0000365C:  24 3C D2 D2 D2 D2
F00:3844                   move.l #$d3d3d3d3,d3
               S06:00003662:  26 3C D3 D3 D3 D3
F00:3845                   move.l #$d4d4d4d4,d4
               S06:00003668:  28 3C D4 D4 D4 D4
F00:3846                   move.l #$d5d5d5d5,d5
               S06:0000366E:  2A 3C D5 D5 D5 D5
F00:3847                   move.l #$d6d6d6d6,d6
               S06:00003674:  2C 3C D6 D6 D6 D6
F00:3848                   move.l #$d7d7d7d7,d7
               S06:0000367A:  2E 3C D7 D7 D7 D7
F00:3849                   move.l #$0a0a0a0a,a0
               S06:00003680:  20 7C 0A 0A 0A 0A
F00:3850                   move.l #$1a1a1a1a,a1
               S06:00003686:  22 7C 1A 1A 1A 1A
F00:3851                   move.l #$2a2a2a2a,a2
               S06:0000368C:  24 7C 2A 2A 2A 2A
F00:3852                   move.l #$3a3a3a3a,a3
               S06:00003692:  26 7C 3A 3A 3A 3A
F00:3853                   move.l #$4a4a4a4a,a4
               S06:00003698:  28 7C 4A 4A 4A 4A
F00:3854                   move.l #$5a5a5a5a,a5
               S06:0000369E:  2A 7C 5A 5A 5A 5A
F00:3855                   move.l #$6a6a6a6a,a6
               S06:000036A4:  2C 7C 6A 6A 6A 6A
F00:3856                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3857                   
F00:3858                
F00:3859                   move.l #$000001A0,a0
               S06:000036AA:  20 7C 00 00 01 A0
F00:3860                   movem.l D0-D7/A0-A7,-(a0)  
               S06:000036B0:  48 E0 FF FF
F00:3861                   
F00:3862                   move.l #$0000019C,a0
               S06:000036B4:  20 7C 00 00 01 9C
F00:3863                   
F00:3864                   cmp.l -(a0),a6            
               S06:000036BA:  BD E0
F00:3865                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036BC:  66 00 01 AE
F00:3866                   cmp.l -(a0),a5            
               S06:000036C0:  BB E0
F00:3867                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036C2:  66 00 01 A8
F00:3868                   cmp.l -(a0),a4            
               S06:000036C6:  B9 E0
F00:3869                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036C8:  66 00 01 A2
F00:3870                   cmp.l -(a0),a3            
               S06:000036CC:  B7 E0
F00:3871                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036CE:  66 00 01 9C
F00:3872                   cmp.l -(a0),a2            
               S06:000036D2:  B5 E0
F00:3873                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036D4:  66 00 01 96
F00:3874                   cmp.l -(a0),a1            
               S06:000036D8:  B3 E0
F00:3875                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036DA:  66 00 01 90
F00:3876                   cmp.l -(a0),a0            
               S06:000036DE:  B1 E0
F00:3877                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3878                   cmp.l -(a0),d7            
               S06:000036E0:  BE A0
F00:3879                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036E2:  66 00 01 88
F00:3880                   cmp.l -(a0),d6
               S06:000036E6:  BC A0
F00:3881                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036E8:  66 00 01 82
F00:3882                   cmp.l -(a0),d5
               S06:000036EC:  BA A0
F00:3883                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036EE:  66 00 01 7C
F00:3884                   cmp.l -(a0),d4
               S06:000036F2:  B8 A0
F00:3885                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036F4:  66 00 01 76
F00:3886                   cmp.l -(a0),d3
               S06:000036F8:  B6 A0
F00:3887                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000036FA:  66 00 01 70
F00:3888                   cmp.l -(a0),d2
               S06:000036FE:  B4 A0
F00:3889                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003700:  66 00 01 6A
F00:3890                   cmp.l -(a0),d1
               S06:00003704:  B2 A0
F00:3891                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003706:  66 00 01 64
F00:3892                   cmp.l -(a0),d0
               S06:0000370A:  B0 A0
F00:3893                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000370C:  66 00 01 5E
F00:3894                 
F00:3895       
F00:3896       
F00:3897            ;----     
F00:3898                 
F00:3899           ; WORD - Memory --> Registers
F00:3900                   move.l #$00000000,d0
               S06:00003710:  20 3C 00 00 00 00
F00:3901                   move.l #$00000000,d1
               S06:00003716:  22 3C 00 00 00 00
F00:3902                   move.l #$00000000,d2
               S06:0000371C:  24 3C 00 00 00 00
F00:3903                   move.l #$00000000,d3
               S06:00003722:  26 3C 00 00 00 00
F00:3904                   move.l #$00000000,d4
               S06:00003728:  28 3C 00 00 00 00
F00:3905                   move.l #$00000000,d5
               S06:0000372E:  2A 3C 00 00 00 00
F00:3906                   move.l #$00000000,d6
               S06:00003734:  2C 3C 00 00 00 00
F00:3907                   move.l #$00000000,d7
               S06:0000373A:  2E 3C 00 00 00 00
F00:3908                   move.l #$00000000,a0
               S06:00003740:  20 7C 00 00 00 00
F00:3909                   move.l #$00000000,a1
               S06:00003746:  22 7C 00 00 00 00
F00:3910                   move.l #$00000000,a2
               S06:0000374C:  24 7C 00 00 00 00
F00:3911                   move.l #$00000000,a3
               S06:00003752:  26 7C 00 00 00 00
F00:3912                   move.l #$00000000,a4
               S06:00003758:  28 7C 00 00 00 00
F00:3913                   move.l #$00000000,a5
               S06:0000375E:  2A 7C 00 00 00 00
F00:3914                   move.l #$00000000,a6
               S06:00003764:  2C 7C 00 00 00 00
F00:3915                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:3916                   
F00:3917                   movem.w $00000100,D0/D2/D4/D6/A1/A3/A5   
               S06:0000376A:  4C B9 2A 55 00 00 01 00
F00:3918                   
F00:3919                   cmp.l #$FFFFD0D0,d0           
               S06:00003772:  B0 BC FF FF D0 D0
F00:3920                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003778:  66 00 00 F2
F00:3921                   cmp.l #$FFFFD1D1,d2           
               S06:0000377C:  B4 BC FF FF D1 D1
F00:3922                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:00003782:  66 00 00 E8
F00:3923                   cmp.l #$FFFFD2D2,d4           
               S06:00003786:  B8 BC FF FF D2 D2
F00:3924                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000378C:  66 00 00 DE
F00:3925                   cmp.l #$FFFFD3D3,d6           
               S06:00003790:  BC BC FF FF D3 D3
F00:3926                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003796:  66 00 00 D4
F00:3927                   cmp.l #$FFFFD4D4,a1           
               S06:0000379A:  B3 FC FF FF D4 D4
F00:3928                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000037A0:  66 00 00 CA
F00:3929                   cmp.l #$FFFFD5D5,a3           
               S06:000037A4:  B7 FC FF FF D5 D5
F00:3930                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000037AA:  66 00 00 C0
F00:3931                   cmp.l #$FFFFD6D6,a5           
               S06:000037AE:  BB FC FF FF D6 D6
F00:3932                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000037B4:  66 00 00 B6
F00:3933                   
F00:3934        
F00:3935           ; LONG - Memory --> Registers
F00:3936                   move.l #$00000000,d0
               S06:000037B8:  20 3C 00 00 00 00
F00:3937                   move.l #$00000000,d1
               S06:000037BE:  22 3C 00 00 00 00
F00:3938                   move.l #$00000000,d2
               S06:000037C4:  24 3C 00 00 00 00
F00:3939                   move.l #$00000000,d3
               S06:000037CA:  26 3C 00 00 00 00
F00:3940                   move.l #$00000000,d4
               S06:000037D0:  28 3C 00 00 00 00
F00:3941                   move.l #$00000000,d5
               S06:000037D6:  2A 3C 00 00 00 00
F00:3942                   move.l #$00000000,d6
               S06:000037DC:  2C 3C 00 00 00 00
F00:3943                   move.l #$00000000,d7
               S06:000037E2:  2E 3C 00 00 00 00
F00:3944                   move.l #$00000000,a0
               S06:000037E8:  20 7C 00 00 00 00
F00:3945                   move.l #$00000000,a1
               S06:000037EE:  22 7C 00 00 00 00
F00:3946                   move.l #$00000000,a2
               S06:000037F4:  24 7C 00 00 00 00
F00:3947                   move.l #$00000000,a3
               S06:000037FA:  26 7C 00 00 00 00
F00:3948                   move.l #$00000000,a4
               S06:00003800:  28 7C 00 00 00 00
F00:3949                   move.l #$00000000,a5
               S06:00003806:  2A 7C 00 00 00 00
F00:3950                   move.l #$00000000,a6
               S06:0000380C:  2C 7C 00 00 00 00
F00:3951                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:3952                   
F00:3953                   movem.l $00000120,D0/D2/D4/D6/A1/A3/A5   
               S06:00003812:  4C F9 2A 55 00 00 01 20
F00:3954                   
F00:3955                   cmp.l #$D0D0D0D0,d0           
               S06:0000381A:  B0 BC D0 D0 D0 D0
F00:3956                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003820:  66 00 00 4A
F00:3957                   cmp.l #$D1D1D1D1,d2           
               S06:00003824:  B4 BC D1 D1 D1 D1
F00:3958                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:0000382A:  66 00 00 40
F00:3959                   cmp.l #$D2D2D2D2,d4           
               S06:0000382E:  B8 BC D2 D2 D2 D2
F00:3960                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003834:  66 00 00 36
F00:3961                   cmp.l #$D3D3D3D3,d6           
               S06:00003838:  BC BC D3 D3 D3 D3
F00:3962                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000383E:  66 00 00 2C
F00:3963                   cmp.l #$D4D4D4D4,a1           
               S06:00003842:  B3 FC D4 D4 D4 D4
F00:3964                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003848:  66 00 00 22
F00:3965                   cmp.l #$D5D5D5D5,a3           
               S06:0000384C:  B7 FC D5 D5 D5 D5
F00:3966                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003852:  66 00 00 18
F00:3967                   cmp.l #$D6D6D6D6,a5           
               S06:00003856:  BB FC D6 D6 D6 D6
F00:3968                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000385C:  66 00 00 0E
F00:3969                   
F00:3970                   movea #TESTSTATUS,a0
               S06:00003860:  30 7C FF 00
F00:3971                   move.b #$1,$1c(a0)
               S06:00003864:  11 7C 00 01 00 1C
F00:3972                   rts     
               S06:0000386A:  4E 75
F00:3973       
F00:3974       MOVEM_FAIL: 
F00:3975           movea #TESTSTATUS,a0
               S06:0000386C:  30 7C FF 00
F00:3976           move.b #$2,$1c(a0)
               S06:00003870:  11 7C 00 02 00 1C
F00:3977           rts
               S06:00003876:  4E 75
F00:3978                      
F00:3979       ;-----------------------------------------------------------
F00:3980       ;-----------------------------------------------------------
F00:3981       ; OPCODE : TRAPV
F00:3982       ;-----------------------------------------------------------
F00:3983       ;-----------------------------------------------------------
F00:3984       op_TRAPV: 
F00:3985       
F00:3986           ; TRAPV will set d0 to 12345678 if V flag is set
F00:3987           
F00:3988                       move.l #$00000000,d0 ; Clear d0
               S06:00003878:  20 3C 00 00 00 00
F00:3989                       
F00:3990                       move #$00,CCR        ; Clear V flag
               S06:0000387E:  44 FC 00 00
F00:3991                       trapv
               S06:00003882:  4E 76
F00:3992                       cmpi.l #$00000000,d0  ; Check of d0 was updated (should not be_)
               S06:00003884:  0C 80 00 00 00 00
F00:3993                       bne TRAPV_FAIL;       
               S06:0000388A:  66 00 00 1E
F00:3994       
F00:3995                      move #$02,CCR        ; Set V flag
               S06:0000388E:  44 FC 00 02
F00:3996                      trapv
               S06:00003892:  4E 76
F00:3997                      cmpi.l #$12345678,d0  ; Check of d0 was updated (should not be_)
               S06:00003894:  0C 80 12 34 56 78
F00:3998                      bne TRAPV_FAIL;       
               S06:0000389A:  66 00 00 0E
F00:3999       
F00:4000                      movea #TESTSTATUS,a0
               S06:0000389E:  30 7C FF 00
F00:4001                      move.b #$1,$1d(a0)
               S06:000038A2:  11 7C 00 01 00 1D
F00:4002                      rts   
               S06:000038A8:  4E 75
F00:4003       
F00:4004       TRAPV_FAIL:
F00:4005           movea #TESTSTATUS,a0
               S06:000038AA:  30 7C FF 00
F00:4006           move.b #$2,$1d(a0)
               S06:000038AE:  11 7C 00 02 00 1D
F00:4007           rts
               S06:000038B4:  4E 75
F00:4008                      
F00:4009       ;-----------------------------------------------------------
F00:4010       ;-----------------------------------------------------------
F00:4011       ; OPCODE : RTR
F00:4012       ;-----------------------------------------------------------
F00:4013       ;-----------------------------------------------------------
F00:4014       
F00:4015       op_RTR: 
F00:4016           
F00:4017                       lea RTR_DONE,a0
               S06:000038B6:  41 F9 00 00 38 C4
F00:4018                       move.l a0,-(a7)     ; push destination PC to the stack
               S06:000038BC:  2F 08
F00:4019                       move.w #$FF15,-(a7)       ; push flags=0xFFFF to the stack
               S06:000038BE:  3F 3C FF 15
F00:4020                       rtr
               S06:000038C2:  4E 77
F00:4021       
F00:4022       RTR_DONE:       move SR,d0
               S06:000038C4:  40 C0
F00:4023                       andi #$1F,d0
               S06:000038C6:  02 40 00 1F
F00:4024                       cmpi #$15,d0
               S06:000038CA:  0C 40 00 15
F00:4025                       bne RTR_FAIL;
               S06:000038CE:  66 00 00 16
F00:4026                       
F00:4027                       movea #TESTSTATUS,a0
               S06:000038D2:  30 7C FF 00
F00:4028                       move.b #$1,$1e(a0)
               S06:000038D6:  11 7C 00 01 00 1E
F00:4029                       rts   
               S06:000038DC:  4E 75
F00:4030       
F00:4031          
F00:4032       BSR_FAR2:       move.l #$44444444,d4
               S06:000038DE:  28 3C 44 44 44 44
F00:4033                       rts
               S06:000038E4:  4E 75
F00:4034       
F00:4035       RTR_FAIL:
F00:4036           movea #TESTSTATUS,a0
               S06:000038E6:  30 7C FF 00
F00:4037           move.b #$1,$1e(a0)
               S06:000038EA:  11 7C 00 01 00 1E
F00:4038           rts
               S06:000038F0:  4E 75
F00:4039       
F00:4040       ;-----------------------------------------------------------
F00:4041       ;-----------------------------------------------------------
F00:4042       ; OPCODE : BCC
F00:4043       ;-----------------------------------------------------------
F00:4044       ;-----------------------------------------------------------
F00:4045       
F00:4046       op_BCC:         move #$00,CCR
               S06:000038F2:  44 FC 00 00
F00:4047                       bhi.s BCC1            ; Higher Than         C=0 AND Z=0
               S06:000038F6:  62 04
F00:4048                       bra BCC_FAIL;
               S06:000038F8:  60 00 00 9E
F00:4049                       
F00:4050       BCC1:           move #$01,CCR
               S06:000038FC:  44 FC 00 01
F00:4051                       bls.w BCC2            ; Lower or Same       C=1 OR Z=1
               S06:00003900:  63 00 00 06
F00:4052                       bra BCC_FAIL;
               S06:00003904:  60 00 00 92
F00:4053                        
F00:4054       BCC2:           move #$00,CCR
               S06:00003908:  44 FC 00 00
F00:4055                       bcc.s BCC3            ; Carry Clear         C=0
               S06:0000390C:  64 04
F00:4056                       bra BCC_FAIL;
               S06:0000390E:  60 00 00 88
F00:4057                          
F00:4058       BCC3:           move #$01,CCR
               S06:00003912:  44 FC 00 01
F00:4059                       bcs.w BCC4            ; Carry Set           C=1
               S06:00003916:  65 00 00 06
F00:4060                       bra BCC_FAIL;
               S06:0000391A:  60 00 00 7C
F00:4061                          
F00:4062       BCC4:           move #$00,CCR
               S06:0000391E:  44 FC 00 00
F00:4063                       bne.s BCC5            ; Not Equal           Z=0
               S06:00003922:  66 04
F00:4064                       bra BCC_FAIL;
               S06:00003924:  60 00 00 72
F00:4065                            
F00:4066       BCC5:           move #$04,CCR
               S06:00003928:  44 FC 00 04
F00:4067                       beq.w BCC6            ; Equal               Z=1
               S06:0000392C:  67 00 00 06
F00:4068                       bra BCC_FAIL;
               S06:00003930:  60 00 00 66
F00:4069                              
F00:4070       BCC6:           move #$00,CCR
               S06:00003934:  44 FC 00 00
F00:4071                       bvc.s BCC7            ; V Clear             V=0
               S06:00003938:  68 04
F00:4072                       bra BCC_FAIL;
               S06:0000393A:  60 00 00 5C
F00:4073                                
F00:4074       BCC7:           move #$02,CCR
               S06:0000393E:  44 FC 00 02
F00:4075                       bvs.w BCC8            ; V Set               V=1
               S06:00003942:  69 00 00 06
F00:4076                       bra BCC_FAIL;
               S06:00003946:  60 00 00 50
F00:4077                                 
F00:4078       BCC8:           move #$00,CCR
               S06:0000394A:  44 FC 00 00
F00:4079                       bpl.s BCC9            ; Plus                N=0
               S06:0000394E:  6A 04
F00:4080                       bra BCC_FAIL;
               S06:00003950:  60 00 00 46
F00:4081                                  
F00:4082       BCC9:           move #$08,CCR
               S06:00003954:  44 FC 00 08
F00:4083                       bmi.w BCC10           ; Minus               N=1
               S06:00003958:  6B 00 00 06
F00:4084                       bra BCC_FAIL;
               S06:0000395C:  60 00 00 3A
F00:4085                                   
F00:4086       BCC10:          move #$00,CCR
               S06:00003960:  44 FC 00 00
F00:4087                       bge.s BCC11           ; Greater or Equal    N=V
               S06:00003964:  6C 04
F00:4088                       bra BCC_FAIL;
               S06:00003966:  60 00 00 30
F00:4089                                    
F00:4090       BCC11:          move #$02,CCR
               S06:0000396A:  44 FC 00 02
F00:4091                       blt.w BCC12           ; Less Than           N!=V
               S06:0000396E:  6D 00 00 06
F00:4092                       bra BCC_FAIL;
               S06:00003972:  60 00 00 24
F00:4093                                      
F00:4094       BCC12:          move #$0A,CCR
               S06:00003976:  44 FC 00 0A
F00:4095                       bgt.s BCC13           ; Greater Than        N=V  AND Z=0
               S06:0000397A:  6E 04
F00:4096                       bra BCC_FAIL;
               S06:0000397C:  60 00 00 1A
F00:4097                                       
F00:4098       BCC13:          move #$06,CCR
               S06:00003980:  44 FC 00 06
F00:4099                       ble.w BCC14           ; Less Than or Equal  N!=V AND Z=1
               S06:00003984:  6F 00 00 06
F00:4100                       bra BCC_FAIL;
               S06:00003988:  60 00 00 0E
F00:4101                      
F00:4102       
F00:4103       BCC14:          movea #TESTSTATUS,a0
               S06:0000398C:  30 7C FF 00
F00:4104                       move.b #$1,$1f(a0)
               S06:00003990:  11 7C 00 01 00 1F
F00:4105                       rts
               S06:00003996:  4E 75
F00:4106         
F00:4107       
F00:4108       BCC_FAIL:
F00:4109           movea #TESTSTATUS,a0
               S06:00003998:  30 7C FF 00
F00:4110           move.b #$2,$1f(a0)
               S06:0000399C:  11 7C 00 02 00 1F
F00:4111           rts
               S06:000039A2:  4E 75
F00:4112       
F00:4113       ;-----------------------------------------------------------
F00:4114       ;-----------------------------------------------------------
F00:4115       ; OPCODE : DBCC
F00:4116       ;-----------------------------------------------------------
F00:4117       ;-----------------------------------------------------------
F00:4118       
F00:4119       op_DBCC:        move.l #$00000003,d0    ; Loop counter
               S06:000039A4:  20 3C 00 00 00 03
F00:4120                       move.l #$00000000,d1    ; Accumulator
               S06:000039AA:  22 3C 00 00 00 00
F00:4121                       move #$00,CCR
               S06:000039B0:  44 FC 00 00
F00:4122                       
F00:4123       DBCC_LOOP1:     addi.b #$1,d1
               S06:000039B4:  06 01 00 01
F00:4124                       dbf d0,DBCC_LOOP1
               S06:000039B8:  51 C8 FF FA
F00:4125                       
F00:4126                       cmpi.l #$00000004,d1  ; Check Accumulator results
               S06:000039BC:  0C 81 00 00 00 04
F00:4127                       bne DBCC_FAIL;       
               S06:000039C2:  66 00 00 20
F00:4128                         
F00:4129       DBCC_LOOP2:     addi.b #$1,d1
               S06:000039C6:  06 01 00 01
F00:4130                       dbcc d0,DBCC_LOOP2    ; Dont loop
               S06:000039CA:  54 C8 FF FA
F00:4131                       
F00:4132                       cmpi.l #$00000005,d1  ; Check Accumulator results
               S06:000039CE:  0C 81 00 00 00 05
F00:4133                       bne DBCC_FAIL;       
               S06:000039D4:  66 00 00 0E
F00:4134                   
F00:4135                       movea #TESTSTATUS,a0
               S06:000039D8:  30 7C FF 00
F00:4136                       move.b #$1,$20(a0)
               S06:000039DC:  11 7C 00 01 00 20
F00:4137                       rts
               S06:000039E2:  4E 75
F00:4138                       
F00:4139       DBCC_FAIL:
F00:4140           movea #TESTSTATUS,a0
               S06:000039E4:  30 7C FF 00
F00:4141           move.b #$2,$20(a0)
               S06:000039E8:  11 7C 00 02 00 20
F00:4142           rts
               S06:000039EE:  4E 75
F00:4143       
F00:4144       ;-----------------------------------------------------------
F00:4145       ;-----------------------------------------------------------
F00:4146       ; OPCODE : SCC
F00:4147       ;-----------------------------------------------------------
F00:4148       ;-----------------------------------------------------------
F00:4149       
F00:4150       op_SCC:         move #$01,CCR             
               S06:000039F0:  44 FC 00 01
F00:4151                       scc $00010000                   ; Clear the EA byte
               S06:000039F4:  54 F9 00 01 00 00
F00:4152                       cmpi.b #$00,$00010000
               S06:000039FA:  0C 39 00 00 00 01 00 00
F00:4153                       bne SCC_FAIL;       
               S06:00003A02:  66 00 00 24
F00:4154       
F00:4155                       move #$00,CCR
               S06:00003A06:  44 FC 00 00
F00:4156                       scc $00010000                   ; Set the EA byte to 0xFF
               S06:00003A0A:  54 F9 00 01 00 00
F00:4157                       cmpi.b #$FF,$00010000
               S06:00003A10:  0C 39 00 FF 00 01 00 00
F00:4158                       bne SCC_FAIL;       
               S06:00003A18:  66 00 00 0E
F00:4159       
F00:4160                       movea #TESTSTATUS,a0
               S06:00003A1C:  30 7C FF 00
F00:4161                       move.b #$1,$21(a0)
               S06:00003A20:  11 7C 00 01 00 21
F00:4162                       rts
               S06:00003A26:  4E 75
F00:4163                       
F00:4164       SCC_FAIL:
F00:4165           movea #TESTSTATUS,a0
               S06:00003A28:  30 7C FF 00
F00:4166           move.b #$2,$21(a0)
               S06:00003A2C:  11 7C 00 02 00 21
F00:4167           rts
               S06:00003A32:  4E 75
F00:4168       
F00:4169       ;-----------------------------------------------------------
F00:4170       ;-----------------------------------------------------------
F00:4171       ; OPCODE : ADDQ
F00:4172       ;-----------------------------------------------------------
F00:4173       ;-----------------------------------------------------------
F00:4174       
F00:4175       op_ADDQ:       
F00:4176       
F00:4177           ; BYTE
F00:4178                       move.l #$000000FF,d0    ; Loop counter
               S06:00003A34:  20 3C 00 00 00 FF
F00:4179                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003A3A:  22 3C 00 00 00 00
F00:4180                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003A40:  24 3C 00 00 00 00
F00:4181                       move.l #$00000000,d3   
               S06:00003A46:  26 3C 00 00 00 00
F00:4182                       move.l #$00000000,d4    
               S06:00003A4C:  28 3C 00 00 00 00
F00:4183                       move.l #$00000000,d5    
               S06:00003A52:  2A 3C 00 00 00 00
F00:4184                       move.l #$00000000,d6    
               S06:00003A58:  2C 3C 00 00 00 00
F00:4185                       move.l #$00000000,d7    
               S06:00003A5E:  2E 3C 00 00 00 00
F00:4186       
F00:4187       ADDQ_LOOP1:     addq.b #3,d5          
               S06:00003A64:  56 05
F00:4188                       move SR,d6      
               S06:00003A66:  40 C6
F00:4189                       andi.l #$1F,d6        ; Isolate flags
               S06:00003A68:  02 86 00 00 00 1F
F00:4190                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003A6E:  D2 86
F00:4191                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003A70:  D4 85
F00:4192                       dbf d0,ADDQ_LOOP1
               S06:00003A72:  51 C8 FF F0
F00:4193                       
F00:4194                       cmpi.l #$0000043D,d1
               S06:00003A76:  0C 81 00 00 04 3D
F00:4195                       bne ADDQ_FAIL;       
               S06:00003A7C:  66 00 00 DA
F00:4196                       cmpi.l #$00007F80,d2
               S06:00003A80:  0C 82 00 00 7F 80
F00:4197                       bne ADDQ_FAIL;       
               S06:00003A86:  66 00 00 D0
F00:4198       
F00:4199       
F00:4200           ; WORD
F00:4201                       move.l #$000000FF,d0    ; Loop counter
               S06:00003A8A:  20 3C 00 00 00 FF
F00:4202                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003A90:  22 3C 00 00 00 00
F00:4203                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003A96:  24 3C 00 00 00 00
F00:4204                       move.l #$00000000,d3   
               S06:00003A9C:  26 3C 00 00 00 00
F00:4205                       move.l #$00000000,d4    
               S06:00003AA2:  28 3C 00 00 00 00
F00:4206                       move.l #$0000FFF0,d5    
               S06:00003AA8:  2A 3C 00 00 FF F0
F00:4207                       move.l #$00000000,d6    
               S06:00003AAE:  2C 3C 00 00 00 00
F00:4208                       move.l #$00000000,d7   
               S06:00003AB4:  2E 3C 00 00 00 00
F00:4209                       move.l #$00000100,a0   
               S06:00003ABA:  20 7C 00 00 01 00
F00:4210       
F00:4211       ADDQ_LOOP2:     addq.w #5,d5   
               S06:00003AC0:  5A 45
F00:4212                       move SR,d6      
               S06:00003AC2:  40 C6
F00:4213                       andi.l #$1F,d6        ; Isolate flags
               S06:00003AC4:  02 86 00 00 00 1F
F00:4214                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003ACA:  D2 86
F00:4215                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003ACC:  D4 85
F00:4216                       dbf d0,ADDQ_LOOP2
               S06:00003ACE:  51 C8 FF F0
F00:4217       
F00:4218                       cmpi.l #$00000029,d1
               S06:00003AD2:  0C 81 00 00 00 29
F00:4219                       bne ADDQ_FAIL;       
               S06:00003AD8:  66 00 00 7E
F00:4220                       cmpi.l #$00057280,d2
               S06:00003ADC:  0C 82 00 05 72 80
F00:4221                       bne ADDQ_FAIL;       
               S06:00003AE2:  66 00 00 74
F00:4222       
F00:4223       
F00:4224           ; LONG
F00:4225                       move.l #$000000FF,d0    ; Loop counter
               S06:00003AE6:  20 3C 00 00 00 FF
F00:4226                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003AEC:  22 3C 00 00 00 00
F00:4227                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003AF2:  24 3C 00 00 00 00
F00:4228                       move.l #$00000000,d3   
               S06:00003AF8:  26 3C 00 00 00 00
F00:4229                       move.l #$00000000,d4    
               S06:00003AFE:  28 3C 00 00 00 00
F00:4230                       move.l #$FFFFFFF0,d5    
               S06:00003B04:  2A 3C FF FF FF F0
F00:4231                       move.l #$00000000,d6    
               S06:00003B0A:  2C 3C 00 00 00 00
F00:4232                       move.l #$00000000,d7   
               S06:00003B10:  2E 3C 00 00 00 00
F00:4233       
F00:4234       ADDQ_LOOP3:     addq.l #1,d5          
               S06:00003B16:  52 85
F00:4235                       move SR,d6      
               S06:00003B18:  40 C6
F00:4236                       andi.l #$1F,d6        ; Isolate flags
               S06:00003B1A:  02 86 00 00 00 1F
F00:4237                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003B20:  D2 86
F00:4238                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003B22:  D4 85
F00:4239                       dbf d0,ADDQ_LOOP3
               S06:00003B24:  51 C8 FF F0
F00:4240       
F00:4241                       cmpi.l #$0000008D,d1
               S06:00003B28:  0C 81 00 00 00 8D
F00:4242                       bne ADDQ_FAIL;       
               S06:00003B2E:  66 00 00 28
F00:4243                       cmpi.l #$00007080,d2
               S06:00003B32:  0C 82 00 00 70 80
F00:4244                       bne ADDQ_FAIL;      
               S06:00003B38:  66 00 00 1E
F00:4245       
F00:4246           ; Check that Flags are not updated for Address registers
F00:4247                       move.l #$0000FFFF,a0   
               S06:00003B3C:  20 7C 00 00 FF FF
F00:4248                       move #$00,CCR         ; Clear flags
               S06:00003B42:  44 FC 00 00
F00:4249                       addq.w #$7,a0         
               S06:00003B46:  5E 48
F00:4250                       bcs ADDQ_FAIL;
               S06:00003B48:  65 00 00 0E
F00:4251       
F00:4252                       movea #TESTSTATUS,a0
               S06:00003B4C:  30 7C FF 00
F00:4253                       move.b #$1,$22(a0)
               S06:00003B50:  11 7C 00 01 00 22
F00:4254                       rts
               S06:00003B56:  4E 75
F00:4255               
F00:4256       ADDQ_FAIL: 
F00:4257           movea #TESTSTATUS,a0
               S06:00003B58:  30 7C FF 00
F00:4258           move.b #$2,$22(a0)
               S06:00003B5C:  11 7C 00 02 00 22
F00:4259           rts
               S06:00003B62:  4E 75
F00:4260       
F00:4261       ;-----------------------------------------------------------
F00:4262       ;-----------------------------------------------------------
F00:4263       ; OPCODE : SUBQ
F00:4264       ;-----------------------------------------------------------
F00:4265       ;-----------------------------------------------------------
F00:4266       
F00:4267       op_SUBQ:       
F00:4268       
F00:4269           ; BYTE
F00:4270                       move.l #$000000FF,d0    ; Loop counter
               S06:00003B64:  20 3C 00 00 00 FF
F00:4271                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003B6A:  22 3C 00 00 00 00
F00:4272                       move.l #$00001234,d2    ; Data results accumulator
               S06:00003B70:  24 3C 00 00 12 34
F00:4273                       move.l #$00000000,d3   
               S06:00003B76:  26 3C 00 00 00 00
F00:4274                       move.l #$00000000,d4    
               S06:00003B7C:  28 3C 00 00 00 00
F00:4275                       move.l #$00000012,d5    
               S06:00003B82:  2A 3C 00 00 00 12
F00:4276                       move.l #$00000000,d6    
               S06:00003B88:  2C 3C 00 00 00 00
F00:4277                       move.l #$00000000,d7    
               S06:00003B8E:  2E 3C 00 00 00 00
F00:4278       
F00:4279       SUBQ_LOOP1:     subq.b #1,d5          
               S06:00003B94:  53 05
F00:4280                       move SR,d6      
               S06:00003B96:  40 C6
F00:4281                       andi.l #$1F,d6        ; Isolate flags
               S06:00003B98:  02 86 00 00 00 1F
F00:4282                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003B9E:  D2 86
F00:4283                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003BA0:  D4 85
F00:4284                       dbf d0,SUBQ_LOOP1
               S06:00003BA2:  51 C8 FF F0
F00:4285                       
F00:4286                       cmpi.l #$00000417,d1
               S06:00003BA6:  0C 81 00 00 04 17
F00:4287                       bne SUBQ_FAIL;       
               S06:00003BAC:  66 00 00 DA
F00:4288                       cmpi.l #$000091B4,d2
               S06:00003BB0:  0C 82 00 00 91 B4
F00:4289                       bne SUBQ_FAIL;       
               S06:00003BB6:  66 00 00 D0
F00:4290       
F00:4291       
F00:4292           ; WORD
F00:4293                       move.l #$000000FF,d0    ; Loop counter
               S06:00003BBA:  20 3C 00 00 00 FF
F00:4294                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003BC0:  22 3C 00 00 00 00
F00:4295                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003BC6:  24 3C 00 00 00 00
F00:4296                       move.l #$00000000,d3   
               S06:00003BCC:  26 3C 00 00 00 00
F00:4297                       move.l #$00000000,d4    
               S06:00003BD2:  28 3C 00 00 00 00
F00:4298                       move.l #$00000002,d5    
               S06:00003BD8:  2A 3C 00 00 00 02
F00:4299                       move.l #$00000000,d6    
               S06:00003BDE:  2C 3C 00 00 00 00
F00:4300                       move.l #$00000000,d7   
               S06:00003BE4:  2E 3C 00 00 00 00
F00:4301                       move.l #$00000100,a0   
               S06:00003BEA:  20 7C 00 00 01 00
F00:4302       
F00:4303       SUBQ_LOOP2:     subq.w #5,d5   
               S06:00003BF0:  5B 45
F00:4304                       move SR,d6      
               S06:00003BF2:  40 C6
F00:4305                       andi.l #$1F,d6        ; Isolate flags
               S06:00003BF4:  02 86 00 00 00 1F
F00:4306                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003BFA:  D2 86
F00:4307                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003BFC:  D4 85
F00:4308                       dbf d0,SUBQ_LOOP2
               S06:00003BFE:  51 C8 FF F0
F00:4309       
F00:4310                       cmpi.l #$00000811,d1
               S06:00003C02:  0C 81 00 00 08 11
F00:4311                       bne SUBQ_FAIL;       
               S06:00003C08:  66 00 00 7E
F00:4312                       cmpi.l #$00FD7F80,d2
               S06:00003C0C:  0C 82 00 FD 7F 80
F00:4313                       bne SUBQ_FAIL;       
               S06:00003C12:  66 00 00 74
F00:4314       
F00:4315       
F00:4316           ; LONG
F00:4317                       move.l #$000000FF,d0    ; Loop counter
               S06:00003C16:  20 3C 00 00 00 FF
F00:4318                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003C1C:  22 3C 00 00 00 00
F00:4319                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003C22:  24 3C 00 00 00 00
F00:4320                       move.l #$00000000,d3   
               S06:00003C28:  26 3C 00 00 00 00
F00:4321                       move.l #$00000000,d4    
               S06:00003C2E:  28 3C 00 00 00 00
F00:4322                       move.l #$00000007,d5    
               S06:00003C34:  2A 3C 00 00 00 07
F00:4323                       move.l #$00000000,d6    
               S06:00003C3A:  2C 3C 00 00 00 00
F00:4324                       move.l #$00000000,d7   
               S06:00003C40:  2E 3C 00 00 00 00
F00:4325       
F00:4326       SUBQ_LOOP3:     subq.l #1,d5          
               S06:00003C46:  53 85
F00:4327                       move SR,d6      
               S06:00003C48:  40 C6
F00:4328                       andi.l #$1F,d6        ; Isolate flags
               S06:00003C4A:  02 86 00 00 00 1F
F00:4329                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003C50:  D2 86
F00:4330                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003C52:  D4 85
F00:4331                       dbf d0,SUBQ_LOOP3
               S06:00003C54:  51 C8 FF F0
F00:4332       
F00:4333                       cmpi.l #$000007DD,d1
               S06:00003C58:  0C 81 00 00 07 DD
F00:4334                       bne SUBQ_FAIL;       
               S06:00003C5E:  66 00 00 28
F00:4335                       cmpi.l #$FFFF8680,d2
               S06:00003C62:  0C 82 FF FF 86 80
F00:4336                       bne SUBQ_FAIL;      
               S06:00003C68:  66 00 00 1E
F00:4337       
F00:4338           ; Check that Flags are not updated for Address registers
F00:4339                       move.l #$0001FFFF,a0   
               S06:00003C6C:  20 7C 00 01 FF FF
F00:4340                       move #$00,CCR         ; Clear flags
               S06:00003C72:  44 FC 00 00
F00:4341                       subq.w #$7,a0         
               S06:00003C76:  5F 48
F00:4342                       bcs SUBQ_FAIL;
               S06:00003C78:  65 00 00 0E
F00:4343       
F00:4344                       movea #TESTSTATUS,a0
               S06:00003C7C:  30 7C FF 00
F00:4345                       move.b #$1,$23(a0)
               S06:00003C80:  11 7C 00 01 00 23
F00:4346                       rts
               S06:00003C86:  4E 75
F00:4347       
F00:4348       SUBQ_FAIL:
F00:4349           movea #TESTSTATUS,a0
               S06:00003C88:  30 7C FF 00
F00:4350           move.b #$2,$23(a0)  
               S06:00003C8C:  11 7C 00 02 00 23
F00:4351           rts
               S06:00003C92:  4E 75
F00:4352       
F00:4353       ;-----------------------------------------------------------
F00:4354       ;-----------------------------------------------------------
F00:4355       ; OPCODE : MOVEQ
F00:4356       ;-----------------------------------------------------------
F00:4357       ;-----------------------------------------------------------
F00:4358       
F00:4359       op_MOVEQ:     
F00:4360                       move.l #$00000000,d0  
               S06:00003C94:  20 3C 00 00 00 00
F00:4361                       moveq #$0,d0
               S06:00003C9A:  70 00
F00:4362                       bne MOVEQ_FAIL;
               S06:00003C9C:  66 00 00 32
F00:4363                       cmpi.l #$00000000,d0
               S06:00003CA0:  0C 80 00 00 00 00
F00:4364                       bne MOVEQ_FAIL;
               S06:00003CA6:  66 00 00 28
F00:4365       
F00:4366                       move.l #$00000000,d0  
               S06:00003CAA:  20 3C 00 00 00 00
F00:4367 E2028                 moveq #$80,d0
               S06:00003CB0:  70 80
F00:4368                       beq MOVEQ_FAIL;
               S06:00003CB2:  67 00 00 1C
F00:4369                       bpl MOVEQ_FAIL;
               S06:00003CB6:  6A 00 00 18
F00:4370                       cmpi.l #$FFFFFF80,d0
               S06:00003CBA:  0C 80 FF FF FF 80
F00:4371                       bne MOVEQ_FAIL;
               S06:00003CC0:  66 00 00 0E
F00:4372       
F00:4373                       movea #TESTSTATUS,a0
               S06:00003CC4:  30 7C FF 00
F00:4374                       move.b #$1,$24(a0)
               S06:00003CC8:  11 7C 00 01 00 24
F00:4375                       rts
               S06:00003CCE:  4E 75
F00:4376       
F00:4377       MOVEQ_FAIL:
F00:4378           movea #TESTSTATUS,a0
               S06:00003CD0:  30 7C FF 00
F00:4379           move.b #$2,$24(a0)
               S06:00003CD4:  11 7C 00 02 00 24
F00:4380           rts
               S06:00003CDA:  4E 75
F00:4381          
F00:4382       ;-----------------------------------------------------------
F00:4383       ;-----------------------------------------------------------
F00:4384       ; OPCODE : DIVU
F00:4385       ;-----------------------------------------------------------
F00:4386       ;-----------------------------------------------------------
F00:4387       
F00:4388       op_DIVU:     
F00:4389       
F00:4390                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:00003CDC:  20 3C A5 A5 A5 A5
F00:4391                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:00003CE2:  22 3C 00 00 5A 5A
F00:4392                       move.l #$a5a5a5a5,d2
               S06:00003CE8:  24 3C A5 A5 A5 A5
F00:4393                       move.l #$00000000,d3
               S06:00003CEE:  26 3C 00 00 00 00
F00:4394                       move.l #$00000000,d4        ; Cumulative data results
               S06:00003CF4:  28 3C 00 00 00 00
F00:4395                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003CFA:  2A 3C 00 00 00 00
F00:4396                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003D00:  2C 3C 00 00 00 0E
F00:4397                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003D06:  2E 3C 00 00 00 1E
F00:4398       
F00:4399       
F00:4400       DIVU_OUTER1:    divu d1,d0               
               S06:00003D0C:  80 C1
F00:4401                       move SR,d3      
               S06:00003D0E:  40 C3
F00:4402                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003D10:  02 83 00 00 00 0C
F00:4403                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D16:  DA 83
F00:4404                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003D18:  D8 80
F00:4405                       lsr.l #$1,d1
               S06:00003D1A:  E2 89
F00:4406       
F00:4407                       dbf d6,DIVU_OUTER1
               S06:00003D1C:  51 CE FF EE
F00:4408                       lsr.l #$1,d2
               S06:00003D20:  E2 8A
F00:4409                       move.l d2,d0
               S06:00003D22:  20 02
F00:4410                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:00003D24:  22 3C 00 00 5A 5A
F00:4411                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003D2A:  2C 3C 00 00 00 0E
F00:4412                       dbf d7,DIVU_OUTER1
               S06:00003D30:  51 CF FF DA
F00:4413                       
F00:4414                       cmpi.l #$92FEDB89,d4      ; Check the data results
               S06:00003D34:  0C 84 92 FE DB 89
F00:4415                       bne DIVU_FAIL;                
               S06:00003D3A:  66 00 00 18
F00:4416                            
F00:4417                       cmpi.l #$00000110,d5      ; Check the Flag results
               S06:00003D3E:  0C 85 00 00 01 10
F00:4418                       bne DIVU_FAIL;                 
               S06:00003D44:  66 00 00 0E
F00:4419                 
F00:4420                       movea #TESTSTATUS,a0
               S06:00003D48:  30 7C FF 00
F00:4421                       move.b #$1,$25(a0)
               S06:00003D4C:  11 7C 00 01 00 25
F00:4422                       rts
               S06:00003D52:  4E 75
F00:4423                       
F00:4424       DIVU_FAIL:
F00:4425           movea #TESTSTATUS,a0
               S06:00003D54:  30 7C FF 00
F00:4426           move.b #$2,$25(a0)
               S06:00003D58:  11 7C 00 02 00 25
F00:4427           rts
               S06:00003D5E:  4E 75
F00:4428          
F00:4429       ;-----------------------------------------------------------
F00:4430       ;-----------------------------------------------------------
F00:4431       ; OPCODE : DIVS
F00:4432       ;-----------------------------------------------------------
F00:4433       ;-----------------------------------------------------------
F00:4434       
F00:4435       op_DIVS:     
F00:4436       
F00:4437                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:00003D60:  20 3C A5 A5 A5 A5
F00:4438                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:00003D66:  22 3C 00 00 5A 5A
F00:4439                       move.l #$a5a5a5a5,d2
               S06:00003D6C:  24 3C A5 A5 A5 A5
F00:4440                       move.l #$00000000,d3
               S06:00003D72:  26 3C 00 00 00 00
F00:4441                       move.l #$00000000,d4        ; Cumulative data results
               S06:00003D78:  28 3C 00 00 00 00
F00:4442                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003D7E:  2A 3C 00 00 00 00
F00:4443                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003D84:  2C 3C 00 00 00 0E
F00:4444                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003D8A:  2E 3C 00 00 00 1E
F00:4445       
F00:4446       
F00:4447       DIVS_OUTER1:    divs d1,d0              
               S06:00003D90:  81 C1
F00:4448                       move SR,d3      
               S06:00003D92:  40 C3
F00:4449                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003D94:  02 83 00 00 00 0C
F00:4450                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D9A:  DA 83
F00:4451                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003D9C:  D8 80
F00:4452                       lsr.l #$1,d1
               S06:00003D9E:  E2 89
F00:4453       
F00:4454                       dbf d6,DIVS_OUTER1
               S06:00003DA0:  51 CE FF EE
F00:4455                       lsr.l #$1,d2
               S06:00003DA4:  E2 8A
F00:4456                       move.l d2,d0
               S06:00003DA6:  20 02
F00:4457                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:00003DA8:  22 3C 00 00 5A 5A
F00:4458                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003DAE:  2C 3C 00 00 00 0E
F00:4459                       dbf d7,DIVS_OUTER1
               S06:00003DB4:  51 CF FF DA
F00:4460                       
F00:4461                       cmpi.l #$4EC5D057,d4      ; Check the data results
               S06:00003DB8:  0C 84 4E C5 D0 57
F00:4462                       bne DIVS_FAIL;                
               S06:00003DBE:  66 00 00 18
F00:4463       
F00:4464                       cmpi.l #$00000038,d5      ; Check the Flag results
               S06:00003DC2:  0C 85 00 00 00 38
F00:4465                       bne DIVS_FAIL;                 
               S06:00003DC8:  66 00 00 0E
F00:4466                 
F00:4467                       movea #TESTSTATUS,a0
               S06:00003DCC:  30 7C FF 00
F00:4468                       move.b #$1,$26(a0)
               S06:00003DD0:  11 7C 00 01 00 26
F00:4469                       rts
               S06:00003DD6:  4E 75
F00:4470              
F00:4471       DIVS_FAIL:
F00:4472           movea #TESTSTATUS,a0
               S06:00003DD8:  30 7C FF 00
F00:4473           move.b #$2,$26(a0)
               S06:00003DDC:  11 7C 00 02 00 26
F00:4474           rts
               S06:00003DE2:  4E 75
F00:4475          
F00:4476       ;-----------------------------------------------------------
F00:4477       ;-----------------------------------------------------------
F00:4478       ; OPCODE : OR
F00:4479       ;-----------------------------------------------------------
F00:4480       ;-----------------------------------------------------------
F00:4481       
F00:4482       op_OR:   
F00:4483       
F00:4484         ;; <EA> to Register
F00:4485       
F00:4486                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003DE4:  20 3C A5 A5 A5 A5
F00:4487                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003DEA:  22 3C 81 67 E1 23
F00:4488                       move.l #$a5a5a5a5,d2
               S06:00003DF0:  24 3C A5 A5 A5 A5
F00:4489                       move.l #$00000000,d3
               S06:00003DF6:  26 3C 00 00 00 00
F00:4490                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003DFC:  28 3C 00 00 00 00
F00:4491                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003E02:  2A 3C 00 00 00 00
F00:4492                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E08:  2C 3C 00 00 00 1E
F00:4493                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003E0E:  2E 3C 00 00 00 1E
F00:4494                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003E14:  20 7C 00 00 01 00
F00:4495       
F00:4496       
F00:4497       OR_OUTER1:    
F00:4498        
F00:4499           ; BYTE     
F00:4500                       move.l d1,(a0)
               S06:00003E1A:  20 81
F00:4501                       or.b (a0),d0             
               S06:00003E1C:  80 10
F00:4502                       move SR,d3      
               S06:00003E1E:  40 C3
F00:4503                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003E20:  02 83 00 00 00 0C
F00:4504                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E26:  DA 83
F00:4505                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E28:  D8 80
F00:4506        
F00:4507           ; WORD      
F00:4508                       move.l d1,(a0)
               S06:00003E2A:  20 81
F00:4509                       or.w (a0),d0             
               S06:00003E2C:  80 50
F00:4510                       move SR,d3      
               S06:00003E2E:  40 C3
F00:4511                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003E30:  02 83 00 00 00 0C
F00:4512                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E36:  DA 83
F00:4513                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E38:  D8 80
F00:4514        
F00:4515           ; LONG      
F00:4516                       move.l d1,(a0)
               S06:00003E3A:  20 81
F00:4517                       or.l (a0),d0             
               S06:00003E3C:  80 90
F00:4518                       move SR,d3      
               S06:00003E3E:  40 C3
F00:4519                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003E40:  02 83 00 00 00 0F
F00:4520                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E46:  DA 83
F00:4521                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E48:  D8 80
F00:4522                       
F00:4523                       
F00:4524                       lsr.l #$1,d1
               S06:00003E4A:  E2 89
F00:4525                       dbf d6,OR_OUTER1
               S06:00003E4C:  51 CE FF CC
F00:4526                       lsr.l #$1,d2
               S06:00003E50:  E2 8A
F00:4527                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003E52:  22 3C 81 67 E1 23
F00:4528                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E58:  2C 3C 00 00 00 1E
F00:4529                       dbf d7,OR_OUTER1
               S06:00003E5E:  51 CF FF BA
F00:4530                       
F00:4531                       cmpi.l #$76EAC803,d4      ; Check the data results
               S06:00003E62:  0C 84 76 EA C8 03
F00:4532                       bne OR_FAIL;                
               S06:00003E68:  66 00 00 AA
F00:4533                       cmpi.l #$00005A18,d5      ; Check the Flag results
               S06:00003E6C:  0C 85 00 00 5A 18
F00:4534                       bne OR_FAIL;                
               S06:00003E72:  66 00 00 A0
F00:4535                          
F00:4536                          
F00:4537         ;; Register to <EA>
F00:4538       
F00:4539                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003E76:  20 3C 86 73 83 74
F00:4540                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003E7C:  22 3C FC 55 F2 FE
F00:4541                       move.l #$86738374,d2
               S06:00003E82:  24 3C 86 73 83 74
F00:4542                       move.l #$00000000,d3
               S06:00003E88:  26 3C 00 00 00 00
F00:4543                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003E8E:  28 3C 00 00 00 00
F00:4544                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003E94:  2A 3C 00 00 00 00
F00:4545                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E9A:  2C 3C 00 00 00 1E
F00:4546                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003EA0:  2E 3C 00 00 00 1D
F00:4547                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003EA6:  20 7C 00 00 01 00
F00:4548       
F00:4549       
F00:4550       OR_OUTER2:    
F00:4551        
F00:4552           ; BYTE     
F00:4553                       move.l d0,(a0)
               S06:00003EAC:  20 80
F00:4554                       or.b d1,(a0)             
               S06:00003EAE:  83 10
F00:4555                       move SR,d3      
               S06:00003EB0:  40 C3
F00:4556                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003EB2:  02 83 00 00 00 0C
F00:4557                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003EB8:  DA 83
F00:4558                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003EBA:  D8 90
F00:4559        
F00:4560           ; WORD      
F00:4561                       move.l d0,(a0)
               S06:00003EBC:  20 80
F00:4562                       or.w d1,(a0)  
               S06:00003EBE:  83 50
F00:4563                       move SR,d3      
               S06:00003EC0:  40 C3
F00:4564                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003EC2:  02 83 00 00 00 0C
F00:4565                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003EC8:  DA 83
F00:4566                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003ECA:  D8 90
F00:4567        
F00:4568           ; LONG      
F00:4569                       move.l d0,(a0)
               S06:00003ECC:  20 80
F00:4570                       or.l d1,(a0)  
               S06:00003ECE:  83 90
F00:4571                       move SR,d3      
               S06:00003ED0:  40 C3
F00:4572                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003ED2:  02 83 00 00 00 0F
F00:4573                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003ED8:  DA 83
F00:4574                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003EDA:  D8 90
F00:4575                       
F00:4576                       
F00:4577                       lsr.l #$1,d1
               S06:00003EDC:  E2 89
F00:4578                       dbf d6,OR_OUTER2
               S06:00003EDE:  51 CE FF CC
F00:4579                       lsr.l #$1,d2
               S06:00003EE2:  E2 8A
F00:4580                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003EE4:  22 3C 81 67 E1 23
F00:4581                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003EEA:  2C 3C 00 00 00 1E
F00:4582                       dbf d7,OR_OUTER2
               S06:00003EF0:  51 CF FF BA
F00:4583                       
F00:4584                       cmpi.l #$FA82B9E4,d4      ; Check the data results
               S06:00003EF4:  0C 84 FA 82 B9 E4
F00:4585                       bne OR_FAIL;                
               S06:00003EFA:  66 00 00 18
F00:4586                       cmpi.l #$00005730,d5      ; Check the Flag results
               S06:00003EFE:  0C 85 00 00 57 30
F00:4587                       bne OR_FAIL;                 
               S06:00003F04:  66 00 00 0E
F00:4588                          
F00:4589                       movea #TESTSTATUS,a0
               S06:00003F08:  30 7C FF 00
F00:4590                       move.b #$1,$27(a0)
               S06:00003F0C:  11 7C 00 01 00 27
F00:4591                       rts
               S06:00003F12:  4E 75
F00:4592                       
F00:4593       OR_FAIL:
F00:4594           movea #TESTSTATUS,a0
               S06:00003F14:  30 7C FF 00
F00:4595           move.b #$2,$27(a0)
               S06:00003F18:  11 7C 00 02 00 27
F00:4596           rts 
               S06:00003F1E:  4E 75
F00:4597       
F00:4598       ;-----------------------------------------------------------
F00:4599       ;-----------------------------------------------------------
F00:4600       ; OPCODE : AND
F00:4601       ;-----------------------------------------------------------
F00:4602       ;-----------------------------------------------------------
F00:4603       
F00:4604       op_AND:   
F00:4605       
F00:4606         ;; <EA> to Register
F00:4607       
F00:4608                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003F20:  20 3C A5 A5 A5 A5
F00:4609                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003F26:  22 3C 81 67 E1 23
F00:4610                       move.l #$a5a5a5a5,d2
               S06:00003F2C:  24 3C A5 A5 A5 A5
F00:4611                       move.l #$00000000,d3
               S06:00003F32:  26 3C 00 00 00 00
F00:4612                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003F38:  28 3C 00 00 00 00
F00:4613                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003F3E:  2A 3C 00 00 00 00
F00:4614                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F44:  2C 3C 00 00 00 1E
F00:4615                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003F4A:  2E 3C 00 00 00 1E
F00:4616                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003F50:  20 7C 00 00 01 00
F00:4617       
F00:4618       
F00:4619       AND_OUTER1:    
F00:4620        
F00:4621           ; BYTE     
F00:4622                       move.l d1,(a0)
               S06:00003F56:  20 81
F00:4623                       and.b (a0),d0             
               S06:00003F58:  C0 10
F00:4624                       move SR,d3      
               S06:00003F5A:  40 C3
F00:4625                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003F5C:  02 83 00 00 00 0C
F00:4626                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003F62:  DA 83
F00:4627                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003F64:  D8 80
F00:4628        
F00:4629           ; WORD      
F00:4630                       move.l d1,(a0)
               S06:00003F66:  20 81
F00:4631                       and.w (a0),d0             
               S06:00003F68:  C0 50
F00:4632                       move SR,d3      
               S06:00003F6A:  40 C3
F00:4633                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003F6C:  02 83 00 00 00 0C
F00:4634                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003F72:  DA 83
F00:4635                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003F74:  D8 80
F00:4636        
F00:4637           ; LONG      
F00:4638                       move.l d1,(a0)
               S06:00003F76:  20 81
F00:4639                       and.l (a0),d0             
               S06:00003F78:  C0 90
F00:4640                       move SR,d3      
               S06:00003F7A:  40 C3
F00:4641                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003F7C:  02 83 00 00 00 0F
F00:4642                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003F82:  DA 83
F00:4643                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003F84:  D8 80
F00:4644                       
F00:4645                       
F00:4646                       lsr.l #$1,d1
               S06:00003F86:  E2 89
F00:4647                       dbf d6,AND_OUTER1
               S06:00003F88:  51 CE FF CC
F00:4648                       lsr.l #$1,d2
               S06:00003F8C:  E2 8A
F00:4649                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003F8E:  22 3C 81 67 E1 23
F00:4650                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F94:  2C 3C 00 00 00 1E
F00:4651                       dbf d7,AND_OUTER1
               S06:00003F9A:  51 CF FF BA
F00:4652                       
F00:4653                       cmpi.l #$CF212883,d4      ; Check the data results
               S06:00003F9E:  0C 84 CF 21 28 83
F00:4654                       bne AND_FAIL;                
               S06:00003FA4:  66 00 00 AA
F00:4655                       cmpi.l #$00002D10,d5      ; Check the Flag results
               S06:00003FA8:  0C 85 00 00 2D 10
F00:4656                       bne AND_FAIL;                
               S06:00003FAE:  66 00 00 A0
F00:4657                          
F00:4658                          
F00:4659         ;; Register to <EA>
F00:4660       
F00:4661                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003FB2:  20 3C 86 73 83 74
F00:4662                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003FB8:  22 3C FC 55 F2 FE
F00:4663                       move.l #$86738374,d2
               S06:00003FBE:  24 3C 86 73 83 74
F00:4664                       move.l #$00000000,d3
               S06:00003FC4:  26 3C 00 00 00 00
F00:4665                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003FCA:  28 3C 00 00 00 00
F00:4666                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003FD0:  2A 3C 00 00 00 00
F00:4667                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003FD6:  2C 3C 00 00 00 1E
F00:4668                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003FDC:  2E 3C 00 00 00 1D
F00:4669                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003FE2:  20 7C 00 00 01 00
F00:4670       
F00:4671       
F00:4672       AND_OUTER2:    
F00:4673        
F00:4674           ; BYTE     
F00:4675                       move.l d0,(a0)
               S06:00003FE8:  20 80
F00:4676                       and.b d1,(a0)             
               S06:00003FEA:  C3 10
F00:4677                       move SR,d3      
               S06:00003FEC:  40 C3
F00:4678                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003FEE:  02 83 00 00 00 0C
F00:4679                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003FF4:  DA 83
F00:4680                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003FF6:  D8 90
F00:4681        
F00:4682           ; WORD      
F00:4683                       move.l d0,(a0)
               S06:00003FF8:  20 80
F00:4684                       and.w d1,(a0)  
               S06:00003FFA:  C3 50
F00:4685                       move SR,d3      
               S06:00003FFC:  40 C3
F00:4686                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003FFE:  02 83 00 00 00 0C
F00:4687                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004004:  DA 83
F00:4688                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00004006:  D8 90
F00:4689        
F00:4690           ; LONG      
F00:4691                       move.l d0,(a0)
               S06:00004008:  20 80
F00:4692                       and.l d1,(a0)  
               S06:0000400A:  C3 90
F00:4693                       move SR,d3      
               S06:0000400C:  40 C3
F00:4694                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000400E:  02 83 00 00 00 0F
F00:4695                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004014:  DA 83
F00:4696                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00004016:  D8 90
F00:4697                       
F00:4698                       
F00:4699                       lsr.l #$1,d1
               S06:00004018:  E2 89
F00:4700                       dbf d6,AND_OUTER2
               S06:0000401A:  51 CE FF CC
F00:4701                       lsr.l #$1,d2
               S06:0000401E:  E2 8A
F00:4702                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004020:  22 3C 81 67 E1 23
F00:4703                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004026:  2C 3C 00 00 00 1E
F00:4704                       dbf d7,AND_OUTER2
               S06:0000402C:  51 CF FF BA
F00:4705                       
F00:4706                       cmpi.l #$4A3DE544,d4      ; Check the data results
               S06:00004030:  0C 84 4A 3D E5 44
F00:4707                       bne AND_FAIL;                
               S06:00004036:  66 00 00 18
F00:4708                       cmpi.l #$000018E8,d5      ; Check the Flag results
               S06:0000403A:  0C 85 00 00 18 E8
F00:4709                       bne AND_FAIL;                 
               S06:00004040:  66 00 00 0E
F00:4710                          
F00:4711                       movea #TESTSTATUS,a0
               S06:00004044:  30 7C FF 00
F00:4712                       move.b #$1,$28(a0) 
               S06:00004048:  11 7C 00 01 00 28
F00:4713                       rts
               S06:0000404E:  4E 75
F00:4714                       
F00:4715       AND_FAIL: 
F00:4716           movea #TESTSTATUS,a0
               S06:00004050:  30 7C FF 00
F00:4717           move.b #$2,$28(a0)    
               S06:00004054:  11 7C 00 02 00 28
F00:4718           rts     
               S06:0000405A:  4E 75
F00:4719       
F00:4720       ;-----------------------------------------------------------
F00:4721       ;-----------------------------------------------------------
F00:4722       ; OPCODE : EOR
F00:4723       ;-----------------------------------------------------------
F00:4724       ;-----------------------------------------------------------
F00:4725       
F00:4726       op_EOR:   
F00:4727        
F00:4728         ;; Register to <EA>
F00:4729       
F00:4730                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:0000405C:  20 3C 86 73 83 74
F00:4731                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00004062:  22 3C FC 55 F2 FE
F00:4732                       move.l #$86738374,d2
               S06:00004068:  24 3C 86 73 83 74
F00:4733                       move.l #$00000000,d3
               S06:0000406E:  26 3C 00 00 00 00
F00:4734                       move.l #$00000000,d4       ; Cumulative data results
               S06:00004074:  28 3C 00 00 00 00
F00:4735                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000407A:  2A 3C 00 00 00 00
F00:4736                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004080:  2C 3C 00 00 00 1E
F00:4737                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00004086:  2E 3C 00 00 00 1D
F00:4738                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:0000408C:  20 7C 00 00 01 00
F00:4739       
F00:4740       
F00:4741       EOR_OUTER2:    
F00:4742        
F00:4743           ; BYTE     
F00:4744                       move.l d0,(a0)
               S06:00004092:  20 80
F00:4745                       eor.b d1,(a0)             
               S06:00004094:  B3 10
F00:4746                       move SR,d3      
               S06:00004096:  40 C3
F00:4747                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004098:  02 83 00 00 00 0C
F00:4748                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000409E:  DA 83
F00:4749                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000040A0:  D8 90
F00:4750        
F00:4751           ; WORD      
F00:4752                       move.l d0,(a0)
               S06:000040A2:  20 80
F00:4753                       eor.w d1,(a0)  
               S06:000040A4:  B3 50
F00:4754                       move SR,d3      
               S06:000040A6:  40 C3
F00:4755                       andi.l #$0C,d3            ; Isolate flags 
               S06:000040A8:  02 83 00 00 00 0C
F00:4756                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000040AE:  DA 83
F00:4757                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000040B0:  D8 90
F00:4758        
F00:4759           ; LONG      
F00:4760                       move.l d0,(a0)
               S06:000040B2:  20 80
F00:4761                       eor.l d1,(a0)  
               S06:000040B4:  B3 90
F00:4762                       move SR,d3      
               S06:000040B6:  40 C3
F00:4763                       andi.l #$0F,d3            ; Isolate flags 
               S06:000040B8:  02 83 00 00 00 0F
F00:4764                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000040BE:  DA 83
F00:4765                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000040C0:  D8 90
F00:4766                       
F00:4767                       
F00:4768                       lsr.l #$1,d1
               S06:000040C2:  E2 89
F00:4769                       dbf d6,EOR_OUTER2
               S06:000040C4:  51 CE FF CC
F00:4770                       lsr.l #$1,d2
               S06:000040C8:  E2 8A
F00:4771                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000040CA:  22 3C 81 67 E1 23
F00:4772                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000040D0:  2C 3C 00 00 00 1E
F00:4773                       dbf d7,EOR_OUTER2
               S06:000040D6:  51 CF FF BA
F00:4774                       
F00:4775                       cmpi.l #$55C5EB70,d4      ; Check the data results
               S06:000040DA:  0C 84 55 C5 EB 70
F00:4776                       bne EOR_FAIL;                
               S06:000040E0:  66 00 00 18
F00:4777                       cmpi.l #$00004430,d5      ; Check the Flag results
               S06:000040E4:  0C 85 00 00 44 30
F00:4778                       bne EOR_FAIL;                 
               S06:000040EA:  66 00 00 0E
F00:4779                          
F00:4780                       movea #TESTSTATUS,a0
               S06:000040EE:  30 7C FF 00
F00:4781                       move.b #$1,$29(a0)
               S06:000040F2:  11 7C 00 01 00 29
F00:4782                       rts
               S06:000040F8:  4E 75
F00:4783                       
F00:4784       EOR_FAIL:
F00:4785           movea #TESTSTATUS,a0
               S06:000040FA:  30 7C FF 00
F00:4786           move.b #$2,$29(a0)
               S06:000040FE:  11 7C 00 02 00 29
F00:4787           rts
               S06:00004104:  4E 75
F00:4788       
F00:4789       ;-----------------------------------------------------------
F00:4790       ;-----------------------------------------------------------
F00:4791       ; OPCODE : CMP
F00:4792       ;-----------------------------------------------------------
F00:4793       ;-----------------------------------------------------------
F00:4794       
F00:4795       op_CMP:   
F00:4796       
F00:4797       
F00:4798         ;; <EA> to Register
F00:4799       
F00:4800                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00004106:  20 3C A5 A5 A5 A5
F00:4801                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:0000410C:  22 3C 81 67 E1 23
F00:4802                       move.l #$a5a5a5a5,d2
               S06:00004112:  24 3C A5 A5 A5 A5
F00:4803                       move.l #$00000000,d3
               S06:00004118:  26 3C 00 00 00 00
F00:4804                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000411E:  28 3C 00 00 00 00
F00:4805                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00004124:  2A 3C 00 00 00 00
F00:4806                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000412A:  2C 3C 00 00 00 1E
F00:4807                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00004130:  2E 3C 00 00 00 1E
F00:4808                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00004136:  20 7C 00 00 01 00
F00:4809       
F00:4810       
F00:4811       CMP_OUTER1:    
F00:4812        
F00:4813           ; BYTE     
F00:4814                       move.l d1,(a0)
               S06:0000413C:  20 81
F00:4815                       cmp.b (a0),d0             
               S06:0000413E:  B0 10
F00:4816                       move SR,d3      
               S06:00004140:  40 C3
F00:4817                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004142:  02 83 00 00 00 0F
F00:4818                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004148:  DA 83
F00:4819                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000414A:  D8 80
F00:4820        
F00:4821           ; WORD      
F00:4822                       move.l d1,(a0)
               S06:0000414C:  20 81
F00:4823                       cmp.w (a0),d0             
               S06:0000414E:  B0 50
F00:4824                       move SR,d3      
               S06:00004150:  40 C3
F00:4825                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004152:  02 83 00 00 00 0F
F00:4826                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004158:  DA 83
F00:4827                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000415A:  D8 80
F00:4828        
F00:4829           ; LONG      
F00:4830                       move.l d1,(a0)
               S06:0000415C:  20 81
F00:4831                       cmp.l (a0),d0             
               S06:0000415E:  B0 90
F00:4832                       move SR,d3      
               S06:00004160:  40 C3
F00:4833                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004162:  02 83 00 00 00 0F
F00:4834                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004168:  DA 83
F00:4835                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000416A:  D8 80
F00:4836                       
F00:4837                       
F00:4838                       lsr.l #$1,d1
               S06:0000416C:  E2 89
F00:4839                       dbf d6,CMP_OUTER1
               S06:0000416E:  51 CE FF CC
F00:4840                       lsr.l #$1,d2
               S06:00004172:  E2 8A
F00:4841                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004174:  22 3C 81 67 E1 23
F00:4842                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000417A:  2C 3C 00 00 00 1E
F00:4843                       dbf d7,CMP_OUTER1
               S06:00004180:  51 CF FF BA
F00:4844                       
F00:4845                       cmpi.l #$7878712F,d4      ; Check the data results
               S06:00004184:  0C 84 78 78 71 2F
F00:4846                       bne CMP_FAIL;                
               S06:0000418A:  66 00 00 18
F00:4847                       cmpi.l #$00005502,d5      ; Check the Flag results
               S06:0000418E:  0C 85 00 00 55 02
F00:4848                       bne CMP_FAIL;                
               S06:00004194:  66 00 00 0E
F00:4849                          
F00:4850                       movea #TESTSTATUS,a0
               S06:00004198:  30 7C FF 00
F00:4851                       move.b #$1,$2a(a0)
               S06:0000419C:  11 7C 00 01 00 2A
F00:4852                       rts
               S06:000041A2:  4E 75
F00:4853       
F00:4854       CMP_FAIL:
F00:4855           movea #TESTSTATUS,a0
               S06:000041A4:  30 7C FF 00
F00:4856           move.b #$2,$2a(a0)
               S06:000041A8:  11 7C 00 02 00 2A
F00:4857           rts
               S06:000041AE:  4E 75
F00:4858       
F00:4859       ;-----------------------------------------------------------
F00:4860       ;-----------------------------------------------------------
F00:4861       ; OPCODE : CMPA
F00:4862       ;-----------------------------------------------------------
F00:4863       ;-----------------------------------------------------------
F00:4864       
F00:4865       op_CMPA:   
F00:4866       
F00:4867       
F00:4868         ;; <EA> to Register
F00:4869       
F00:4870                       move.l #$a5a5a5a5,a0       ; Initial Data-X  Inner loop
               S06:000041B0:  20 7C A5 A5 A5 A5
F00:4871                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000041B6:  22 3C 81 67 E1 23
F00:4872                       move.l #$a5a5a5a5,d2
               S06:000041BC:  24 3C A5 A5 A5 A5
F00:4873                       move.l #$00000000,d3
               S06:000041C2:  26 3C 00 00 00 00
F00:4874                       move.l #$00000000,d4       ; Cumulative data results
               S06:000041C8:  28 3C 00 00 00 00
F00:4875                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000041CE:  2A 3C 00 00 00 00
F00:4876                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000041D4:  2C 3C 00 00 00 1E
F00:4877                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000041DA:  2E 3C 00 00 00 1E
F00:4878                       move.l #$00000100,a1       ; Address for memory EA operations
               S06:000041E0:  22 7C 00 00 01 00
F00:4879       
F00:4880       
F00:4881       CMPA_OUTER1:    
F00:4882         
F00:4883        
F00:4884           ; WORD      
F00:4885                       move.l d1,(a1)
               S06:000041E6:  22 81
F00:4886                       cmpa.w (a1),a0             
               S06:000041E8:  B0 D1
F00:4887                       move SR,d3      
               S06:000041EA:  40 C3
F00:4888                       andi.l #$0F,d3            ; Isolate flags 
               S06:000041EC:  02 83 00 00 00 0F
F00:4889                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000041F2:  DA 83
F00:4890                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:000041F4:  D8 88
F00:4891        
F00:4892           ; LONG      
F00:4893                       move.l d1,(a1)
               S06:000041F6:  22 81
F00:4894                       cmpa.l (a1),a0             
               S06:000041F8:  B1 D1
F00:4895                       move SR,d3      
               S06:000041FA:  40 C3
F00:4896                       andi.l #$0F,d3            ; Isolate flags 
               S06:000041FC:  02 83 00 00 00 0F
F00:4897                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004202:  DA 83
F00:4898                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:00004204:  D8 88
F00:4899                       
F00:4900                       
F00:4901                       lsr.l #$1,d1
               S06:00004206:  E2 89
F00:4902                       dbf d6,CMPA_OUTER1
               S06:00004208:  51 CE FF DC
F00:4903                       lsr.l #$1,d2
               S06:0000420C:  E2 8A
F00:4904                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000420E:  22 3C 81 67 E1 23
F00:4905                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004214:  2C 3C 00 00 00 1E
F00:4906                       dbf d7,CMPA_OUTER1
               S06:0000421A:  51 CF FF CA
F00:4907                       
F00:4908                       cmpi.l #$a5a5a0ca,d4      ; Check the data results
               S06:0000421E:  0C 84 A5 A5 A0 CA
F00:4909                       bne CMPA_FAIL;                
               S06:00004224:  66 00 00 18
F00:4910                       cmpi.l #$00003A7D,d5      ; Check the Flag results
               S06:00004228:  0C 85 00 00 3A 7D
F00:4911                       bne CMPA_FAIL;                
               S06:0000422E:  66 00 00 0E
F00:4912                              
F00:4913                       movea #TESTSTATUS,a0
               S06:00004232:  30 7C FF 00
F00:4914                       move.b #$1,$2b(a0)
               S06:00004236:  11 7C 00 01 00 2B
F00:4915                       rts
               S06:0000423C:  4E 75
F00:4916       
F00:4917       CMPA_FAIL:
F00:4918           movea #TESTSTATUS,a0
               S06:0000423E:  30 7C FF 00
F00:4919           move.b #$2,$2b(a0)
               S06:00004242:  11 7C 00 02 00 2B
F00:4920           rts
               S06:00004248:  4E 75
F00:4921       
F00:4922       ;-----------------------------------------------------------
F00:4923       ;-----------------------------------------------------------
F00:4924       ; OPCODE : CMPM
F00:4925       ;-----------------------------------------------------------
F00:4926       ;-----------------------------------------------------------
F00:4927       
F00:4928       op_CMPM: 
F00:4929       
F00:4930                       move.l #$00000100,a0       ; Address for Data-X
               S06:0000424A:  20 7C 00 00 01 00
F00:4931                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00004250:  22 7C 00 00 02 00
F00:4932                       move.l #$00000000,d0       
               S06:00004256:  20 3C 00 00 00 00
F00:4933                       move.l #$00000000,d1       
               S06:0000425C:  22 3C 00 00 00 00
F00:4934                       move.l #$00000000,d2       
               S06:00004262:  24 3C 00 00 00 00
F00:4935                       
F00:4936                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00004268:  20 FC 11 FF 55 80
F00:4937                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:0000426E:  20 FC 11 11 FF FF
F00:4938                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00004274:  20 FC 33 33 33 33
F00:4939                       move.l #$44444444,(a0)+   ; Populate test data
               S06:0000427A:  20 FC 44 44 44 44
F00:4940                       
F00:4941                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00004280:  22 FC 80 FF 33 7F
F00:4942                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00004286:  22 FC FF FF 11 11
F00:4943                       move.l #$33333333,(a1)+   ; Populate test data
               S06:0000428C:  22 FC 33 33 33 33
F00:4944                       move.l #$44444444,(a1)+   ; Populate test data
               S06:00004292:  22 FC 44 44 44 44
F00:4945                       
F00:4946                       move.l #$00000100,a0       ; Address for Data-X
               S06:00004298:  20 7C 00 00 01 00
F00:4947                       move.l #$00000200,a1       ; Address for Data-Y
               S06:0000429E:  22 7C 00 00 02 00
F00:4948                       move.l #$0000000F,d6       ; Loop counter
               S06:000042A4:  2C 3C 00 00 00 0F
F00:4949                       
F00:4950       CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
               S06:000042AA:  B3 08
F00:4951                       move SR,d3      
               S06:000042AC:  40 C3
F00:4952                       andi.l #$0F,d3            ; Isolate flags 
               S06:000042AE:  02 83 00 00 00 0F
F00:4953                       add.l d3,d0               ; Copy flag results into accumulator                
               S06:000042B4:  D0 83
F00:4954                       dbf d6,CMPM_LOOP1
               S06:000042B6:  51 CE FF F2
F00:4955       
F00:4956       
F00:4957                       move.l #$00000100,a0       ; Address for Data-X
               S06:000042BA:  20 7C 00 00 01 00
F00:4958                       move.l #$00000200,a1       ; Address for Data-Y
               S06:000042C0:  22 7C 00 00 02 00
F00:4959                       move.l #$00000007,d6       ; Loop counter
               S06:000042C6:  2C 3C 00 00 00 07
F00:4960                       
F00:4961       CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
               S06:000042CC:  B3 48
F00:4962                       move SR,d3      
               S06:000042CE:  40 C3
F00:4963                       andi.l #$0F,d3            ; Isolate flags 
               S06:000042D0:  02 83 00 00 00 0F
F00:4964                       add.l d3,d1               ; Copy flag results into accumulator                
               S06:000042D6:  D2 83
F00:4965                       dbf d6,CMPM_LOOP2
               S06:000042D8:  51 CE FF F2
F00:4966       
F00:4967       
F00:4968                       move.l #$00000100,a0       ; Address for Data-X
               S06:000042DC:  20 7C 00 00 01 00
F00:4969                       move.l #$00000200,a1       ; Address for Data-Y
               S06:000042E2:  22 7C 00 00 02 00
F00:4970                       move.l #$00000003,d6       ; Loop counter
               S06:000042E8:  2C 3C 00 00 00 03
F00:4971                       
F00:4972       CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
               S06:000042EE:  B3 88
F00:4973                       move SR,d3      
               S06:000042F0:  40 C3
F00:4974                       andi.l #$0F,d3            ; Isolate flags 
               S06:000042F2:  02 83 00 00 00 0F
F00:4975                       add.l d3,d2               ; Copy flag results into accumulator                
               S06:000042F8:  D4 83
F00:4976                       dbf d6,CMPM_LOOP3
               S06:000042FA:  51 CE FF F2
F00:4977       
F00:4978       
F00:4979                       cmpi.l #$0000004C,d0      ; Check the data results
               S06:000042FE:  0C 80 00 00 00 4C
F00:4980                       bne CMPM_FAIL;                
               S06:00004304:  66 00 00 22
F00:4981                       cmpi.l #$00000024,d1      
               S06:00004308:  0C 81 00 00 00 24
F00:4982                       bne CMPM_FAIL;                
               S06:0000430E:  66 00 00 18
F00:4983                       cmpi.l #$00000012,d2      
               S06:00004312:  0C 82 00 00 00 12
F00:4984                       bne CMPM_FAIL;                
               S06:00004318:  66 00 00 0E
F00:4985               
F00:4986                       movea #TESTSTATUS,a0
               S06:0000431C:  30 7C FF 00
F00:4987                       move.b #$1,$2c(a0)
               S06:00004320:  11 7C 00 01 00 2C
F00:4988                       rts
               S06:00004326:  4E 75
F00:4989       
F00:4990       CMPM_FAIL: 
F00:4991           movea #TESTSTATUS,a0
               S06:00004328:  30 7C FF 00
F00:4992           move.b #$2,$2c(a0)
               S06:0000432C:  11 7C 00 02 00 2C
F00:4993           rts
               S06:00004332:  4E 75
F00:4994       
F00:4995       ;-----------------------------------------------------------
F00:4996       ;-----------------------------------------------------------
F00:4997       ; OPCODE : ADD
F00:4998       ;-----------------------------------------------------------
F00:4999       ;-----------------------------------------------------------
F00:5000       
F00:5001       op_ADD: 
F00:5002       
F00:5003       
F00:5004         ;; <EA> to Register
F00:5005                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00004334:  20 3C A5 A5 A5 A5
F00:5006                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:0000433A:  22 3C 81 67 E1 23
F00:5007                       move.l #$a5a5a5a5,d2
               S06:00004340:  24 3C A5 A5 A5 A5
F00:5008                       move.l #$00000000,d3
               S06:00004346:  26 3C 00 00 00 00
F00:5009                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000434C:  28 3C 00 00 00 00
F00:5010                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00004352:  2A 3C 00 00 00 00
F00:5011                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004358:  2C 3C 00 00 00 1E
F00:5012                       move.l #$0000001E,d7       ; Outer loop counter
               S06:0000435E:  2E 3C 00 00 00 1E
F00:5013                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00004364:  20 7C 00 00 01 00
F00:5014       
F00:5015       
F00:5016       ADD_OUTER1:    
F00:5017        
F00:5018           ; BYTE     
F00:5019                       move.l d1,(a0)
               S06:0000436A:  20 81
F00:5020                       add.b (a0),d0             
               S06:0000436C:  D0 10
F00:5021                       move SR,d3      
               S06:0000436E:  40 C3
F00:5022                       andi.l #$1F,d3            ; Isolate flags 
               S06:00004370:  02 83 00 00 00 1F
F00:5023                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004376:  DA 83
F00:5024                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004378:  D8 80
F00:5025        
F00:5026           ; WORD      
F00:5027                       move.l d1,(a0)
               S06:0000437A:  20 81
F00:5028                       add.w (a0),d0             
               S06:0000437C:  D0 50
F00:5029                       move SR,d3      
               S06:0000437E:  40 C3
F00:5030                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004380:  02 83 00 00 00 0C
F00:5031                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004386:  DA 83
F00:5032                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004388:  D8 80
F00:5033        
F00:5034           ; LONG      
F00:5035                       move.l d1,(a0)
               S06:0000438A:  20 81
F00:5036                       add.l (a0),d0             
               S06:0000438C:  D0 90
F00:5037                       move SR,d3      
               S06:0000438E:  40 C3
F00:5038                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004390:  02 83 00 00 00 0F
F00:5039                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004396:  DA 83
F00:5040                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004398:  D8 80
F00:5041                       
F00:5042                       
F00:5043                       ror.l #$1,d1
               S06:0000439A:  E2 99
F00:5044                       dbf d6,ADD_OUTER1
               S06:0000439C:  51 CE FF CC
F00:5045                       ror.l #$1,d2
               S06:000043A0:  E2 9A
F00:5046                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000043A2:  22 3C 81 67 E1 23
F00:5047                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000043A8:  2C 3C 00 00 00 1E
F00:5048                       dbf d7,ADD_OUTER1
               S06:000043AE:  51 CF FF BA
F00:5049                       
F00:5050                       cmpi.l #$23ED428F,d4      ; Check the data results
               S06:000043B2:  0C 84 23 ED 42 8F
F00:5051                       bne ADD_FAIL;                
               S06:000043B8:  66 00 00 AA
F00:5052                       cmpi.l #$00004C96,d5      ; Check the Flag results
               S06:000043BC:  0C 85 00 00 4C 96
F00:5053                       bne ADD_FAIL;                
               S06:000043C2:  66 00 00 A0
F00:5054                          
F00:5055                          
F00:5056         ;; Register to <EA>
F00:5057                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:000043C6:  20 3C 86 73 83 74
F00:5058                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:000043CC:  22 3C FC 55 F2 FE
F00:5059                       move.l #$86738374,d2
               S06:000043D2:  24 3C 86 73 83 74
F00:5060                       move.l #$00000000,d3
               S06:000043D8:  26 3C 00 00 00 00
F00:5061                       move.l #$00000000,d4       ; Cumulative data results
               S06:000043DE:  28 3C 00 00 00 00
F00:5062                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000043E4:  2A 3C 00 00 00 00
F00:5063                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000043EA:  2C 3C 00 00 00 1E
F00:5064                       move.l #$0000001D,d7       ; Outer loop counter
               S06:000043F0:  2E 3C 00 00 00 1D
F00:5065                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000043F6:  20 7C 00 00 01 00
F00:5066       
F00:5067       
F00:5068       ADD_OUTER2:    
F00:5069        
F00:5070           ; BYTE     
F00:5071                       move.l d0,(a0)
               S06:000043FC:  20 80
F00:5072                       add.b d1,(a0)             
               S06:000043FE:  D3 10
F00:5073                       move SR,d3      
               S06:00004400:  40 C3
F00:5074                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004402:  02 83 00 00 00 0C
F00:5075                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004408:  DA 83
F00:5076                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:0000440A:  D8 90
F00:5077        
F00:5078           ; WORD      
F00:5079                       move.l d0,(a0)
               S06:0000440C:  20 80
F00:5080                       add.w d1,(a0)  
               S06:0000440E:  D3 50
F00:5081                       move SR,d3      
               S06:00004410:  40 C3
F00:5082                       andi.l #$1F,d3            ; Isolate flags 
               S06:00004412:  02 83 00 00 00 1F
F00:5083                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004418:  DA 83
F00:5084                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:0000441A:  D8 90
F00:5085        
F00:5086           ; LONG      
F00:5087                       move.l d0,(a0)
               S06:0000441C:  20 80
F00:5088                       add.l d1,(a0)  
               S06:0000441E:  D3 90
F00:5089                       move SR,d3      
               S06:00004420:  40 C3
F00:5090                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004422:  02 83 00 00 00 0F
F00:5091                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004428:  DA 83
F00:5092                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:0000442A:  D8 90
F00:5093                       
F00:5094                       
F00:5095                       ror.l #$1,d1
               S06:0000442C:  E2 99
F00:5096                       dbf d6,ADD_OUTER2
               S06:0000442E:  51 CE FF CC
F00:5097                       ror.l #$1,d2
               S06:00004432:  E2 9A
F00:5098                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004434:  22 3C 81 67 E1 23
F00:5099                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000443A:  2C 3C 00 00 00 1E
F00:5100                       dbf d7,ADD_OUTER2
               S06:00004440:  51 CF FF BA
F00:5101                       
F00:5102                       cmpi.l #$6701B884,d4      ; Check the data results
               S06:00004444:  0C 84 67 01 B8 84
F00:5103                       bne ADD_FAIL;                
               S06:0000444A:  66 00 00 18
F00:5104                       cmpi.l #$00005467,d5      ; Check the Flag results
               S06:0000444E:  0C 85 00 00 54 67
F00:5105                       bne ADD_FAIL;                 
               S06:00004454:  66 00 00 0E
F00:5106                       
F00:5107                       movea #TESTSTATUS,a0
               S06:00004458:  30 7C FF 00
F00:5108                       move.b #$1,$2d(a0)
               S06:0000445C:  11 7C 00 01 00 2D
F00:5109                       rts
               S06:00004462:  4E 75
F00:5110       
F00:5111       ADD_FAIL:
F00:5112           movea #TESTSTATUS,a0
               S06:00004464:  30 7C FF 00
F00:5113           move.b #$2,$2d(a0)
               S06:00004468:  11 7C 00 02 00 2D
F00:5114           rts
               S06:0000446E:  4E 75
F00:5115       
F00:5116       ;-----------------------------------------------------------
F00:5117       ;-----------------------------------------------------------
F00:5118       ; OPCODE : SUB
F00:5119       ;-----------------------------------------------------------
F00:5120       ;-----------------------------------------------------------
F00:5121       
F00:5122       op_SUB: 
F00:5123       
F00:5124         ;; <EA> to Register
F00:5125                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00004470:  20 3C A5 A5 A5 A5
F00:5126                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00004476:  22 3C 81 67 E1 23
F00:5127                       move.l #$a5a5a5a5,d2
               S06:0000447C:  24 3C A5 A5 A5 A5
F00:5128                       move.l #$00000000,d3
               S06:00004482:  26 3C 00 00 00 00
F00:5129                       move.l #$00000000,d4       ; Cumulative data results
               S06:00004488:  28 3C 00 00 00 00
F00:5130                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000448E:  2A 3C 00 00 00 00
F00:5131                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004494:  2C 3C 00 00 00 1E
F00:5132                       move.l #$0000001E,d7       ; Outer loop counter
               S06:0000449A:  2E 3C 00 00 00 1E
F00:5133                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000044A0:  20 7C 00 00 01 00
F00:5134       
F00:5135       
F00:5136       SUB_OUTER1:    
F00:5137        
F00:5138           ; BYTE     
F00:5139                       move.l d1,(a0)
               S06:000044A6:  20 81
F00:5140                       sub.b (a0),d0             
               S06:000044A8:  90 10
F00:5141                       move SR,d3      
               S06:000044AA:  40 C3
F00:5142                       andi.l #$1F,d3            ; Isolate flags 
               S06:000044AC:  02 83 00 00 00 1F
F00:5143                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000044B2:  DA 83
F00:5144                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000044B4:  D8 80
F00:5145        
F00:5146           ; WORD      
F00:5147                       move.l d1,(a0)
               S06:000044B6:  20 81
F00:5148                       sub.w (a0),d0             
               S06:000044B8:  90 50
F00:5149                       move SR,d3      
               S06:000044BA:  40 C3
F00:5150                       andi.l #$0C,d3            ; Isolate flags 
               S06:000044BC:  02 83 00 00 00 0C
F00:5151                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000044C2:  DA 83
F00:5152                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000044C4:  D8 80
F00:5153        
F00:5154           ; LONG      
F00:5155                       move.l d1,(a0)
               S06:000044C6:  20 81
F00:5156                       sub.l (a0),d0             
               S06:000044C8:  90 90
F00:5157                       move SR,d3      
               S06:000044CA:  40 C3
F00:5158                       andi.l #$0F,d3            ; Isolate flags 
               S06:000044CC:  02 83 00 00 00 0F
F00:5159                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000044D2:  DA 83
F00:5160                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000044D4:  D8 80
F00:5161                       
F00:5162                       
F00:5163                       ror.l #$1,d1
               S06:000044D6:  E2 99
F00:5164                       dbf d6,SUB_OUTER1
               S06:000044D8:  51 CE FF CC
F00:5165                       ror.l #$1,d2
               S06:000044DC:  E2 9A
F00:5166                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000044DE:  22 3C 81 67 E1 23
F00:5167                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000044E4:  2C 3C 00 00 00 1E
F00:5168                       dbf d7,SUB_OUTER1
               S06:000044EA:  51 CF FF BA
F00:5169                       
F00:5170                       cmpi.l #$1A8D14CF,d4      ; Check the data results
               S06:000044EE:  0C 84 1A 8D 14 CF
F00:5171                       bne SUB_FAIL;                
               S06:000044F4:  66 00 00 AA
F00:5172                       cmpi.l #$00004FC4,d5      ; Check the Flag results
               S06:000044F8:  0C 85 00 00 4F C4
F00:5173                       bne SUB_FAIL;                
               S06:000044FE:  66 00 00 A0
F00:5174                          
F00:5175                          
F00:5176         ;; Register to <EA>
F00:5177                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00004502:  20 3C 86 73 83 74
F00:5178                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00004508:  22 3C FC 55 F2 FE
F00:5179                       move.l #$86738374,d2
               S06:0000450E:  24 3C 86 73 83 74
F00:5180                       move.l #$00000000,d3
               S06:00004514:  26 3C 00 00 00 00
F00:5181                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000451A:  28 3C 00 00 00 00
F00:5182                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00004520:  2A 3C 00 00 00 00
F00:5183                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004526:  2C 3C 00 00 00 1E
F00:5184                       move.l #$0000001D,d7       ; Outer loop counter
               S06:0000452C:  2E 3C 00 00 00 1D
F00:5185                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00004532:  20 7C 00 00 01 00
F00:5186       
F00:5187       
F00:5188       SUB_OUTER2:    
F00:5189        
F00:5190           ; BYTE     
F00:5191                       move.l d0,(a0)
               S06:00004538:  20 80
F00:5192                       sub.b d1,(a0)             
               S06:0000453A:  93 10
F00:5193                       move SR,d3      
               S06:0000453C:  40 C3
F00:5194                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000453E:  02 83 00 00 00 0C
F00:5195                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004544:  DA 83
F00:5196                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00004546:  D8 90
F00:5197        
F00:5198           ; WORD      
F00:5199                       move.l d0,(a0)
               S06:00004548:  20 80
F00:5200                       sub.w d1,(a0)  
               S06:0000454A:  93 50
F00:5201                       move SR,d3      
               S06:0000454C:  40 C3
F00:5202                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000454E:  02 83 00 00 00 1F
F00:5203                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004554:  DA 83
F00:5204                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00004556:  D8 90
F00:5205        
F00:5206           ; LONG      
F00:5207                       move.l d0,(a0)
               S06:00004558:  20 80
F00:5208                       sub.l d1,(a0)  
               S06:0000455A:  93 90
F00:5209                       move SR,d3      
               S06:0000455C:  40 C3
F00:5210                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000455E:  02 83 00 00 00 0F
F00:5211                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004564:  DA 83
F00:5212                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00004566:  D8 90
F00:5213                       
F00:5214                       
F00:5215                       ror.l #$1,d1
               S06:00004568:  E2 99
F00:5216                       dbf d6,SUB_OUTER2
               S06:0000456A:  51 CE FF CC
F00:5217                       ror.l #$1,d2
               S06:0000456E:  E2 9A
F00:5218                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004570:  22 3C 81 67 E1 23
F00:5219                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004576:  2C 3C 00 00 00 1E
F00:5220                       dbf d7,SUB_OUTER2
               S06:0000457C:  51 CF FF BA
F00:5221                       
F00:5222                       cmpi.l #$36D38BEC,d4      ; Check the data results
               S06:00004580:  0C 84 36 D3 8B EC
F00:5223                       bne SUB_FAIL;                
               S06:00004586:  66 00 00 18
F00:5224                       cmpi.l #$000045A5,d5      ; Check the Flag results
               S06:0000458A:  0C 85 00 00 45 A5
F00:5225                       bne SUB_FAIL;                 
               S06:00004590:  66 00 00 0E
F00:5226       
F00:5227                       movea #TESTSTATUS,a0
               S06:00004594:  30 7C FF 00
F00:5228                       move.b #$1,$2e(a0)
               S06:00004598:  11 7C 00 01 00 2E
F00:5229                       rts
               S06:0000459E:  4E 75
F00:5230       
F00:5231       SUB_FAIL:
F00:5232           movea #TESTSTATUS,a0
               S06:000045A0:  30 7C FF 00
F00:5233           move.b #$2,$2e(a0)
               S06:000045A4:  11 7C 00 02 00 2E
F00:5234           rts
               S06:000045AA:  4E 75
F00:5235       
F00:5236       ;-----------------------------------------------------------
F00:5237       ;-----------------------------------------------------------
F00:5238       ; OPCODE : ADDA
F00:5239       ;-----------------------------------------------------------
F00:5240       ;-----------------------------------------------------------
F00:5241       
F00:5242       op_ADDA: 
F00:5243       
F00:5244         ;; <EA> to Register
F00:5245                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:000045AC:  20 3C A5 A5 A5 A5
F00:5246                       move.l #$8167E123,d1       
               S06:000045B2:  22 3C 81 67 E1 23
F00:5247                       move.l #$a5a5a5a5,d2
               S06:000045B8:  24 3C A5 A5 A5 A5
F00:5248                       move.l #$00000000,d3
               S06:000045BE:  26 3C 00 00 00 00
F00:5249                       move.l #$00000000,d4       ; Cumulative data results
               S06:000045C4:  28 3C 00 00 00 00
F00:5250                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000045CA:  2A 3C 00 00 00 00
F00:5251                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000045D0:  2C 3C 00 00 00 1E
F00:5252                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000045D6:  2E 3C 00 00 00 1E
F00:5253                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000045DC:  20 7C 00 00 01 00
F00:5254                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:000045E2:  22 7C 81 67 E1 23
F00:5255       
F00:5256       ADDA_OUTER1:    
F00:5257       
F00:5258           ; WORD      
F00:5259                       move.l d1,(a0)  
               S06:000045E8:  20 81
F00:5260                       adda.w (a0),a1             
               S06:000045EA:  D2 D0
F00:5261                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:000045EC:  D8 89
F00:5262        
F00:5263           ; LONG      
F00:5264                       move.l d1,(a0)
               S06:000045EE:  20 81
F00:5265                       adda.l (a0),a1             
               S06:000045F0:  D3 D0
F00:5266                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:000045F2:  D8 89
F00:5267                       
F00:5268                       ror.l #$1,d1
               S06:000045F4:  E2 99
F00:5269                       dbf d6,ADDA_OUTER1
               S06:000045F6:  51 CE FF F0
F00:5270                       ror.l #$1,d1
               S06:000045FA:  E2 99
F00:5271                       move.l d1,a1
               S06:000045FC:  22 41
F00:5272                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000045FE:  22 3C 81 67 E1 23
F00:5273                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004604:  2C 3C 00 00 00 1E
F00:5274                       dbf d7,ADDA_OUTER1
               S06:0000460A:  51 CF FF DC
F00:5275                       
F00:5276                       cmpi.l #$abe3cab5,d4       ; Check the data results
               S06:0000460E:  0C 84 AB E3 CA B5
F00:5277                       bne ADDA_FAIL;                
               S06:00004614:  66 00 00 0E
F00:5278                     
F00:5279                       movea #TESTSTATUS,a0
               S06:00004618:  30 7C FF 00
F00:5280                       move.b #$1,$2f(a0)
               S06:0000461C:  11 7C 00 01 00 2F
F00:5281                       rts
               S06:00004622:  4E 75
F00:5282       
F00:5283       ADDA_FAIL:
F00:5284           movea #TESTSTATUS,a0
               S06:00004624:  30 7C FF 00
F00:5285           move.b #$2,$2f(a0)
               S06:00004628:  11 7C 00 02 00 2F
F00:5286           rts
               S06:0000462E:  4E 75
F00:5287       
F00:5288       ;-----------------------------------------------------------
F00:5289       ;-----------------------------------------------------------
F00:5290       ; OPCODE : SUBA
F00:5291       ;-----------------------------------------------------------
F00:5292       ;-----------------------------------------------------------
F00:5293       
F00:5294       op_SUBA: 
F00:5295       
F00:5296         ;; <EA> to Register
F00:5297                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00004630:  20 3C A5 A5 A5 A5
F00:5298                       move.l #$8167E123,d1       
               S06:00004636:  22 3C 81 67 E1 23
F00:5299                       move.l #$a5a5a5a5,d2
               S06:0000463C:  24 3C A5 A5 A5 A5
F00:5300                       move.l #$00000000,d3
               S06:00004642:  26 3C 00 00 00 00
F00:5301                       move.l #$00000000,d4       ; Cumulative data results
               S06:00004648:  28 3C 00 00 00 00
F00:5302                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000464E:  2A 3C 00 00 00 00
F00:5303                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004654:  2C 3C 00 00 00 1E
F00:5304                       move.l #$0000001E,d7       ; Outer loop counter
               S06:0000465A:  2E 3C 00 00 00 1E
F00:5305                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00004660:  20 7C 00 00 01 00
F00:5306                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:00004666:  22 7C 81 67 E1 23
F00:5307       
F00:5308       SUBA_OUTER1:    
F00:5309       
F00:5310           ; WORD      
F00:5311                       move.l d1,(a0)
               S06:0000466C:  20 81
F00:5312                       suba.w (a0),a1             
               S06:0000466E:  92 D0
F00:5313                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00004670:  D8 89
F00:5314        
F00:5315           ; LONG      
F00:5316                       move.l d1,(a0)
               S06:00004672:  20 81
F00:5317                       suba.l (a0),a1             
               S06:00004674:  93 D0
F00:5318                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00004676:  D8 89
F00:5319                       
F00:5320                       ror.l #$1,d1
               S06:00004678:  E2 99
F00:5321                       dbf d6,SUBA_OUTER1
               S06:0000467A:  51 CE FF F0
F00:5322                       ror.l #$1,d1
               S06:0000467E:  E2 99
F00:5323                       move.l d1,a1
               S06:00004680:  22 41
F00:5324                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004682:  22 3C 81 67 E1 23
F00:5325                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004688:  2C 3C 00 00 00 1E
F00:5326                       dbf d7,SUBA_OUTER1
               S06:0000468E:  51 CF FF DC
F00:5327                       
F00:5328                       cmpi.l #$6fecc6d7,d4 * #$E1E36D7A,d4      ; Check the data results
               S06:00004692:  0C 84 6F EC C6 D7
F00:5329                       bne SUBA_FAIL;                
               S06:00004698:  66 00 00 0E
F00:5330                     
F00:5331                       movea #TESTSTATUS,a0
               S06:0000469C:  30 7C FF 00
F00:5332                       move.b #$1,$30(a0)
               S06:000046A0:  11 7C 00 01 00 30
F00:5333                       rts
               S06:000046A6:  4E 75
F00:5334       
F00:5335       SUBA_FAIL:
F00:5336           movea #TESTSTATUS,a0
               S06:000046A8:  30 7C FF 00
F00:5337           move.b #$2,$30(a0)
               S06:000046AC:  11 7C 00 02 00 30
F00:5338           rts
               S06:000046B2:  4E 75
F00:5339       
F00:5340       ;-----------------------------------------------------------
F00:5341       ;-----------------------------------------------------------
F00:5342       ; OPCODE : ADDX
F00:5343       ;-----------------------------------------------------------
F00:5344       ;-----------------------------------------------------------
F00:5345       
F00:5346       op_ADDX: 
F00:5347       
F00:5348       
F00:5349         ;; Register to Register
F00:5350                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:000046B4:  20 3C A5 A5 A5 A5
F00:5351                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000046BA:  22 3C 81 67 E1 23
F00:5352                       move.l #$a5a5a5a5,d2
               S06:000046C0:  24 3C A5 A5 A5 A5
F00:5353                       move.l #$00000000,d3
               S06:000046C6:  26 3C 00 00 00 00
F00:5354                       move.l #$00000000,d4       ; Cumulative data results
               S06:000046CC:  28 3C 00 00 00 00
F00:5355                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000046D2:  2A 3C 00 00 00 00
F00:5356                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000046D8:  2C 3C 00 00 00 1E
F00:5357                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000046DE:  2E 3C 00 00 00 1E
F00:5358                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000046E4:  20 7C 00 00 01 00
F00:5359       
F00:5360       
F00:5361       ADDX_OUTER1:    
F00:5362        
F00:5363           ; BYTE    
F00:5364                       move.l d2,d0
               S06:000046EA:  20 02
F00:5365                       addx.b d1,d0             
               S06:000046EC:  D1 01
F00:5366                       move SR,d3      
               S06:000046EE:  40 C3
F00:5367                       andi.l #$1F,d3            ; Isolate flags 
               S06:000046F0:  02 83 00 00 00 1F
F00:5368                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000046F6:  DA 83
F00:5369                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000046F8:  D8 80
F00:5370        
F00:5371           ; WORD      
F00:5372                       move.l d2,d0
               S06:000046FA:  20 02
F00:5373                       addx.w d1,d0             
               S06:000046FC:  D1 41
F00:5374                       move SR,d3      
               S06:000046FE:  40 C3
F00:5375                       andi.l #$1F,d3            ; Isolate flags 
               S06:00004700:  02 83 00 00 00 1F
F00:5376                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004706:  DA 83
F00:5377                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004708:  D8 80
F00:5378        
F00:5379           ; LONG      
F00:5380                       move.l d2,d0
               S06:0000470A:  20 02
F00:5381                       addx.l d1,d0             
               S06:0000470C:  D1 81
F00:5382                       move SR,d3      
               S06:0000470E:  40 C3
F00:5383                       andi.l #$1F,d3            ; Isolate flags 
               S06:00004710:  02 83 00 00 00 1F
F00:5384                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004716:  DA 83
F00:5385                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004718:  D8 80
F00:5386                       
F00:5387                       ror.l #$1,d1
               S06:0000471A:  E2 99
F00:5388                       dbf d6,ADDX_OUTER1
               S06:0000471C:  51 CE FF CC
F00:5389                       ror.l #$1,d2
               S06:00004720:  E2 9A
F00:5390                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004722:  22 3C 81 67 E1 23
F00:5391                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004728:  2C 3C 00 00 00 1E
F00:5392                       dbf d7,ADDX_OUTER1
               S06:0000472E:  51 CF FF BA
F00:5393                       
F00:5394                       cmpi.l #$4E96A4D9,d4      ; Check the data results
               S06:00004732:  0C 84 4E 96 A4 D9
F00:5395                       bne ADDX_FAIL;                
               S06:00004738:  66 00 00 DA
F00:5396                       cmpi.l #$000085CD,d5      ; Check the Flag results
               S06:0000473C:  0C 85 00 00 85 CD
F00:5397                       bne ADDX_FAIL;                
               S06:00004742:  66 00 00 D0
F00:5398                          
F00:5399           
F00:5400           
F00:5401           ; -(An),-(An)
F00:5402           
F00:5403                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:00004746:  20 3C 00 00 00 00
F00:5404                       move.l #$00000000,d1        
               S06:0000474C:  22 3C 00 00 00 00
F00:5405                       move.l #$00000000,d2      
               S06:00004752:  24 3C 00 00 00 00
F00:5406                       move.l #$00000100,a0       ; Address for Data-X
               S06:00004758:  20 7C 00 00 01 00
F00:5407                       move.l #$00000200,a1       ; Address for Data-Y
               S06:0000475E:  22 7C 00 00 02 00
F00:5408                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00004764:  20 FC 11 FF 55 80
F00:5409                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:0000476A:  20 FC 11 11 FF FF
F00:5410                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00004770:  20 FC 33 33 33 33
F00:5411                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00004776:  20 FC 44 44 44 44
F00:5412                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:0000477C:  22 FC 80 FF 33 7F
F00:5413                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00004782:  22 FC FF FF 11 11
F00:5414                       move.l #$33333333,(a1)+   ; Populate test data
               S06:00004788:  22 FC 33 33 33 33
F00:5415                       move.l #$44444444,(a1)+   ; Populate test data
               S06:0000478E:  22 FC 44 44 44 44
F00:5416                       
F00:5417       
F00:5418                       move.l #$0000000F,d6       ; Loop counter
               S06:00004794:  2C 3C 00 00 00 0F
F00:5419                       
F00:5420       ADDX_LOOP3:     addx.b -(a0),-(a1)
               S06:0000479A:  D3 08
F00:5421                       move SR,d3      
               S06:0000479C:  40 C3
F00:5422                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000479E:  02 83 00 00 00 0F
F00:5423                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000047A4:  D0 83
F00:5424                       add.b (a1),d1     
               S06:000047A6:  D2 11
F00:5425                       dbf d6,ADDX_LOOP3
               S06:000047A8:  51 CE FF F0
F00:5426       
F00:5427       
F00:5428                       move.l #$00000110,a0       ; Address for Data-X
               S06:000047AC:  20 7C 00 00 01 10
F00:5429                       move.l #$00000210,a1       ; Address for Data-Y
               S06:000047B2:  22 7C 00 00 02 10
F00:5430                       move.l #$00000007,d6       ; Loop counter
               S06:000047B8:  2C 3C 00 00 00 07
F00:5431                       
F00:5432       ADDX_LOOP4:     addx.w -(a0),-(a1)
               S06:000047BE:  D3 48
F00:5433                       move SR,d3      
               S06:000047C0:  40 C3
F00:5434                       andi.l #$0F,d3            ; Isolate flags 
               S06:000047C2:  02 83 00 00 00 0F
F00:5435                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000047C8:  D0 83
F00:5436                       add.w (a1),d1     
               S06:000047CA:  D2 51
F00:5437                       dbf d6,ADDX_LOOP4
               S06:000047CC:  51 CE FF F0
F00:5438       
F00:5439       
F00:5440                       move.l #$00000110,a0       ; Address for Data-X
               S06:000047D0:  20 7C 00 00 01 10
F00:5441                       move.l #$00000210,a1       ; Address for Data-Y
               S06:000047D6:  22 7C 00 00 02 10
F00:5442                       move.l #$00000003,d6       ; Loop counter
               S06:000047DC:  2C 3C 00 00 00 03
F00:5443                       
F00:5444       ADDX_LOOP5:     addx.l -(a0),-(a1)
               S06:000047E2:  D3 88
F00:5445                       move SR,d3      
               S06:000047E4:  40 C3
F00:5446                       andi.l #$0F,d3            ; Isolate flags 
               S06:000047E6:  02 83 00 00 00 0F
F00:5447                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000047EC:  D0 83
F00:5448                       add.l (a1),d1     
               S06:000047EE:  D2 91
F00:5449                       dbf d6,ADDX_LOOP5
               S06:000047F0:  51 CE FF F0
F00:5450       
F00:5451       
F00:5452                       cmpi.l #$00000095,d0      ; Check the flag results
               S06:000047F4:  0C 80 00 00 00 95
F00:5453                       bne ADDX_FAIL;                
               S06:000047FA:  66 00 00 18
F00:5454                       cmpi.l #$c812a67f,d1 *#$C812A682,d1      ; Check the data results 
               S06:000047FE:  0C 81 C8 12 A6 7F
F00:5455                       bne ADDX_FAIL;                
               S06:00004804:  66 00 00 0E
F00:5456        
F00:5457                       movea #TESTSTATUS,a0
               S06:00004808:  30 7C FF 00
F00:5458                       move.b #$1,$31(a0)
               S06:0000480C:  11 7C 00 01 00 31
F00:5459                       rts
               S06:00004812:  4E 75
F00:5460       
F00:5461       ADDX_FAIL:
F00:5462           movea #TESTSTATUS,a0
               S06:00004814:  30 7C FF 00
F00:5463           move.b #$2,$31(a0)
               S06:00004818:  11 7C 00 02 00 31
F00:5464       
F00:5465       ;-----------------------------------------------------------
F00:5466       ;-----------------------------------------------------------
F00:5467       ; OPCODE : SUBX
F00:5468       ;-----------------------------------------------------------
F00:5469       ;-----------------------------------------------------------
F00:5470       
F00:5471       op_SUBX: 
F00:5472       
F00:5473       
F00:5474         ;; Register to Register
F00:5475                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:0000481E:  20 3C A5 A5 A5 A5
F00:5476                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00004824:  22 3C 81 67 E1 23
F00:5477                       move.l #$a5a5a5a5,d2
               S06:0000482A:  24 3C A5 A5 A5 A5
F00:5478                       move.l #$00000000,d3
               S06:00004830:  26 3C 00 00 00 00
F00:5479                       move.l #$00000000,d4       ; Cumulative data results
               S06:00004836:  28 3C 00 00 00 00
F00:5480                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000483C:  2A 3C 00 00 00 00
F00:5481                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004842:  2C 3C 00 00 00 1E
F00:5482                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00004848:  2E 3C 00 00 00 1E
F00:5483                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:0000484E:  20 7C 00 00 01 00
F00:5484       
F00:5485       
F00:5486       SUBX_OUTER1:    
F00:5487        
F00:5488           ; BYTE    
F00:5489                       move.l d2,d0
               S06:00004854:  20 02
F00:5490                       subx.b d1,d0             
               S06:00004856:  91 01
F00:5491                       move SR,d3      
               S06:00004858:  40 C3
F00:5492                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000485A:  02 83 00 00 00 1F
F00:5493                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004860:  DA 83
F00:5494                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004862:  D8 80
F00:5495        
F00:5496           ; WORD      
F00:5497                       move.l d2,d0
               S06:00004864:  20 02
F00:5498                       subx.w d1,d0             
               S06:00004866:  91 41
F00:5499                       move SR,d3      
               S06:00004868:  40 C3
F00:5500                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000486A:  02 83 00 00 00 1F
F00:5501                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004870:  DA 83
F00:5502                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004872:  D8 80
F00:5503        
F00:5504           ; LONG      
F00:5505                       move.l d2,d0
               S06:00004874:  20 02
F00:5506                       subx.l d1,d0             
               S06:00004876:  91 81
F00:5507                       move SR,d3      
               S06:00004878:  40 C3
F00:5508                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000487A:  02 83 00 00 00 1F
F00:5509                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004880:  DA 83
F00:5510                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004882:  D8 80
F00:5511                       
F00:5512                       ror.l #$1,d1
               S06:00004884:  E2 99
F00:5513                       dbf d6,SUBX_OUTER1
               S06:00004886:  51 CE FF CC
F00:5514                       ror.l #$1,d2
               S06:0000488A:  E2 9A
F00:5515                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000488C:  22 3C 81 67 E1 23
F00:5516                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004892:  2C 3C 00 00 00 1E
F00:5517                       dbf d7,SUBX_OUTER1
               S06:00004898:  51 CF FF BA
F00:5518                       
F00:5519                       cmpi.l #$FCAA913E,d4      ; Check the data results
               S06:0000489C:  0C 84 FC AA 91 3E
F00:5520                       bne SUBX_FAIL;                
               S06:000048A2:  66 00 00 DA
F00:5521                       cmpi.l #$00007E89,d5      ; Check the Flag results
               S06:000048A6:  0C 85 00 00 7E 89
F00:5522                       bne SUBX_FAIL;                
               S06:000048AC:  66 00 00 D0
F00:5523                          
F00:5524           
F00:5525           
F00:5526           ; -(An),-(An)
F00:5527           
F00:5528                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:000048B0:  20 3C 00 00 00 00
F00:5529                       move.l #$00000000,d1        
               S06:000048B6:  22 3C 00 00 00 00
F00:5530                       move.l #$00000000,d2      
               S06:000048BC:  24 3C 00 00 00 00
F00:5531                       move.l #$00000100,a0       ; Address for Data-X
               S06:000048C2:  20 7C 00 00 01 00
F00:5532                       move.l #$00000200,a1       ; Address for Data-Y
               S06:000048C8:  22 7C 00 00 02 00
F00:5533                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:000048CE:  20 FC 11 FF 55 80
F00:5534                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:000048D4:  20 FC 11 11 FF FF
F00:5535                       move.l #$80FF337F,(a0)+   ; Populate test data
               S06:000048DA:  20 FC 80 FF 33 7F
F00:5536                       move.l #$44444444,(a0)+   ; Populate test data
               S06:000048E0:  20 FC 44 44 44 44
F00:5537                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:000048E6:  22 FC 80 FF 33 7F
F00:5538                       move.l #$1111FFFF,(a1)+   ; Populate test data
               S06:000048EC:  22 FC 11 11 FF FF
F00:5539                       move.l #$33333333,(a1)+   ; Populate test data
               S06:000048F2:  22 FC 33 33 33 33
F00:5540                       move.l #$5580EECC,(a1)+   ; Populate test data
               S06:000048F8:  22 FC 55 80 EE CC
F00:5541                       
F00:5542       
F00:5543                       move.l #$0000000F,d6       ; Loop counter
               S06:000048FE:  2C 3C 00 00 00 0F
F00:5544                       
F00:5545       SUBX_LOOP3:     subx.b -(a0),-(a1)
               S06:00004904:  93 08
F00:5546                       move SR,d3      
               S06:00004906:  40 C3
F00:5547                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004908:  02 83 00 00 00 0F
F00:5548                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:0000490E:  D0 83
F00:5549                       add.b (a1),d1     
               S06:00004910:  D2 11
F00:5550                       dbf d6,SUBX_LOOP3
               S06:00004912:  51 CE FF F0
F00:5551       
F00:5552       
F00:5553                       move.l #$00000110,a0       ; Address for Data-X
               S06:00004916:  20 7C 00 00 01 10
F00:5554                       move.l #$00000210,a1       ; Address for Data-Y
               S06:0000491C:  22 7C 00 00 02 10
F00:5555                       move.l #$00000007,d6       ; Loop counter
               S06:00004922:  2C 3C 00 00 00 07
F00:5556                       
F00:5557       SUBX_LOOP4:     subx.w -(a0),-(a1)
               S06:00004928:  93 48
F00:5558                       move SR,d3      
               S06:0000492A:  40 C3
F00:5559                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000492C:  02 83 00 00 00 0F
F00:5560                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00004932:  D0 83
F00:5561                       add.w (a1),d1     
               S06:00004934:  D2 51
F00:5562                       dbf d6,SUBX_LOOP4
               S06:00004936:  51 CE FF F0
F00:5563       
F00:5564       
F00:5565                       move.l #$00000110,a0       ; Address for Data-X
               S06:0000493A:  20 7C 00 00 01 10
F00:5566                       move.l #$00000210,a1       ; Address for Data-Y
               S06:00004940:  22 7C 00 00 02 10
F00:5567                       move.l #$00000003,d6       ; Loop counter
               S06:00004946:  2C 3C 00 00 00 03
F00:5568                       
F00:5569       SUBX_LOOP5:     subx.l -(a0),-(a1)
               S06:0000494C:  93 88
F00:5570                       move SR,d3      
               S06:0000494E:  40 C3
F00:5571                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004950:  02 83 00 00 00 0F
F00:5572                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00004956:  D0 83
F00:5573                       add.l (a1),d1     
               S06:00004958:  D2 91
F00:5574                       dbf d6,SUBX_LOOP5
               S06:0000495A:  51 CE FF F0
F00:5575       
F00:5576       
F00:5577                       cmpi.l #$000000B1,d0      ; Check the flag results
               S06:0000495E:  0C 80 00 00 00 B1
F00:5578                       bne SUBX_FAIL;                
               S06:00004964:  66 00 00 18
F00:5579                       cmpi.l #$62C6F417,d1      ; Check the data results 
               S06:00004968:  0C 81 62 C6 F4 17
F00:5580                       bne SUBX_FAIL;                
               S06:0000496E:  66 00 00 0E
F00:5581        
F00:5582                       movea #TESTSTATUS,a0
               S06:00004972:  30 7C FF 00
F00:5583                       move.b #$1,$32(a0)
               S06:00004976:  11 7C 00 01 00 32
F00:5584                       rts
               S06:0000497C:  4E 75
F00:5585       
F00:5586       SUBX_FAIL:
F00:5587           movea #TESTSTATUS,a0
               S06:0000497E:  30 7C FF 00
F00:5588           move.b #$2,$32(a0)
               S06:00004982:  11 7C 00 02 00 32
F00:5589           rts
               S06:00004988:  4E 75
F00:5590       
F00:5591       ;-----------------------------------------------------------
F00:5592       ;-----------------------------------------------------------
F00:5593       ; OPCODE : MULU
F00:5594       ;-----------------------------------------------------------
F00:5595       ;-----------------------------------------------------------
F00:5596       
F00:5597       op_MULU:     
F00:5598       
F00:5599                       move.l #$FE805501,d0        ; Initial 
               S06:0000498A:  20 3C FE 80 55 01
F00:5600                       move.l #$5697EDB6,d1        ; Initial Y
               S06:00004990:  22 3C 56 97 ED B6
F00:5601                       move.l #$FE805501,d2
               S06:00004996:  24 3C FE 80 55 01
F00:5602                       move.l #$00000000,d3
               S06:0000499C:  26 3C 00 00 00 00
F00:5603                       move.l #$00000000,d4        ; Cumulative data results
               S06:000049A2:  28 3C 00 00 00 00
F00:5604                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000049A8:  2A 3C 00 00 00 00
F00:5605                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000049AE:  2C 3C 00 00 00 0E
F00:5606                       move.l #$0000000E,d7       ; Outer loop counter
               S06:000049B4:  2E 3C 00 00 00 0E
F00:5607       
F00:5608       
F00:5609       MULU_OUTER1:    mulu d1,d0             
               S06:000049BA:  C0 C1
F00:5610                       move SR,d3      
               S06:000049BC:  40 C3
F00:5611                       andi.l #$0C,d3            ; Isolate flags 
               S06:000049BE:  02 83 00 00 00 0C
F00:5612                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000049C4:  DA 83
F00:5613                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000049C6:  D8 80
F00:5614                       ror.l #$1,d1
               S06:000049C8:  E2 99
F00:5615       
F00:5616                       dbf d6,MULU_OUTER1
               S06:000049CA:  51 CE FF EE
F00:5617                       ror.l #$1,d2
               S06:000049CE:  E2 9A
F00:5618                       move.l d2,d0
               S06:000049D0:  20 02
F00:5619                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000049D2:  2C 3C 00 00 00 0E
F00:5620                       dbf d7,MULU_OUTER1
               S06:000049D8:  51 CF FF E0
F00:5621                       
F00:5622                       cmpi.l #$76FB988C,d4      ; Check the data results
               S06:000049DC:  0C 84 76 FB 98 8C
F00:5623                       bne MULU_FAIL;                
               S06:000049E2:  66 00 00 18
F00:5624                            
F00:5625                       cmpi.l #$00000170,d5      ; Check the Flag results
               S06:000049E6:  0C 85 00 00 01 70
F00:5626                       bne MULU_FAIL;                 
               S06:000049EC:  66 00 00 0E
F00:5627                 
F00:5628                       movea #TESTSTATUS,a0
               S06:000049F0:  30 7C FF 00
F00:5629                       move.b #$1,$33(a0)
               S06:000049F4:  11 7C 00 01 00 33
F00:5630                       rts
               S06:000049FA:  4E 75
F00:5631       
F00:5632       MULU_FAIL:
F00:5633           movea #TESTSTATUS,a0
               S06:000049FC:  30 7C FF 00
F00:5634           move.b #$2,$33(a0)
               S06:00004A00:  11 7C 00 02 00 33
F00:5635           rts            
               S06:00004A06:  4E 75
F00:5636                       
F00:5637       ;-----------------------------------------------------------
F00:5638       ;-----------------------------------------------------------
F00:5639       ; OPCODE : MULS
F00:5640       ;-----------------------------------------------------------
F00:5641       ;-----------------------------------------------------------
F00:5642       
F00:5643       op_MULS:     
F00:5644       
F00:5645                       move.l #$FE805501,d0        ; Initial 
               S06:00004A08:  20 3C FE 80 55 01
F00:5646                       move.l #$5697EDB6,d1        ; Initial Y
               S06:00004A0E:  22 3C 56 97 ED B6
F00:5647                       move.l #$FE805501,d2
               S06:00004A14:  24 3C FE 80 55 01
F00:5648                       move.l #$00000000,d3
               S06:00004A1A:  26 3C 00 00 00 00
F00:5649                       move.l #$00000000,d4        ; Cumulative data results
               S06:00004A20:  28 3C 00 00 00 00
F00:5650                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00004A26:  2A 3C 00 00 00 00
F00:5651                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00004A2C:  2C 3C 00 00 00 0E
F00:5652                       move.l #$0000000E,d7       ; Outer loop counter
               S06:00004A32:  2E 3C 00 00 00 0E
F00:5653       
F00:5654       
F00:5655       MULS_OUTER1:    muls d1,d0             
               S06:00004A38:  C1 C1
F00:5656                       move SR,d3      
               S06:00004A3A:  40 C3
F00:5657                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004A3C:  02 83 00 00 00 0C
F00:5658                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004A42:  DA 83
F00:5659                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004A44:  D8 80
F00:5660                       ror.l #$1,d1
               S06:00004A46:  E2 99
F00:5661       
F00:5662                       dbf d6,MULS_OUTER1
               S06:00004A48:  51 CE FF EE
F00:5663                       ror.l #$1,d2
               S06:00004A4C:  E2 9A
F00:5664                       move.l d2,d0
               S06:00004A4E:  20 02
F00:5665                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00004A50:  2C 3C 00 00 00 0E
F00:5666                       dbf d7,MULS_OUTER1
               S06:00004A56:  51 CF FF E0
F00:5667                       
F00:5668                       cmpi.l #$D4E2988C,d4      ; Check the data results
               S06:00004A5A:  0C 84 D4 E2 98 8C
F00:5669                       bne MULS_FAIL;                
               S06:00004A60:  66 00 00 18
F00:5670                            
F00:5671                       cmpi.l #$000003E0,d5      ; Check the Flag results
               S06:00004A64:  0C 85 00 00 03 E0
F00:5672                       bne MULS_FAIL;                 
               S06:00004A6A:  66 00 00 0E
F00:5673                 
F00:5674                       movea #TESTSTATUS,a0
               S06:00004A6E:  30 7C FF 00
F00:5675                       move.b #$1,$34(a0)
               S06:00004A72:  11 7C 00 01 00 34
F00:5676                       rts
               S06:00004A78:  4E 75
F00:5677                       
F00:5678       MULS_FAIL:
F00:5679           movea #TESTSTATUS,a0
               S06:00004A7A:  30 7C FF 00
F00:5680           move.b #$2,$34(a0)
               S06:00004A7E:  11 7C 00 02 00 34
F00:5681           rts
               S06:00004A84:  4E 75
F00:5682                       
F00:5683       ;-----------------------------------------------------------
F00:5684       ;-----------------------------------------------------------
F00:5685       ; OPCODE : EXG
F00:5686       ;-----------------------------------------------------------
F00:5687       ;-----------------------------------------------------------
F00:5688       
F00:5689       op_EXG:     
F00:5690                       move.l #$d1d1d1d1,d1      
               S06:00004A86:  22 3C D1 D1 D1 D1
F00:5691                       move.l #$d2d2d2d2,d2      
               S06:00004A8C:  24 3C D2 D2 D2 D2
F00:5692                       move.l #$d3d3d3d3,d3      
               S06:00004A92:  26 3C D3 D3 D3 D3
F00:5693                       move.l #$a1a1a1a1,a1      
               S06:00004A98:  22 7C A1 A1 A1 A1
F00:5694                       move.l #$a2a2a2a2,a2  
               S06:00004A9E:  24 7C A2 A2 A2 A2
F00:5695                       move.l #$a3a3a3a3,a3  
               S06:00004AA4:  26 7C A3 A3 A3 A3
F00:5696                       
F00:5697                       exg d1,d2    
               S06:00004AAA:  C3 42
F00:5698                       exg a1,a2    
               S06:00004AAC:  C3 4A
F00:5699                       exg d3,a3  
               S06:00004AAE:  C7 8B
F00:5700       
F00:5701                       cmpi.l #$d2d2d2d2,d1      ; Check the results
               S06:00004AB0:  0C 81 D2 D2 D2 D2
F00:5702                       bne EXG_FAIL;                 
               S06:00004AB6:  66 00 00 46
F00:5703                       cmpi.l #$d1d1d1d1,d2    
               S06:00004ABA:  0C 82 D1 D1 D1 D1
F00:5704                       bne EXG_FAIL;                 
               S06:00004AC0:  66 00 00 3C
F00:5705                       cmpi.l #$a3a3a3a3,d3    
               S06:00004AC4:  0C 83 A3 A3 A3 A3
F00:5706                       bne EXG_FAIL;                 
               S06:00004ACA:  66 00 00 32
F00:5707                       
F00:5708                       move.l a1,d1
               S06:00004ACE:  22 09
F00:5709                       move.l a2,d2
               S06:00004AD0:  24 0A
F00:5710                       move.l a3,d3
               S06:00004AD2:  26 0B
F00:5711        
F00:5712                       cmpi.l #$a2a2a2a2,d1    
               S06:00004AD4:  0C 81 A2 A2 A2 A2
F00:5713                       bne EXG_FAIL;                 
               S06:00004ADA:  66 00 00 22
F00:5714                       cmpi.l #$a1a1a1a1,d2     
               S06:00004ADE:  0C 82 A1 A1 A1 A1
F00:5715                       bne EXG_FAIL;                 
               S06:00004AE4:  66 00 00 18
F00:5716                       cmpi.l #$d3d3d3d3,d3     
               S06:00004AE8:  0C 83 D3 D3 D3 D3
F00:5717                       bne EXG_FAIL;                 
               S06:00004AEE:  66 00 00 0E
F00:5718        
F00:5719                       movea #TESTSTATUS,a0
               S06:00004AF2:  30 7C FF 00
F00:5720                       move.b #$1,$35(a0)
               S06:00004AF6:  11 7C 00 01 00 35
F00:5721                       rts
               S06:00004AFC:  4E 75
F00:5722             
F00:5723       EXG_FAIL:
F00:5724           movea #TESTSTATUS,a0
               S06:00004AFE:  30 7C FF 00
F00:5725           move.b #$2,$35(a0)
               S06:00004B02:  11 7C 00 02 00 35
F00:5726           rts
               S06:00004B08:  4E 75
F00:5727       
F00:5728       ;-----------------------------------------------------------
F00:5729       ;-----------------------------------------------------------
F00:5730       ; OPCODE : ROx
F00:5731       ;-----------------------------------------------------------
F00:5732       ;-----------------------------------------------------------
F00:5733       
F00:5734           ; Subroutine to check and accumulate the flags 
F00:5735       ROx_FLAGS:      move SR,d3      
               S06:00004B0A:  40 C3
F00:5736                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004B0C:  02 83 00 00 00 0F
F00:5737                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004B12:  DA 83
F00:5738                       rts
               S06:00004B14:  4E 75
F00:5739           
F00:5740       op_ROx:   
F00:5741                  
F00:5742           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:5743           
F00:5744              ; BYTE LEFT
F00:5745                       move.l #$80018FF1,d0   
               S06:00004B16:  20 3C 80 01 8F F1
F00:5746                       move.l #$00000000,d5  
               S06:00004B1C:  2A 3C 00 00 00 00
F00:5747                       move.l #$00000011,d6  
               S06:00004B22:  2C 3C 00 00 00 11
F00:5748       ROx_LOOP1:
F00:5749                       rol.b d6,d0       
               S06:00004B28:  ED 38
F00:5750                       jsr ROx_FLAGS
               S06:00004B2A:  4E B9 00 00 4B 0A
F00:5751                       dbf d6,ROx_LOOP1
               S06:00004B30:  51 CE FF F6
F00:5752                       cmpi.l #$80018FE3,d0     
               S06:00004B34:  0C 80 80 01 8F E3
F00:5753                       bne ROX_FAIL;                 
               S06:00004B3A:  66 00 02 C4
F00:5754                       cmpi.l #$0000006B,d5     
               S06:00004B3E:  0C 85 00 00 00 6B
F00:5755                       bne ROX_FAIL;      
               S06:00004B44:  66 00 02 BA
F00:5756           
F00:5757              ; BYTE RIGHT
F00:5758                       move.l #$80018FF1,d0   
               S06:00004B48:  20 3C 80 01 8F F1
F00:5759                       move.l #$00000012,d6  
               S06:00004B4E:  2C 3C 00 00 00 12
F00:5760       ROx_LOOP2:
F00:5761                       ror.b d6,d0       
               S06:00004B54:  EC 38
F00:5762                       jsr ROx_FLAGS
               S06:00004B56:  4E B9 00 00 4B 0A
F00:5763                       dbf d6,ROx_LOOP2
               S06:00004B5C:  51 CE FF F6
F00:5764                       cmpi.l #$80018F3E,d0     
               S06:00004B60:  0C 80 80 01 8F 3E
F00:5765                       bne ROX_FAIL;                 
               S06:00004B66:  66 00 02 98
F00:5766                       cmpi.l #$000000C5,d5     
               S06:00004B6A:  0C 85 00 00 00 C5
F00:5767                       bne ROX_FAIL;      
               S06:00004B70:  66 00 02 8E
F00:5768       
F00:5769           
F00:5770              ; WORD LEFT
F00:5771                       move.l #$80018FF1,d0   
               S06:00004B74:  20 3C 80 01 8F F1
F00:5772                       move.l #$00000013,d6  
               S06:00004B7A:  2C 3C 00 00 00 13
F00:5773       ROx_LOOP3:
F00:5774                       rol.w d6,d0       
               S06:00004B80:  ED 78
F00:5775                       jsr ROx_FLAGS
               S06:00004B82:  4E B9 00 00 4B 0A
F00:5776                       dbf d6,ROx_LOOP3
               S06:00004B88:  51 CE FF F6
F00:5777                       cmpi.l #$800163FC,d0     
               S06:00004B8C:  0C 80 80 01 63 FC
F00:5778                       bne ROX_FAIL;                 
               S06:00004B92:  66 00 02 6C
F00:5779                       cmpi.l #$00000131,d5     
               S06:00004B96:  0C 85 00 00 01 31
F00:5780                       bne ROX_FAIL;      
               S06:00004B9C:  66 00 02 62
F00:5781           
F00:5782              ; WORD RIGHT
F00:5783                       move.l #$80018FF1,d0   
               S06:00004BA0:  20 3C 80 01 8F F1
F00:5784                       move.l #$0000001E,d6  
               S06:00004BA6:  2C 3C 00 00 00 1E
F00:5785       ROx_LOOP4:
F00:5786                       ror.w d6,d0       
               S06:00004BAC:  EC 78
F00:5787                       jsr ROx_FLAGS
               S06:00004BAE:  4E B9 00 00 4B 0A
F00:5788                       dbf d6,ROx_LOOP4
               S06:00004BB4:  51 CE FF F6
F00:5789                       cmpi.l #$8001C7F8,d0     
               S06:00004BB8:  0C 80 80 01 C7 F8
F00:5790                       bne ROX_FAIL;                 
               S06:00004BBE:  66 00 02 40
F00:5791                       cmpi.l #$000001DB,d5     
               S06:00004BC2:  0C 85 00 00 01 DB
F00:5792                       bne ROX_FAIL;      
               S06:00004BC8:  66 00 02 36
F00:5793       
F00:5794           
F00:5795              ; LONG LEFT
F00:5796                       move.l #$80018FF1,d0   
               S06:00004BCC:  20 3C 80 01 8F F1
F00:5797                       move.l #$00000015,d6  
               S06:00004BD2:  2C 3C 00 00 00 15
F00:5798       ROx_LOOP5:
F00:5799                       rol.l d6,d0       
               S06:00004BD8:  ED B8
F00:5800                       jsr ROx_FLAGS
               S06:00004BDA:  4E B9 00 00 4B 0A
F00:5801                       dbf d6,ROx_LOOP5
               S06:00004BE0:  51 CE FF F6
F00:5802                       cmpi.l #$00C7F8C0,d0     
               S06:00004BE4:  0C 80 00 C7 F8 C0
F00:5803                       bne ROX_FAIL;                 
               S06:00004BEA:  66 00 02 14
F00:5804                       cmpi.l #$0000021A,d5     
               S06:00004BEE:  0C 85 00 00 02 1A
F00:5805                       bne ROX_FAIL;      
               S06:00004BF4:  66 00 02 0A
F00:5806           
F00:5807              ; LONG RIGHT
F00:5808                       move.l #$80018FF1,d0   
               S06:00004BF8:  20 3C 80 01 8F F1
F00:5809                       move.l #$00000016,d6  
               S06:00004BFE:  2C 3C 00 00 00 16
F00:5810       ROx_LOOP6:
F00:5811                       ror.l d6,d0       
               S06:00004C04:  EC B8
F00:5812                       jsr ROx_FLAGS
               S06:00004C06:  4E B9 00 00 4B 0A
F00:5813                       dbf d6,ROx_LOOP6
               S06:00004C0C:  51 CE FF F6
F00:5814                       cmpi.l #$000C7F8C,d0     
               S06:00004C10:  0C 80 00 0C 7F 8C
F00:5815                       bne ROX_FAIL;                 
               S06:00004C16:  66 00 01 E8
F00:5816                       cmpi.l #$00000250,d5     
               S06:00004C1A:  0C 85 00 00 02 50
F00:5817                       bne ROX_FAIL;      
               S06:00004C20:  66 00 01 DE
F00:5818       
F00:5819                   
F00:5820           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:5821           
F00:5822                       move.l #$80018FF1,d0   
               S06:00004C24:  20 3C 80 01 8F F1
F00:5823                       move.l #$00000000,d5   
               S06:00004C2A:  2A 3C 00 00 00 00
F00:5824       
F00:5825              ; BYTE LEFT
F00:5826                       rol.b #1,d0       
               S06:00004C30:  E3 18
F00:5827                       jsr ROx_FLAGS
               S06:00004C32:  4E B9 00 00 4B 0A
F00:5828                       rol.b #5,d0      
               S06:00004C38:  EB 18
F00:5829                       jsr ROx_FLAGS
               S06:00004C3A:  4E B9 00 00 4B 0A
F00:5830                       rol.b #7,d0   
               S06:00004C40:  EF 18
F00:5831                       jsr ROx_FLAGS
               S06:00004C42:  4E B9 00 00 4B 0A
F00:5832                       rol.b #8,d0   
               S06:00004C48:  E1 18
F00:5833                       jsr ROx_FLAGS
               S06:00004C4A:  4E B9 00 00 4B 0A
F00:5834                       cmpi.l #$80018F3E,d0     
               S06:00004C50:  0C 80 80 01 8F 3E
F00:5835                       bne ROX_FAIL;                 
               S06:00004C56:  66 00 01 A8
F00:5836                       cmpi.l #$00000009,d5     
               S06:00004C5A:  0C 85 00 00 00 09
F00:5837                       bne ROX_FAIL;                 
               S06:00004C60:  66 00 01 9E
F00:5838            
F00:5839              ; BYTE RIGHT
F00:5840                       ror.b #1,d0       
               S06:00004C64:  E2 18
F00:5841                       jsr ROx_FLAGS
               S06:00004C66:  4E B9 00 00 4B 0A
F00:5842                       ror.b #5,d0      
               S06:00004C6C:  EA 18
F00:5843                       jsr ROx_FLAGS
               S06:00004C6E:  4E B9 00 00 4B 0A
F00:5844                       ror.b #7,d0   
               S06:00004C74:  EE 18
F00:5845                       jsr ROx_FLAGS
               S06:00004C76:  4E B9 00 00 4B 0A
F00:5846                       ror.b #8,d0   
               S06:00004C7C:  E0 18
F00:5847                       jsr ROx_FLAGS
               S06:00004C7E:  4E B9 00 00 4B 0A
F00:5848                       cmpi.l #$80018FF1,d0     
               S06:00004C84:  0C 80 80 01 8F F1
F00:5849                       bne ROX_FAIL;                 
               S06:00004C8A:  66 00 01 74
F00:5850                       cmpi.l #$00000024,d5     
               S06:00004C8E:  0C 85 00 00 00 24
F00:5851                       bne ROX_FAIL;                 
               S06:00004C94:  66 00 01 6A
F00:5852            
F00:5853              ; WORD LEFT
F00:5854                       rol.w #1,d0       
               S06:00004C98:  E3 58
F00:5855                       jsr ROx_FLAGS
               S06:00004C9A:  4E B9 00 00 4B 0A
F00:5856                       rol.w #5,d0      
               S06:00004CA0:  EB 58
F00:5857                       jsr ROx_FLAGS
               S06:00004CA2:  4E B9 00 00 4B 0A
F00:5858                       rol.w #7,d0   
               S06:00004CA8:  EF 58
F00:5859                       jsr ROx_FLAGS
               S06:00004CAA:  4E B9 00 00 4B 0A
F00:5860                       rol.w #8,d0   
               S06:00004CB0:  E1 58
F00:5861                       jsr ROx_FLAGS
               S06:00004CB2:  4E B9 00 00 4B 0A
F00:5862                       cmpi.l #$8001FE31,d0     
               S06:00004CB8:  0C 80 80 01 FE 31
F00:5863                       bne ROX_FAIL;                 
               S06:00004CBE:  66 00 01 40
F00:5864                       cmpi.l #$00000037,d5     
               S06:00004CC2:  0C 85 00 00 00 37
F00:5865                       bne ROX_FAIL;                 
               S06:00004CC8:  66 00 01 36
F00:5866                         
F00:5867              ; WORD RIGHT
F00:5868                       ror.w #1,d0       
               S06:00004CCC:  E2 58
F00:5869                       jsr ROx_FLAGS
               S06:00004CCE:  4E B9 00 00 4B 0A
F00:5870                       ror.w #5,d0      
               S06:00004CD4:  EA 58
F00:5871                       jsr ROx_FLAGS
               S06:00004CD6:  4E B9 00 00 4B 0A
F00:5872                       ror.w #7,d0   
               S06:00004CDC:  EE 58
F00:5873                       jsr ROx_FLAGS
               S06:00004CDE:  4E B9 00 00 4B 0A
F00:5874                       ror.w #8,d0   
               S06:00004CE4:  E0 58
F00:5875                       jsr ROx_FLAGS
               S06:00004CE6:  4E B9 00 00 4B 0A
F00:5876                       cmpi.l #$80018FF1,d0     
               S06:00004CEC:  0C 80 80 01 8F F1
F00:5877                       bne ROX_FAIL;                 
               S06:00004CF2:  66 00 01 0C
F00:5878                       cmpi.l #$0000005B,d5     
               S06:00004CF6:  0C 85 00 00 00 5B
F00:5879                       bne ROX_FAIL;                 
               S06:00004CFC:  66 00 01 02
F00:5880                      
F00:5881              ; LONG LEFT
F00:5882                       rol.l #1,d0       
               S06:00004D00:  E3 98
F00:5883                       jsr ROx_FLAGS
               S06:00004D02:  4E B9 00 00 4B 0A
F00:5884                       rol.l #5,d0      
               S06:00004D08:  EB 98
F00:5885                       jsr ROx_FLAGS
               S06:00004D0A:  4E B9 00 00 4B 0A
F00:5886                       rol.l #7,d0   
               S06:00004D10:  EF 98
F00:5887                       jsr ROx_FLAGS
               S06:00004D12:  4E B9 00 00 4B 0A
F00:5888                       rol.l #8,d0   
               S06:00004D18:  E1 98
F00:5889                       jsr ROx_FLAGS
               S06:00004D1A:  4E B9 00 00 4B 0A
F00:5890                       cmpi.l #$FE300031,d0     
               S06:00004D20:  0C 80 FE 30 00 31
F00:5891                       bne ROX_FAIL;                 
               S06:00004D26:  66 00 00 D8
F00:5892                       cmpi.l #$00000065,d5     
               S06:00004D2A:  0C 85 00 00 00 65
F00:5893                       bne ROX_FAIL;                 
               S06:00004D30:  66 00 00 CE
F00:5894                                       
F00:5895              ; LONG RIGHT
F00:5896                       ror.l #1,d0       
               S06:00004D34:  E2 98
F00:5897                       jsr ROx_FLAGS
               S06:00004D36:  4E B9 00 00 4B 0A
F00:5898                       ror.l #5,d0      
               S06:00004D3C:  EA 98
F00:5899                       jsr ROx_FLAGS
               S06:00004D3E:  4E B9 00 00 4B 0A
F00:5900                       ror.l #7,d0   
               S06:00004D44:  EE 98
F00:5901                       jsr ROx_FLAGS
               S06:00004D46:  4E B9 00 00 4B 0A
F00:5902                       ror.l #8,d0   
               S06:00004D4C:  E0 98
F00:5903                       jsr ROx_FLAGS
               S06:00004D4E:  4E B9 00 00 4B 0A
F00:5904                       cmpi.l #$80018FF1,d0     
               S06:00004D54:  0C 80 80 01 8F F1
F00:5905                       bne ROX_FAIL;                 
               S06:00004D5A:  66 00 00 A4
F00:5906                       cmpi.l #$00000080,d5     
               S06:00004D5E:  0C 85 00 00 00 80
F00:5907                       bne ROX_FAIL;                 
               S06:00004D64:  66 00 00 9A
F00:5908          
F00:5909                   
F00:5910           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:5911           
F00:5912                       move.l #$00000000,d5   
               S06:00004D68:  2A 3C 00 00 00 00
F00:5913                       move.l #$00000100,a0 
               S06:00004D6E:  20 7C 00 00 01 00
F00:5914                       move.w #$8FF1,(a0)
               S06:00004D74:  30 BC 8F F1
F00:5915                       
F00:5916              ; WORD LEFT
F00:5917                       rol (a0)       
               S06:00004D78:  E7 D0
F00:5918                       jsr ROx_FLAGS
               S06:00004D7A:  4E B9 00 00 4B 0A
F00:5919                       rol (a0)       
               S06:00004D80:  E7 D0
F00:5920                       jsr ROx_FLAGS
               S06:00004D82:  4E B9 00 00 4B 0A
F00:5921                       rol (a0)       
               S06:00004D88:  E7 D0
F00:5922                       jsr ROx_FLAGS
               S06:00004D8A:  4E B9 00 00 4B 0A
F00:5923                       rol (a0)       
               S06:00004D90:  E7 D0
F00:5924                       jsr ROx_FLAGS
               S06:00004D92:  4E B9 00 00 4B 0A
F00:5925                       move.w (a0),d0
               S06:00004D98:  30 10
F00:5926                       cmpi.l #$8001FF18,d0     
               S06:00004D9A:  0C 80 80 01 FF 18
F00:5927                       bne ROX_FAIL;                 
               S06:00004DA0:  66 00 00 5E
F00:5928                       cmpi.l #$00000009,d5     
               S06:00004DA4:  0C 85 00 00 00 09
F00:5929                       bne ROX_FAIL;                 
               S06:00004DAA:  66 00 00 54
F00:5930                         
F00:5931              ; WORD RIGHT
F00:5932                       ror (a0)       
               S06:00004DAE:  E6 D0
F00:5933                       jsr ROx_FLAGS
               S06:00004DB0:  4E B9 00 00 4B 0A
F00:5934                       ror (a0)       
               S06:00004DB6:  E6 D0
F00:5935                       jsr ROx_FLAGS
               S06:00004DB8:  4E B9 00 00 4B 0A
F00:5936                       ror (a0)       
               S06:00004DBE:  E6 D0
F00:5937                       jsr ROx_FLAGS                
               S06:00004DC0:  4E B9 00 00 4B 0A
F00:5938                       ror (a0)       
               S06:00004DC6:  E6 D0
F00:5939                       jsr ROx_FLAGS               
               S06:00004DC8:  4E B9 00 00 4B 0A
F00:5940                       ror (a0)       
               S06:00004DCE:  E6 D0
F00:5941                       jsr ROx_FLAGS
               S06:00004DD0:  4E B9 00 00 4B 0A
F00:5942                       ror (a0)       
               S06:00004DD6:  E6 D0
F00:5943                       jsr ROx_FLAGS
               S06:00004DD8:  4E B9 00 00 4B 0A
F00:5944                       move.w (a0),d0
               S06:00004DDE:  30 10
F00:5945                       cmpi.l #$800163FC,d0     
               S06:00004DE0:  0C 80 80 01 63 FC
F00:5946                       bne ROX_FAIL;                 
               S06:00004DE6:  66 00 00 18
F00:5947                       cmpi.l #$0000001B,d5     
               S06:00004DEA:  0C 85 00 00 00 1B
F00:5948                       bne ROX_FAIL;                 
               S06:00004DF0:  66 00 00 0E
F00:5949       
F00:5950                       movea #TESTSTATUS,a0
               S06:00004DF4:  30 7C FF 00
F00:5951                       move.b #$1,$36(a0)
               S06:00004DF8:  11 7C 00 01 00 36
F00:5952                       rts
               S06:00004DFE:  4E 75
F00:5953             
F00:5954       ROX_FAIL:
F00:5955           movea #TESTSTATUS,a0
               S06:00004E00:  30 7C FF 00
F00:5956           move.b #$2,$36(a0)
               S06:00004E04:  11 7C 00 02 00 36
F00:5957           rts
               S06:00004E0A:  4E 75
F00:5958                       
F00:5959       ;-----------------------------------------------------------
F00:5960       ;-----------------------------------------------------------
F00:5961       ; OPCODE : ROXx
F00:5962       ;-----------------------------------------------------------
F00:5963       ;-----------------------------------------------------------
F00:5964       
F00:5965           ; Subroutine to check and accumulate the flags 
F00:5966       ROXx_FLAGS:     move SR,d3      
               S06:00004E0C:  40 C3
F00:5967                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004E0E:  02 83 00 00 00 0F
F00:5968                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004E14:  DA 83
F00:5969                       rts
               S06:00004E16:  4E 75
F00:5970           
F00:5971       op_ROXx:   
F00:5972                  
F00:5973           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:5974           
F00:5975              ; BYTE LEFT
F00:5976                       move.l #$80018FF1,d0   
               S06:00004E18:  20 3C 80 01 8F F1
F00:5977                       move.l #$00000000,d5  
               S06:00004E1E:  2A 3C 00 00 00 00
F00:5978                       move.l #$00000011,d6  
               S06:00004E24:  2C 3C 00 00 00 11
F00:5979       ROXx_LOOP1:
F00:5980                       roxl.b d6,d0       
               S06:00004E2A:  ED 30
F00:5981                       jsr ROXx_FLAGS
               S06:00004E2C:  4E B9 00 00 4E 0C
F00:5982                       dbf d6,ROXx_LOOP1
               S06:00004E32:  51 CE FF F6
F00:5983                       cmpi.l #$80018FD0,d0     
               S06:00004E36:  0C 80 80 01 8F D0
F00:5984                       bne ROXX_FAIL;                 
               S06:00004E3C:  66 00 02 C4
F00:5985                       cmpi.l #$00000042,d5     
               S06:00004E40:  0C 85 00 00 00 42
F00:5986                       bne ROXX_FAIL;      
               S06:00004E46:  66 00 02 BA
F00:5987           
F00:5988              ; BYTE RIGHT
F00:5989                       move.l #$80018FF1,d0   
               S06:00004E4A:  20 3C 80 01 8F F1
F00:5990                       move.l #$00000012,d6  
               S06:00004E50:  2C 3C 00 00 00 12
F00:5991       ROXx_LOOP2:
F00:5992                       roxr.b d6,d0       
               S06:00004E56:  EC 30
F00:5993                       jsr ROXx_FLAGS
               S06:00004E58:  4E B9 00 00 4E 0C
F00:5994                       dbf d6,ROXx_LOOP2
               S06:00004E5E:  51 CE FF F6
F00:5995                       cmpi.l #$80018F51,d0     
               S06:00004E62:  0C 80 80 01 8F 51
F00:5996                       bne ROXX_FAIL;                 
               S06:00004E68:  66 00 02 98
F00:5997                       cmpi.l #$0000009C,d5     
               S06:00004E6C:  0C 85 00 00 00 9C
F00:5998                       bne ROXX_FAIL;      
               S06:00004E72:  66 00 02 8E
F00:5999       
F00:6000           
F00:6001              ; WORD LEFT
F00:6002                       move.l #$80018FF1,d0   
               S06:00004E76:  20 3C 80 01 8F F1
F00:6003                       move.l #$00000013,d6  
               S06:00004E7C:  2C 3C 00 00 00 13
F00:6004       ROXx_LOOP3:
F00:6005                       roxl.w d6,d0       
               S06:00004E82:  ED 70
F00:6006                       jsr ROXx_FLAGS
               S06:00004E84:  4E B9 00 00 4E 0C
F00:6007                       dbf d6,ROXx_LOOP3
               S06:00004E8A:  51 CE FF F6
F00:6008                       cmpi.l #$80013980,d0     
               S06:00004E8E:  0C 80 80 01 39 80
F00:6009                       bne ROXX_FAIL;                 
               S06:00004E94:  66 00 02 6C
F00:6010                       cmpi.l #$000000C9,d5     
               S06:00004E98:  0C 85 00 00 00 C9
F00:6011                       bne ROXX_FAIL;      
               S06:00004E9E:  66 00 02 62
F00:6012           
F00:6013              ; WORD RIGHT
F00:6014                       move.l #$80018FF1,d0   
               S06:00004EA2:  20 3C 80 01 8F F1
F00:6015                       move.l #$0000001E,d6  
               S06:00004EA8:  2C 3C 00 00 00 1E
F00:6016       ROXx_LOOP4:
F00:6017                       roxr.w d6,d0       
               S06:00004EAE:  EC 70
F00:6018                       jsr ROXx_FLAGS
               S06:00004EB0:  4E B9 00 00 4E 0C
F00:6019                       dbf d6,ROXx_LOOP4
               S06:00004EB6:  51 CE FF F6
F00:6020                       cmpi.l #$80010A1D,d0     
               S06:00004EBA:  0C 80 80 01 0A 1D
F00:6021                       bne ROXX_FAIL;                 
               S06:00004EC0:  66 00 02 40
F00:6022                       cmpi.l #$0000014D,d5     
               S06:00004EC4:  0C 85 00 00 01 4D
F00:6023                       bne ROXX_FAIL;      
               S06:00004ECA:  66 00 02 36
F00:6024       
F00:6025           
F00:6026              ; LONG LEFT
F00:6027                       move.l #$80018FF1,d0   
               S06:00004ECE:  20 3C 80 01 8F F1
F00:6028                       move.l #$00000015,d6  
               S06:00004ED4:  2C 3C 00 00 00 15
F00:6029       ROXx_LOOP5:
F00:6030                       roxl.l d6,d0       
               S06:00004EDA:  ED B0
F00:6031                       jsr ROXx_FLAGS
               S06:00004EDC:  4E B9 00 00 4E 0C
F00:6032                       dbf d6,ROXx_LOOP5
               S06:00004EE2:  51 CE FF F6
F00:6033                       cmpi.l #$800185D0,d0     
               S06:00004EE6:  0C 80 80 01 85 D0
F00:6034                       bne ROXX_FAIL;                 
               S06:00004EEC:  66 00 02 14
F00:6035                       cmpi.l #$000001A1,d5     
               S06:00004EF0:  0C 85 00 00 01 A1
F00:6036                       bne ROXX_FAIL;      
               S06:00004EF6:  66 00 02 0A
F00:6037           
F00:6038              ; LONG RIGHT
F00:6039                       move.l #$80018FF1,d0   
               S06:00004EFA:  20 3C 80 01 8F F1
F00:6040                       move.l #$00000016,d6  
               S06:00004F00:  2C 3C 00 00 00 16
F00:6041       ROXx_LOOP6:
F00:6042                       roxr.l d6,d0       
               S06:00004F06:  EC B0
F00:6043                       jsr ROXx_FLAGS
               S06:00004F08:  4E B9 00 00 4E 0C
F00:6044                       dbf d6,ROXx_LOOP6
               S06:00004F0E:  51 CE FF F6
F00:6045                       cmpi.l #$082D8200,d0     
               S06:00004F12:  0C 80 08 2D 82 00
F00:6046                       bne ROXX_FAIL;                 
               S06:00004F18:  66 00 01 E8
F00:6047                       cmpi.l #$000001DE,d5     
               S06:00004F1C:  0C 85 00 00 01 DE
F00:6048                       bne ROXX_FAIL;      
               S06:00004F22:  66 00 01 DE
F00:6049       
F00:6050                   
F00:6051           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6052           
F00:6053                       move.l #$80018FF1,d0   
               S06:00004F26:  20 3C 80 01 8F F1
F00:6054                       move.l #$00000000,d5   
               S06:00004F2C:  2A 3C 00 00 00 00
F00:6055       
F00:6056              ; BYTE LEFT
F00:6057                       roxl.b #1,d0       
               S06:00004F32:  E3 10
F00:6058                       jsr ROXx_FLAGS
               S06:00004F34:  4E B9 00 00 4E 0C
F00:6059                       roxl.b #5,d0      
               S06:00004F3A:  EB 10
F00:6060                       jsr ROXx_FLAGS
               S06:00004F3C:  4E B9 00 00 4E 0C
F00:6061                       roxl.b #7,d0   
               S06:00004F42:  EF 10
F00:6062                       jsr ROXx_FLAGS
               S06:00004F44:  4E B9 00 00 4E 0C
F00:6063                       roxl.b #8,d0   
               S06:00004F4A:  E1 10
F00:6064                       jsr ROXx_FLAGS
               S06:00004F4C:  4E B9 00 00 4E 0C
F00:6065                       cmpi.l #$80018F09,d0     
               S06:00004F52:  0C 80 80 01 8F 09
F00:6066                       bne ROXX_FAIL;                 
               S06:00004F58:  66 00 01 A8
F00:6067                       cmpi.l #$0000000B,d5     
               S06:00004F5C:  0C 85 00 00 00 0B
F00:6068                       bne ROXX_FAIL;                 
               S06:00004F62:  66 00 01 9E
F00:6069            
F00:6070              ; BYTE RIGHT
F00:6071                       roxr.b #1,d0       
               S06:00004F66:  E2 10
F00:6072                       jsr ROXx_FLAGS
               S06:00004F68:  4E B9 00 00 4E 0C
F00:6073                       roxr.b #5,d0      
               S06:00004F6E:  EA 10
F00:6074                       jsr ROXx_FLAGS
               S06:00004F70:  4E B9 00 00 4E 0C
F00:6075                       roxr.b #7,d0   
               S06:00004F76:  EE 10
F00:6076                       jsr ROXx_FLAGS
               S06:00004F78:  4E B9 00 00 4E 0C
F00:6077                       roxr.b #8,d0   
               S06:00004F7E:  E0 10
F00:6078                       jsr ROXx_FLAGS
               S06:00004F80:  4E B9 00 00 4E 0C
F00:6079                       cmpi.l #$80018F00,d0     
               S06:00004F86:  0C 80 80 01 8F 00
F00:6080                       bne ROXX_FAIL;                 
               S06:00004F8C:  66 00 01 74
F00:6081                       cmpi.l #$00000015,d5     
               S06:00004F90:  0C 85 00 00 00 15
F00:6082                       bne ROXX_FAIL;                 
               S06:00004F96:  66 00 01 6A
F00:6083            
F00:6084              ; WORD LEFT
F00:6085                       roxl.w #1,d0       
               S06:00004F9A:  E3 50
F00:6086                       jsr ROXx_FLAGS
               S06:00004F9C:  4E B9 00 00 4E 0C
F00:6087                       roxl.w #5,d0      
               S06:00004FA2:  EB 50
F00:6088                       jsr ROXx_FLAGS
               S06:00004FA4:  4E B9 00 00 4E 0C
F00:6089                       roxl.w #7,d0   
               S06:00004FAA:  EF 50
F00:6090                       jsr ROXx_FLAGS
               S06:00004FAC:  4E B9 00 00 4E 0C
F00:6091                       roxl.w #8,d0   
               S06:00004FB2:  E1 50
F00:6092                       jsr ROXx_FLAGS
               S06:00004FB4:  4E B9 00 00 4E 0C
F00:6093                       cmpi.l #$8001B000,d0     
               S06:00004FBA:  0C 80 80 01 B0 00
F00:6094                       bne ROXX_FAIL;                 
               S06:00004FC0:  66 00 01 40
F00:6095                       cmpi.l #$00000027,d5     
               S06:00004FC4:  0C 85 00 00 00 27
F00:6096                       bne ROXX_FAIL;                 
               S06:00004FCA:  66 00 01 36
F00:6097                         
F00:6098              ; WORD RIGHT
F00:6099                       roxr.w #1,d0       
               S06:00004FCE:  E2 50
F00:6100                       jsr ROXx_FLAGS
               S06:00004FD0:  4E B9 00 00 4E 0C
F00:6101                       roxr.w #5,d0      
               S06:00004FD6:  EA 50
F00:6102                       jsr ROXx_FLAGS
               S06:00004FD8:  4E B9 00 00 4E 0C
F00:6103                       roxr.w #7,d0   
               S06:00004FDE:  EE 50
F00:6104                       jsr ROXx_FLAGS
               S06:00004FE0:  4E B9 00 00 4E 0C
F00:6105                       roxr.w #8,d0   
               S06:00004FE6:  E0 50
F00:6106                       jsr ROXx_FLAGS
               S06:00004FE8:  4E B9 00 00 4E 0C
F00:6107                       cmpi.l #$80010A00,d0     
               S06:00004FEE:  0C 80 80 01 0A 00
F00:6108                       bne ROXX_FAIL;                 
               S06:00004FF4:  66 00 01 0C
F00:6109                       cmpi.l #$00000028,d5     
               S06:00004FF8:  0C 85 00 00 00 28
F00:6110                       bne ROXX_FAIL;                 
               S06:00004FFE:  66 00 01 02
F00:6111                      
F00:6112              ; LONG LEFT
F00:6113                       roxl.l #1,d0       
               S06:00005002:  E3 90
F00:6114                       jsr ROXx_FLAGS
               S06:00005004:  4E B9 00 00 4E 0C
F00:6115                       roxl.l #5,d0      
               S06:0000500A:  EB 90
F00:6116                       jsr ROXx_FLAGS
               S06:0000500C:  4E B9 00 00 4E 0C
F00:6117                       roxl.l #7,d0   
               S06:00005012:  EF 90
F00:6118                       jsr ROXx_FLAGS
               S06:00005014:  4E B9 00 00 4E 0C
F00:6119                       roxl.l #8,d0   
               S06:0000501A:  E1 90
F00:6120                       jsr ROXx_FLAGS
               S06:0000501C:  4E B9 00 00 4E 0C
F00:6121                       cmpi.l #$40000010,d0     
               S06:00005022:  0C 80 40 00 00 10
F00:6122                       bne ROXX_FAIL;                 
               S06:00005028:  66 00 00 D8
F00:6123                       cmpi.l #$0000002A,d5     
               S06:0000502C:  0C 85 00 00 00 2A
F00:6124                       bne ROXX_FAIL;                 
               S06:00005032:  66 00 00 CE
F00:6125                                       
F00:6126              ; LONG RIGHT
F00:6127                       roxr.l #1,d0       
               S06:00005036:  E2 90
F00:6128                       jsr ROXx_FLAGS
               S06:00005038:  4E B9 00 00 4E 0C
F00:6129                       roxr.l #5,d0      
               S06:0000503E:  EA 90
F00:6130                       jsr ROXx_FLAGS
               S06:00005040:  4E B9 00 00 4E 0C
F00:6131                       roxr.l #7,d0   
               S06:00005046:  EE 90
F00:6132                       jsr ROXx_FLAGS
               S06:00005048:  4E B9 00 00 4E 0C
F00:6133                       roxr.l #8,d0   
               S06:0000504E:  E0 90
F00:6134                       jsr ROXx_FLAGS
               S06:00005050:  4E B9 00 00 4E 0C
F00:6135                       cmpi.l #$00010200,d0     
               S06:00005056:  0C 80 00 01 02 00
F00:6136                       bne ROXX_FAIL;                 
               S06:0000505C:  66 00 00 A4
F00:6137                       cmpi.l #$00000032,d5     
               S06:00005060:  0C 85 00 00 00 32
F00:6138                       bne ROXX_FAIL;                 
               S06:00005066:  66 00 00 9A
F00:6139          
F00:6140                   
F00:6141           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6142           
F00:6143                       move.l #$00000000,d5   
               S06:0000506A:  2A 3C 00 00 00 00
F00:6144                       move.l #$00000100,a0 
               S06:00005070:  20 7C 00 00 01 00
F00:6145                       move.w #$8FF1,(a0)
               S06:00005076:  30 BC 8F F1
F00:6146                       
F00:6147              ; WORD LEFT
F00:6148                       roxl (a0)       
               S06:0000507A:  E5 D0
F00:6149                       jsr ROXx_FLAGS
               S06:0000507C:  4E B9 00 00 4E 0C
F00:6150                       roxl (a0)       
               S06:00005082:  E5 D0
F00:6151                       jsr ROXx_FLAGS
               S06:00005084:  4E B9 00 00 4E 0C
F00:6152                       roxl (a0)       
               S06:0000508A:  E5 D0
F00:6153                       jsr ROXx_FLAGS
               S06:0000508C:  4E B9 00 00 4E 0C
F00:6154                       roxl (a0)       
               S06:00005092:  E5 D0
F00:6155                       jsr ROXx_FLAGS
               S06:00005094:  4E B9 00 00 4E 0C
F00:6156                       move.w (a0),d0
               S06:0000509A:  30 10
F00:6157                       cmpi.l #$0001FF10,d0     
               S06:0000509C:  0C 80 00 01 FF 10
F00:6158                       bne ROXX_FAIL;                 
               S06:000050A2:  66 00 00 5E
F00:6159                       cmpi.l #$00000009,d5     
               S06:000050A6:  0C 85 00 00 00 09
F00:6160                       bne ROXX_FAIL;                 
               S06:000050AC:  66 00 00 54
F00:6161                         
F00:6162              ; WORD RIGHT
F00:6163                       roxr (a0)       
               S06:000050B0:  E4 D0
F00:6164                       jsr ROXx_FLAGS
               S06:000050B2:  4E B9 00 00 4E 0C
F00:6165                       roxr (a0)       
               S06:000050B8:  E4 D0
F00:6166                       jsr ROXx_FLAGS
               S06:000050BA:  4E B9 00 00 4E 0C
F00:6167                       roxr (a0)       
               S06:000050C0:  E4 D0
F00:6168                       jsr ROXx_FLAGS                
               S06:000050C2:  4E B9 00 00 4E 0C
F00:6169                       roxr (a0)       
               S06:000050C8:  E4 D0
F00:6170                       jsr ROXx_FLAGS               
               S06:000050CA:  4E B9 00 00 4E 0C
F00:6171                       roxr (a0)       
               S06:000050D0:  E4 D0
F00:6172                       jsr ROXx_FLAGS
               S06:000050D2:  4E B9 00 00 4E 0C
F00:6173                       roxr (a0)       
               S06:000050D8:  E4 D0
F00:6174                       jsr ROXx_FLAGS
               S06:000050DA:  4E B9 00 00 4E 0C
F00:6175                       move.w (a0),d0
               S06:000050E0:  30 10
F00:6176                       cmpi.l #$000103FC,d0     
               S06:000050E2:  0C 80 00 01 03 FC
F00:6177                       bne ROXX_FAIL;                 
               S06:000050E8:  66 00 00 18
F00:6178                       cmpi.l #$0000000A,d5     
               S06:000050EC:  0C 85 00 00 00 0A
F00:6179                       bne ROXX_FAIL;                 
               S06:000050F2:  66 00 00 0E
F00:6180       
F00:6181                       movea #TESTSTATUS,a0
               S06:000050F6:  30 7C FF 00
F00:6182                       move.b #$1,$37(a0)
               S06:000050FA:  11 7C 00 01 00 37
F00:6183                       rts        
               S06:00005100:  4E 75
F00:6184       
F00:6185       ROXX_FAIL:
F00:6186           movea #TESTSTATUS,a0
               S06:00005102:  30 7C FF 00
F00:6187           move.b #$2,$37(a0)
               S06:00005106:  11 7C 00 02 00 37
F00:6188           rts
               S06:0000510C:  4E 75
F00:6189        
F00:6190                       
F00:6191       ;-----------------------------------------------------------
F00:6192       ;-----------------------------------------------------------
F00:6193       ; OPCODE : SHIFTS
F00:6194       ;-----------------------------------------------------------
F00:6195       ;-----------------------------------------------------------
F00:6196       
F00:6197           ; Subroutine to check and accumulate the flags 
F00:6198       SHIFTS_FLAGS:   move SR,d3      
               S06:0000510E:  40 C3
F00:6199                       andi.l #$0F,d3            ; Isolate flags 
               S06:00005110:  02 83 00 00 00 0F
F00:6200                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00005116:  DA 83
F00:6201                       rts
               S06:00005118:  4E 75
F00:6202           
F00:6203       op_SHIFTS:   
F00:6204                  
F00:6205           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6206           
F00:6207              ; BYTE LEFT
F00:6208                       move.l #$80018F81,d0   
               S06:0000511A:  20 3C 80 01 8F 81
F00:6209                       move.l #$00000000,d5  
               S06:00005120:  2A 3C 00 00 00 00
F00:6210                       move.l #$00000002,d6  
               S06:00005126:  2C 3C 00 00 00 02
F00:6211       SHIFTS_LOOP1:
F00:6212                       asl.b d6,d0       
               S06:0000512C:  ED 20
F00:6213                       jsr SHIFTS_FLAGS
               S06:0000512E:  4E B9 00 00 51 0E
F00:6214                       dbf d6,SHIFTS_LOOP1
               S06:00005134:  51 CE FF F6
F00:6215                       cmpi.l #$80018F08,d0     
               S06:00005138:  0C 80 80 01 8F 08
F00:6216                       bne SHIFT_FAIL;                 
               S06:0000513E:  66 00 02 D0
F00:6217                       cmpi.l #$00000002,d5     
               S06:00005142:  0C 85 00 00 00 02
F00:6218                       bne SHIFT_FAIL;      
               S06:00005148:  66 00 02 C6
F00:6219           
F00:6220              ; BYTE RIGHT
F00:6221                       move.l #$80018F81,d0   
               S06:0000514C:  20 3C 80 01 8F 81
F00:6222                       move.l #$00000002,d6  
               S06:00005152:  2C 3C 00 00 00 02
F00:6223       SHIFTS_LOOP2:
F00:6224                       asr.b d6,d0       
               S06:00005158:  EC 20
F00:6225                       jsr SHIFTS_FLAGS
               S06:0000515A:  4E B9 00 00 51 0E
F00:6226                       dbf d6,SHIFTS_LOOP2
               S06:00005160:  51 CE FF F6
F00:6227                       cmpi.l #$80018FF0,d0     
               S06:00005164:  0C 80 80 01 8F F0
F00:6228                       bne SHIFT_FAIL;                 
               S06:0000516A:  66 00 02 A4
F00:6229                       cmpi.l #$0000001A,d5     
               S06:0000516E:  0C 85 00 00 00 1A
F00:6230                       bne SHIFT_FAIL;      
               S06:00005174:  66 00 02 9A
F00:6231       
F00:6232           
F00:6233              ; WORD LEFT
F00:6234                       move.l #$80018FF1,d0   
               S06:00005178:  20 3C 80 01 8F F1
F00:6235                       move.l #$00000002,d6  
               S06:0000517E:  2C 3C 00 00 00 02
F00:6236       SHIFTS_LOOP3:
F00:6237                       asl.w d6,d0       
               S06:00005184:  ED 60
F00:6238                       jsr SHIFTS_FLAGS
               S06:00005186:  4E B9 00 00 51 0E
F00:6239                       dbf d6,SHIFTS_LOOP3
               S06:0000518C:  51 CE FF F6
F00:6240                       cmpi.l #$80017F88,d0     
               S06:00005190:  0C 80 80 01 7F 88
F00:6241                       bne SHIFT_FAIL;                 
               S06:00005196:  66 00 02 78
F00:6242                       cmpi.l #$0000001C,d5     
               S06:0000519A:  0C 85 00 00 00 1C
F00:6243                       bne SHIFT_FAIL;      
               S06:000051A0:  66 00 02 6E
F00:6244           
F00:6245              ; WORD RIGHT
F00:6246                       move.l #$80018FF1,d0   
               S06:000051A4:  20 3C 80 01 8F F1
F00:6247                       move.l #$00000002,d6  
               S06:000051AA:  2C 3C 00 00 00 02
F00:6248       SHIFTS_LOOP4:
F00:6249                       asr.w d6,d0       
               S06:000051B0:  EC 60
F00:6250                       jsr SHIFTS_FLAGS
               S06:000051B2:  4E B9 00 00 51 0E
F00:6251                       dbf d6,SHIFTS_LOOP4
               S06:000051B8:  51 CE FF F6
F00:6252                       cmpi.l #$8001F1FE,d0     
               S06:000051BC:  0C 80 80 01 F1 FE
F00:6253                       bne SHIFT_FAIL;                 
               S06:000051C2:  66 00 02 4C
F00:6254                       cmpi.l #$00000034,d5     
               S06:000051C6:  0C 85 00 00 00 34
F00:6255                       bne SHIFT_FAIL;      
               S06:000051CC:  66 00 02 42
F00:6256       
F00:6257           
F00:6258              ; LONG LEFT
F00:6259                       move.l #$80018FF1,d0   
               S06:000051D0:  20 3C 80 01 8F F1
F00:6260                       move.l #$00000002,d6  
               S06:000051D6:  2C 3C 00 00 00 02
F00:6261       SHIFTS_LOOP5:
F00:6262                       asl.l d6,d0       
               S06:000051DC:  ED A0
F00:6263                       jsr SHIFTS_FLAGS
               S06:000051DE:  4E B9 00 00 51 0E
F00:6264                       dbf d6,SHIFTS_LOOP5
               S06:000051E4:  51 CE FF F6
F00:6265                       cmpi.l #$000C7F88,d0     
               S06:000051E8:  0C 80 00 0C 7F 88
F00:6266                       bne SHIFT_FAIL;                 
               S06:000051EE:  66 00 02 20
F00:6267                       cmpi.l #$00000036,d5     
               S06:000051F2:  0C 85 00 00 00 36
F00:6268                       bne SHIFT_FAIL;      
               S06:000051F8:  66 00 02 16
F00:6269           
F00:6270              ; LONG RIGHT
F00:6271                       move.l #$80018FF1,d0   
               S06:000051FC:  20 3C 80 01 8F F1
F00:6272                       move.l #$00000002,d6  
               S06:00005202:  2C 3C 00 00 00 02
F00:6273       SHIFTS_LOOP6:
F00:6274                       asr.l d6,d0       
               S06:00005208:  EC A0
F00:6275                       jsr SHIFTS_FLAGS
               S06:0000520A:  4E B9 00 00 51 0E
F00:6276                       dbf d6,SHIFTS_LOOP6
               S06:00005210:  51 CE FF F6
F00:6277                       cmpi.l #$F00031FE,d0     
               S06:00005214:  0C 80 F0 00 31 FE
F00:6278                       bne SHIFT_FAIL;                 
               S06:0000521A:  66 00 01 F4
F00:6279                       cmpi.l #$0000004E,d5     
               S06:0000521E:  0C 85 00 00 00 4E
F00:6280                       bne SHIFT_FAIL;      
               S06:00005224:  66 00 01 EA
F00:6281       
F00:6282                   
F00:6283           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6284           
F00:6285                       move.l #$80018FF1,d0   
               S06:00005228:  20 3C 80 01 8F F1
F00:6286                       move.l #$00000000,d5   
               S06:0000522E:  2A 3C 00 00 00 00
F00:6287       
F00:6288              ; BYTE LEFT
F00:6289                       asl.b #1,d0       
               S06:00005234:  E3 00
F00:6290                       jsr SHIFTS_FLAGS
               S06:00005236:  4E B9 00 00 51 0E
F00:6291                       asl.b #2,d0      
               S06:0000523C:  E5 00
F00:6292                       jsr SHIFTS_FLAGS
               S06:0000523E:  4E B9 00 00 51 0E
F00:6293                       asl.b #1,d0   
               S06:00005244:  E3 00
F00:6294                       jsr SHIFTS_FLAGS
               S06:00005246:  4E B9 00 00 51 0E
F00:6295                       asl.b #3,d0   
               S06:0000524C:  E7 00
F00:6296                       jsr SHIFTS_FLAGS
               S06:0000524E:  4E B9 00 00 51 0E
F00:6297                       cmpi.l #$80018F80,d0     
               S06:00005254:  0C 80 80 01 8F 80
F00:6298                       bne SHIFT_FAIL;                 
               S06:0000525A:  66 00 01 B4
F00:6299                       cmpi.l #$0000001F,d5     
               S06:0000525E:  0C 85 00 00 00 1F
F00:6300                       bne SHIFT_FAIL;                 
               S06:00005264:  66 00 01 AA
F00:6301            
F00:6302              ; BYTE RIGHT
F00:6303                       asr.b #1,d0       
               S06:00005268:  E2 00
F00:6304                       jsr SHIFTS_FLAGS
               S06:0000526A:  4E B9 00 00 51 0E
F00:6305                       asr.b #2,d0      
               S06:00005270:  E4 00
F00:6306                       jsr SHIFTS_FLAGS
               S06:00005272:  4E B9 00 00 51 0E
F00:6307                       asr.b #3,d0   
               S06:00005278:  E6 00
F00:6308                       jsr SHIFTS_FLAGS
               S06:0000527A:  4E B9 00 00 51 0E
F00:6309                       asr.b #1,d0   
               S06:00005280:  E2 00
F00:6310                       jsr SHIFTS_FLAGS
               S06:00005282:  4E B9 00 00 51 0E
F00:6311                       cmpi.l #$80018FFF,d0     
               S06:00005288:  0C 80 80 01 8F FF
F00:6312                       bne SHIFT_FAIL;                 
               S06:0000528E:  66 00 01 80
F00:6313                       cmpi.l #$0000003F,d5     
               S06:00005292:  0C 85 00 00 00 3F
F00:6314                       bne SHIFT_FAIL;                 
               S06:00005298:  66 00 01 76
F00:6315            
F00:6316              ; WORD LEFT
F00:6317                       asl.w #1,d0       
               S06:0000529C:  E3 40
F00:6318                       jsr SHIFTS_FLAGS
               S06:0000529E:  4E B9 00 00 51 0E
F00:6319                       asl.w #2,d0      
               S06:000052A4:  E5 40
F00:6320                       jsr SHIFTS_FLAGS
               S06:000052A6:  4E B9 00 00 51 0E
F00:6321                       asl.w #3,d0   
               S06:000052AC:  E7 40
F00:6322                       jsr SHIFTS_FLAGS
               S06:000052AE:  4E B9 00 00 51 0E
F00:6323                       asl.w #5,d0   
               S06:000052B4:  EB 40
F00:6324                       jsr SHIFTS_FLAGS
               S06:000052B6:  4E B9 00 00 51 0E
F00:6325                       cmpi.l #$8001F800,d0     
               S06:000052BC:  0C 80 80 01 F8 00
F00:6326                       bne SHIFT_FAIL;                 
               S06:000052C2:  66 00 01 4C
F00:6327                       cmpi.l #$00000056,d5     
               S06:000052C6:  0C 85 00 00 00 56
F00:6328                       bne SHIFT_FAIL;                 
               S06:000052CC:  66 00 01 42
F00:6329                         
F00:6330              ; WORD RIGHT
F00:6331                       asr.w #5,d0       
               S06:000052D0:  EA 40
F00:6332                       jsr SHIFTS_FLAGS
               S06:000052D2:  4E B9 00 00 51 0E
F00:6333                       asr.w #1,d0      
               S06:000052D8:  E2 40
F00:6334                       jsr SHIFTS_FLAGS
               S06:000052DA:  4E B9 00 00 51 0E
F00:6335                       asr.w #2,d0   
               S06:000052E0:  E4 40
F00:6336                       jsr SHIFTS_FLAGS
               S06:000052E2:  4E B9 00 00 51 0E
F00:6337                       asr.w #4,d0   
               S06:000052E8:  E8 40
F00:6338                       jsr SHIFTS_FLAGS
               S06:000052EA:  4E B9 00 00 51 0E
F00:6339                       cmpi.l #$8001FFFF,d0     
               S06:000052F0:  0C 80 80 01 FF FF
F00:6340                       bne SHIFT_FAIL;                 
               S06:000052F6:  66 00 01 18
F00:6341                       cmpi.l #$00000077,d5     
               S06:000052FA:  0C 85 00 00 00 77
F00:6342                       bne SHIFT_FAIL;                 
               S06:00005300:  66 00 01 0E
F00:6343                      
F00:6344              ; LONG LEFT
F00:6345                       move.l #$80018FF1,d0   
               S06:00005304:  20 3C 80 01 8F F1
F00:6346                       asl.l #1,d0       
               S06:0000530A:  E3 80
F00:6347                       jsr SHIFTS_FLAGS
               S06:0000530C:  4E B9 00 00 51 0E
F00:6348                       asl.l #2,d0      
               S06:00005312:  E5 80
F00:6349                       jsr SHIFTS_FLAGS
               S06:00005314:  4E B9 00 00 51 0E
F00:6350                       asl.l #7,d0   
               S06:0000531A:  EF 80
F00:6351                       jsr SHIFTS_FLAGS
               S06:0000531C:  4E B9 00 00 51 0E
F00:6352                       asl.l #4,d0   
               S06:00005322:  E9 80
F00:6353                       jsr SHIFTS_FLAGS
               S06:00005324:  4E B9 00 00 51 0E
F00:6354                       cmpi.l #$63FC4000,d0     
               S06:0000532A:  0C 80 63 FC 40 00
F00:6355                       bne SHIFT_FAIL;                 
               S06:00005330:  66 00 00 DE
F00:6356                       cmpi.l #$0000007A,d5     
               S06:00005334:  0C 85 00 00 00 7A
F00:6357                       bne SHIFT_FAIL;                 
               S06:0000533A:  66 00 00 D4
F00:6358                                       
F00:6359              ; LONG RIGHT
F00:6360                       move.l #$80018FF1,d0   
               S06:0000533E:  20 3C 80 01 8F F1
F00:6361                       asr.l #1,d0       
               S06:00005344:  E2 80
F00:6362                       jsr SHIFTS_FLAGS
               S06:00005346:  4E B9 00 00 51 0E
F00:6363                       asr.l #5,d0      
               S06:0000534C:  EA 80
F00:6364                       jsr SHIFTS_FLAGS
               S06:0000534E:  4E B9 00 00 51 0E
F00:6365                       asr.l #7,d0   
               S06:00005354:  EE 80
F00:6366                       jsr SHIFTS_FLAGS
               S06:00005356:  4E B9 00 00 51 0E
F00:6367                       asr.l #8,d0   
               S06:0000535C:  E0 80
F00:6368                       jsr SHIFTS_FLAGS
               S06:0000535E:  4E B9 00 00 51 0E
F00:6369                       cmpi.l #$FFFFFC00,d0     
               S06:00005364:  0C 80 FF FF FC 00
F00:6370                       bne SHIFT_FAIL;                 
               S06:0000536A:  66 00 00 A4
F00:6371                       cmpi.l #$0000009C,d5     
               S06:0000536E:  0C 85 00 00 00 9C
F00:6372                       bne SHIFT_FAIL;                 
               S06:00005374:  66 00 00 9A
F00:6373          
F00:6374                   
F00:6375           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6376           
F00:6377                       move.l #$00000000,d5   
               S06:00005378:  2A 3C 00 00 00 00
F00:6378                       move.l #$00000100,a0 
               S06:0000537E:  20 7C 00 00 01 00
F00:6379                       move.w #$8FF1,(a0)
               S06:00005384:  30 BC 8F F1
F00:6380                       
F00:6381              ; WORD LEFT
F00:6382                       asl  (a0)       
               S06:00005388:  E1 D0
F00:6383                       jsr SHIFTS_FLAGS
               S06:0000538A:  4E B9 00 00 51 0E
F00:6384                       asl  (a0)       
               S06:00005390:  E1 D0
F00:6385                       jsr SHIFTS_FLAGS
               S06:00005392:  4E B9 00 00 51 0E
F00:6386                       asl  (a0)       
               S06:00005398:  E1 D0
F00:6387                       jsr SHIFTS_FLAGS
               S06:0000539A:  4E B9 00 00 51 0E
F00:6388                       asl  (a0)       
               S06:000053A0:  E1 D0
F00:6389                       jsr SHIFTS_FLAGS
               S06:000053A2:  4E B9 00 00 51 0E
F00:6390                       move.w (a0),d0
               S06:000053A8:  30 10
F00:6391                       cmpi.l #$FFFFFF10,d0     
               S06:000053AA:  0C 80 FF FF FF 10
F00:6392                       bne SHIFT_FAIL;                 
               S06:000053B0:  66 00 00 5E
F00:6393                       cmpi.l #$0000000D,d5     
               S06:000053B4:  0C 85 00 00 00 0D
F00:6394                       bne SHIFT_FAIL;                 
               S06:000053BA:  66 00 00 54
F00:6395                         
F00:6396              ; WORD RIGHT
F00:6397                       asr (a0)       
               S06:000053BE:  E0 D0
F00:6398                       jsr SHIFTS_FLAGS
               S06:000053C0:  4E B9 00 00 51 0E
F00:6399                       asr (a0)       
               S06:000053C6:  E0 D0
F00:6400                       jsr SHIFTS_FLAGS
               S06:000053C8:  4E B9 00 00 51 0E
F00:6401                       asr (a0)       
               S06:000053CE:  E0 D0
F00:6402                       jsr SHIFTS_FLAGS                
               S06:000053D0:  4E B9 00 00 51 0E
F00:6403                       asr (a0)       
               S06:000053D6:  E0 D0
F00:6404                       jsr SHIFTS_FLAGS               
               S06:000053D8:  4E B9 00 00 51 0E
F00:6405                       asr (a0)       
               S06:000053DE:  E0 D0
F00:6406                       jsr SHIFTS_FLAGS
               S06:000053E0:  4E B9 00 00 51 0E
F00:6407                       asr (a0)       
               S06:000053E6:  E0 D0
F00:6408                       jsr SHIFTS_FLAGS
               S06:000053E8:  4E B9 00 00 51 0E
F00:6409                       move.w (a0),d0
               S06:000053EE:  30 10
F00:6410                       cmpi.l #$FFFFFFFC,d0     
               S06:000053F0:  0C 80 FF FF FF FC
F00:6411                       bne SHIFT_FAIL;                 
               S06:000053F6:  66 00 00 18
F00:6412                       cmpi.l #$0000003E,d5     
               S06:000053FA:  0C 85 00 00 00 3E
F00:6413                       bne SHIFT_FAIL;                 
               S06:00005400:  66 00 00 0E
F00:6414       
F00:6415                       movea #TESTSTATUS,a0
               S06:00005404:  30 7C FF 00
F00:6416                       move.b #$1,$38(a0)
               S06:00005408:  11 7C 00 01 00 38
F00:6417                       rts      
               S06:0000540E:  4E 75
F00:6418               
F00:6419       SHIFT_FAIL:
F00:6420           movea #TESTSTATUS,a0
               S06:00005410:  30 7C FF 00
F00:6421           move.b #$2,$38(a0)
               S06:00005414:  11 7C 00 02 00 38
F00:6422           rts
               S06:0000541A:  4E 75
F00:6423                       
F00:6424       ;-----------------------------------------------------------
F00:6425       ;-----------------------------------------------------------
F00:6426       ; OPCODE : SHIFTS2
F00:6427       ;-----------------------------------------------------------
F00:6428       ;-----------------------------------------------------------
F00:6429       
F00:6430           ; Subroutine to check and accumulate the flags 
F00:6431       SHIFTS2_FLAGS:  move SR,d3      
               S06:0000541C:  40 C3
F00:6432                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000541E:  02 83 00 00 00 0F
F00:6433                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00005424:  DA 83
F00:6434                       rts
               S06:00005426:  4E 75
F00:6435           
F00:6436       op_SHIFTS2:   
F00:6437                  
F00:6438           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6439           
F00:6440              ; BYTE LEFT
F00:6441                       move.l #$80018F81,d0   
               S06:00005428:  20 3C 80 01 8F 81
F00:6442                       move.l #$00000000,d5  
               S06:0000542E:  2A 3C 00 00 00 00
F00:6443                       move.l #$00000002,d6  
               S06:00005434:  2C 3C 00 00 00 02
F00:6444       SHIFTS2_LOOP1:
F00:6445                       lsl.b d6,d0       
               S06:0000543A:  ED 28
F00:6446                       jsr SHIFTS2_FLAGS
               S06:0000543C:  4E B9 00 00 54 1C
F00:6447                       dbf d6,SHIFTS2_LOOP1
               S06:00005442:  51 CE FF F6
F00:6448                       cmpi.l #$80018F08,d0     
               S06:00005446:  0C 80 80 01 8F 08
F00:6449                       bne LSHIFT_FAIL;                 
               S06:0000544C:  66 00 02 D0
F00:6450                       cmpi.l #$00000000,d5     
               S06:00005450:  0C 85 00 00 00 00
F00:6451                       bne LSHIFT_FAIL;      
               S06:00005456:  66 00 02 C6
F00:6452           
F00:6453              ; BYTE RIGHT
F00:6454                       move.l #$80018F81,d0   
               S06:0000545A:  20 3C 80 01 8F 81
F00:6455                       move.l #$00000002,d6  
               S06:00005460:  2C 3C 00 00 00 02
F00:6456       SHIFTS2_LOOP2:
F00:6457                       lsr.b d6,d0       
               S06:00005466:  EC 28
F00:6458                       jsr SHIFTS2_FLAGS
               S06:00005468:  4E B9 00 00 54 1C
F00:6459                       dbf d6,SHIFTS2_LOOP2
               S06:0000546E:  51 CE FF F6
F00:6460                       cmpi.l #$80018F10,d0     
               S06:00005472:  0C 80 80 01 8F 10
F00:6461                       bne LSHIFT_FAIL;                 
               S06:00005478:  66 00 02 A4
F00:6462                       cmpi.l #$00000000,d5     
               S06:0000547C:  0C 85 00 00 00 00
F00:6463                       bne LSHIFT_FAIL;      
               S06:00005482:  66 00 02 9A
F00:6464       
F00:6465           
F00:6466              ; WORD LEFT
F00:6467                       move.l #$80018FF1,d0   
               S06:00005486:  20 3C 80 01 8F F1
F00:6468                       move.l #$00000002,d6  
               S06:0000548C:  2C 3C 00 00 00 02
F00:6469       SHIFTS2_LOOP3:
F00:6470                       lsl.w d6,d0       
               S06:00005492:  ED 68
F00:6471                       jsr SHIFTS2_FLAGS
               S06:00005494:  4E B9 00 00 54 1C
F00:6472                       dbf d6,SHIFTS2_LOOP3
               S06:0000549A:  51 CE FF F6
F00:6473                       cmpi.l #$80017F88,d0     
               S06:0000549E:  0C 80 80 01 7F 88
F00:6474                       bne LSHIFT_FAIL;                 
               S06:000054A4:  66 00 02 78
F00:6475                       cmpi.l #$00000000,d5     
               S06:000054A8:  0C 85 00 00 00 00
F00:6476                       bne LSHIFT_FAIL;      
               S06:000054AE:  66 00 02 6E
F00:6477           
F00:6478              ; WORD RIGHT
F00:6479                       move.l #$80018FF1,d0   
               S06:000054B2:  20 3C 80 01 8F F1
F00:6480                       move.l #$00000002,d6  
               S06:000054B8:  2C 3C 00 00 00 02
F00:6481       SHIFTS2_LOOP4:
F00:6482                       lsr.w d6,d0       
               S06:000054BE:  EC 68
F00:6483                       jsr SHIFTS2_FLAGS
               S06:000054C0:  4E B9 00 00 54 1C
F00:6484                       dbf d6,SHIFTS2_LOOP4
               S06:000054C6:  51 CE FF F6
F00:6485                       cmpi.l #$800111FE,d0     
               S06:000054CA:  0C 80 80 01 11 FE
F00:6486                       bne LSHIFT_FAIL;                 
               S06:000054D0:  66 00 02 4C
F00:6487                       cmpi.l #$00000000,d5     
               S06:000054D4:  0C 85 00 00 00 00
F00:6488                       bne LSHIFT_FAIL;      
               S06:000054DA:  66 00 02 42
F00:6489       
F00:6490           
F00:6491              ; LONG LEFT
F00:6492                       move.l #$80018FF1,d0   
               S06:000054DE:  20 3C 80 01 8F F1
F00:6493                       move.l #$00000002,d6  
               S06:000054E4:  2C 3C 00 00 00 02
F00:6494       SHIFTS2_LOOP5:
F00:6495                       lsl.l d6,d0       
               S06:000054EA:  ED A8
F00:6496                       jsr SHIFTS2_FLAGS
               S06:000054EC:  4E B9 00 00 54 1C
F00:6497                       dbf d6,SHIFTS2_LOOP5
               S06:000054F2:  51 CE FF F6
F00:6498                       cmpi.l #$000C7F88,d0     
               S06:000054F6:  0C 80 00 0C 7F 88
F00:6499                       bne LSHIFT_FAIL;                 
               S06:000054FC:  66 00 02 20
F00:6500                       cmpi.l #$00000000,d5     
               S06:00005500:  0C 85 00 00 00 00
F00:6501                       bne LSHIFT_FAIL;      
               S06:00005506:  66 00 02 16
F00:6502           
F00:6503              ; LONG RIGHT
F00:6504                       move.l #$80018FF1,d0   
               S06:0000550A:  20 3C 80 01 8F F1
F00:6505                       move.l #$00000002,d6  
               S06:00005510:  2C 3C 00 00 00 02
F00:6506       SHIFTS2_LOOP6:
F00:6507                       lsr.l d6,d0       
               S06:00005516:  EC A8
F00:6508                       jsr SHIFTS2_FLAGS
               S06:00005518:  4E B9 00 00 54 1C
F00:6509                       dbf d6,SHIFTS2_LOOP6
               S06:0000551E:  51 CE FF F6
F00:6510                       cmpi.l #$100031FE,d0     
               S06:00005522:  0C 80 10 00 31 FE
F00:6511                       bne LSHIFT_FAIL;                 
               S06:00005528:  66 00 01 F4
F00:6512                       cmpi.l #$00000000,d5     
               S06:0000552C:  0C 85 00 00 00 00
F00:6513                       bne LSHIFT_FAIL;      
               S06:00005532:  66 00 01 EA
F00:6514       
F00:6515                   
F00:6516           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6517           
F00:6518                       move.l #$80018FF1,d0   
               S06:00005536:  20 3C 80 01 8F F1
F00:6519                       move.l #$00000000,d5   
               S06:0000553C:  2A 3C 00 00 00 00
F00:6520       
F00:6521              ; BYTE LEFT
F00:6522                       lsl.b #1,d0       
               S06:00005542:  E3 08
F00:6523                       jsr SHIFTS2_FLAGS
               S06:00005544:  4E B9 00 00 54 1C
F00:6524                       lsl.b #2,d0      
               S06:0000554A:  E5 08
F00:6525                       jsr SHIFTS2_FLAGS
               S06:0000554C:  4E B9 00 00 54 1C
F00:6526                       lsl.b #1,d0   
               S06:00005552:  E3 08
F00:6527                       jsr SHIFTS2_FLAGS
               S06:00005554:  4E B9 00 00 54 1C
F00:6528                       lsl.b #3,d0   
               S06:0000555A:  E7 08
F00:6529                       jsr SHIFTS2_FLAGS
               S06:0000555C:  4E B9 00 00 54 1C
F00:6530                       cmpi.l #$80018F80,d0     
               S06:00005562:  0C 80 80 01 8F 80
F00:6531                       bne LSHIFT_FAIL;                 
               S06:00005568:  66 00 01 B4
F00:6532                       cmpi.l #$0000001B,d5     
               S06:0000556C:  0C 85 00 00 00 1B
F00:6533                       bne LSHIFT_FAIL;                 
               S06:00005572:  66 00 01 AA
F00:6534            
F00:6535              ; BYTE RIGHT
F00:6536                       lsr.b #1,d0       
               S06:00005576:  E2 08
F00:6537                       jsr SHIFTS2_FLAGS
               S06:00005578:  4E B9 00 00 54 1C
F00:6538                       lsr.b #2,d0      
               S06:0000557E:  E4 08
F00:6539                       jsr SHIFTS2_FLAGS
               S06:00005580:  4E B9 00 00 54 1C
F00:6540                       lsr.b #3,d0   
               S06:00005586:  E6 08
F00:6541                       jsr SHIFTS2_FLAGS
               S06:00005588:  4E B9 00 00 54 1C
F00:6542                       lsr.b #1,d0   
               S06:0000558E:  E2 08
F00:6543                       jsr SHIFTS2_FLAGS
               S06:00005590:  4E B9 00 00 54 1C
F00:6544                       cmpi.l #$80018F01,d0     
               S06:00005596:  0C 80 80 01 8F 01
F00:6545                       bne LSHIFT_FAIL;                 
               S06:0000559C:  66 00 01 80
F00:6546                       cmpi.l #$0000001B,d5     
               S06:000055A0:  0C 85 00 00 00 1B
F00:6547                       bne LSHIFT_FAIL;                 
               S06:000055A6:  66 00 01 76
F00:6548            
F00:6549              ; WORD LEFT
F00:6550                       lsl.w #1,d0       
               S06:000055AA:  E3 48
F00:6551                       jsr SHIFTS2_FLAGS
               S06:000055AC:  4E B9 00 00 54 1C
F00:6552                       lsl.w #2,d0      
               S06:000055B2:  E5 48
F00:6553                       jsr SHIFTS2_FLAGS
               S06:000055B4:  4E B9 00 00 54 1C
F00:6554                       lsl.w #3,d0   
               S06:000055BA:  E7 48
F00:6555                       jsr SHIFTS2_FLAGS
               S06:000055BC:  4E B9 00 00 54 1C
F00:6556                       lsl.w #5,d0   
               S06:000055C2:  EB 48
F00:6557                       jsr SHIFTS2_FLAGS
               S06:000055C4:  4E B9 00 00 54 1C
F00:6558                       cmpi.l #$80010800,d0     
               S06:000055CA:  0C 80 80 01 08 00
F00:6559                       bne LSHIFT_FAIL;                 
               S06:000055D0:  66 00 01 4C
F00:6560                       cmpi.l #$00000025,d5     
               S06:000055D4:  0C 85 00 00 00 25
F00:6561                       bne LSHIFT_FAIL;                 
               S06:000055DA:  66 00 01 42
F00:6562                         
F00:6563              ; WORD RIGHT
F00:6564                       lsr.w #5,d0       
               S06:000055DE:  EA 48
F00:6565                       jsr SHIFTS2_FLAGS
               S06:000055E0:  4E B9 00 00 54 1C
F00:6566                       lsr.w #1,d0      
               S06:000055E6:  E2 48
F00:6567                       jsr SHIFTS2_FLAGS
               S06:000055E8:  4E B9 00 00 54 1C
F00:6568                       lsr.w #2,d0   
               S06:000055EE:  E4 48
F00:6569                       jsr SHIFTS2_FLAGS
               S06:000055F0:  4E B9 00 00 54 1C
F00:6570                       lsr.w #4,d0   
               S06:000055F6:  E8 48
F00:6571                       jsr SHIFTS2_FLAGS
               S06:000055F8:  4E B9 00 00 54 1C
F00:6572                       cmpi.l #$80010000,d0     
               S06:000055FE:  0C 80 80 01 00 00
F00:6573                       bne LSHIFT_FAIL;                 
               S06:00005604:  66 00 01 18
F00:6574                       cmpi.l #$0000002A,d5     
               S06:00005608:  0C 85 00 00 00 2A
F00:6575                       bne LSHIFT_FAIL;                 
               S06:0000560E:  66 00 01 0E
F00:6576                      
F00:6577              ; LONG LEFT
F00:6578                       move.l #$80018FF1,d0   
               S06:00005612:  20 3C 80 01 8F F1
F00:6579                       lsl.l #1,d0       
               S06:00005618:  E3 88
F00:6580                       jsr SHIFTS2_FLAGS
               S06:0000561A:  4E B9 00 00 54 1C
F00:6581                       lsl.l #2,d0      
               S06:00005620:  E5 88
F00:6582                       jsr SHIFTS2_FLAGS
               S06:00005622:  4E B9 00 00 54 1C
F00:6583                       lsl.l #7,d0   
               S06:00005628:  EF 88
F00:6584                       jsr SHIFTS2_FLAGS
               S06:0000562A:  4E B9 00 00 54 1C
F00:6585                       lsl.l #4,d0   
               S06:00005630:  E9 88
F00:6586                       jsr SHIFTS2_FLAGS
               S06:00005632:  4E B9 00 00 54 1C
F00:6587                       cmpi.l #$63FC4000,d0     
               S06:00005638:  0C 80 63 FC 40 00
F00:6588                       bne LSHIFT_FAIL;                 
               S06:0000563E:  66 00 00 DE
F00:6589                       cmpi.l #$0000002B,d5     
               S06:00005642:  0C 85 00 00 00 2B
F00:6590                       bne LSHIFT_FAIL;                 
               S06:00005648:  66 00 00 D4
F00:6591                                       
F00:6592              ; LONG RIGHT
F00:6593                       move.l #$80018FF1,d0   
               S06:0000564C:  20 3C 80 01 8F F1
F00:6594                       lsr.l #1,d0       
               S06:00005652:  E2 88
F00:6595                       jsr SHIFTS2_FLAGS
               S06:00005654:  4E B9 00 00 54 1C
F00:6596                       lsr.l #5,d0      
               S06:0000565A:  EA 88
F00:6597                       jsr SHIFTS2_FLAGS
               S06:0000565C:  4E B9 00 00 54 1C
F00:6598                       lsr.l #7,d0   
               S06:00005662:  EE 88
F00:6599                       jsr SHIFTS2_FLAGS
               S06:00005664:  4E B9 00 00 54 1C
F00:6600                       lsr.l #8,d0   
               S06:0000566A:  E0 88
F00:6601                       jsr SHIFTS2_FLAGS
               S06:0000566C:  4E B9 00 00 54 1C
F00:6602                       cmpi.l #$00000400,d0     
               S06:00005672:  0C 80 00 00 04 00
F00:6603                       bne LSHIFT_FAIL;                 
               S06:00005678:  66 00 00 A4
F00:6604                       cmpi.l #$0000002D,d5     
               S06:0000567C:  0C 85 00 00 00 2D
F00:6605                       bne LSHIFT_FAIL;                 
               S06:00005682:  66 00 00 9A
F00:6606          
F00:6607                   
F00:6608           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6609           
F00:6610                       move.l #$00000000,d5   
               S06:00005686:  2A 3C 00 00 00 00
F00:6611                       move.l #$00000100,a0 
               S06:0000568C:  20 7C 00 00 01 00
F00:6612                       move.w #$8FF1,(a0)
               S06:00005692:  30 BC 8F F1
F00:6613                       
F00:6614              ; WORD LEFT
F00:6615                       lsl  (a0)       
               S06:00005696:  E3 D0
F00:6616                       jsr SHIFTS2_FLAGS
               S06:00005698:  4E B9 00 00 54 1C
F00:6617                       lsl  (a0)       
               S06:0000569E:  E3 D0
F00:6618                       jsr SHIFTS2_FLAGS
               S06:000056A0:  4E B9 00 00 54 1C
F00:6619                       lsl  (a0)       
               S06:000056A6:  E3 D0
F00:6620                       jsr SHIFTS2_FLAGS
               S06:000056A8:  4E B9 00 00 54 1C
F00:6621                       lsl  (a0)       
               S06:000056AE:  E3 D0
F00:6622                       jsr SHIFTS2_FLAGS
               S06:000056B0:  4E B9 00 00 54 1C
F00:6623                       move.w (a0),d0
               S06:000056B6:  30 10
F00:6624                       cmpi.l #$0000FF10,d0     
               S06:000056B8:  0C 80 00 00 FF 10
F00:6625                       bne LSHIFT_FAIL;                 
               S06:000056BE:  66 00 00 5E
F00:6626                       cmpi.l #$00000009,d5     
               S06:000056C2:  0C 85 00 00 00 09
F00:6627                       bne LSHIFT_FAIL;                 
               S06:000056C8:  66 00 00 54
F00:6628                         
F00:6629              ; WORD RIGHT
F00:6630                       lsr (a0)       
               S06:000056CC:  E2 D0
F00:6631                       jsr SHIFTS2_FLAGS
               S06:000056CE:  4E B9 00 00 54 1C
F00:6632                       lsr (a0)       
               S06:000056D4:  E2 D0
F00:6633                       jsr SHIFTS2_FLAGS
               S06:000056D6:  4E B9 00 00 54 1C
F00:6634                       lsr (a0)       
               S06:000056DC:  E2 D0
F00:6635                       jsr SHIFTS2_FLAGS                
               S06:000056DE:  4E B9 00 00 54 1C
F00:6636                       lsr (a0)       
               S06:000056E4:  E2 D0
F00:6637                       jsr SHIFTS2_FLAGS               
               S06:000056E6:  4E B9 00 00 54 1C
F00:6638                       lsr (a0)       
               S06:000056EC:  E2 D0
F00:6639                       jsr SHIFTS2_FLAGS
               S06:000056EE:  4E B9 00 00 54 1C
F00:6640                       lsr (a0)       
               S06:000056F4:  E2 D0
F00:6641                       jsr SHIFTS2_FLAGS
               S06:000056F6:  4E B9 00 00 54 1C
F00:6642                       move.w (a0),d0
               S06:000056FC:  30 10
F00:6643                       cmpi.l #$000003FC,d0     
               S06:000056FE:  0C 80 00 00 03 FC
F00:6644                       bne LSHIFT_FAIL;                 
               S06:00005704:  66 00 00 18
F00:6645                       cmpi.l #$0000000A,d5     
               S06:00005708:  0C 85 00 00 00 0A
F00:6646                       bne LSHIFT_FAIL;                 
               S06:0000570E:  66 00 00 0E
F00:6647       
F00:6648                       movea #TESTSTATUS,a0
               S06:00005712:  30 7C FF 00
F00:6649                       move.b #$1,$39(a0)
               S06:00005716:  11 7C 00 01 00 39
F00:6650                       rts      
               S06:0000571C:  4E 75
F00:6651       
F00:6652       LSHIFT_FAIL:
F00:6653           movea #TESTSTATUS,a0
               S06:0000571E:  30 7C FF 00
F00:6654           move.b #$2,$39(a0)
               S06:00005722:  11 7C 00 02 00 39
F00:6655           rts
               S06:00005728:  4E 75
F00:6656       
F00:6657       ;-----------------------------------------------------------
F00:6658       ;-----------------------------------------------------------
F00:6659       ; OPCODE : ABCD
F00:6660       ;-----------------------------------------------------------
F00:6661       ;-----------------------------------------------------------
F00:6662       op_ABCD: 
F00:6663           
F00:6664           ; Test with X Flag CLEARED
F00:6665                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000572A:  20 7C 00 00 01 10
F00:6666                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00005730:  22 7C 00 00 01 20
F00:6667                       move.l #$00000000,d0 ; BCD byte-X
               S06:00005736:  20 3C 00 00 00 00
F00:6668                       move.l #$00000000,d1 ; BCD byte-Y
               S06:0000573C:  22 3C 00 00 00 00
F00:6669                       move.l #$00000000,d2
               S06:00005742:  24 3C 00 00 00 00
F00:6670                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00005748:  26 3C 00 00 00 00
F00:6671                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:0000574E:  28 3C 00 00 00 00
F00:6672                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00005754:  2A 3C 00 00 00 00
F00:6673                       move.l #$00000099,d6 ; Inner loop counter
               S06:0000575A:  2C 3C 00 00 00 99
F00:6674                       move.l #$00000099,d7 ; Outer loop counter
               S06:00005760:  2E 3C 00 00 00 99
F00:6675       
F00:6676       ABCD_OUTER1:    move.l d7,d0
               S06:00005766:  20 07
F00:6677       ABCD_INNER1:    move.l d6,d1
               S06:00005768:  22 06
F00:6678                       andi.b #$EF,CCR     ; Clear X Flag
               S06:0000576A:  02 3C 00 EF
F00:6679                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000576E:  20 7C 00 00 01 10
F00:6680                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00005774:  22 7C 00 00 01 20
F00:6681                       move.b d0,-1(a0)
               S06:0000577A:  11 40 FF FF
F00:6682                       move.b d1,-1(a1)
               S06:0000577E:  13 41 FF FF
F00:6683                       
F00:6684                       abcd d0,d1
               S06:00005782:  C3 00
F00:6685                       bcc ABCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:00005784:  64 00 00 08
F00:6686                       add.l #1,d4
               S06:00005788:  D8 BC 00 00 00 01
F00:6687       ABCD_NO_C1:     add.l d1,d5
               S06:0000578E:  DA 81
F00:6688                       
F00:6689                       abcd -(a0),-(a1)
               S06:00005790:  C3 08
F00:6690                       bcc ABCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:00005792:  64 00 00 08
F00:6691                       add.l #1,d4
               S06:00005796:  D8 BC 00 00 00 01
F00:6692       ABCD_NO_C2:     add.b (a1),d3
               S06:0000579C:  D6 11
F00:6693       
F00:6694       
F00:6695                       dbf d6,ABCD_INNER1
               S06:0000579E:  51 CE FF C8
F00:6696                       move.l #$00000099,d6
               S06:000057A2:  2C 3C 00 00 00 99
F00:6697                       dbf d7,ABCD_OUTER1
               S06:000057A8:  51 CF FF BC
F00:6698                       cmpi.l #$00005AFC,d4  ; Check the cumulative results
               S06:000057AC:  0C 84 00 00 5A FC
F00:6699                       bne ABCD_FAIL;                 
               S06:000057B2:  66 00 00 E6
F00:6700                       cmpi.l #$001C9A34,d5
               S06:000057B6:  0C 85 00 1C 9A 34
F00:6701                       bne ABCD_FAIL;                
               S06:000057BC:  66 00 00 DC
F00:6702                       cmpi.l #$00000034,d3
               S06:000057C0:  0C 83 00 00 00 34
F00:6703                       bne ABCD_FAIL;                
               S06:000057C6:  66 00 00 D2
F00:6704       
F00:6705           ; Test with X Flag SET
F00:6706                       move.l #$00000110,a0 ; Address pointer-X
               S06:000057CA:  20 7C 00 00 01 10
F00:6707                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000057D0:  22 7C 00 00 01 20
F00:6708                       move.l #$00000000,d0 ; BCD byte-X
               S06:000057D6:  20 3C 00 00 00 00
F00:6709                       move.l #$00000000,d1 ; BCD byte-Y
               S06:000057DC:  22 3C 00 00 00 00
F00:6710                       move.l #$00000000,d2
               S06:000057E2:  24 3C 00 00 00 00
F00:6711                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:000057E8:  26 3C 00 00 00 00
F00:6712                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:000057EE:  28 3C 00 00 00 00
F00:6713                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:000057F4:  2A 3C 00 00 00 00
F00:6714                       move.l #$00000099,d6 ; Inner loop counter
               S06:000057FA:  2C 3C 00 00 00 99
F00:6715                       move.l #$00000099,d7 ; Outer loop counter
               S06:00005800:  2E 3C 00 00 00 99
F00:6716       
F00:6717       ABCD_OUTER2:    move.l d7,d0
               S06:00005806:  20 07
F00:6718       ABCD_INNER2:    move.l d6,d1
               S06:00005808:  22 06
F00:6719                       ori.b #$10,CCR      ; Set X Flag
               S06:0000580A:  00 3C 00 10
F00:6720                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000580E:  20 7C 00 00 01 10
F00:6721                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00005814:  22 7C 00 00 01 20
F00:6722                       move.b d0,-1(a0)
               S06:0000581A:  11 40 FF FF
F00:6723                       move.b d1,-1(a1)
               S06:0000581E:  13 41 FF FF
F00:6724                       
F00:6725                       abcd d0,d1
               S06:00005822:  C3 00
F00:6726                       bcc ABCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:00005824:  64 00 00 08
F00:6727                       add.l #1,d4
               S06:00005828:  D8 BC 00 00 00 01
F00:6728       ABCD_NO_C3:     add.l d1,d5
               S06:0000582E:  DA 81
F00:6729                       
F00:6730                       abcd -(a0),-(a1)
               S06:00005830:  C3 08
F00:6731                       bcc ABCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:00005832:  64 00 00 08
F00:6732                       add.l #1,d4
               S06:00005836:  D8 BC 00 00 00 01
F00:6733       ABCD_NO_C4:     add.b (a1),d3
               S06:0000583C:  D6 11
F00:6734       
F00:6735       
F00:6736                       dbf d6,ABCD_INNER2
               S06:0000583E:  51 CE FF C8
F00:6737                       move.l #$00000099,d6
               S06:00005842:  2C 3C 00 00 00 99
F00:6738                       dbf d7,ABCD_OUTER2
               S06:00005848:  51 CF FF BC
F00:6739                       cmpi.l #$00005B60,d4  ; Check the cumulative results
               S06:0000584C:  0C 84 00 00 5B 60
F00:6740                       bne ABCD_FAIL;                 
               S06:00005852:  66 00 00 46
F00:6741                       cmpi.l #$001CCFC8,d5
               S06:00005856:  0C 85 00 1C CF C8
F00:6742                       bne ABCD_FAIL;                
               S06:0000585C:  66 00 00 3C
F00:6743                       cmpi.l #$00000034,d3
               S06:00005860:  0C 83 00 00 00 34
F00:6744                       bne ABCD_FAIL;                
               S06:00005866:  66 00 00 32
F00:6745       
F00:6746                   ; Quick check of Z Flag
F00:6747                       move.b #$00,d0 
               S06:0000586A:  10 3C 00 00
F00:6748                       move.b #$00,d1 
               S06:0000586E:  12 3C 00 00
F00:6749                       move #$00,CCR              ; Set Z flag to 0
               S06:00005872:  44 FC 00 00
F00:6750                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00005876:  C1 01
F00:6751                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:00005878:  67 00 00 20
F00:6752                       
F00:6753                       move.b #$01,d0 
               S06:0000587C:  10 3C 00 01
F00:6754                       move.b #$00,d1 
               S06:00005880:  12 3C 00 00
F00:6755                       move #$04,CCR              ; Set Z flag to 0
               S06:00005884:  44 FC 00 04
F00:6756                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00005888:  C1 01
F00:6757                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000588A:  67 00 00 0E
F00:6758                       
F00:6759                       movea #TESTSTATUS,a0
               S06:0000588E:  30 7C FF 00
F00:6760                       move.b #$1,$3a(a0)
               S06:00005892:  11 7C 00 01 00 3A
F00:6761                       rts   
               S06:00005898:  4E 75
F00:6762       
F00:6763       ABCD_FAIL:
F00:6764           movea #TESTSTATUS,a0
               S06:0000589A:  30 7C FF 00
F00:6765           move.b #$2,$3a(a0)
               S06:0000589E:  11 7C 00 02 00 3A
F00:6766           rts
               S06:000058A4:  4E 75
F00:6767       
F00:6768       ;-----------------------------------------------------------
F00:6769       ;-----------------------------------------------------------
F00:6770       ; OPCODE : SBCD
F00:6771       ;-----------------------------------------------------------
F00:6772       ;-----------------------------------------------------------
F00:6773       op_SBCD: 
F00:6774       
F00:6775           ; Test with X Flag CLEARED
F00:6776                       move.l #$00000110,a0 ; Address pointer-X
               S06:000058A6:  20 7C 00 00 01 10
F00:6777                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000058AC:  22 7C 00 00 01 20
F00:6778                       move.l #$00000000,d0 ; BCD byte-X
               S06:000058B2:  20 3C 00 00 00 00
F00:6779                       move.l #$00000000,d1 ; BCD byte-Y
               S06:000058B8:  22 3C 00 00 00 00
F00:6780                       move.l #$00000000,d2
               S06:000058BE:  24 3C 00 00 00 00
F00:6781                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:000058C4:  26 3C 00 00 00 00
F00:6782                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:000058CA:  28 3C 00 00 00 00
F00:6783                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:000058D0:  2A 3C 00 00 00 00
F00:6784                       move.l #$00000099,d6 ; Inner loop counter
               S06:000058D6:  2C 3C 00 00 00 99
F00:6785                       move.l #$00000099,d7 ; Outer loop counter
               S06:000058DC:  2E 3C 00 00 00 99
F00:6786       
F00:6787       SBCD_OUTER1:    move.l d7,d0
               S06:000058E2:  20 07
F00:6788       SBCD_INNER1:    move.l d6,d1
               S06:000058E4:  22 06
F00:6789                       andi.b #$EF,CCR     ; Clear X Flag
               S06:000058E6:  02 3C 00 EF
F00:6790                       move.l #$00000110,a0 ; Address pointer-X
               S06:000058EA:  20 7C 00 00 01 10
F00:6791                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000058F0:  22 7C 00 00 01 20
F00:6792                       move.b d0,-1(a0)
               S06:000058F6:  11 40 FF FF
F00:6793                       move.b d1,-1(a1)
               S06:000058FA:  13 41 FF FF
F00:6794                       
F00:6795                       sbcd d0,d1
               S06:000058FE:  83 00
F00:6796                       bcc SBCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:00005900:  64 00 00 08
F00:6797                       add.l #1,d4
               S06:00005904:  D8 BC 00 00 00 01
F00:6798       SBCD_NO_C1:     add.l d1,d5
               S06:0000590A:  DA 81
F00:6799                       
F00:6800                       sbcd -(a0),-(a1)
               S06:0000590C:  83 08
F00:6801                       bcc SBCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:0000590E:  64 00 00 08
F00:6802                       add.l #1,d4
               S06:00005912:  D8 BC 00 00 00 01
F00:6803       SBCD_NO_C2:     add.b (a1),d3
               S06:00005918:  D6 11
F00:6804       
F00:6805       
F00:6806                       dbf d6,SBCD_INNER1
               S06:0000591A:  51 CE FF C8
F00:6807                       move.l #$00000099,d6
               S06:0000591E:  2C 3C 00 00 00 99
F00:6808                       dbf d7,SBCD_OUTER1
               S06:00005924:  51 CF FF BC
F00:6809                       cmpi.l #$00005C0A,d4  ; Check the cumulative results
               S06:00005928:  0C 84 00 00 5C 0A
F00:6810                       bne SBCD_FAIL;                 
               S06:0000592E:  66 00 00 E6
F00:6811                       cmpi.l #$001C459E,d5
               S06:00005932:  0C 85 00 1C 45 9E
F00:6812                       bne SBCD_FAIL;                
               S06:00005938:  66 00 00 DC
F00:6813                       cmpi.l #$0000009E,d3
               S06:0000593C:  0C 83 00 00 00 9E
F00:6814                       bne SBCD_FAIL;                
               S06:00005942:  66 00 00 D2
F00:6815       
F00:6816           ; Test with X Flag SET
F00:6817                       move.l #$00000110,a0 ; Address pointer-X
               S06:00005946:  20 7C 00 00 01 10
F00:6818                       move.l #$00000120,a1 ; Address pointer-Y
               S06:0000594C:  22 7C 00 00 01 20
F00:6819                       move.l #$00000000,d0 ; BCD byte-X
               S06:00005952:  20 3C 00 00 00 00
F00:6820                       move.l #$00000000,d1 ; BCD byte-Y
               S06:00005958:  22 3C 00 00 00 00
F00:6821                       move.l #$00000000,d2
               S06:0000595E:  24 3C 00 00 00 00
F00:6822                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00005964:  26 3C 00 00 00 00
F00:6823                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:0000596A:  28 3C 00 00 00 00
F00:6824                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00005970:  2A 3C 00 00 00 00
F00:6825                       move.l #$00000099,d6 ; Inner loop counter
               S06:00005976:  2C 3C 00 00 00 99
F00:6826                       move.l #$00000099,d7 ; Outer loop counter
               S06:0000597C:  2E 3C 00 00 00 99
F00:6827       
F00:6828       SBCD_OUTER2:    move.l d7,d0
               S06:00005982:  20 07
F00:6829       SBCD_INNER2:    move.l d6,d1
               S06:00005984:  22 06
F00:6830                       ori.b #$10,CCR      ; Set X Flag
               S06:00005986:  00 3C 00 10
F00:6831                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000598A:  20 7C 00 00 01 10
F00:6832                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00005990:  22 7C 00 00 01 20
F00:6833                       move.b d0,-1(a0)
               S06:00005996:  11 40 FF FF
F00:6834                       move.b d1,-1(a1)
               S06:0000599A:  13 41 FF FF
F00:6835                       
F00:6836                       sbcd d0,d1
               S06:0000599E:  83 00
F00:6837                       bcc SBCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:000059A0:  64 00 00 08
F00:6838                       add.l #1,d4
               S06:000059A4:  D8 BC 00 00 00 01
F00:6839       SBCD_NO_C3:     add.l d1,d5
               S06:000059AA:  DA 81
F00:6840                       
F00:6841                       sbcd -(a0),-(a1)
               S06:000059AC:  83 08
F00:6842                       bcc SBCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:000059AE:  64 00 00 08
F00:6843                       add.l #1,d4
               S06:000059B2:  D8 BC 00 00 00 01
F00:6844       SBCD_NO_C4:     add.b (a1),d3
               S06:000059B8:  D6 11
F00:6845       
F00:6846                       dbf d6,SBCD_INNER2
               S06:000059BA:  51 CE FF C8
F00:6847                       move.l #$00000099,d6
               S06:000059BE:  2C 3C 00 00 00 99
F00:6848                       dbf d7,SBCD_OUTER2
               S06:000059C4:  51 CF FF BC
F00:6849                       cmpi.l #$00005CA4,d4  ; Check the cumulative results
               S06:000059C8:  0C 84 00 00 5C A4
F00:6850                       bne SBCD_FAIL;                 
               S06:000059CE:  66 00 00 46
F00:6851                       cmpi.l #$001C5C66,d5
               S06:000059D2:  0C 85 00 1C 5C 66
F00:6852                       bne SBCD_FAIL;                
               S06:000059D8:  66 00 00 3C
F00:6853                       cmpi.l #$0000009E,d3
               S06:000059DC:  0C 83 00 00 00 9E
F00:6854                       bne SBCD_FAIL;                
               S06:000059E2:  66 00 00 32
F00:6855       
F00:6856       
F00:6857                   ; Quick check of Z Flag
F00:6858                       move.b #$00,d0 
               S06:000059E6:  10 3C 00 00
F00:6859                       move.b #$00,d1 
               S06:000059EA:  12 3C 00 00
F00:6860                       move #$00,CCR              ; Set Z flag to 0
               S06:000059EE:  44 FC 00 00
F00:6861                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:000059F2:  81 01
F00:6862                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:000059F4:  67 00 00 20
F00:6863       
F00:6864                       move.b #$01,d0 
               S06:000059F8:  10 3C 00 01
F00:6865                       move.b #$00,d1 
               S06:000059FC:  12 3C 00 00
F00:6866                       move #$04,CCR              ; Set Z flag to 0
               S06:00005A00:  44 FC 00 04
F00:6867                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00005A04:  81 01
F00:6868                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:00005A06:  67 00 00 0E
F00:6869       
F00:6870                       movea #TESTSTATUS,a0
               S06:00005A0A:  30 7C FF 00
F00:6871                       move.b #$1,$3b(a0)
               S06:00005A0E:  11 7C 00 01 00 3B
F00:6872                       rts
               S06:00005A14:  4E 75
F00:6873       
F00:6874       SBCD_FAIL:
F00:6875           movea #TESTSTATUS,a0
               S06:00005A16:  30 7C FF 00
F00:6876           move.b #$2,$3b(a0)
               S06:00005A1A:  11 7C 00 02 00 3B
F00:6877           rts  
               S06:00005A20:  4E 75
F00:6878           
F00:6879       ;-----------------------------------------------------------
F00:6880       ;-----------------------------------------------------------
F00:6881       ; OPCODE : NBCD
F00:6882       ;-----------------------------------------------------------
F00:6883       ;-----------------------------------------------------------
F00:6884       op_NBCD: 
F00:6885           
F00:6886              ; NBCD to a  Register
F00:6887              
F00:6888                       move.l #$00000000,d0 ; BCD byte
               S06:00005A22:  20 3C 00 00 00 00
F00:6889                       move.l #$00000000,d1 
               S06:00005A28:  22 3C 00 00 00 00
F00:6890                       move.l #$00000000,d2
               S06:00005A2E:  24 3C 00 00 00 00
F00:6891                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:00005A34:  26 3C 00 00 00 00
F00:6892                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00005A3A:  28 3C 00 00 00 00
F00:6893                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:00005A40:  2A 3C 00 00 00 00
F00:6894                       move.l #$00000099,d6
               S06:00005A46:  2C 3C 00 00 00 99
F00:6895                       move.l #$00000099,d7 ; Loop counter
               S06:00005A4C:  2E 3C 00 00 00 99
F00:6896       
F00:6897       NBCD_LOOP:      move.l d7,d0
               S06:00005A52:  20 07
F00:6898                       move #$04,CCR        ; Set Z flag to 0
               S06:00005A54:  44 FC 00 04
F00:6899       
F00:6900                       nbcd d0
               S06:00005A58:  48 00
F00:6901                       
F00:6902                       bcc NBCD_NO_C         ; Check C Flag 
               S06:00005A5A:  64 00 00 08
F00:6903                       add.l #1,d4
               S06:00005A5E:  D8 BC 00 00 00 01
F00:6904       NBCD_NO_C:      bne NBCD_NO_Z         ; Check Z Flag 
               S06:00005A64:  66 00 00 08
F00:6905                       add.l #1,d3
               S06:00005A68:  D6 BC 00 00 00 01
F00:6906       NBCD_NO_Z:      add.l d0,d5         ; Add results into d5
               S06:00005A6E:  DA 80
F00:6907       
F00:6908                       dbf d7,NBCD_LOOP
               S06:00005A70:  51 CF FF E0
F00:6909                       
F00:6910                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:00005A74:  0C 83 00 00 00 01
F00:6911                       bne NBCD_FAIL;                 
               S06:00005A7A:  66 00 00 A0
F00:6912                       cmpi.l #$00000099,d4
               S06:00005A7E:  0C 84 00 00 00 99
F00:6913                       bne NBCD_FAIL;                
               S06:00005A84:  66 00 00 96
F00:6914                       cmpi.l #$00002E3B,d5
               S06:00005A88:  0C 85 00 00 2E 3B
F00:6915                       bne NBCD_FAIL;     
               S06:00005A8E:  66 00 00 8C
F00:6916                  
F00:6917       
F00:6918              ; NBCD to a memory location
F00:6919              
F00:6920                       move.l #$00000000,d0 ; BCD byte
               S06:00005A92:  20 3C 00 00 00 00
F00:6921                       move.l #$00000000,d1 
               S06:00005A98:  22 3C 00 00 00 00
F00:6922                       move.l #$00000000,d2
               S06:00005A9E:  24 3C 00 00 00 00
F00:6923                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:00005AA4:  26 3C 00 00 00 00
F00:6924                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00005AAA:  28 3C 00 00 00 00
F00:6925                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:00005AB0:  2A 3C 00 00 00 00
F00:6926                       move.l #$00000099,d6
               S06:00005AB6:  2C 3C 00 00 00 99
F00:6927                       move.l #$00000099,d7 ; Loop counter
               S06:00005ABC:  2E 3C 00 00 00 99
F00:6928       
F00:6929       NBCD_LOOP1:     move.b d7,$00000100
               S06:00005AC2:  13 C7 00 00 01 00
F00:6930                       move #$04,CCR        ; Set Z flag to 0
               S06:00005AC8:  44 FC 00 04
F00:6931       
F00:6932                       nbcd $00000100
               S06:00005ACC:  48 39 00 00 01 00
F00:6933                       move.b $00000100,d0
               S06:00005AD2:  10 39 00 00 01 00
F00:6934                       
F00:6935                       bcc NBCD_NO_C1        ; Check C Flag 
               S06:00005AD8:  64 00 00 08
F00:6936                       add.l #1,d4
               S06:00005ADC:  D8 BC 00 00 00 01
F00:6937       NBCD_NO_C1:     bne NBCD_NO_Z1        ; Check Z Flag 
               S06:00005AE2:  66 00 00 08
F00:6938                       add.l #1,d3
               S06:00005AE6:  D6 BC 00 00 00 01
F00:6939       NBCD_NO_Z1:     add.l d0,d5         ; Add results into d5
               S06:00005AEC:  DA 80
F00:6940       
F00:6941                       dbf d7,NBCD_LOOP1
               S06:00005AEE:  51 CF FF D2
F00:6942                       
F00:6943                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:00005AF2:  0C 83 00 00 00 01
F00:6944                       bne NBCD_FAIL;                 
               S06:00005AF8:  66 00 00 22
F00:6945                       cmpi.l #$00000000,d4
               S06:00005AFC:  0C 84 00 00 00 00
F00:6946                       bne NBCD_FAIL;                
               S06:00005B02:  66 00 00 18
F00:6947                       cmpi.l #$00002E3B,d5
               S06:00005B06:  0C 85 00 00 2E 3B
F00:6948                       bne NBCD_FAIL;     
               S06:00005B0C:  66 00 00 0E
F00:6949                  
F00:6950                       movea #TESTSTATUS,a0
               S06:00005B10:  30 7C FF 00
F00:6951                       move.b #$1,$3c(a0)
               S06:00005B14:  11 7C 00 01 00 3C
F00:6952                       rts   
               S06:00005B1A:  4E 75
F00:6953       
F00:6954       NBCD_FAIL:
F00:6955           movea #TESTSTATUS,a0
               S06:00005B1C:  30 7C FF 00
F00:6956           move.b #$2,$3c(a0)
               S06:00005B20:  11 7C 00 02 00 3C
F00:6957           rts
               S06:00005B26:  4E 75
F00:6958       


Sections:
S01  seg0
S02  seg60
S03  segf000
S04  segf010
S05  segf020
S06  seg400


Sources:
F00  opcode_tests.asm


Symbols:
NBCD_NO_Z1 EXPR(23276=0x5aec) ABS 
NBCD_NO_C1 EXPR(23266=0x5ae2) ABS 
NBCD_LOOP1 EXPR(23234=0x5ac2) ABS 
NBCD_FAIL EXPR(23324=0x5b1c) ABS 
NBCD_NO_Z EXPR(23150=0x5a6e) ABS 
NBCD_NO_C EXPR(23140=0x5a64) ABS 
NBCD_LOOP EXPR(23122=0x5a52) ABS 
SBCD_NO_C4 EXPR(22968=0x59b8) ABS 
SBCD_NO_C3 EXPR(22954=0x59aa) ABS 
SBCD_INNER2 EXPR(22916=0x5984) ABS 
SBCD_OUTER2 EXPR(22914=0x5982) ABS 
SBCD_FAIL EXPR(23062=0x5a16) ABS 
SBCD_NO_C2 EXPR(22808=0x5918) ABS 
SBCD_NO_C1 EXPR(22794=0x590a) ABS 
SBCD_INNER1 EXPR(22756=0x58e4) ABS 
SBCD_OUTER1 EXPR(22754=0x58e2) ABS 
ABCD_NO_C4 EXPR(22588=0x583c) ABS 
ABCD_NO_C3 EXPR(22574=0x582e) ABS 
ABCD_INNER2 EXPR(22536=0x5808) ABS 
ABCD_OUTER2 EXPR(22534=0x5806) ABS 
ABCD_FAIL EXPR(22682=0x589a) ABS 
ABCD_NO_C2 EXPR(22428=0x579c) ABS 
ABCD_NO_C1 EXPR(22414=0x578e) ABS 
ABCD_INNER1 EXPR(22376=0x5768) ABS 
ABCD_OUTER1 EXPR(22374=0x5766) ABS 
SHIFTS2_LOOP6 EXPR(21782=0x5516) ABS 
SHIFTS2_LOOP5 EXPR(21738=0x54ea) ABS 
SHIFTS2_LOOP4 EXPR(21694=0x54be) ABS 
SHIFTS2_LOOP3 EXPR(21650=0x5492) ABS 
SHIFTS2_LOOP2 EXPR(21606=0x5466) ABS 
LSHIFT_FAIL EXPR(22302=0x571e) ABS 
SHIFTS2_LOOP1 EXPR(21562=0x543a) ABS 
SHIFTS2_FLAGS EXPR(21532=0x541c) ABS 
SHIFTS_LOOP6 EXPR(21000=0x5208) ABS 
SHIFTS_LOOP5 EXPR(20956=0x51dc) ABS 
SHIFTS_LOOP4 EXPR(20912=0x51b0) ABS 
SHIFTS_LOOP3 EXPR(20868=0x5184) ABS 
SHIFTS_LOOP2 EXPR(20824=0x5158) ABS 
SHIFT_FAIL EXPR(21520=0x5410) ABS 
SHIFTS_LOOP1 EXPR(20780=0x512c) ABS 
SHIFTS_FLAGS EXPR(20750=0x510e) ABS 
ROXx_LOOP6 EXPR(20230=0x4f06) ABS 
ROXx_LOOP5 EXPR(20186=0x4eda) ABS 
ROXx_LOOP4 EXPR(20142=0x4eae) ABS 
ROXx_LOOP3 EXPR(20098=0x4e82) ABS 
ROXx_LOOP2 EXPR(20054=0x4e56) ABS 
ROXX_FAIL EXPR(20738=0x5102) ABS 
ROXx_LOOP1 EXPR(20010=0x4e2a) ABS 
ROXx_FLAGS EXPR(19980=0x4e0c) ABS 
ROx_LOOP6 EXPR(19460=0x4c04) ABS 
ROx_LOOP5 EXPR(19416=0x4bd8) ABS 
ROx_LOOP4 EXPR(19372=0x4bac) ABS 
ROx_LOOP3 EXPR(19328=0x4b80) ABS 
ROx_LOOP2 EXPR(19284=0x4b54) ABS 
ROX_FAIL EXPR(19968=0x4e00) ABS 
ROx_LOOP1 EXPR(19240=0x4b28) ABS 
ROx_FLAGS EXPR(19210=0x4b0a) ABS 
EXG_FAIL EXPR(19198=0x4afe) ABS 
MULS_FAIL EXPR(19066=0x4a7a) ABS 
MULS_OUTER1 EXPR(19000=0x4a38) ABS 
MULU_FAIL EXPR(18940=0x49fc) ABS 
MULU_OUTER1 EXPR(18874=0x49ba) ABS 
SUBX_LOOP5 EXPR(18764=0x494c) ABS 
SUBX_LOOP4 EXPR(18728=0x4928) ABS 
SUBX_LOOP3 EXPR(18692=0x4904) ABS 
SUBX_FAIL EXPR(18814=0x497e) ABS 
SUBX_OUTER1 EXPR(18516=0x4854) ABS 
ADDX_LOOP5 EXPR(18402=0x47e2) ABS 
ADDX_LOOP4 EXPR(18366=0x47be) ABS 
ADDX_LOOP3 EXPR(18330=0x479a) ABS 
ADDX_FAIL EXPR(18452=0x4814) ABS 
ADDX_OUTER1 EXPR(18154=0x46ea) ABS 
SUBA_FAIL EXPR(18088=0x46a8) ABS 
SUBA_OUTER1 EXPR(18028=0x466c) ABS 
ADDA_FAIL EXPR(17956=0x4624) ABS 
ADDA_OUTER1 EXPR(17896=0x45e8) ABS 
SUB_OUTER2 EXPR(17720=0x4538) ABS 
SUB_FAIL EXPR(17824=0x45a0) ABS 
SUB_OUTER1 EXPR(17574=0x44a6) ABS 
ADD_OUTER2 EXPR(17404=0x43fc) ABS 
ADD_FAIL EXPR(17508=0x4464) ABS 
ADD_OUTER1 EXPR(17258=0x436a) ABS 
CMPM_FAIL EXPR(17192=0x4328) ABS 
CMPM_LOOP3 EXPR(17134=0x42ee) ABS 
CMPM_LOOP2 EXPR(17100=0x42cc) ABS 
CMPM_LOOP1 EXPR(17066=0x42aa) ABS 
CMPA_FAIL EXPR(16958=0x423e) ABS 
CMPA_OUTER1 EXPR(16870=0x41e6) ABS 
CMP_FAIL EXPR(16804=0x41a4) ABS 
CMP_OUTER1 EXPR(16700=0x413c) ABS 
EOR_FAIL EXPR(16634=0x40fa) ABS 
EOR_OUTER2 EXPR(16530=0x4092) ABS 
AND_OUTER2 EXPR(16360=0x3fe8) ABS 
AND_FAIL EXPR(16464=0x4050) ABS 
AND_OUTER1 EXPR(16214=0x3f56) ABS 
OR_OUTER2 EXPR(16044=0x3eac) ABS 
OR_FAIL EXPR(16148=0x3f14) ABS 
OR_OUTER1 EXPR(15898=0x3e1a) ABS 
DIVS_FAIL EXPR(15832=0x3dd8) ABS 
DIVS_OUTER1 EXPR(15760=0x3d90) ABS 
DIVU_FAIL EXPR(15700=0x3d54) ABS 
DIVU_OUTER1 EXPR(15628=0x3d0c) ABS 
MOVEQ_FAIL EXPR(15568=0x3cd0) ABS 
SUBQ_LOOP3 EXPR(15430=0x3c46) ABS 
SUBQ_LOOP2 EXPR(15344=0x3bf0) ABS 
SUBQ_FAIL EXPR(15496=0x3c88) ABS 
SUBQ_LOOP1 EXPR(15252=0x3b94) ABS 
ADDQ_LOOP3 EXPR(15126=0x3b16) ABS 
ADDQ_LOOP2 EXPR(15040=0x3ac0) ABS 
ADDQ_FAIL EXPR(15192=0x3b58) ABS 
ADDQ_LOOP1 EXPR(14948=0x3a64) ABS 
SCC_FAIL EXPR(14888=0x3a28) ABS 
DBCC_LOOP2 EXPR(14790=0x39c6) ABS 
DBCC_FAIL EXPR(14820=0x39e4) ABS 
DBCC_LOOP1 EXPR(14772=0x39b4) ABS 
BCC14 EXPR(14732=0x398c) ABS 
BCC13 EXPR(14720=0x3980) ABS 
BCC12 EXPR(14710=0x3976) ABS 
BCC11 EXPR(14698=0x396a) ABS 
BCC10 EXPR(14688=0x3960) ABS 
BCC9 EXPR(14676=0x3954) ABS 
BCC8 EXPR(14666=0x394a) ABS 
BCC7 EXPR(14654=0x393e) ABS 
BCC6 EXPR(14644=0x3934) ABS 
BCC5 EXPR(14632=0x3928) ABS 
BCC4 EXPR(14622=0x391e) ABS 
BCC3 EXPR(14610=0x3912) ABS 
BCC2 EXPR(14600=0x3908) ABS 
BCC_FAIL EXPR(14744=0x3998) ABS 
BCC1 EXPR(14588=0x38fc) ABS 
RTR_FAIL EXPR(14566=0x38e6) ABS 
RTR_DONE EXPR(14532=0x38c4) ABS 
TRAPV_FAIL EXPR(14506=0x38aa) ABS 
MOVEM_FAIL EXPR(14444=0x386c) ABS 
CLR_FAIL EXPR(13306=0x33fa) ABS 
NEGS_FAIL EXPR(13192=0x3388) ABS 
CHK_FAIL EXPR(11868=0x2e5c) ABS 
MOVE_USP_FAIL EXPR(11784=0x2e08) ABS 
LINK_FAIL EXPR(11740=0x2ddc) ABS 
TST_FAIL EXPR(11686=0x2da6) ABS 
TAS_FAIL EXPR(11568=0x2d30) ABS 
LEA1 EXPR(11460=0x2cc4) ABS 
LEAPEA_FAIL EXPR(11492=0x2ce4) ABS 
SWAP_FAIL EXPR(11266=0x2c02) ABS 
EXT_FAIL EXPR(11216=0x2bd0) ABS 
MOVE4 EXPR(10812=0x2a3c) ABS 
MOVE_FLAGS_FAIL EXPR(11128=0x2b78) ABS 
MOVE3 EXPR(10274=0x2822) ABS 
MOVE1 EXPR(10096=0x2770) ABS 
MOVE2 EXPR(9942=0x26d6) ABS 
MOVE_FAIL EXPR(10372=0x2884) ABS 
SUB_I_FAIL EXPR(9646=0x25ae) ABS 
ADD_I_FAIL EXPR(9074=0x2372) ABS 
CMP_I_FAIL EXPR(8502=0x2136) ABS 
BSR_FAIL EXPR(7758=0x1e4e) ABS 
BSR_FAR2 EXPR(14558=0x38de) ABS 
BSR_CLOSE2 EXPR(7750=0x1e46) ABS 
BSR_CLOSE1 EXPR(7678=0x1dfe) ABS 
BOOL_I_FAIL EXPR(7666=0x1df2) ABS 
MOVEP_FAIL EXPR(7054=0x1b8e) ABS 
BSET_FAIL EXPR(6868=0x1ad4) ABS 
BCLR_FAIL EXPR(5602=0x15e2) ABS 
BCHG_FAIL EXPR(4406=0x1136) ABS 
op_BTST32 EXPR(3106=0xc22) UNUSED ABS 
op_BTST31 EXPR(3102=0xc1e) ABS 
op_BTST30 EXPR(3094=0xc16) ABS 
op_BTST29 EXPR(3086=0xc0e) ABS 
op_BTST28 EXPR(3078=0xc06) ABS 
op_BTST27 EXPR(3070=0xbfe) ABS 
op_BTST26 EXPR(3062=0xbf6) ABS 
op_BTST25 EXPR(3054=0xbee) ABS 
op_BTST24 EXPR(3046=0xbe6) ABS 
op_BTST23 EXPR(3038=0xbde) ABS 
op_BTST22 EXPR(3030=0xbd6) ABS 
op_BTST21 EXPR(3022=0xbce) ABS 
op_BTST20 EXPR(3010=0xbc2) ABS 
op_BTST11 EXPR(2492=0x9bc) ABS 
op_BTST10 EXPR(2482=0x9b2) ABS 
op_BTST9 EXPR(2472=0x9a8) ABS 
op_BTST8 EXPR(2462=0x99e) ABS 
op_BTST7 EXPR(2452=0x994) ABS 
op_BTST6 EXPR(2442=0x98a) ABS 
op_BTST5 EXPR(2432=0x980) ABS 
op_BTST4 EXPR(2422=0x976) ABS 
op_BTST3 EXPR(2412=0x96c) ABS 
op_BTST2 EXPR(2402=0x962) ABS 
op_BTST1 EXPR(2392=0x958) ABS 
op_BTST12 EXPR(2498=0x9c2) ABS 
op_BTST0 EXPR(2378=0x94a) ABS 
BTST_FAIL EXPR(3164=0xc5c) ABS 
ANDI_TO_SR_FAIL EXPR(1846=0x736) ABS 
ANDI_TO_CCR_FAIL EXPR(1770=0x6ea) ABS 
EORI_TO_SR_FAIL EXPR(1694=0x69e) ABS 
EORI_TO_CCR_FAIL EXPR(1618=0x652) ABS 
ORI_TO_SR_FAIL EXPR(1542=0x606) ABS 
ORI_TO_CCR_FAIL EXPR(1470=0x5be) ABS 
BSR_FAR1 EXPR(1402=0x57a) ABS 
op_NBCD EXPR(23074=0x5a22) ABS 
op_SBCD EXPR(22694=0x58a6) ABS 
op_ABCD EXPR(22314=0x572a) ABS 
op_SHIFTS EXPR(20762=0x511a) ABS 
op_SHIFTS2 EXPR(21544=0x5428) ABS 
op_ROXx EXPR(19992=0x4e18) ABS 
op_ROx EXPR(19222=0x4b16) ABS 
op_EXG EXPR(19078=0x4a86) ABS 
op_MULS EXPR(18952=0x4a08) ABS 
op_MULU EXPR(18826=0x498a) ABS 
op_SUBX EXPR(18462=0x481e) ABS 
op_ADDX EXPR(18100=0x46b4) ABS 
op_SUBA EXPR(17968=0x4630) ABS 
op_ADDA EXPR(17836=0x45ac) ABS 
op_SUB EXPR(17520=0x4470) ABS 
op_ADD EXPR(17204=0x4334) ABS 
op_CMPM EXPR(16970=0x424a) ABS 
op_CMPA EXPR(16816=0x41b0) ABS 
op_CMP EXPR(16646=0x4106) ABS 
op_EOR EXPR(16476=0x405c) ABS 
op_AND EXPR(16160=0x3f20) ABS 
op_OR EXPR(15844=0x3de4) ABS 
op_DIVS EXPR(15712=0x3d60) ABS 
op_DIVU EXPR(15580=0x3cdc) ABS 
op_MOVEQ EXPR(15508=0x3c94) ABS 
op_SUBQ EXPR(15204=0x3b64) ABS 
op_ADDQ EXPR(14900=0x3a34) ABS 
op_SCC EXPR(14832=0x39f0) ABS 
op_DBCC EXPR(14756=0x39a4) ABS 
op_BCC EXPR(14578=0x38f2) ABS 
op_RTR EXPR(14518=0x38b6) ABS 
op_TRAPV EXPR(14456=0x3878) ABS 
op_MOVEM EXPR(13318=0x3406) ABS 
op_CLR EXPR(13204=0x3394) ABS 
op_NEGS EXPR(11880=0x2e68) ABS 
op_CHK EXPR(11796=0x2e14) ABS 
op_MOVE_USP EXPR(11752=0x2de8) ABS 
op_LINKS EXPR(11698=0x2db2) ABS 
op_TST EXPR(11580=0x2d3c) ABS 
op_TAS EXPR(11504=0x2cf0) ABS 
op_LEAPEA EXPR(11278=0x2c0e) ABS 
op_SWAP EXPR(11228=0x2bdc) ABS 
op_EXT EXPR(11140=0x2b84) ABS 
op_MOVE_xxx_FLAGS EXPR(10384=0x2890) ABS 
op_MOVE EXPR(9658=0x25ba) ABS 
op_SUB_I EXPR(9086=0x237e) ABS 
op_ADD_I EXPR(8514=0x2142) ABS 
op_CMP_I EXPR(7770=0x1e5a) ABS 
op_BSR EXPR(7686=0x1e06) ABS 
op_BOOL_I EXPR(7066=0x1b9a) ABS 
op_MOVEP EXPR(6880=0x1ae0) ABS 
op_BSET EXPR(5614=0x15ee) ABS 
op_BCLR EXPR(4418=0x1142) ABS 
op_BCHG EXPR(3176=0xc68) ABS 
op_BTST EXPR(1858=0x742) ABS 
op_ANDI_TO_SR EXPR(1782=0x6f6) ABS 
op_ANDI_TO_CCR EXPR(1706=0x6aa) ABS 
op_EORI_TO_SR EXPR(1630=0x65e) ABS 
op_EORI_TO_CCR EXPR(1554=0x612) ABS 
op_ORI_TO_SR EXPR(1482=0x5ca) ABS 
op_ORI_TO_CCR EXPR(1410=0x582) ABS 
EXCEPTION_7 EXPR(61472=0xf020) UNUSED ABS 
EXCEPTION_6 EXPR(61456=0xf010) UNUSED ABS 
ALL_DONE EXPR(61440=0xf000) ABS 
TESTSTATUS EXPR(-256=0xffffff00) EQU 
_MOVEMBYTES EXPR(28=0x1c) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(10837=0x2a55) INTERNAL 
__LINE__ EXPR(6958=0x1b2e) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
