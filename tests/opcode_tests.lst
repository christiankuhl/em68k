F00:0001       ;
F00:0002       ;
F00:0003       ;  File Name   :  MCL68 Opcode Tests
F00:0004       ;  Used on     :  
F00:0005       ;  Author      :  Ted Fried,MicroCore Labs
F00:0006       ;  Creation    :  7/14/2020
F00:0007       ;
F00:0008       ;   Description:
F00:0009       ;   ============
F00:0010       ;   
F00:0011       ;  Program to test all of the Motorola 68000's opcodes.
F00:0012       ;
F00:0013       ;  If failures are detected,the code will immediately loop on itself.
F00:0014       ;  All addressing modes,data sizes,and opcode combinations are tested.
F00:0015       ;
F00:0016       ;  This code was developed using the Easy68K simulator where all tests passed!
F00:0017       ;
F00:0018       ;------------------------------------------------------------------------
F00:0019       ;
F00:0020       ; Modification History:
F00:0021       ; =====================
F00:0022       ;
F00:0023       ; Revision 1 7/14/2020 
F00:0024       ; Initial revision
F00:0025       ;
F00:0026       ;
F00:0027       ;------------------------------------------------------------------------
F00:0028       ;
F00:0029       ; Copyright (c) 2020 Ted Fried
F00:0030       ; 
F00:0031       ; Permission is hereby granted,free of charge,to any person obtaining a copy
F00:0032       ; of this software and associated documentation files (the "Software"),to deal
F00:0033       ; in the Software without restriction,including without limitation the rights
F00:0034       ; to use,copy,modify,merge,publish,distribute,sublicense,and/or sell
F00:0035       ; copies of the Software,and to permit persons to whom the Software is
F00:0036       ; furnished to do so,subject to the following conditions:
F00:0037       ; 
F00:0038       ; The above copyright notice and this permission notice shall be included in all
F00:0039       ; copies or substantial portions of the Software.
F00:0040       ; 
F00:0041       ; THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
F00:0042       ; IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
F00:0043       ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
F00:0044       ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,DAMAGES OR OTHER
F00:0045       ; LIABILITY,WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE,ARISING FROM,
F00:0046       ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
F00:0047       ; SOFTWARE.
F00:0048       ;
F00:0049       
F00:0050       
F00:0051       TESTSTATUS equ $ffffff00
F00:0052       
F00:0053       ; Populate Exception Vectors
F00:0054       ;
F00:0055           org $00000   
F00:0056         dc.l    $000003F0  ; Vector = 0   Reset Supervisor Stack Pointer
               S01:00000000:  00 00 03 F0
F00:0057         dc.l    $00000400  ; Vector = 1   Reset Initial PC
               S01:00000004:  00 00 04 00
F00:0058         dc.l    $22222222  ; Vector = 2   Bus Error
               S01:00000008:  22 22 22 22
F00:0059         dc.l    $30303033  ; Vector = 3   Address Error
               S01:0000000C:  30 30 30 33
F00:0060         dc.l    $44444444  ; Vector = 4   Illegal Instruction
               S01:00000010:  44 44 44 44
F00:0061         dc.l    $55555555  ; Vector = 5   Zero Divide
               S01:00000014:  55 55 55 55
F00:0062         dc.l    $0000F010  ; Vector = 6   CHK Instruction
               S01:00000018:  00 00 F0 10
F00:0063         dc.l    $0000F020  ; Vector = 7   TRAPV Instruction
               S01:0000001C:  00 00 F0 20
F00:0064         dc.l    $88888888  ; Vector = 8   Privilege Violation 
               S01:00000020:  88 88 88 88
F00:0065         dc.l    $99999999  ; Vector = 9   Trace
               S01:00000024:  99 99 99 99
F00:0066         dc.l    $aaaaaaaa  ; Vector = 10  Line A Emulator
               S01:00000028:  AA AA AA AA
F00:0067         dc.l    $bbbbbbbb  ; Vector = 11  Line F Emulator
               S01:0000002C:  BB BB BB BB
F00:0068         
F00:0069           org $00060   
F00:0070         dc.l    $12121212  ; Vector = 24  Spurrious Interrupt
               S02:00000060:  12 12 12 12
F00:0071         dc.l    $11111111  ; Vector = 25  Level 1 Interrupt Autovector
               S02:00000064:  11 11 11 11
F00:0072         dc.l    $22222222  ; Vector = 26  Level 2 Interrupt Autovector
               S02:00000068:  22 22 22 22
F00:0073         dc.l    $33333333  ; Vector = 27  Level 3 Interrupt Autovector
               S02:0000006C:  33 33 33 33
F00:0074         dc.l    $44444444  ; Vector = 28  Level 4 Interrupt Autovector
               S02:00000070:  44 44 44 44
F00:0075         dc.l    $55555555  ; Vector = 29  Level 5 Interrupt Autovector
               S02:00000074:  55 55 55 55
F00:0076         dc.l    $66666666  ; Vector = 30  Level 6 Interrupt Autovector
               S02:00000078:  66 66 66 66
F00:0077         dc.l    $77777777  ; Vector = 31  Level 7 Interrupt Autovector
               S02:0000007C:  77 77 77 77
F00:0078         
F00:0079       
F00:0080       ; Loop here when all tests pass
F00:0081       ;
F00:0082           org $00F000 
F00:0083       
F00:0084       ALL_DONE:
F00:0085           move #$2700,sr
               S03:0000F000:  46 FC 27 00
F00:0086           stop #$2700
               S03:0000F004:  4E 72 27 00
F00:0087       
F00:0088        
F00:0089       ; Exception Vector = 6   CHK Instruction
F00:0090       ;
F00:0091           org $00F010 
F00:0092         
F00:0093       EXCEPTION_6:
F00:0094                   move.l #$EEEE0006,d6      ; Set d6 to the exception vector 
               S04:0000F010:  2C 3C EE EE 00 06
F00:0095                   rte
               S04:0000F016:  4E 73
F00:0096                 
F00:0097       
F00:0098        
F00:0099       ; Exception Vector = 7   TRAPV Instruction
F00:0100       ;
F00:0101           org $00F020 
F00:0102         
F00:0103       EXCEPTION_7:
F00:0104                   move.l #$12345678,d0      ; Set d6 to the exception vector 
               S05:0000F020:  20 3C 12 34 56 78
F00:0105                   rte
               S05:0000F026:  4E 73
F00:0106                 
F00:0107       
F00:0108       
F00:0109       ; Beginning of opcode tests
F00:0110       ;
F00:0111           org $000400 
F00:0112       
F00:0113          move.l #$000003F0,a7      ; populate stack pointer
               S06:00000400:  3E 7C 03 F0
F00:0114       
F00:0115       
F00:0116          jsr op_ORI_TO_CCR
               S06:00000404:  4E B8 04 FA
F00:0117          jsr op_ORI_TO_SR
               S06:00000408:  4E B8 05 2E
F00:0118          jsr op_EORI_TO_CCR
               S06:0000040C:  4E B8 05 66
F00:0119          jsr op_EORI_TO_SR
               S06:00000410:  4E B8 05 A2
F00:0120          jsr op_ANDI_TO_CCR
               S06:00000414:  4E B8 05 DE
F00:0121          jsr op_ANDI_TO_SR
               S06:00000418:  4E B8 06 1A
F00:0122          jsr op_BTST
               S06:0000041C:  4E B8 06 56
F00:0123          jsr op_BCHG
               S06:00000420:  4E B8 0A BE
F00:0124          jsr op_BCLR
               S06:00000424:  4E B8 0E E6
F00:0125          jsr op_BSET
               S06:00000428:  4E B8 12 E8
F00:0126          jsr op_MOVEP
               S06:0000042C:  4E B8 17 42
F00:0127          jsr op_BOOL_I
               S06:00000430:  4E B8 17 EC
F00:0128          jsr op_BSR
               S06:00000434:  4E B8 1A 1C
F00:0129          jsr op_CMP_I
               S06:00000438:  4E B8 1A 68
F00:0130          jsr op_ADD_I
               S06:0000043C:  4E B8 1D 00
F00:0131          jsr op_SUB_I
               S06:00000440:  4E B8 1F 14
F00:0132          jsr op_MOVE
               S06:00000444:  4E B8 21 28
F00:0133          jsr op_MOVE_xxx_FLAGS
               S06:00000448:  4E B8 23 96
F00:0134          jsr op_EXT
               S06:0000044C:  4E B8 26 4E
F00:0135          jsr op_SWAP
               S06:00000450:  4E B8 26 90
F00:0136          jsr op_LEAPEA 
               S06:00000454:  4E B8 26 BC
F00:0137          jsr op_TAS 
               S06:00000458:  4E B8 27 84
F00:0138          jsr op_TST 
               S06:0000045C:  4E B8 27 C2
F00:0139          jsr op_LINKS 
               S06:00000460:  4E B8 28 1E
F00:0140          jsr op_MOVE_USP
               S06:00000464:  4E B8 28 52
F00:0141          jsr op_CHK
               S06:00000468:  4E B8 28 7C
F00:0142          jsr op_NEGS
               S06:0000046C:  4E B8 28 CC
F00:0143          jsr op_CLR
               S06:00000470:  4E B8 2D 86
F00:0144          jsr op_MOVEM
               S06:00000474:  4E B8 2D E0
F00:0145          ;jsr op_ABCD
F00:0146          ;jsr op_SBCD
F00:0147          ;jsr op_NBCD
F00:0148          jsr op_TRAPV
               S06:00000478:  4E B8 34 6A
F00:0149          jsr op_RTR
               S06:0000047C:  4E B8 34 9C
F00:0150          jsr op_BCC
               S06:00000480:  4E B8 34 D4
F00:0151          jsr op_DBCC
               S06:00000484:  4E B8 35 6C
F00:0152          jsr op_SCC
               S06:00000488:  4E B8 35 A8
F00:0153          jsr op_ADDQ
               S06:0000048C:  4E B8 35 E6
F00:0154          jsr op_SUBQ
               S06:00000490:  4E B8 36 BA
F00:0155          jsr op_MOVEQ
               S06:00000494:  4E B8 37 8E
F00:0156          jsr op_DIVU
               S06:00000498:  4E B8 37 C0
F00:0157          jsr op_DIVS
               S06:0000049C:  4E B8 38 28
F00:0158          jsr op_OR
               S06:000004A0:  4E B8 38 90
F00:0159          jsr op_AND
               S06:000004A4:  4E B8 39 94
F00:0160          jsr op_EOR
               S06:000004A8:  4E B8 3A 98
F00:0161          jsr op_CMP
               S06:000004AC:  4E B8 3B 24
F00:0162          jsr op_CMPA
               S06:000004B0:  4E B8 3B B0
F00:0163          jsr op_CMPM
               S06:000004B4:  4E B8 3C 2C
F00:0164          jsr op_ADD ;#FIXME: Flags
               S06:000004B8:  4E B8 3C E8
F00:0165          jsr op_SUB ;#FIXME: Flags
               S06:000004BC:  4E B8 3D EC
F00:0166          jsr op_ADDA
               S06:000004C0:  4E B8 3E F0
F00:0167          jsr op_SUBA
               S06:000004C4:  4E B8 3F 58
F00:0168          jsr op_ADDX
               S06:000004C8:  4E B8 3F C0
F00:0169          jsr op_SUBX
               S06:000004CC:  4E B8 40 E8
F00:0170          jsr op_MULU
               S06:000004D0:  4E B8 42 12
F00:0171          jsr op_MULS
               S06:000004D4:  4E B8 42 74
F00:0172          jsr op_EXG
               S06:000004D8:  4E B8 42 D6
F00:0173          jsr op_ROx
               S06:000004DC:  4E B8 43 5A
F00:0174          jsr op_ROXx
               S06:000004E0:  4E B8 45 DA
F00:0175          jsr op_SHIFTS2
               S06:000004E4:  4E B8 4A E6
F00:0176          jsr op_SHIFTS
               S06:000004E8:  4E B8 48 5A
F00:0177       
F00:0178          jmp ALL_DONE
               S06:000004EC:  4E F9 00 00 F0 00
F00:0179       
F00:0180          
F00:0181       
F00:0182       BSR_FAR1:       move.l #$33333333,d3
               S06:000004F2:  26 3C 33 33 33 33
F00:0183                       rts
               S06:000004F8:  4E 75
F00:0184       
F00:0185       ;-----------------------------------------------------------
F00:0186       ;-----------------------------------------------------------
F00:0187       ; OPCODE : ORI_TO_CCR
F00:0188       ;-----------------------------------------------------------
F00:0189       ;-----------------------------------------------------------
F00:0190       op_ORI_TO_CCR: 
F00:0191       
F00:0192           ori.b #$FF,CCR
               S06:000004FA:  00 3C 00 FF
F00:0193           bpl ORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:000004FE:  6A 24
F00:0194           bne ORI_TO_CCR_FAIL     ; branch if N clear
               S06:00000500:  66 22
F00:0195           bvc ORI_TO_CCR_FAIL     ; branch if V clear 
               S06:00000502:  68 20
F00:0196           bcc ORI_TO_CCR_FAIL     ; branch if C clear 
               S06:00000504:  64 1E
F00:0197           
F00:0198           move #$00,CCR
               S06:00000506:  44 FC 00 00
F00:0199           ori.b #$00,CCR
               S06:0000050A:  00 3C 00 00
F00:0200           beq ORI_TO_CCR_FAIL     ; branch if Z set  
               S06:0000050E:  67 14
F00:0201           bmi ORI_TO_CCR_FAIL     ; branch if N set  
               S06:00000510:  6B 12
F00:0202           bvs ORI_TO_CCR_FAIL     ; branch if V set  
               S06:00000512:  69 10
F00:0203           bcs ORI_TO_CCR_FAIL     ; branch if C set  
               S06:00000514:  65 0E
F00:0204          
F00:0205           move #$2700,SR         ; Put flags back to initial value
               S06:00000516:  46 FC 27 00
F00:0206       
F00:0207           movea #TESTSTATUS,a0
               S06:0000051A:  30 7C FF 00
F00:0208           move.b #$1,$00(a0)
               S06:0000051E:  10 BC 00 01
F00:0209           rts
               S06:00000522:  4E 75
F00:0210           
F00:0211       ORI_TO_CCR_FAIL: 
F00:0212           movea #TESTSTATUS,a0
               S06:00000524:  30 7C FF 00
F00:0213           move.b #$2,$00(a0)
               S06:00000528:  10 BC 00 02
F00:0214           rts
               S06:0000052C:  4E 75
F00:0215          
F00:0216       ;-----------------------------------------------------------
F00:0217       ;-----------------------------------------------------------
F00:0218       ; OPCODE : ORI_TO_SR
F00:0219       ;-----------------------------------------------------------
F00:0220       ;-----------------------------------------------------------
F00:0221       op_ORI_TO_SR: 
F00:0222       
F00:0223           ori.w #$2FFF,SR
               S06:0000052E:  00 7C 2F FF
F00:0224           bpl ORI_TO_SR_FAIL     ; branch if Z clear  
               S06:00000532:  6A 26
F00:0225           bne ORI_TO_SR_FAIL     ; branch if N clear
               S06:00000534:  66 24
F00:0226           bvc ORI_TO_SR_FAIL     ; branch if V clear 
               S06:00000536:  68 22
F00:0227           bcc ORI_TO_SR_FAIL     ; branch if C clear 
               S06:00000538:  64 20
F00:0228           
F00:0229           move #$2000,SR
               S06:0000053A:  46 FC 20 00
F00:0230           ori.w #$0000,SR
               S06:0000053E:  00 7C 00 00
F00:0231           beq ORI_TO_SR_FAIL     ; branch if Z set  
               S06:00000542:  67 16
F00:0232           bmi ORI_TO_SR_FAIL     ; branch if N set  
               S06:00000544:  6B 14
F00:0233           bvs ORI_TO_SR_FAIL     ; branch if V set  
               S06:00000546:  69 12
F00:0234           bcs ORI_TO_SR_FAIL     ; branch if C set  
               S06:00000548:  65 10
F00:0235          
F00:0236           move #$2700,SR        ; Put flags back to initial value
               S06:0000054A:  46 FC 27 00
F00:0237       
F00:0238           movea #TESTSTATUS,a0
               S06:0000054E:  30 7C FF 00
F00:0239           move.b #$1,$01(a0)
               S06:00000552:  11 7C 00 01 00 01
F00:0240           rts
               S06:00000558:  4E 75
F00:0241           
F00:0242       ORI_TO_SR_FAIL:
F00:0243           movea #TESTSTATUS,a0
               S06:0000055A:  30 7C FF 00
F00:0244           move.b #$2,$01(a0)
               S06:0000055E:  11 7C 00 02 00 01
F00:0245           rts
               S06:00000564:  4E 75
F00:0246       
F00:0247       ;-----------------------------------------------------------
F00:0248       ;-----------------------------------------------------------
F00:0249       ; OPCODE : EORI_TO_CCR
F00:0250       ;-----------------------------------------------------------
F00:0251       ;-----------------------------------------------------------
F00:0252       op_EORI_TO_CCR: 
F00:0253       
F00:0254           move #$00,CCR
               S06:00000566:  44 FC 00 00
F00:0255           eori.b #$FF,CCR
               S06:0000056A:  0A 3C 00 FF
F00:0256           bpl EORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:0000056E:  6A 26
F00:0257           bne EORI_TO_CCR_FAIL     ; branch if N clear
               S06:00000570:  66 24
F00:0258           bvc EORI_TO_CCR_FAIL     ; branch if V clear 
               S06:00000572:  68 22
F00:0259           bcc EORI_TO_CCR_FAIL     ; branch if C clear 
               S06:00000574:  64 20
F00:0260           
F00:0261           move #$00,CCR
               S06:00000576:  44 FC 00 00
F00:0262           eori.b #$00,CCR
               S06:0000057A:  0A 3C 00 00
F00:0263           beq EORI_TO_CCR_FAIL     ; branch if Z set  
               S06:0000057E:  67 16
F00:0264           bmi EORI_TO_CCR_FAIL     ; branch if N set  
               S06:00000580:  6B 14
F00:0265           bvs EORI_TO_CCR_FAIL     ; branch if V set  
               S06:00000582:  69 12
F00:0266           bcs EORI_TO_CCR_FAIL     ; branch if C set  
               S06:00000584:  65 10
F00:0267          
F00:0268           move #$2700,SR         ; Put flags back to initial value
               S06:00000586:  46 FC 27 00
F00:0269       
F00:0270           movea #TESTSTATUS,a0
               S06:0000058A:  30 7C FF 00
F00:0271           move.b #$1,$02(a0)
               S06:0000058E:  11 7C 00 01 00 02
F00:0272           rts
               S06:00000594:  4E 75
F00:0273           
F00:0274       EORI_TO_CCR_FAIL:
F00:0275           movea #TESTSTATUS,a0
               S06:00000596:  30 7C FF 00
F00:0276           move.b #$2,$02(a0)
               S06:0000059A:  11 7C 00 02 00 02
F00:0277           rts
               S06:000005A0:  4E 75
F00:0278       
F00:0279       ;-----------------------------------------------------------
F00:0280       ;-----------------------------------------------------------
F00:0281       ; OPCODE : EORI_TO_SR
F00:0282       ;-----------------------------------------------------------
F00:0283       ;-----------------------------------------------------------
F00:0284       op_EORI_TO_SR: 
F00:0285       
F00:0286           move #$2000,SR
               S06:000005A2:  46 FC 20 00
F00:0287           eori.w #$0FFF,SR
               S06:000005A6:  0A 7C 0F FF
F00:0288           bpl EORI_TO_SR_FAIL     ; branch if Z clear  
               S06:000005AA:  6A 26
F00:0289           bne EORI_TO_SR_FAIL     ; branch if N clear
               S06:000005AC:  66 24
F00:0290           bvc EORI_TO_SR_FAIL     ; branch if V clear 
               S06:000005AE:  68 22
F00:0291           bcc EORI_TO_SR_FAIL     ; branch if C clear 
               S06:000005B0:  64 20
F00:0292           
F00:0293           move #$2000,SR
               S06:000005B2:  46 FC 20 00
F00:0294           eori.w #$0000,SR
               S06:000005B6:  0A 7C 00 00
F00:0295           beq EORI_TO_SR_FAIL     ; branch if Z set  
               S06:000005BA:  67 16
F00:0296           bmi EORI_TO_SR_FAIL     ; branch if N set  
               S06:000005BC:  6B 14
F00:0297           bvs EORI_TO_SR_FAIL     ; branch if V set  
               S06:000005BE:  69 12
F00:0298           bcs EORI_TO_SR_FAIL     ; branch if C set  
               S06:000005C0:  65 10
F00:0299          
F00:0300           move #$2700,SR        ; Put flags back to initial value
               S06:000005C2:  46 FC 27 00
F00:0301       
F00:0302           movea #TESTSTATUS,a0
               S06:000005C6:  30 7C FF 00
F00:0303           move.b #$1,$03(a0)
               S06:000005CA:  11 7C 00 01 00 03
F00:0304           rts
               S06:000005D0:  4E 75
F00:0305           
F00:0306       EORI_TO_SR_FAIL:
F00:0307           movea #TESTSTATUS,a0
               S06:000005D2:  30 7C FF 00
F00:0308           move.b #$2,$03(a0)
               S06:000005D6:  11 7C 00 02 00 03
F00:0309           rts
               S06:000005DC:  4E 75
F00:0310       
F00:0311       ;-----------------------------------------------------------
F00:0312       ;-----------------------------------------------------------
F00:0313       ; OPCODE : ANDI_TO_CCR
F00:0314       ;-----------------------------------------------------------
F00:0315       ;-----------------------------------------------------------
F00:0316       op_ANDI_TO_CCR: 
F00:0317       
F00:0318           move #$FF,CCR
               S06:000005DE:  44 FC 00 FF
F00:0319           andi.b #$FF,CCR
               S06:000005E2:  02 3C 00 FF
F00:0320           bpl ANDI_TO_CCR_FAIL     ; branch if Z clear  
               S06:000005E6:  6A 26
F00:0321           bne ANDI_TO_CCR_FAIL     ; branch if N clear
               S06:000005E8:  66 24
F00:0322           bvc ANDI_TO_CCR_FAIL     ; branch if V clear 
               S06:000005EA:  68 22
F00:0323           bcc ANDI_TO_CCR_FAIL     ; branch if C clear 
               S06:000005EC:  64 20
F00:0324           
F00:0325           move #$FF,CCR
               S06:000005EE:  44 FC 00 FF
F00:0326           andi.b #$00,CCR
               S06:000005F2:  02 3C 00 00
F00:0327           beq ANDI_TO_CCR_FAIL     ; branch if Z set  
               S06:000005F6:  67 16
F00:0328           bmi ANDI_TO_CCR_FAIL     ; branch if N set  
               S06:000005F8:  6B 14
F00:0329           bvs ANDI_TO_CCR_FAIL     ; branch if V set  
               S06:000005FA:  69 12
F00:0330           bcs ANDI_TO_CCR_FAIL     ; branch if C set  
               S06:000005FC:  65 10
F00:0331          
F00:0332           move #$2700,SR         ; Put flags back to initial value
               S06:000005FE:  46 FC 27 00
F00:0333       
F00:0334           movea #TESTSTATUS,a0
               S06:00000602:  30 7C FF 00
F00:0335           move.b #$1,$04(a0)
               S06:00000606:  11 7C 00 01 00 04
F00:0336           rts
               S06:0000060C:  4E 75
F00:0337           
F00:0338       ANDI_TO_CCR_FAIL:
F00:0339           movea #TESTSTATUS,a0
               S06:0000060E:  30 7C FF 00
F00:0340           move.b #$2,$04(a0)
               S06:00000612:  11 7C 00 02 00 04
F00:0341           rts
               S06:00000618:  4E 75
F00:0342       
F00:0343       ;-----------------------------------------------------------
F00:0344       ;-----------------------------------------------------------
F00:0345       ; OPCODE : ANDI_TO_SR
F00:0346       ;-----------------------------------------------------------
F00:0347       ;-----------------------------------------------------------
F00:0348       op_ANDI_TO_SR: 
F00:0349           move #$20FF,SR
               S06:0000061A:  46 FC 20 FF
F00:0350           andi.w #$FFFF,SR
               S06:0000061E:  02 7C FF FF
F00:0351           bpl ANDI_TO_SR_FAIL     ; branch if Z clear  
               S06:00000622:  6A 26
F00:0352           bne ANDI_TO_SR_FAIL     ; branch if N clear
               S06:00000624:  66 24
F00:0353           bvc ANDI_TO_SR_FAIL     ; branch if V clear 
               S06:00000626:  68 22
F00:0354           bcc ANDI_TO_SR_FAIL     ; branch if C clear 
               S06:00000628:  64 20
F00:0355           
F00:0356           move #$20FF,SR
               S06:0000062A:  46 FC 20 FF
F00:0357           andi.w #$FF00,SR
               S06:0000062E:  02 7C FF 00
F00:0358           beq ANDI_TO_SR_FAIL     ; branch if Z set  
               S06:00000632:  67 16
F00:0359           bmi ANDI_TO_SR_FAIL     ; branch if N set  
               S06:00000634:  6B 14
F00:0360           bvs ANDI_TO_SR_FAIL     ; branch if V set  
               S06:00000636:  69 12
F00:0361           bcs ANDI_TO_SR_FAIL     ; branch if C set  
               S06:00000638:  65 10
F00:0362          
F00:0363           move #$2700,SR         ; Put flags back to initial value
               S06:0000063A:  46 FC 27 00
F00:0364       
F00:0365           movea #TESTSTATUS,a0
               S06:0000063E:  30 7C FF 00
F00:0366           move.b #$1,$05(a0)
               S06:00000642:  11 7C 00 01 00 05
F00:0367           rts
               S06:00000648:  4E 75
F00:0368           
F00:0369       ANDI_TO_SR_FAIL:
F00:0370           movea #TESTSTATUS,a0
               S06:0000064A:  30 7C FF 00
F00:0371           move.b #$2,$05(a0)
               S06:0000064E:  11 7C 00 02 00 05
F00:0372           rts
               S06:00000654:  4E 75
F00:0373         
F00:0374       ;-----------------------------------------------------------
F00:0375       ;-----------------------------------------------------------
F00:0376       ; OPCODE : BTST
F00:0377       ;-----------------------------------------------------------
F00:0378       ;-----------------------------------------------------------
F00:0379       op_BTST: 
F00:0380       
F00:0381       ;  Bit Number Static 
F00:0382           
F00:0383                   ; EA = Dn  - LONG only
F00:0384                   move.l #$80000001,d0      ; populate test data
               S06:00000656:  20 3C 80 00 00 01
F00:0385                   btst.l #0,d0              
               S06:0000065C:  08 00 00 00
F00:0386                   beq BTST_FAIL               ; branch if Z set
               S06:00000660:  67 00 04 50
F00:0387                   btst.l #1,d0              ; 
               S06:00000664:  08 00 00 01
F00:0388                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000668:  66 00 04 48
F00:0389                   btst.l #31,d0             ; 
               S06:0000066C:  08 00 00 1F
F00:0390                   beq BTST_FAIL               ; branch if Z set
               S06:00000670:  67 00 04 40
F00:0391                   
F00:0392                   
F00:0393                   ; EA = (An)  - BYTE only
F00:0394                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000674:  30 7C 01 00
F00:0395                   move.b #$81,(a0)          ; populate test data
               S06:00000678:  10 BC 00 81
F00:0396                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:0000067C:  12 10
F00:0397                   btst.b #0,(a0)            
               S06:0000067E:  08 10 00 00
F00:0398                   beq BTST_FAIL               ; branch if Z set
               S06:00000682:  67 00 04 2E
F00:0399                   btst.b #1,(a0)            ; 
               S06:00000686:  08 10 00 01
F00:0400                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000068A:  66 00 04 26
F00:0401                   btst.b #7,(a0)            ; 
               S06:0000068E:  08 10 00 07
F00:0402                   beq BTST_FAIL               ; branch if Z set
               S06:00000692:  67 00 04 1E
F00:0403                   
F00:0404                   
F00:0405                   ; EA = (An)+  - BYTE only
F00:0406                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000696:  30 7C 01 00
F00:0407                   move.b #$01,(a0)+         ; populate test data
               S06:0000069A:  10 FC 00 01
F00:0408                   move.b #$FC,(a0)+         ; populate test data
               S06:0000069E:  10 FC 00 FC
F00:0409                   move.b #$80,(a0)+         ; populate test data
               S06:000006A2:  10 FC 00 80
F00:0410                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000006A6:  30 7C 01 00
F00:0411                   btst.b #0,(a0)+            
               S06:000006AA:  08 18 00 00
F00:0412                   beq BTST_FAIL               ; branch if Z set
               S06:000006AE:  67 00 04 02
F00:0413                   btst.b #1,(a0)+           ; 
               S06:000006B2:  08 18 00 01
F00:0414                   bne BTST_FAIL               ; branch if Z clear  
               S06:000006B6:  66 00 03 FA
F00:0415                   btst.b #7,(a0)+           ; 
               S06:000006BA:  08 18 00 07
F00:0416                   beq BTST_FAIL               ; branch if Z set
               S06:000006BE:  67 00 03 F2
F00:0417               
F00:0418               
F00:0419                   ; EA = -(An)  - BYTE only
F00:0420                   move.l #$00000100,a0      ; point to memory to address
               S06:000006C2:  30 7C 01 00
F00:0421                   move.b #$80,(a0)+         ; populate test data
               S06:000006C6:  10 FC 00 80
F00:0422                   move.b #$FC,(a0)+         ; populate test data
               S06:000006CA:  10 FC 00 FC
F00:0423                   move.b #$01,(a0)+         ; populate test data
               S06:000006CE:  10 FC 00 01
F00:0424                   move.l #$00000103,a0      ; point to memory to address 
               S06:000006D2:  30 7C 01 03
F00:0425                   btst.b #0,-(a0)            
               S06:000006D6:  08 20 00 00
F00:0426                   beq BTST_FAIL               ; branch if Z set
               S06:000006DA:  67 00 03 D6
F00:0427                   btst.b #1,-(a0)           ; 
               S06:000006DE:  08 20 00 01
F00:0428                   bne BTST_FAIL               ; branch if Z clear  
               S06:000006E2:  66 00 03 CE
F00:0429                   btst.b #7,-(a0)           ; 
               S06:000006E6:  08 20 00 07
F00:0430                   beq BTST_FAIL               ; branch if Z set
               S06:000006EA:  67 00 03 C6
F00:0431               
F00:0432               
F00:0433                   ; EA = n(An)  - BYTE only
F00:0434                   move.l #$00000100,a0      ; point to memory to address
               S06:000006EE:  30 7C 01 00
F00:0435                   move.b #$01,(a0)+         ; populate test data
               S06:000006F2:  10 FC 00 01
F00:0436                   move.b #$FC,(a0)+         ; populate test data
               S06:000006F6:  10 FC 00 FC
F00:0437                   move.b #$80,(a0)+         ; populate test data
               S06:000006FA:  10 FC 00 80
F00:0438                   move.l #$00000100,a0      ; point to memory to address
               S06:000006FE:  30 7C 01 00
F00:0439                   btst.b #0,0(a0)            
               S06:00000702:  08 10 00 00
F00:0440                   beq BTST_FAIL               ; branch if Z set
               S06:00000706:  67 00 03 AA
F00:0441                   btst.b #1,1(a0)           ; 
               S06:0000070A:  08 28 00 01 00 01
F00:0442                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000710:  66 00 03 A0
F00:0443                   btst.b #7,2(a0)           ; 
               S06:00000714:  08 28 00 07 00 02
F00:0444                   beq BTST_FAIL               ; branch if Z set
               S06:0000071A:  67 00 03 96
F00:0445               
F00:0446               
F00:0447                   ; EA = n(An,R.W)  - BYTE only
F00:0448                   move.l #$00000100,a0      ; point to memory to address
               S06:0000071E:  30 7C 01 00
F00:0449                   move.l #$00000000,a1      ; point to memory to address
               S06:00000722:  93 C9
F00:0450                   move.l #$00000001,a2      ; point to memory to address
               S06:00000724:  34 7C 00 01
F00:0451                   move.l #$00000000,d0      ; point to memory to address
               S06:00000728:  70 00
F00:0452                   move.l #$00000001,d1      ; point to memory to address
               S06:0000072A:  72 01
F00:0453                   btst.b #0,0(a0,d0.w)            
               S06:0000072C:  08 30 00 00 00 00
F00:0454                   beq BTST_FAIL               ; branch if Z set
               S06:00000732:  67 00 03 7E
F00:0455                   btst.b #1,0(a0,d1.w)      ; 
               S06:00000736:  08 30 00 01 10 00
F00:0456                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000073C:  66 00 03 74
F00:0457                   btst.b #7,1(a0,d1.w)      ; 
               S06:00000740:  08 30 00 07 10 01
F00:0458                   beq BTST_FAIL               ; branch if Z set
               S06:00000746:  67 00 03 6A
F00:0459                   ; EA = n(An,R.L)  - BYTE only
F00:0460                   btst.b #0,0(a0,d0.l)  
               S06:0000074A:  08 30 00 00 08 00
F00:0461                   beq BTST_FAIL               ; branch if Z set
               S06:00000750:  67 00 03 60
F00:0462                   btst.b #1,0(a0,d1.l)      ; 
               S06:00000754:  08 30 00 01 18 00
F00:0463                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000075A:  66 00 03 56
F00:0464                   btst.b #7,1(a0,d1.l)      ; 
               S06:0000075E:  08 30 00 07 18 01
F00:0465                   beq BTST_FAIL               ; branch if Z set
               S06:00000764:  67 00 03 4C
F00:0466                   ; EA = n(An,A.W)  - BYTE only
F00:0467                   btst.b #0,0(a0,a1.w)            
               S06:00000768:  08 30 00 00 90 00
F00:0468                   beq BTST_FAIL               ; branch if Z set
               S06:0000076E:  67 00 03 42
F00:0469                   btst.b #1,0(a0,a2.w)      ; 
               S06:00000772:  08 30 00 01 A0 00
F00:0470                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000778:  66 00 03 38
F00:0471                   btst.b #7,1(a0,a2.w)      ; 
               S06:0000077C:  08 30 00 07 A0 01
F00:0472                   beq BTST_FAIL               ; branch if Z set
               S06:00000782:  67 00 03 2E
F00:0473                   ; EA = n(An,A.L)  - BYTE only
F00:0474                   btst.b #0,0(a0,a1.l)  
               S06:00000786:  08 30 00 00 98 00
F00:0475                   beq BTST_FAIL               ; branch if Z set
               S06:0000078C:  67 00 03 24
F00:0476                   btst.b #1,0(a0,a2.l)      ; 
               S06:00000790:  08 30 00 01 A8 00
F00:0477                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000796:  66 00 03 1A
F00:0478                   btst.b #7,1(a0,a2.l)      ; 
               S06:0000079A:  08 30 00 07 A8 01
F00:0479                   beq BTST_FAIL               ; branch if Z set
               S06:000007A0:  67 00 03 10
F00:0480               
F00:0481               
F00:0482                   ; EA = x.W  - BYTE only
F00:0483                   btst.b #0,$0100            
               S06:000007A4:  08 38 00 00 01 00
F00:0484                   beq BTST_FAIL               ; branch if Z set
               S06:000007AA:  67 00 03 06
F00:0485                   btst.b #1,$0101           ; 
               S06:000007AE:  08 38 00 01 01 01
F00:0486                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007B4:  66 00 02 FC
F00:0487                   btst.b #7,$0102           ; 
               S06:000007B8:  08 38 00 07 01 02
F00:0488                   beq BTST_FAIL               ; branch if Z set
               S06:000007BE:  67 00 02 F2
F00:0489               
F00:0490               
F00:0491                   ; EA = x.L  - BYTE only
F00:0492                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000007C2:  20 7C 00 0F 01 00
F00:0493                   move.b #$01,(a0)+         ; populate test data
               S06:000007C8:  10 FC 00 01
F00:0494                   move.b #$FC,(a0)+         ; populate test data
               S06:000007CC:  10 FC 00 FC
F00:0495                   move.b #$80,(a0)+         ; populate test data
               S06:000007D0:  10 FC 00 80
F00:0496                   btst.b #0,$000F0100 
               S06:000007D4:  08 39 00 00 00 0F 01 00
F00:0497                   beq BTST_FAIL               ; branch if Z set
               S06:000007DC:  67 00 02 D4
F00:0498                   btst.b #1,$000F0101       ; 
               S06:000007E0:  08 39 00 01 00 0F 01 01
F00:0499                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007E8:  66 00 02 C8
F00:0500                   btst.b #7,$000F0102       ; 
               S06:000007EC:  08 39 00 07 00 0F 01 02
F00:0501                   beq BTST_FAIL               ; branch if Z set
               S06:000007F4:  67 00 02 BC
F00:0502               
F00:0503       
F00:0504       
F00:0505                   ; EA = x(PC)  - BYTE only
F00:0506                   lea op_BTST(pc),a5
               S06:000007F8:  4B FA FE 5C
F00:0507                   btst.b #0,op_BTST(pc) 
               S06:000007FC:  08 3A 00 00 FE 56
F00:0508                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000802:  66 00 02 AE
F00:0509                   btst.b #3,op_BTST0(pc)     ; 
               S06:00000806:  08 3A 00 03 00 1E
F00:0510                   beq BTST_FAIL               ; branch if Z set
               S06:0000080C:  67 00 02 A4
F00:0511                   btst.b #6,op_BTST12(pc)    ; 
               S06:00000810:  08 3A 00 06 00 8C
F00:0512                   beq BTST_FAIL               ; branch if Z set
               S06:00000816:  67 00 02 9A
F00:0513           
F00:0514                   ; EA = n(PC,R.W)  - BYTE only
F00:0515                   move.l #$00000100,a0      ; point to memory to address
               S06:0000081A:  30 7C 01 00
F00:0516                   move.l #$00000000,a1      ; point to memory to address
               S06:0000081E:  93 C9
F00:0517                   move.l #$00000001,a2      ; point to memory to address
               S06:00000820:  34 7C 00 01
F00:0518                   move.l #$00000000,d0      ; point to memory to address
               S06:00000824:  70 00
F00:0519                   move.l #$00000001,d1      ; point to memory to address
               S06:00000826:  72 01
F00:0520           
F00:0521       op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)            
               S06:00000828:  08 3B 00 00 00 FC
F00:0522                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000082E:  66 00 02 82
F00:0523                   
F00:0524                   lea op_BTST1(pc,d1.w),a5
               S06:00000832:  4B FB 10 02
F00:0525       op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      ; 
               S06:00000836:  08 3B 00 01 10 FC
F00:0526                   beq BTST_FAIL               ; branch if Z set
               S06:0000083C:  67 00 02 74
F00:0527       op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      ; 
               S06:00000840:  08 3B 00 07 10 FC
F00:0528                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000846:  66 00 02 6A
F00:0529                   ; EA = n(PC,R.L)  - BYTE only
F00:0530       op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)  
               S06:0000084A:  08 3B 00 00 08 FC
F00:0531                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000850:  66 00 02 60
F00:0532       op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      ; 
               S06:00000854:  08 3B 00 01 18 FC
F00:0533                   beq BTST_FAIL               ; branch if Z set
               S06:0000085A:  67 00 02 56
F00:0534       op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      ; 
               S06:0000085E:  08 3B 00 07 18 FC
F00:0535                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000864:  66 00 02 4C
F00:0536                   ; EA = n(PC,A.W)  - BYTE only
F00:0537       op_BTST6    btst.b #0,op_BTST6(pc,a1.w)            
               S06:00000868:  08 3B 00 00 90 FC
F00:0538                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000086E:  66 00 02 42
F00:0539       op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      ; 
               S06:00000872:  08 3B 00 01 A0 FC
F00:0540                   beq BTST_FAIL               ; branch if Z set
               S06:00000878:  67 00 02 38
F00:0541       op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      ; 
               S06:0000087C:  08 3B 00 07 A0 FC
F00:0542                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000882:  66 00 02 2E
F00:0543                   ; EA = n(PC,A.L)  - BYTE only
F00:0544       op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)  
               S06:00000886:  08 3B 00 00 98 FC
F00:0545                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000088C:  66 00 02 24
F00:0546       op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      ; 
               S06:00000890:  08 3B 00 01 A8 FC
F00:0547                   beq BTST_FAIL               ; branch if Z set
               S06:00000896:  67 00 02 1A
F00:0548       op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      ; 
               S06:0000089A:  08 3B 00 07 A8 FC
F00:0549       op_BTST12:  bne BTST_FAIL               ; branch if Z clear  
               S06:000008A0:  66 00 02 10
F00:0550        
F00:0551       
F00:0552       
F00:0553       ; Bit Number Dynamic
F00:0554           
F00:0555                   ; EA = Dn  - LONG only
F00:0556                   move.l #$80000001,d0      ; populate test data
               S06:000008A4:  20 3C 80 00 00 01
F00:0557                   move.l #0,d5              ; populate bit number to test
               S06:000008AA:  7A 00
F00:0558                   move.l #1,d6              ; populate bit number to test
               S06:000008AC:  7C 01
F00:0559                   move.l #31,d7              ; populate bit number to test
               S06:000008AE:  7E 1F
F00:0560                   
F00:0561                   btst.l d5,d0              
               S06:000008B0:  0B 00
F00:0562                   beq BTST_FAIL               ; branch if Z set
               S06:000008B2:  67 00 01 FE
F00:0563                   btst.l d6,d0              ; 
               S06:000008B6:  0D 00
F00:0564                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008B8:  66 00 01 F8
F00:0565                   btst.l d7,d0             ; 
               S06:000008BC:  0F 00
F00:0566                   beq BTST_FAIL               ; branch if Z set
               S06:000008BE:  67 00 01 F2
F00:0567                   
F00:0568                   
F00:0569                   ; EA = (An)  - BYTE only
F00:0570                   move.l #0,d5              ; populate bit number to test
               S06:000008C2:  7A 00
F00:0571                   move.l #1,d6              ; populate bit number to test
               S06:000008C4:  7C 01
F00:0572                   move.l #7,d7              ; populate bit number to test           
               S06:000008C6:  7E 07
F00:0573                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:000008C8:  30 7C 01 00
F00:0574                   move.b #$81,(a0)          ; populate test data
               S06:000008CC:  10 BC 00 81
F00:0575                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:000008D0:  12 10
F00:0576                   btst.b d5,(a0)            
               S06:000008D2:  0B 10
F00:0577                   beq BTST_FAIL               ; branch if Z set
               S06:000008D4:  67 00 01 DC
F00:0578                   btst.b d6,(a0)            ; 
               S06:000008D8:  0D 10
F00:0579                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008DA:  66 00 01 D6
F00:0580                   btst.b d7,(a0)            ; 
               S06:000008DE:  0F 10
F00:0581                   beq BTST_FAIL               ; branch if Z set
               S06:000008E0:  67 00 01 D0
F00:0582                   
F00:0583       ; ---
F00:0584       
F00:0585           
F00:0586                   ; EA = (An)+  - BYTE only
F00:0587                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000008E4:  30 7C 01 00
F00:0588                   move.b #$01,(a0)+         ; populate test data
               S06:000008E8:  10 FC 00 01
F00:0589                   move.b #$FC,(a0)+         ; populate test data
               S06:000008EC:  10 FC 00 FC
F00:0590                   move.b #$80,(a0)+         ; populate test data
               S06:000008F0:  10 FC 00 80
F00:0591                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000008F4:  30 7C 01 00
F00:0592                   btst.b d5,(a0)+            
               S06:000008F8:  0B 18
F00:0593                   beq BTST_FAIL               ; branch if Z set
               S06:000008FA:  67 00 01 B6
F00:0594                   btst.b d6,(a0)+           ; 
               S06:000008FE:  0D 18
F00:0595                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000900:  66 00 01 B0
F00:0596                   btst.b d7,(a0)+           ; 
               S06:00000904:  0F 18
F00:0597                   beq BTST_FAIL               ; branch if Z set
               S06:00000906:  67 00 01 AA
F00:0598               
F00:0599               
F00:0600                   ; EA = -(An)  - BYTE only
F00:0601                   move.l #$00000100,a0      ; point to memory to address
               S06:0000090A:  30 7C 01 00
F00:0602                   move.b #$80,(a0)+         ; populate test data
               S06:0000090E:  10 FC 00 80
F00:0603                   move.b #$FC,(a0)+         ; populate test data
               S06:00000912:  10 FC 00 FC
F00:0604                   move.b #$01,(a0)+         ; populate test data
               S06:00000916:  10 FC 00 01
F00:0605                   move.l #$00000103,a0      ; point to memory to address 
               S06:0000091A:  30 7C 01 03
F00:0606                   btst.b d5,-(a0)            
               S06:0000091E:  0B 20
F00:0607                   beq BTST_FAIL               ; branch if Z set
               S06:00000920:  67 00 01 90
F00:0608                   btst.b d6,-(a0)           ; 
               S06:00000924:  0D 20
F00:0609                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000926:  66 00 01 8A
F00:0610                   btst.b d7,-(a0)           ; 
               S06:0000092A:  0F 20
F00:0611                   beq BTST_FAIL               ; branch if Z set
               S06:0000092C:  67 00 01 84
F00:0612               
F00:0613               
F00:0614                   ; EA = n(An)  - BYTE only
F00:0615                   move.l #$00000100,a0      ; point to memory to address
               S06:00000930:  30 7C 01 00
F00:0616                   move.b #$01,(a0)+         ; populate test data
               S06:00000934:  10 FC 00 01
F00:0617                   move.b #$FC,(a0)+         ; populate test data
               S06:00000938:  10 FC 00 FC
F00:0618                   move.b #$80,(a0)+         ; populate test data
               S06:0000093C:  10 FC 00 80
F00:0619                   move.l #$00000100,a0      ; point to memory to address
               S06:00000940:  30 7C 01 00
F00:0620                   btst.b d5,0(a0)            
               S06:00000944:  0B 10
F00:0621                   beq BTST_FAIL               ; branch if Z set
               S06:00000946:  67 00 01 6A
F00:0622                   btst.b d6,1(a0)           ; 
               S06:0000094A:  0D 28 00 01
F00:0623                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000094E:  66 00 01 62
F00:0624                   btst.b d7,2(a0)           ; 
               S06:00000952:  0F 28 00 02
F00:0625                   beq BTST_FAIL               ; branch if Z set
               S06:00000956:  67 00 01 5A
F00:0626               
F00:0627               
F00:0628                   ; EA = n(An,R.W)  - BYTE only
F00:0629                   move.l #$00000100,a0      ; point to memory to address
               S06:0000095A:  30 7C 01 00
F00:0630                   move.l #$00000000,a1      ; point to memory to address
               S06:0000095E:  93 C9
F00:0631                   move.l #$00000001,a2      ; point to memory to address
               S06:00000960:  34 7C 00 01
F00:0632                   move.l #$00000000,d0      ; point to memory to address
               S06:00000964:  70 00
F00:0633                   move.l #$00000001,d1      ; point to memory to address
               S06:00000966:  72 01
F00:0634                   btst.b d5,0(a0,d0.w)            
               S06:00000968:  0B 30 00 00
F00:0635                   beq BTST_FAIL               ; branch if Z set
               S06:0000096C:  67 00 01 44
F00:0636                   btst.b d6,0(a0,d1.w)      ; 
               S06:00000970:  0D 30 10 00
F00:0637                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000974:  66 00 01 3C
F00:0638                   btst.b d7,1(a0,d1.w)      ; 
               S06:00000978:  0F 30 10 01
F00:0639                   beq BTST_FAIL               ; branch if Z set
               S06:0000097C:  67 00 01 34
F00:0640                   ; EA = n(An,R.L)  - BYTE only
F00:0641                   btst.b d5,0(a0,d0.l)  
               S06:00000980:  0B 30 08 00
F00:0642                   beq BTST_FAIL               ; branch if Z set
               S06:00000984:  67 00 01 2C
F00:0643                   btst.b d6,0(a0,d1.l)      ; 
               S06:00000988:  0D 30 18 00
F00:0644                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000098C:  66 00 01 24
F00:0645                   btst.b d7,1(a0,d1.l)      ; 
               S06:00000990:  0F 30 18 01
F00:0646                   beq BTST_FAIL               ; branch if Z set
               S06:00000994:  67 00 01 1C
F00:0647                   ; EA = n(An,A.W)  - BYTE only
F00:0648                   btst.b d5,0(a0,a1.w)            
               S06:00000998:  0B 30 90 00
F00:0649                   beq BTST_FAIL               ; branch if Z set
               S06:0000099C:  67 00 01 14
F00:0650                   btst.b d6,0(a0,a2.w)      ; 
               S06:000009A0:  0D 30 A0 00
F00:0651                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009A4:  66 00 01 0C
F00:0652                   btst.b d7,1(a0,a2.w)      ; 
               S06:000009A8:  0F 30 A0 01
F00:0653                   beq BTST_FAIL               ; branch if Z set
               S06:000009AC:  67 00 01 04
F00:0654                   ; EA = n(An,A.L)  - BYTE only
F00:0655                   btst.b d5,0(a0,a1.l)  
               S06:000009B0:  0B 30 98 00
F00:0656                   beq BTST_FAIL               ; branch if Z set
               S06:000009B4:  67 00 00 FC
F00:0657                   btst.b d6,0(a0,a2.l)      ; 
               S06:000009B8:  0D 30 A8 00
F00:0658                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009BC:  66 00 00 F4
F00:0659                   btst.b d7,1(a0,a2.l)      ; 
               S06:000009C0:  0F 30 A8 01
F00:0660                   beq BTST_FAIL               ; branch if Z set
               S06:000009C4:  67 00 00 EC
F00:0661               
F00:0662               
F00:0663                   ; EA = x.W  - BYTE only
F00:0664                   btst.b d5,$0100            
               S06:000009C8:  0B 38 01 00
F00:0665                   beq BTST_FAIL               ; branch if Z set
               S06:000009CC:  67 00 00 E4
F00:0666                   btst.b d6,$0101           ; 
               S06:000009D0:  0D 38 01 01
F00:0667                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009D4:  66 00 00 DC
F00:0668                   btst.b d7,$0102           ; 
               S06:000009D8:  0F 38 01 02
F00:0669                   beq BTST_FAIL               ; branch if Z set
               S06:000009DC:  67 00 00 D4
F00:0670               
F00:0671               
F00:0672                   ; EA = x.L  - BYTE only
F00:0673                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000009E0:  20 7C 00 0F 01 00
F00:0674                   move.b #$01,(a0)+         ; populate test data
               S06:000009E6:  10 FC 00 01
F00:0675                   move.b #$FC,(a0)+         ; populate test data
               S06:000009EA:  10 FC 00 FC
F00:0676                   move.b #$80,(a0)+         ; populate test data
               S06:000009EE:  10 FC 00 80
F00:0677                   btst.b d5,$000F0100 
               S06:000009F2:  0B 39 00 0F 01 00
F00:0678                   beq BTST_FAIL               ; branch if Z set
               S06:000009F8:  67 00 00 B8
F00:0679                   btst.b d6,$000F0101       ; 
               S06:000009FC:  0D 39 00 0F 01 01
F00:0680                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A02:  66 00 00 AE
F00:0681                   btst.b d7,$000F0102       ; 
               S06:00000A06:  0F 39 00 0F 01 02
F00:0682                   beq BTST_FAIL               ; branch if Z set
               S06:00000A0C:  67 00 00 A4
F00:0683               
F00:0684               
F00:0685                   ; EA = x(PC)  - BYTE only
F00:0686                   move.l #3,d6              ; populate bit number to test
               S06:00000A10:  7C 03
F00:0687                   move.l #6,d7              ; populate bit number to test
               S06:00000A12:  7E 06
F00:0688                   lea op_BTST(pc),a5
               S06:00000A14:  4B FA FC 40
F00:0689                   btst.b d5,op_BTST(pc) 
               S06:00000A18:  0B 3A FC 3C
F00:0690                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A1C:  66 00 00 94
F00:0691                   btst.b d6,op_BTST0(pc)     ; 
               S06:00000A20:  0D 3A FE 06
F00:0692                   beq BTST_FAIL               ; branch if Z set
               S06:00000A24:  67 00 00 8C
F00:0693                   btst.b d7,op_BTST12(pc)    ; 
               S06:00000A28:  0F 3A FE 76
F00:0694                   beq BTST_FAIL               ; branch if Z set
               S06:00000A2C:  67 00 00 84
F00:0695         
F00:0696         
F00:0697                   ; EA = n(PC,R.W)  - BYTE only
F00:0698                   move.l #$00000100,a0      ; point to memory to address
               S06:00000A30:  30 7C 01 00
F00:0699                   move.l #$00000000,a1      ; point to memory to address
               S06:00000A34:  93 C9
F00:0700                   move.l #$00000001,a2      ; point to memory to address
               S06:00000A36:  34 7C 00 01
F00:0701                   move.l #$00000000,d0      ; point to memory to address
               S06:00000A3A:  70 00
F00:0702                   move.l #$00000001,d1      ; point to memory to address
               S06:00000A3C:  72 01
F00:0703                   move.l #1,d6              ; populate bit number to test
               S06:00000A3E:  7C 01
F00:0704                   move.l #7,d7              ; populate bit number to test
               S06:00000A40:  7E 07
F00:0705           
F00:0706       op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)            
               S06:00000A42:  0B 3B 00 FE
F00:0707                   beq BTST_FAIL               ; branch if Z set            
               S06:00000A46:  67 6A
F00:0708                   lea op_BTST21(pc,d1.w),a5
               S06:00000A48:  4B FB 10 02
F00:0709       op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      ; 
               S06:00000A4C:  0D 3B 10 FE
F00:0710                   beq BTST_FAIL               ; branch if Z set
               S06:00000A50:  67 60
F00:0711       op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      ; 
               S06:00000A52:  0F 3B 10 FE
F00:0712                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A56:  66 5A
F00:0713                   ; EA = n(PC,R.L)  - BYTE only
F00:0714       op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)  
               S06:00000A58:  0B 3B 08 FE
F00:0715                   beq BTST_FAIL               ; branch if Z set
               S06:00000A5C:  67 54
F00:0716       op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      ; 
               S06:00000A5E:  0D 3B 18 FE
F00:0717                   beq BTST_FAIL               ; branch if Z set
               S06:00000A62:  67 4E
F00:0718       op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      ; 
               S06:00000A64:  0F 3B 18 FE
F00:0719                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A68:  66 48
F00:0720                   ; EA = n(PC,A.W)  - BYTE only
F00:0721       op_BTST26   btst.b d5,op_BTST26(pc,a1.w)            
               S06:00000A6A:  0B 3B 90 FE
F00:0722                   beq BTST_FAIL               ; branch if Z set
               S06:00000A6E:  67 42
F00:0723       op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      ; 
               S06:00000A70:  0D 3B A0 FE
F00:0724                   beq BTST_FAIL               ; branch if Z set
               S06:00000A74:  67 3C
F00:0725       op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      ; 
               S06:00000A76:  0F 3B A0 FE
F00:0726                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A7A:  66 36
F00:0727                   ; EA = n(PC,A.L)  - BYTE only
F00:0728       op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)  
               S06:00000A7C:  0B 3B 98 FE
F00:0729                   beq BTST_FAIL               ; branch if Z set
               S06:00000A80:  67 30
F00:0730       op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      ; 
               S06:00000A82:  0D 3B A8 FE
F00:0731                   beq BTST_FAIL               ; branch if Z set
               S06:00000A86:  67 2A
F00:0732       op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      ; 
               S06:00000A88:  0F 3B A8 FE
F00:0733       op_BTST32:  bne BTST_FAIL               ; branch if Z clear  
               S06:00000A8C:  66 24
F00:0734        
F00:0735                   ; EA = #x  - BYTE only
F00:0736       
F00:0737                   move.l #0,d5              ; populate bit number to test
               S06:00000A8E:  7A 00
F00:0738                   move.l #3,d6              ; populate bit number to test
               S06:00000A90:  7C 03
F00:0739                   move.l #7,d7              ; populate bit number to test
               S06:00000A92:  7E 07
F00:0740                   
F00:0741                   btst.b d5,#$88
               S06:00000A94:  0B 3C 00 88
F00:0742                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A98:  66 18
F00:0743                   btst.b d6,#$88
               S06:00000A9A:  0D 3C 00 88
F00:0744                   beq BTST_FAIL               ; branch if Z set
               S06:00000A9E:  67 12
F00:0745                   btst.b d7,#$88
               S06:00000AA0:  0F 3C 00 88
F00:0746                   beq BTST_FAIL               ; branch if Z set
               S06:00000AA4:  67 0C
F00:0747                   
F00:0748           movea #TESTSTATUS,a0
               S06:00000AA6:  30 7C FF 00
F00:0749           move.b #$1,$06(a0)
               S06:00000AAA:  11 7C 00 01 00 06
F00:0750           rts
               S06:00000AB0:  4E 75
F00:0751           
F00:0752       BTST_FAIL: 
F00:0753          movea #TESTSTATUS,a0
               S06:00000AB2:  30 7C FF 00
F00:0754          move.b #$2,$06(a0)
               S06:00000AB6:  11 7C 00 02 00 06
F00:0755          rts
               S06:00000ABC:  4E 75
F00:0756        
F00:0757         
F00:0758       ;-----------------------------------------------------------
F00:0759       ;-----------------------------------------------------------
F00:0760       ; OPCODE : BCHG
F00:0761       ;-----------------------------------------------------------
F00:0762       ;-----------------------------------------------------------
F00:0763       op_BCHG: 
F00:0764       
F00:0765       
F00:0766       ;  Bit Number Static 
F00:0767           
F00:0768                   ; EA = Dn  - LONG only
F00:0769                   move.l #$80000001,d0      ; populate test data
               S06:00000ABE:  20 3C 80 00 00 01
F00:0770                   bchg.l #0,d0              
               S06:00000AC4:  08 40 00 00
F00:0771                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AC8:  67 00 04 10
F00:0772                   bchg.l #1,d0              ; 
               S06:00000ACC:  08 40 00 01
F00:0773                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AD0:  66 00 04 08
F00:0774                   bchg.l #31,d0             ; 
               S06:00000AD4:  08 40 00 1F
F00:0775                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AD8:  67 00 04 00
F00:0776                   cmpi.l #$00000002,d0
               S06:00000ADC:  0C 80 00 00 00 02
F00:0777                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AE2:  66 00 03 F6
F00:0778       
F00:0779                   
F00:0780                   ; EA = (An)  - BYTE only
F00:0781                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000AE6:  30 7C 01 00
F00:0782                   move.b #$81,(a0)          ; populate test data
               S06:00000AEA:  10 BC 00 81
F00:0783                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000AEE:  12 10
F00:0784                   bchg.b #0,(a0)            
               S06:00000AF0:  08 50 00 00
F00:0785                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AF4:  67 00 03 E4
F00:0786                   bchg.b #1,(a0)            ; 
               S06:00000AF8:  08 50 00 01
F00:0787                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AFC:  66 00 03 DC
F00:0788                   bchg.b #7,(a0)            ; 
               S06:00000B00:  08 50 00 07
F00:0789                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B04:  67 00 03 D4
F00:0790                   cmpi.b #$02,(a0)
               S06:00000B08:  0C 10 00 02
F00:0791                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B0C:  66 00 03 CC
F00:0792                   
F00:0793                   ; EA = (An)+  - BYTE only
F00:0794                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000B10:  30 7C 01 00
F00:0795                   move.b #$01,(a0)+         ; populate test data
               S06:00000B14:  10 FC 00 01
F00:0796                   move.b #$FC,(a0)+         ; populate test data
               S06:00000B18:  10 FC 00 FC
F00:0797                   move.b #$80,(a0)+         ; populate test data
               S06:00000B1C:  10 FC 00 80
F00:0798                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000B20:  30 7C 01 00
F00:0799                   bchg.b #0,(a0)+            
               S06:00000B24:  08 58 00 00
F00:0800                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B28:  67 00 03 B0
F00:0801                   bchg.b #1,(a0)+           ; 
               S06:00000B2C:  08 58 00 01
F00:0802                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B30:  66 00 03 A8
F00:0803                   bchg.b #7,(a0)+           ; 
               S06:00000B34:  08 58 00 07
F00:0804                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B38:  67 00 03 A0
F00:0805                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000B3C:  30 7C 01 00
F00:0806                   cmpi.b #$00,(a0)+
               S06:00000B40:  4A 18
F00:0807                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B42:  66 00 03 96
F00:0808                   cmpi.b #$FE,(a0)+
               S06:00000B46:  0C 18 00 FE
F00:0809                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B4A:  66 00 03 8E
F00:0810                   cmpi.b #$00,(a0)+
               S06:00000B4E:  4A 18
F00:0811                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B50:  66 00 03 88
F00:0812               
F00:0813                   ; EA = -(An)  - BYTE only
F00:0814                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B54:  30 7C 01 00
F00:0815                   move.b #$80,(a0)+         ; populate test data
               S06:00000B58:  10 FC 00 80
F00:0816                   move.b #$FC,(a0)+         ; populate test data
               S06:00000B5C:  10 FC 00 FC
F00:0817                   move.b #$01,(a0)+         ; populate test data
               S06:00000B60:  10 FC 00 01
F00:0818                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000B64:  30 7C 01 03
F00:0819                   bchg.b #0,-(a0)            
               S06:00000B68:  08 60 00 00
F00:0820                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B6C:  67 00 03 6C
F00:0821                   bchg.b #1,-(a0)           ; 
               S06:00000B70:  08 60 00 01
F00:0822                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B74:  66 00 03 64
F00:0823                   bchg.b #7,-(a0)           ; 
               S06:00000B78:  08 60 00 07
F00:0824                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B7C:  67 00 03 5C
F00:0825                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000B80:  30 7C 01 03
F00:0826                   cmpi.b #$00,-(a0)
               S06:00000B84:  4A 20
F00:0827                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B86:  66 00 03 52
F00:0828                   cmpi.b #$FE,-(a0)
               S06:00000B8A:  0C 20 00 FE
F00:0829                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B8E:  66 00 03 4A
F00:0830                   cmpi.b #$00,-(a0)
               S06:00000B92:  4A 20
F00:0831                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B94:  66 00 03 44
F00:0832               
F00:0833               
F00:0834                   ; EA = n(An)  - BYTE only
F00:0835                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B98:  30 7C 01 00
F00:0836                   move.b #$01,(a0)+         ; populate test data
               S06:00000B9C:  10 FC 00 01
F00:0837                   move.b #$FC,(a0)+         ; populate test data
               S06:00000BA0:  10 FC 00 FC
F00:0838                   move.b #$80,(a0)+         ; populate test data
               S06:00000BA4:  10 FC 00 80
F00:0839                   move.l #$00000100,a0      ; point to memory to address
               S06:00000BA8:  30 7C 01 00
F00:0840                   bchg.b #0,0(a0)            
               S06:00000BAC:  08 50 00 00
F00:0841                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BB0:  67 00 03 28
F00:0842                   bchg.b #1,1(a0)           ; 
               S06:00000BB4:  08 68 00 01 00 01
F00:0843                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BBA:  66 00 03 1E
F00:0844                   bchg.b #7,2(a0)           ; 
               S06:00000BBE:  08 68 00 07 00 02
F00:0845                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BC4:  67 00 03 14
F00:0846                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000BC8:  30 7C 01 00
F00:0847                   cmpi.b #$00,(a0)+
               S06:00000BCC:  4A 18
F00:0848                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BCE:  66 00 03 0A
F00:0849                   cmpi.b #$FE,(a0)+
               S06:00000BD2:  0C 18 00 FE
F00:0850                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BD6:  66 00 03 02
F00:0851                   cmpi.b #$00,(a0)+
               S06:00000BDA:  4A 18
F00:0852                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BDC:  66 00 02 FC
F00:0853                       
F00:0854                       
F00:0855                   ; EA = n(An,D.W)  - BYTE only
F00:0856                   move.l #$00000100,a0      ; point to memory to address
               S06:00000BE0:  30 7C 01 00
F00:0857                   move.l #$00000000,a1      ; point to memory to address
               S06:00000BE4:  93 C9
F00:0858                   move.l #$00000001,a2      ; point to memory to address
               S06:00000BE6:  34 7C 00 01
F00:0859                   move.l #$00000000,d0      ; point to memory to address
               S06:00000BEA:  70 00
F00:0860                   move.l #$00000001,d1      ; point to memory to address
               S06:00000BEC:  72 01
F00:0861                   bchg.b #0,0(a0,d0.w)            
               S06:00000BEE:  08 70 00 00 00 00
F00:0862                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BF4:  66 00 02 E4
F00:0863                   bchg.b #1,0(a0,d1.w)      ; 
               S06:00000BF8:  08 70 00 01 10 00
F00:0864                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BFE:  67 00 02 DA
F00:0865                   bchg.b #7,1(a0,d1.w)      ; 
               S06:00000C02:  08 70 00 07 10 01
F00:0866                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C08:  66 00 02 D0
F00:0867                   ; EA = n(An,D.L)  - BYTE only
F00:0868                   bchg.b #0,0(a0,d0.l)  
               S06:00000C0C:  08 70 00 00 08 00
F00:0869                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C12:  67 00 02 C6
F00:0870                   bchg.b #1,0(a0,d1.l)      ; 
               S06:00000C16:  08 70 00 01 18 00
F00:0871                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C1C:  66 00 02 BC
F00:0872                   bchg.b #7,1(a0,d1.l)      ; 
               S06:00000C20:  08 70 00 07 18 01
F00:0873                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C26:  67 00 02 B2
F00:0874                   ; EA = n(An,A.W)  - BYTE only
F00:0875                   bchg.b #0,0(a0,a1.w)            
               S06:00000C2A:  08 70 00 00 90 00
F00:0876                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C30:  66 00 02 A8
F00:0877                   bchg.b #1,0(a0,a2.w)      ; 
               S06:00000C34:  08 70 00 01 A0 00
F00:0878                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C3A:  67 00 02 9E
F00:0879                   bchg.b #7,1(a0,a2.w)      ; 
               S06:00000C3E:  08 70 00 07 A0 01
F00:0880                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C44:  66 00 02 94
F00:0881                   ; EA = n(An,A.L)  - BYTE only
F00:0882                   bchg.b #0,0(a0,a1.l)  
               S06:00000C48:  08 70 00 00 98 00
F00:0883                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C4E:  67 00 02 8A
F00:0884                   bchg.b #1,0(a0,a2.l)      ; 
               S06:00000C52:  08 70 00 01 A8 00
F00:0885                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C58:  66 00 02 80
F00:0886                   bchg.b #7,1(a0,a2.l)      ; 
               S06:00000C5C:  08 70 00 07 A8 01
F00:0887                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C62:  67 00 02 76
F00:0888                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000C66:  30 7C 01 00
F00:0889                   cmpi.b #$00,(a0)+
               S06:00000C6A:  4A 18
F00:0890                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C6C:  66 00 02 6C
F00:0891                   cmpi.b #$FE,(a0)+
               S06:00000C70:  0C 18 00 FE
F00:0892                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C74:  66 00 02 64
F00:0893                   cmpi.b #$00,(a0)+
               S06:00000C78:  4A 18
F00:0894                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C7A:  66 00 02 5E
F00:0895           
F00:0896               
F00:0897                   ; EA = x.W  - BYTE only
F00:0898                   bchg.b #0,$0100            
               S06:00000C7E:  08 78 00 00 01 00
F00:0899                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C84:  66 00 02 54
F00:0900                   bchg.b #1,$0101           ; 
               S06:00000C88:  08 78 00 01 01 01
F00:0901                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C8E:  67 00 02 4A
F00:0902                   bchg.b #7,$0102           ; 
               S06:00000C92:  08 78 00 07 01 02
F00:0903                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C98:  66 00 02 40
F00:0904                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000C9C:  30 7C 01 00
F00:0905                   cmpi.b #$01,(a0)+
               S06:00000CA0:  0C 18 00 01
F00:0906                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CA4:  66 00 02 34
F00:0907                   cmpi.b #$FC,(a0)+
               S06:00000CA8:  0C 18 00 FC
F00:0908                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CAC:  66 00 02 2C
F00:0909                   cmpi.b #$80,(a0)+
               S06:00000CB0:  0C 18 00 80
F00:0910                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CB4:  66 00 02 24
F00:0911                   
F00:0912                   ; EA = x.L  - BYTE only
F00:0913                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000CB8:  20 7C 00 0F 01 00
F00:0914                   move.b #$01,(a0)+         ; populate test data
               S06:00000CBE:  10 FC 00 01
F00:0915                   move.b #$FC,(a0)+         ; populate test data
               S06:00000CC2:  10 FC 00 FC
F00:0916                   move.b #$80,(a0)+         ; populate test data
               S06:00000CC6:  10 FC 00 80
F00:0917                   bchg.b #0,$000F0100 
               S06:00000CCA:  08 79 00 00 00 0F 01 00
F00:0918                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CD2:  67 00 02 06
F00:0919                   bchg.b #1,$000F0101       ; 
               S06:00000CD6:  08 79 00 01 00 0F 01 01
F00:0920                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CDE:  66 00 01 FA
F00:0921                   bchg.b #7,$000F0102       ; 
               S06:00000CE2:  08 79 00 07 00 0F 01 02
F00:0922                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CEA:  67 00 01 EE
F00:0923                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CEE:  30 7C 01 00
F00:0924                   cmpi.b #$01,(a0)+
               S06:00000CF2:  0C 18 00 01
F00:0925                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CF6:  66 00 01 E2
F00:0926                   cmpi.b #$FC,(a0)+
               S06:00000CFA:  0C 18 00 FC
F00:0927                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CFE:  66 00 01 DA
F00:0928                   cmpi.b #$80,(a0)+
               S06:00000D02:  0C 18 00 80
F00:0929                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D06:  66 00 01 D2
F00:0930                   
F00:0931       
F00:0932       ; Bit Number Dynamic
F00:0933           
F00:0934                   ; EA = Dn  - LONG only
F00:0935                   move.l #$80000001,d0      ; populate test data
               S06:00000D0A:  20 3C 80 00 00 01
F00:0936                   move.l #0,d5              ; populate bit number to test
               S06:00000D10:  7A 00
F00:0937                   move.l #1,d6              ; populate bit number to test
               S06:00000D12:  7C 01
F00:0938                   move.l #31,d7              ; populate bit number to test
               S06:00000D14:  7E 1F
F00:0939                   
F00:0940                   bchg.l d5,d0              
               S06:00000D16:  0B 40
F00:0941                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D18:  67 00 01 C0
F00:0942                   bchg.l d6,d0              ; 
               S06:00000D1C:  0D 40
F00:0943                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D1E:  66 00 01 BA
F00:0944                   bchg.l d7,d0             ; 
               S06:00000D22:  0F 40
F00:0945                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D24:  67 00 01 B4
F00:0946                   cmpi.l #$00000002,d0
               S06:00000D28:  0C 80 00 00 00 02
F00:0947                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D2E:  66 00 01 AA
F00:0948       
F00:0949                   
F00:0950                   ; EA = (An)  - BYTE only
F00:0951                   move.l #0,d5              ; populate bit number to test
               S06:00000D32:  7A 00
F00:0952                   move.l #1,d6              ; populate bit number to test
               S06:00000D34:  7C 01
F00:0953                   move.l #7,d7              ; populate bit number to test           
               S06:00000D36:  7E 07
F00:0954                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000D38:  30 7C 01 00
F00:0955                   move.b #$81,(a0)          ; populate test data
               S06:00000D3C:  10 BC 00 81
F00:0956                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000D40:  12 10
F00:0957                   bchg.b d5,(a0)            
               S06:00000D42:  0B 50
F00:0958                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D44:  67 00 01 94
F00:0959                   bchg.b d6,(a0)            ; 
               S06:00000D48:  0D 50
F00:0960                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D4A:  66 00 01 8E
F00:0961                   bchg.b d7,(a0)            ; 
               S06:00000D4E:  0F 50
F00:0962                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D50:  67 00 01 88
F00:0963                   cmpi.b #$02,(a0)
               S06:00000D54:  0C 10 00 02
F00:0964                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D58:  66 00 01 80
F00:0965                   
F00:0966           
F00:0967                   ; EA = (An)+  - BYTE only
F00:0968                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D5C:  30 7C 01 00
F00:0969                   move.b #$01,(a0)+         ; populate test data
               S06:00000D60:  10 FC 00 01
F00:0970                   move.b #$FC,(a0)+         ; populate test data
               S06:00000D64:  10 FC 00 FC
F00:0971                   move.b #$80,(a0)+         ; populate test data
               S06:00000D68:  10 FC 00 80
F00:0972                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D6C:  30 7C 01 00
F00:0973                   bchg.b d5,(a0)+            
               S06:00000D70:  0B 58
F00:0974                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D72:  67 00 01 66
F00:0975                   bchg.b d6,(a0)+           ; 
               S06:00000D76:  0D 58
F00:0976                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D78:  66 00 01 60
F00:0977                   bchg.b d7,(a0)+           ; 
               S06:00000D7C:  0F 58
F00:0978                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D7E:  67 00 01 5A
F00:0979                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D82:  30 7C 01 00
F00:0980                   cmpi.b #$00,(a0)+
               S06:00000D86:  4A 18
F00:0981                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D88:  66 00 01 50
F00:0982                   cmpi.b #$FE,(a0)+
               S06:00000D8C:  0C 18 00 FE
F00:0983                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D90:  66 00 01 48
F00:0984                   cmpi.b #$00,(a0)+
               S06:00000D94:  4A 18
F00:0985                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D96:  66 00 01 42
F00:0986                       
F00:0987                   ; EA = -(An)  - BYTE only
F00:0988                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D9A:  30 7C 01 00
F00:0989                   move.b #$80,(a0)+         ; populate test data
               S06:00000D9E:  10 FC 00 80
F00:0990                   move.b #$FC,(a0)+         ; populate test data
               S06:00000DA2:  10 FC 00 FC
F00:0991                   move.b #$01,(a0)+         ; populate test data
               S06:00000DA6:  10 FC 00 01
F00:0992                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000DAA:  30 7C 01 03
F00:0993                   bchg.b d5,-(a0)            
               S06:00000DAE:  0B 60
F00:0994                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DB0:  67 00 01 28
F00:0995                   bchg.b d6,-(a0)           ; 
               S06:00000DB4:  0D 60
F00:0996                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DB6:  66 00 01 22
F00:0997                   bchg.b d7,-(a0)           ; 
               S06:00000DBA:  0F 60
F00:0998                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DBC:  67 00 01 1C
F00:0999                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000DC0:  30 7C 01 03
F00:1000                   cmpi.b #$00,-(a0)
               S06:00000DC4:  4A 20
F00:1001                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DC6:  66 00 01 12
F00:1002                   cmpi.b #$FE,-(a0)
               S06:00000DCA:  0C 20 00 FE
F00:1003                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DCE:  66 00 01 0A
F00:1004                   cmpi.b #$00,-(a0)
               S06:00000DD2:  4A 20
F00:1005                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DD4:  66 00 01 04
F00:1006                       
F00:1007                   ; EA = n(An)  - BYTE only
F00:1008                   move.l #$00000100,a0      ; point to memory to address
               S06:00000DD8:  30 7C 01 00
F00:1009                   move.b #$01,(a0)+         ; populate test data
               S06:00000DDC:  10 FC 00 01
F00:1010                   move.b #$FC,(a0)+         ; populate test data
               S06:00000DE0:  10 FC 00 FC
F00:1011                   move.b #$80,(a0)+         ; populate test data
               S06:00000DE4:  10 FC 00 80
F00:1012                   move.l #$00000100,a0      ; point to memory to address
               S06:00000DE8:  30 7C 01 00
F00:1013                   bchg.b d5,0(a0)            
               S06:00000DEC:  0B 50
F00:1014                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DEE:  67 00 00 EA
F00:1015                   bchg.b d6,1(a0)           ; 
               S06:00000DF2:  0D 68 00 01
F00:1016                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DF6:  66 00 00 E2
F00:1017                   bchg.b d7,2(a0)           ; 
               S06:00000DFA:  0F 68 00 02
F00:1018                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DFE:  67 00 00 DA
F00:1019                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000E02:  30 7C 01 00
F00:1020                   cmpi.b #$00,(a0)+
               S06:00000E06:  4A 18
F00:1021                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E08:  66 00 00 D0
F00:1022                   cmpi.b #$FE,(a0)+
               S06:00000E0C:  0C 18 00 FE
F00:1023                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E10:  66 00 00 C8
F00:1024                   cmpi.b #$00,(a0)+
               S06:00000E14:  4A 18
F00:1025                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E16:  66 00 00 C2
F00:1026                       
F00:1027                   ; EA = n(An,R.W)  - BYTE only
F00:1028                   move.l #$00000100,a0      ; point to memory to address
               S06:00000E1A:  30 7C 01 00
F00:1029                   move.l #$00000000,a1      ; point to memory to address
               S06:00000E1E:  93 C9
F00:1030                   move.l #$00000001,a2      ; point to memory to address
               S06:00000E20:  34 7C 00 01
F00:1031                   move.l #$00000000,d0      ; point to memory to address
               S06:00000E24:  70 00
F00:1032                   move.l #$00000001,d1      ; point to memory to address
               S06:00000E26:  72 01
F00:1033                   bchg.b d5,0(a0,d0.w)            
               S06:00000E28:  0B 70 00 00
F00:1034                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E2C:  66 00 00 AC
F00:1035                   bchg.b d6,0(a0,d1.w)      ; 
               S06:00000E30:  0D 70 10 00
F00:1036                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E34:  67 00 00 A4
F00:1037                   bchg.b d7,1(a0,d1.w)      ; 
               S06:00000E38:  0F 70 10 01
F00:1038                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E3C:  66 00 00 9C
F00:1039                   ; EA = n(An,R.L)  - BYTE only
F00:1040                   bchg.b d5,0(a0,d0.l)  
               S06:00000E40:  0B 70 08 00
F00:1041                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E44:  67 00 00 94
F00:1042                   bchg.b d6,0(a0,d1.l)      ; 
               S06:00000E48:  0D 70 18 00
F00:1043                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E4C:  66 00 00 8C
F00:1044                   bchg.b d7,1(a0,d1.l)      ; 
               S06:00000E50:  0F 70 18 01
F00:1045                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E54:  67 00 00 84
F00:1046                   ; EA = n(An,A.W)  - BYTE only
F00:1047                   bchg.b d5,0(a0,a1.w)            
               S06:00000E58:  0B 70 90 00
F00:1048                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E5C:  66 7C
F00:1049                   bchg.b d6,0(a0,a2.w)      ; 
               S06:00000E5E:  0D 70 A0 00
F00:1050                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E62:  67 76
F00:1051                   bchg.b d7,1(a0,a2.w)      ; 
               S06:00000E64:  0F 70 A0 01
F00:1052                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E68:  66 70
F00:1053                   ; EA = n(An,A.L)  - BYTE only
F00:1054                   bchg.b d5,0(a0,a1.l)  
               S06:00000E6A:  0B 70 98 00
F00:1055                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E6E:  67 6A
F00:1056                   bchg.b d6,0(a0,a2.l)      ; 
               S06:00000E70:  0D 70 A8 00
F00:1057                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E74:  66 64
F00:1058                   bchg.b d7,1(a0,a2.l)      ; 
               S06:00000E76:  0F 70 A8 01
F00:1059                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E7A:  67 5E
F00:1060                   cmpi.b #$00,(a0)+
               S06:00000E7C:  4A 18
F00:1061                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E7E:  66 5A
F00:1062                   
F00:1063                   ; EA = x.W  - BYTE only
F00:1064                   bchg.b d5,$0100            
               S06:00000E80:  0B 78 01 00
F00:1065                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E84:  66 54
F00:1066                   bchg.b d6,$0101           ; 
               S06:00000E86:  0D 78 01 01
F00:1067                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E8A:  67 4E
F00:1068                   bchg.b d7,$0102           ; 
               S06:00000E8C:  0F 78 01 02
F00:1069                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E90:  66 48
F00:1070                   cmpi.b #$FC,(a0)+
               S06:00000E92:  0C 18 00 FC
F00:1071                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E96:  66 42
F00:1072                           
F00:1073                   ; EA = x.L  - BYTE only
F00:1074                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000E98:  20 7C 00 0F 01 00
F00:1075                   move.b #$01,(a0)+         ; populate test data
               S06:00000E9E:  10 FC 00 01
F00:1076                   move.b #$FC,(a0)+         ; populate test data
               S06:00000EA2:  10 FC 00 FC
F00:1077                   move.b #$80,(a0)+         ; populate test data
               S06:00000EA6:  10 FC 00 80
F00:1078                   bchg.b d5,$000F0100 
               S06:00000EAA:  0B 79 00 0F 01 00
F00:1079                   beq BCHG_FAIL               ; branch if Z set
               S06:00000EB0:  67 28
F00:1080                   bchg.b d6,$000F0101       ; 
               S06:00000EB2:  0D 79 00 0F 01 01
F00:1081                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000EB8:  66 20
F00:1082                   bchg.b d7,$000F0102       ; 
               S06:00000EBA:  0F 79 00 0F 01 02
F00:1083                   beq BCHG_FAIL               ; branch if Z set
               S06:00000EC0:  67 18
F00:1084                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:00000EC2:  20 7C 00 0F 01 01
F00:1085                   cmpi.b #$FE,(a0)
               S06:00000EC8:  0C 10 00 FE
F00:1086                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000ECC:  66 0C
F00:1087                           
F00:1088       
F00:1089           movea #TESTSTATUS,a0
               S06:00000ECE:  30 7C FF 00
F00:1090           move.b #$1,$07(a0)
               S06:00000ED2:  11 7C 00 01 00 07
F00:1091           rts
               S06:00000ED8:  4E 75
F00:1092           
F00:1093       BCHG_FAIL:
F00:1094           movea #TESTSTATUS,a0
               S06:00000EDA:  30 7C FF 00
F00:1095           move.b #$2,$07(a0)
               S06:00000EDE:  11 7C 00 02 00 07
F00:1096           rts
               S06:00000EE4:  4E 75
F00:1097       
F00:1098         
F00:1099       ;-----------------------------------------------------------
F00:1100       ;-----------------------------------------------------------
F00:1101       ; OPCODE : BCLR
F00:1102       ;-----------------------------------------------------------
F00:1103       ;-----------------------------------------------------------
F00:1104       op_BCLR: 
F00:1105       
F00:1106       
F00:1107       ;  Bit Number Static 
F00:1108           
F00:1109                   ; EA = Dn  - LONG only
F00:1110                   move.l #$FF0000FF,d0      ; populate test data
               S06:00000EE6:  20 3C FF 00 00 FF
F00:1111                   bclr.l #0,d0              
               S06:00000EEC:  08 80 00 00
F00:1112                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000EF0:  67 00 03 EA
F00:1113                   bclr.l #1,d0              ; 
               S06:00000EF4:  08 80 00 01
F00:1114                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000EF8:  67 00 03 E2
F00:1115                   bclr.l #15,d0             ; 
               S06:00000EFC:  08 80 00 0F
F00:1116                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F00:  66 00 03 DA
F00:1117                   bclr.l #31,d0             ; 
               S06:00000F04:  08 80 00 1F
F00:1118                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F08:  67 00 03 D2
F00:1119                   cmpi.l #$7F0000FC,d0
               S06:00000F0C:  0C 80 7F 00 00 FC
F00:1120                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F12:  66 00 03 C8
F00:1121       
F00:1122                   
F00:1123                   ; EA = (An)  - BYTE only
F00:1124                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000F16:  30 7C 01 00
F00:1125                   move.b #$0F,(a0)          ; populate test data
               S06:00000F1A:  10 BC 00 0F
F00:1126                   bclr.b #0,(a0)            
               S06:00000F1E:  08 90 00 00
F00:1127                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F22:  67 00 03 B8
F00:1128                   bclr.b #7,(a0)            ; 
               S06:00000F26:  08 90 00 07
F00:1129                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F2A:  66 00 03 B0
F00:1130                   cmpi.b #$0E,(a0)
               S06:00000F2E:  0C 10 00 0E
F00:1131                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F32:  66 00 03 A8
F00:1132                   
F00:1133                   ; EA = (An)+  - BYTE only
F00:1134                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F36:  30 7C 01 00
F00:1135                   move.b #$01,(a0)+         ; populate test data
               S06:00000F3A:  10 FC 00 01
F00:1136                   move.b #$00,(a0)+         ; populate test data
               S06:00000F3E:  10 FC 00 00
F00:1137                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F42:  30 7C 01 00
F00:1138                   bclr.b #0,(a0)+            
               S06:00000F46:  08 98 00 00
F00:1139                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F4A:  67 00 03 90
F00:1140                   bclr.b #1,(a0)+           ; 
               S06:00000F4E:  08 98 00 01
F00:1141                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F52:  66 00 03 88
F00:1142                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F56:  30 7C 01 00
F00:1143                   cmpi.b #$00,(a0)+
               S06:00000F5A:  4A 18
F00:1144                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F5C:  66 00 03 7E
F00:1145                   cmpi.b #$00,(a0)+
               S06:00000F60:  4A 18
F00:1146                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F62:  66 00 03 78
F00:1147        
F00:1148               
F00:1149                   ; EA = -(An)  - BYTE only
F00:1150                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F66:  30 7C 01 00
F00:1151                   move.b #$01,(a0)+         ; populate test data
               S06:00000F6A:  10 FC 00 01
F00:1152                   move.b #$80,(a0)+         ; populate test data
               S06:00000F6E:  10 FC 00 80
F00:1153                   bclr.b #7,-(a0)            
               S06:00000F72:  08 A0 00 07
F00:1154                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F76:  67 00 03 64
F00:1155                   bclr.b #0,-(a0)           ; 
               S06:00000F7A:  08 A0 00 00
F00:1156                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F7E:  67 00 03 5C
F00:1157                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:00000F82:  30 7C 01 02
F00:1158                   cmpi.b #$00,-(a0)
               S06:00000F86:  4A 20
F00:1159                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F88:  66 00 03 52
F00:1160                   cmpi.b #$00,-(a0)
               S06:00000F8C:  4A 20
F00:1161                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F8E:  66 00 03 4C
F00:1162       
F00:1163               
F00:1164                   ; EA = n(An)  - BYTE only
F00:1165                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F92:  30 7C 01 00
F00:1166                   move.b #$FF,(a0)+         ; populate test data
               S06:00000F96:  10 FC 00 FF
F00:1167                   move.b #$FF,(a0)+         ; populate test data
               S06:00000F9A:  10 FC 00 FF
F00:1168                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F9E:  30 7C 01 00
F00:1169                   bclr.b #0,0(a0)            
               S06:00000FA2:  08 90 00 00
F00:1170                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FA6:  67 00 03 34
F00:1171                   bclr.b #4,1(a0)           ; 
               S06:00000FAA:  08 A8 00 04 00 01
F00:1172                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FB0:  67 00 03 2A
F00:1173                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000FB4:  30 7C 01 00
F00:1174                   cmpi.b #$FE,(a0)+
               S06:00000FB8:  0C 18 00 FE
F00:1175                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FBC:  66 00 03 1E
F00:1176                   cmpi.b #$EF,(a0)+
               S06:00000FC0:  0C 18 00 EF
F00:1177                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FC4:  66 00 03 16
F00:1178       
F00:1179                       
F00:1180                   ; EA = n(An,D.W)  - BYTE only
F00:1181                   move.l #$00000100,a0      ; point to memory to address
               S06:00000FC8:  30 7C 01 00
F00:1182                   move.l #$00000000,a1      ; point to memory to address
               S06:00000FCC:  93 C9
F00:1183                   move.l #$00000001,a2      ; point to memory to address
               S06:00000FCE:  34 7C 00 01
F00:1184                   move.l #$00000000,d0      ; point to memory to address
               S06:00000FD2:  70 00
F00:1185                   move.l #$00000001,d1      ; point to memory to address
               S06:00000FD4:  72 01
F00:1186                   move.b #$FF,(a0)+         ; populate test data
               S06:00000FD6:  10 FC 00 FF
F00:1187                   move.b #$FF,(a0)+         ; populate test data
               S06:00000FDA:  10 FC 00 FF
F00:1188                   move.l #$00000100,a0      ; point to memory to address
               S06:00000FDE:  30 7C 01 00
F00:1189                   bclr.b #0,0(a0,d0.w)            
               S06:00000FE2:  08 B0 00 00 00 00
F00:1190                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FE8:  67 00 02 F2
F00:1191                   bclr.b #1,0(a0,d1.w)      ; 
               S06:00000FEC:  08 B0 00 01 10 00
F00:1192                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FF2:  67 00 02 E8
F00:1193                   bclr.b #2,1(a0,d1.w)      ; 
               S06:00000FF6:  08 B0 00 02 10 01
F00:1194                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FFC:  66 00 02 DE
F00:1195                   ; EA = n(An,D.L)  - BYTE only
F00:1196                   bclr.b #3,0(a0,d0.l)  
               S06:00001000:  08 B0 00 03 08 00
F00:1197                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001006:  67 00 02 D4
F00:1198                   bclr.b #4,0(a0,d1.l)      ; 
               S06:0000100A:  08 B0 00 04 18 00
F00:1199                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001010:  67 00 02 CA
F00:1200                   bclr.b #5,1(a0,d1.l)      ; 
               S06:00001014:  08 B0 00 05 18 01
F00:1201                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000101A:  66 00 02 C0
F00:1202                   ; EA = n(An,A.W)  - BYTE only
F00:1203                   bclr.b #6,0(a0,a1.w)            
               S06:0000101E:  08 B0 00 06 90 00
F00:1204                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001024:  67 00 02 B6
F00:1205                   bclr.b #1,0(a0,a2.w)      ; 
               S06:00001028:  08 B0 00 01 A0 00
F00:1206                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000102E:  66 00 02 AC
F00:1207                   bclr.b #7,1(a0,a2.w)      ; 
               S06:00001032:  08 B0 00 07 A0 01
F00:1208                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001038:  67 00 02 A2
F00:1209                   ; EA = n(An,A.L)  - BYTE only
F00:1210                   bclr.b #0,0(a0,a1.l)  
               S06:0000103C:  08 B0 00 00 98 00
F00:1211                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001042:  66 00 02 98
F00:1212                   bclr.b #0,0(a0,a2.l)      ; 
               S06:00001046:  08 B0 00 00 A8 00
F00:1213                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000104C:  67 00 02 8E
F00:1214                   bclr.b #1,1(a0,a2.l)      ; 
               S06:00001050:  08 B0 00 01 A8 01
F00:1215                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001056:  66 00 02 84
F00:1216                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000105A:  30 7C 01 00
F00:1217                   cmpi.b #$B6,(a0)+
               S06:0000105E:  0C 18 00 B6
F00:1218                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001062:  66 00 02 78
F00:1219                   cmpi.b #$EC,(a0)+
               S06:00001066:  0C 18 00 EC
F00:1220                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000106A:  66 00 02 70
F00:1221                   cmpi.b #$59,(a0)+
               S06:0000106E:  0C 18 00 59
F00:1222                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001072:  67 00 02 68
F00:1223           
F00:1224               
F00:1225                   ; EA = x.W  - BYTE only
F00:1226                   move.l #$00000100,a0      ; point to memory to address
               S06:00001076:  30 7C 01 00
F00:1227                   move.b #$FF,(a0)+         ; populate test data
               S06:0000107A:  10 FC 00 FF
F00:1228                   bclr.b #0,$0100            
               S06:0000107E:  08 B8 00 00 01 00
F00:1229                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001084:  67 00 02 56
F00:1230                   bclr.b #1,$0100           ; 
               S06:00001088:  08 B8 00 01 01 00
F00:1231                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000108E:  67 00 02 4C
F00:1232                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001092:  30 7C 01 00
F00:1233                   cmpi.b #$FC,(a0)+
               S06:00001096:  0C 18 00 FC
F00:1234                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000109A:  66 00 02 40
F00:1235       
F00:1236                   
F00:1237                   ; EA = x.L  - BYTE only
F00:1238                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:0000109E:  20 7C 00 0F 01 00
F00:1239                   move.b #$FF,(a0)          ; populate test data
               S06:000010A4:  10 BC 00 FF
F00:1240                   bclr.b #0,$000F0100 
               S06:000010A8:  08 B9 00 00 00 0F 01 00
F00:1241                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010B0:  67 00 02 2A
F00:1242                   bclr.b #1,$000F0100       ; 
               S06:000010B4:  08 B9 00 01 00 0F 01 00
F00:1243                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010BC:  67 00 02 1E
F00:1244                   bclr.b #2,$000F0100       ; 
               S06:000010C0:  08 B9 00 02 00 0F 01 00
F00:1245                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010C8:  67 00 02 12
F00:1246                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000010CC:  20 7C 00 0F 01 00
F00:1247                   cmpi.b #$F8,(a0)+
               S06:000010D2:  0C 18 00 F8
F00:1248                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010D6:  66 00 02 04
F00:1249       
F00:1250       
F00:1251       ; Bit Number Dynamic
F00:1252           
F00:1253                   ; EA = Dn  - LONG only
F00:1254                   move.l #$FF00FF00,d0      ; populate test data
               S06:000010DA:  20 3C FF 00 FF 00
F00:1255                   move.l #0,d5              ; populate bit number to test
               S06:000010E0:  7A 00
F00:1256                   move.l #1,d6              ; populate bit number to test
               S06:000010E2:  7C 01
F00:1257                   move.l #31,d7              ; populate bit number to test
               S06:000010E4:  7E 1F
F00:1258                   
F00:1259                   bclr.l d5,d0              
               S06:000010E6:  0B 80
F00:1260                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010E8:  66 00 01 F2
F00:1261                   bclr.l d6,d0              ; 
               S06:000010EC:  0D 80
F00:1262                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010EE:  66 00 01 EC
F00:1263                   bclr.l d7,d0             ; 
               S06:000010F2:  0F 80
F00:1264                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010F4:  67 00 01 E6
F00:1265                   cmpi.l #$7F00FF00,d0
               S06:000010F8:  0C 80 7F 00 FF 00
F00:1266                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010FE:  66 00 01 DC
F00:1267       
F00:1268                   
F00:1269                   ; EA = (An)  - BYTE only
F00:1270                   move.l #0,d5              ; populate bit number to test
               S06:00001102:  7A 00
F00:1271                   move.l #1,d6              ; populate bit number to test
               S06:00001104:  7C 01
F00:1272                   move.l #7,d7              ; populate bit number to test           
               S06:00001106:  7E 07
F00:1273                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001108:  30 7C 01 00
F00:1274                   move.b #$81,(a0)          ; populate test data
               S06:0000110C:  10 BC 00 81
F00:1275                   bclr.b d5,(a0)            
               S06:00001110:  0B 90
F00:1276                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001112:  67 00 01 C8
F00:1277                   bclr.b d6,(a0)            ; 
               S06:00001116:  0D 90
F00:1278                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001118:  66 00 01 C2
F00:1279                   bclr.b d7,(a0)            ; 
               S06:0000111C:  0F 90
F00:1280                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000111E:  67 00 01 BC
F00:1281                   cmpi.b #$00,(a0)
               S06:00001122:  4A 10
F00:1282                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001124:  66 00 01 B6
F00:1283                   
F00:1284           
F00:1285                   ; EA = (An)+  - BYTE only
F00:1286                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001128:  30 7C 01 00
F00:1287                   move.b #$01,(a0)+         ; populate test data
               S06:0000112C:  10 FC 00 01
F00:1288                   move.b #$FC,(a0)+         ; populate test data
               S06:00001130:  10 FC 00 FC
F00:1289                   move.b #$80,(a0)+         ; populate test data
               S06:00001134:  10 FC 00 80
F00:1290                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001138:  30 7C 01 00
F00:1291                   bclr.b d5,(a0)+            
               S06:0000113C:  0B 98
F00:1292                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000113E:  67 00 01 9C
F00:1293                   bclr.b d6,(a0)+           ; 
               S06:00001142:  0D 98
F00:1294                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001144:  66 00 01 96
F00:1295                   bclr.b d7,(a0)+           ; 
               S06:00001148:  0F 98
F00:1296                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000114A:  67 00 01 90
F00:1297                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000114E:  30 7C 01 00
F00:1298                   cmpi.b #$00,(a0)+
               S06:00001152:  4A 18
F00:1299                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001154:  66 00 01 86
F00:1300                   cmpi.b #$FC,(a0)+
               S06:00001158:  0C 18 00 FC
F00:1301                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000115C:  66 00 01 7E
F00:1302                   cmpi.b #$00,(a0)+
               S06:00001160:  4A 18
F00:1303                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001162:  66 00 01 78
F00:1304                       
F00:1305                   ; EA = -(An)  - BYTE only
F00:1306                   move.l #$00000100,a0      ; point to memory to address
               S06:00001166:  30 7C 01 00
F00:1307                   move.b #$80,(a0)+         ; populate test data
               S06:0000116A:  10 FC 00 80
F00:1308                   move.b #$FC,(a0)+         ; populate test data
               S06:0000116E:  10 FC 00 FC
F00:1309                   move.b #$01,(a0)+         ; populate test data
               S06:00001172:  10 FC 00 01
F00:1310                   move.l #$00000103,a0      ; point to memory to address 
               S06:00001176:  30 7C 01 03
F00:1311                   bclr.b d5,-(a0)            
               S06:0000117A:  0B A0
F00:1312                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000117C:  67 00 01 5E
F00:1313                   bclr.b d6,-(a0)           ; 
               S06:00001180:  0D A0
F00:1314                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001182:  66 00 01 58
F00:1315                   bclr.b d7,-(a0)           ; 
               S06:00001186:  0F A0
F00:1316                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001188:  67 00 01 52
F00:1317                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:0000118C:  30 7C 01 03
F00:1318                   cmpi.b #$00,-(a0)
               S06:00001190:  4A 20
F00:1319                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001192:  66 00 01 48
F00:1320                   cmpi.b #$FC,-(a0)
               S06:00001196:  0C 20 00 FC
F00:1321                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000119A:  66 00 01 40
F00:1322                   cmpi.b #$00,-(a0)
               S06:0000119E:  4A 20
F00:1323                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011A0:  66 00 01 3A
F00:1324                       
F00:1325                   ; EA = n(An)  - BYTE only
F00:1326                   move.l #$00000100,a0      ; point to memory to address
               S06:000011A4:  30 7C 01 00
F00:1327                   move.b #$01,(a0)+         ; populate test data
               S06:000011A8:  10 FC 00 01
F00:1328                   move.b #$FC,(a0)+         ; populate test data
               S06:000011AC:  10 FC 00 FC
F00:1329                   move.b #$80,(a0)+         ; populate test data
               S06:000011B0:  10 FC 00 80
F00:1330                   move.l #$00000100,a0      ; point to memory to address
               S06:000011B4:  30 7C 01 00
F00:1331                   bclr.b d5,0(a0)            
               S06:000011B8:  0B 90
F00:1332                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011BA:  67 00 01 20
F00:1333                   bclr.b d6,1(a0)           ; 
               S06:000011BE:  0D A8 00 01
F00:1334                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011C2:  66 00 01 18
F00:1335                   bclr.b d7,2(a0)           ; 
               S06:000011C6:  0F A8 00 02
F00:1336                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011CA:  67 00 01 10
F00:1337                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000011CE:  30 7C 01 00
F00:1338                   cmpi.b #$00,(a0)+
               S06:000011D2:  4A 18
F00:1339                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011D4:  66 00 01 06
F00:1340                   cmpi.b #$FC,(a0)+
               S06:000011D8:  0C 18 00 FC
F00:1341                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011DC:  66 00 00 FE
F00:1342                   cmpi.b #$00,(a0)+
               S06:000011E0:  4A 18
F00:1343                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011E2:  66 00 00 F8
F00:1344                       
F00:1345                   ; EA = n(An,R.W)  - BYTE only
F00:1346                   move.l #$00000100,a0      ; point to memory to address
               S06:000011E6:  30 7C 01 00
F00:1347                   move.b #$FF,(a0)+         ; populate test data
               S06:000011EA:  10 FC 00 FF
F00:1348                   move.b #$FF,(a0)+         ; populate test data
               S06:000011EE:  10 FC 00 FF
F00:1349                   move.b #$FF,(a0)+         ; populate test data
               S06:000011F2:  10 FC 00 FF
F00:1350                   move.l #$00000103,a0      ; point to memory to address 
               S06:000011F6:  30 7C 01 03
F00:1351                   move.l #$00000100,a0      ; point to memory to address
               S06:000011FA:  30 7C 01 00
F00:1352                   move.l #$00000000,a1      ; point to memory to address
               S06:000011FE:  93 C9
F00:1353                   move.l #$00000001,a2      ; point to memory to address
               S06:00001200:  34 7C 00 01
F00:1354                   move.l #$00000000,d0      ; point to memory to address
               S06:00001204:  70 00
F00:1355                   move.l #$00000001,d1      ; point to memory to address
               S06:00001206:  72 01
F00:1356                   bclr.b d5,0(a0,d0.w)            
               S06:00001208:  0B B0 00 00
F00:1357                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000120C:  67 00 00 CE
F00:1358                   bclr.b d6,0(a0,d1.w)      ; 
               S06:00001210:  0D B0 10 00
F00:1359                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001214:  67 00 00 C6
F00:1360                   bclr.b d7,1(a0,d1.w)      ; 
               S06:00001218:  0F B0 10 01
F00:1361                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000121C:  67 00 00 BE
F00:1362                   ; EA = n(An,R.L)  - BYTE only
F00:1363                   bclr.b d5,0(a0,d0.l)  
               S06:00001220:  0B B0 08 00
F00:1364                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001224:  66 00 00 B6
F00:1365                   bclr.b d6,0(a0,d1.l)      ; 
               S06:00001228:  0D B0 18 00
F00:1366                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000122C:  66 00 00 AE
F00:1367                   bclr.b d7,1(a0,d1.l)      ; 
               S06:00001230:  0F B0 18 01
F00:1368                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001234:  66 00 00 A6
F00:1369                   ; EA = n(An,A.W)  - BYTE only
F00:1370                   bclr.b d5,0(a0,a1.w)            
               S06:00001238:  0B B0 90 00
F00:1371                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000123C:  66 00 00 9E
F00:1372                   bclr.b d6,0(a0,a2.w)      ; 
               S06:00001240:  0D B0 A0 00
F00:1373                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001244:  66 00 00 96
F00:1374                   bclr.b d7,1(a0,a2.w)      ; 
               S06:00001248:  0F B0 A0 01
F00:1375                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000124C:  66 00 00 8E
F00:1376                   ; EA = n(An,A.L)  - BYTE only
F00:1377                   bclr.b d5,0(a0,a1.l)  
               S06:00001250:  0B B0 98 00
F00:1378                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001254:  66 00 00 86
F00:1379                   bclr.b d6,0(a0,a2.l)      ; 
               S06:00001258:  0D B0 A8 00
F00:1380                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000125C:  66 7E
F00:1381                   bclr.b d7,1(a0,a2.l)      ; 
               S06:0000125E:  0F B0 A8 01
F00:1382                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001262:  66 78
F00:1383                   move.l #$00000100,a0      ; point to memory to address 
               S06:00001264:  30 7C 01 00
F00:1384                   cmpi.b #$FE,(a0)
               S06:00001268:  0C 10 00 FE
F00:1385                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000126C:  66 6E
F00:1386                   
F00:1387                   ; EA = x.W  - BYTE only
F00:1388                   move.l #$00000100,a0      ; point to memory to address
               S06:0000126E:  30 7C 01 00
F00:1389                   move.b #$FF,(a0)+         ; populate test data
               S06:00001272:  10 FC 00 FF
F00:1390                   move.b #$FF,(a0)+         ; populate test data
               S06:00001276:  10 FC 00 FF
F00:1391                   move.b #$FF,(a0)+         ; populate test data
               S06:0000127A:  10 FC 00 FF
F00:1392                   bclr.b d5,$0100            
               S06:0000127E:  0B B8 01 00
F00:1393                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001282:  67 58
F00:1394                   bclr.b d6,$0101           ; 
               S06:00001284:  0D B8 01 01
F00:1395                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001288:  67 52
F00:1396                   bclr.b d7,$0102           ; 
               S06:0000128A:  0F B8 01 02
F00:1397                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000128E:  67 4C
F00:1398                   move.l #$00000100,a0      ; point to memory to address
               S06:00001290:  30 7C 01 00
F00:1399                   cmpi.b #$FE,(a0)+
               S06:00001294:  0C 18 00 FE
F00:1400                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001298:  66 42
F00:1401                           
F00:1402                   ; EA = x.L  - BYTE only
F00:1403                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:0000129A:  20 7C 00 0F 01 00
F00:1404                   move.b #$01,(a0)+         ; populate test data
               S06:000012A0:  10 FC 00 01
F00:1405                   move.b #$FC,(a0)+         ; populate test data
               S06:000012A4:  10 FC 00 FC
F00:1406                   move.b #$80,(a0)+         ; populate test data
               S06:000012A8:  10 FC 00 80
F00:1407                   bclr.b d5,$000F0100 
               S06:000012AC:  0B B9 00 0F 01 00
F00:1408                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012B2:  67 28
F00:1409                   bclr.b d6,$000F0101       ; 
               S06:000012B4:  0D B9 00 0F 01 01
F00:1410                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012BA:  66 20
F00:1411                   bclr.b d7,$000F0102       ; 
               S06:000012BC:  0F B9 00 0F 01 02
F00:1412                   beq BCLR_FAIL;               ; branch if Z set
               S06:000012C2:  67 18
F00:1413                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:000012C4:  20 7C 00 0F 01 01
F00:1414                   cmpi.b #$FC,(a0)
               S06:000012CA:  0C 10 00 FC
F00:1415                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000012CE:  66 0C
F00:1416                           
F00:1417       
F00:1418           movea #TESTSTATUS,a0
               S06:000012D0:  30 7C FF 00
F00:1419           move.b #$1,$08(a0)
               S06:000012D4:  11 7C 00 01 00 08
F00:1420           rts
               S06:000012DA:  4E 75
F00:1421           
F00:1422       BCLR_FAIL:
F00:1423           movea #TESTSTATUS,a0
               S06:000012DC:  30 7C FF 00
F00:1424           move.b #$2,$08(a0)
               S06:000012E0:  11 7C 00 02 00 08
F00:1425           rts
               S06:000012E6:  4E 75
F00:1426       
F00:1427         
F00:1428       ;-----------------------------------------------------------
F00:1429       ;-----------------------------------------------------------
F00:1430       ; OPCODE : BSET
F00:1431       ;-----------------------------------------------------------
F00:1432       ;-----------------------------------------------------------
F00:1433       op_BSET: 
F00:1434       
F00:1435       
F00:1436       ;  Bit Number Static 
F00:1437           
F00:1438                   ; EA = Dn  - LONG only
F00:1439                   move.l #$00000000,d0      ; populate test data
               S06:000012E8:  70 00
F00:1440                   bset.l #0,d0              
               S06:000012EA:  08 C0 00 00
F00:1441                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012EE:  66 00 04 46
F00:1442                   bset.l #1,d0              ; 
               S06:000012F2:  08 C0 00 01
F00:1443                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012F6:  66 00 04 3E
F00:1444                   bset.l #15,d0             ; 
               S06:000012FA:  08 C0 00 0F
F00:1445                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012FE:  66 00 04 36
F00:1446                   bset.l #31,d0             ; 
               S06:00001302:  08 C0 00 1F
F00:1447                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001306:  66 00 04 2E
F00:1448                   cmpi.l #$80008003,d0
               S06:0000130A:  0C 80 80 00 80 03
F00:1449                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001310:  66 00 04 24
F00:1450       
F00:1451                   
F00:1452                   ; EA = (An)  - BYTE only
F00:1453                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001314:  30 7C 01 00
F00:1454                   move.b #$00,(a0)          ; populate test data
               S06:00001318:  10 BC 00 00
F00:1455                   bset.b #0,(a0)            
               S06:0000131C:  08 D0 00 00
F00:1456                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001320:  66 00 04 14
F00:1457                   bset.b #7,(a0)            ; 
               S06:00001324:  08 D0 00 07
F00:1458                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001328:  66 00 04 0C
F00:1459                   cmpi.b #$81,(a0)
               S06:0000132C:  0C 10 00 81
F00:1460                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001330:  66 00 04 04
F00:1461                   
F00:1462                   ; EA = (An)+  - BYTE only
F00:1463                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001334:  30 7C 01 00
F00:1464                   move.b #$00,(a0)+         ; populate test data
               S06:00001338:  10 FC 00 00
F00:1465                   move.b #$00,(a0)+         ; populate test data
               S06:0000133C:  10 FC 00 00
F00:1466                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001340:  30 7C 01 00
F00:1467                   bset.b #0,(a0)+            
               S06:00001344:  08 D8 00 00
F00:1468                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001348:  66 00 03 EC
F00:1469                   bset.b #1,(a0)+           ; 
               S06:0000134C:  08 D8 00 01
F00:1470                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001350:  66 00 03 E4
F00:1471                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001354:  30 7C 01 00
F00:1472                   cmpi.b #$01,(a0)+
               S06:00001358:  0C 18 00 01
F00:1473                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000135C:  66 00 03 D8
F00:1474                   cmpi.b #$02,(a0)+
               S06:00001360:  0C 18 00 02
F00:1475                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001364:  66 00 03 D0
F00:1476        
F00:1477               
F00:1478                   ; EA = -(An)  - BYTE only
F00:1479                   move.l #$00000100,a0      ; point to memory to address
               S06:00001368:  30 7C 01 00
F00:1480                   move.b #$00,(a0)+         ; populate test data
               S06:0000136C:  10 FC 00 00
F00:1481                   move.b #$00,(a0)+         ; populate test data
               S06:00001370:  10 FC 00 00
F00:1482                   bset.b #7,-(a0)            
               S06:00001374:  08 E0 00 07
F00:1483                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001378:  66 00 03 BC
F00:1484                   bset.b #0,-(a0)           ; 
               S06:0000137C:  08 E0 00 00
F00:1485                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001380:  66 00 03 B4
F00:1486                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:00001384:  30 7C 01 02
F00:1487                   cmpi.b #$80,-(a0)
               S06:00001388:  0C 20 00 80
F00:1488                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000138C:  66 00 03 A8
F00:1489                   cmpi.b #$01,-(a0)
               S06:00001390:  0C 20 00 01
F00:1490                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001394:  66 00 03 A0
F00:1491       
F00:1492               
F00:1493                   ; EA = n(An)  - BYTE only
F00:1494                   move.l #$00000100,a0      ; point to memory to address
               S06:00001398:  30 7C 01 00
F00:1495                   move.b #$00,(a0)+         ; populate test data
               S06:0000139C:  10 FC 00 00
F00:1496                   move.b #$00,(a0)+         ; populate test data
               S06:000013A0:  10 FC 00 00
F00:1497                   move.l #$00000100,a0      ; point to memory to address
               S06:000013A4:  30 7C 01 00
F00:1498                   bset.b #0,0(a0)            
               S06:000013A8:  08 D0 00 00
F00:1499                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013AC:  66 00 03 88
F00:1500                   bset.b #4,1(a0)           ; 
               S06:000013B0:  08 E8 00 04 00 01
F00:1501                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013B6:  66 00 03 7E
F00:1502                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000013BA:  30 7C 01 00
F00:1503                   cmpi.b #$01,(a0)+
               S06:000013BE:  0C 18 00 01
F00:1504                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013C2:  66 00 03 72
F00:1505                   cmpi.b #$10,(a0)+
               S06:000013C6:  0C 18 00 10
F00:1506                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013CA:  66 00 03 6A
F00:1507       
F00:1508                       
F00:1509                   ; EA = n(An,D.W)  - BYTE only
F00:1510                   move.l #$00000100,a0      ; point to memory to address
               S06:000013CE:  30 7C 01 00
F00:1511                   move.l #$00000000,a1      ; point to memory to address
               S06:000013D2:  93 C9
F00:1512                   move.l #$00000004,a2      ; point to memory to address
               S06:000013D4:  34 7C 00 04
F00:1513                   move.l #$00000000,d0      ; point to memory to address
               S06:000013D8:  70 00
F00:1514                   move.l #$00000001,d1      ; point to memory to address
               S06:000013DA:  72 01
F00:1515                   move.b #$00,(a0)+         ; populate test data
               S06:000013DC:  10 FC 00 00
F00:1516                   move.b #$00,(a0)+         ; populate test data
               S06:000013E0:  10 FC 00 00
F00:1517                   move.b #$00,(a0)+         ; populate test data
               S06:000013E4:  10 FC 00 00
F00:1518                   move.b #$00,(a0)+         ; populate test data
               S06:000013E8:  10 FC 00 00
F00:1519                   move.b #$00,(a0)+         ; populate test data
               S06:000013EC:  10 FC 00 00
F00:1520                   move.b #$00,(a0)+         ; populate test data
               S06:000013F0:  10 FC 00 00
F00:1521                   move.b #$00,(a0)+         ; populate test data
               S06:000013F4:  10 FC 00 00
F00:1522                   move.b #$00,(a0)+         ; populate test data
               S06:000013F8:  10 FC 00 00
F00:1523                   move.b #$00,(a0)+         ; populate test data
               S06:000013FC:  10 FC 00 00
F00:1524                   move.b #$00,(a0)+         ; populate test data
               S06:00001400:  10 FC 00 00
F00:1525                   move.l #$00000100,a0      ; point to memory to address
               S06:00001404:  30 7C 01 00
F00:1526                   bset.b #0,0(a0,d0.w)            
               S06:00001408:  08 F0 00 00 00 00
F00:1527                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000140E:  66 00 03 26
F00:1528                   bset.b #1,0(a0,d1.w)      ; 
               S06:00001412:  08 F0 00 01 10 00
F00:1529                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001418:  66 00 03 1C
F00:1530                   bset.b #2,1(a0,d1.w)      ; 
               S06:0000141C:  08 F0 00 02 10 01
F00:1531                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001422:  66 00 03 12
F00:1532                   ; EA = n(An,D.L)  - BYTE only
F00:1533                   bset.b #3,2(a0,d0.l)  
               S06:00001426:  08 F0 00 03 08 02
F00:1534                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000142C:  66 00 03 08
F00:1535                   bset.b #4,0(a0,d1.l)      ; 
               S06:00001430:  08 F0 00 04 18 00
F00:1536                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001436:  66 00 02 FE
F00:1537                   bset.b #5,1(a0,d1.l)      ; 
               S06:0000143A:  08 F0 00 05 18 01
F00:1538                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001440:  66 00 02 F4
F00:1539                   ; EA = n(An,A.W)  - BYTE only
F00:1540                   bset.b #6,0(a0,a1.w)            
               S06:00001444:  08 F0 00 06 90 00
F00:1541                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000144A:  66 00 02 EA
F00:1542                   bset.b #1,0(a0,a2.w)      ; 
               S06:0000144E:  08 F0 00 01 A0 00
F00:1543                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001454:  66 00 02 E0
F00:1544                   bset.b #7,1(a0,a2.w)      ; 
               S06:00001458:  08 F0 00 07 A0 01
F00:1545                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000145E:  66 00 02 D6
F00:1546                   ; EA = n(An,A.L)  - BYTE only
F00:1547                   bset.b #0,2(a0,a2.l)  
               S06:00001462:  08 F0 00 00 A8 02
F00:1548                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001468:  66 00 02 CC
F00:1549                   bset.b #0,3(a0,a2.l)      ; 
               S06:0000146C:  08 F0 00 00 A8 03
F00:1550                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001472:  66 00 02 C2
F00:1551                   bset.b #1,4(a0,a2.l)      ; 
               S06:00001476:  08 F0 00 01 A8 04
F00:1552                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000147C:  66 00 02 B8
F00:1553                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001480:  30 7C 01 00
F00:1554                   cmpi.l #$41122C00,(a0)+
               S06:00001484:  0C 98 41 12 2C 00
F00:1555                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000148A:  66 00 02 AA
F00:1556                   cmpi.l #$02800101,(a0)+
               S06:0000148E:  0C 98 02 80 01 01
F00:1557                   bne BSET_FAIL;
               S06:00001494:  66 00 02 A0
F00:1558        
F00:1559       
F00:1560               
F00:1561                   ; EA = x.W  - BYTE only
F00:1562                   move.l #$00000100,a0      ; point to memory to address
               S06:00001498:  30 7C 01 00
F00:1563                   move.b #$00,(a0)+         ; populate test data
               S06:0000149C:  10 FC 00 00
F00:1564                   bset.b #0,$0100            
               S06:000014A0:  08 F8 00 00 01 00
F00:1565                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014A6:  66 00 02 8E
F00:1566                   bset.b #1,$0100           ; 
               S06:000014AA:  08 F8 00 01 01 00
F00:1567                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014B0:  66 00 02 84
F00:1568                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000014B4:  30 7C 01 00
F00:1569                   cmpi.b #$03,(a0)+
               S06:000014B8:  0C 18 00 03
F00:1570                   bne BSET_FAIL;
               S06:000014BC:  66 00 02 78
F00:1571       
F00:1572                   
F00:1573                   ; EA = x.L  - BYTE only
F00:1574                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000014C0:  20 7C 00 0F 01 00
F00:1575                   move.b #$00,(a0)          ; populate test data
               S06:000014C6:  10 BC 00 00
F00:1576                   bset.b #0,$000F0100 
               S06:000014CA:  08 F9 00 00 00 0F 01 00
F00:1577                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014D2:  66 00 02 62
F00:1578                   bset.b #1,$000F0100       ; 
               S06:000014D6:  08 F9 00 01 00 0F 01 00
F00:1579                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014DE:  66 00 02 56
F00:1580                   bset.b #2,$000F0100       ; 
               S06:000014E2:  08 F9 00 02 00 0F 01 00
F00:1581                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014EA:  66 00 02 4A
F00:1582                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000014EE:  20 7C 00 0F 01 00
F00:1583                   cmpi.b #$07,(a0)+
               S06:000014F4:  0C 18 00 07
F00:1584                   bne BSET_FAIL;
               S06:000014F8:  66 00 02 3C
F00:1585       
F00:1586       
F00:1587       ; Bit Number Dynamic
F00:1588           
F00:1589                   ; EA = Dn  - LONG only
F00:1590                   move.l #$00000000,d0      ; populate test data
               S06:000014FC:  70 00
F00:1591                   move.l #0,d5              ; populate bit number to test
               S06:000014FE:  7A 00
F00:1592                   move.l #1,d6              ; populate bit number to test
               S06:00001500:  7C 01
F00:1593                   move.l #31,d7              ; populate bit number to test
               S06:00001502:  7E 1F
F00:1594                   
F00:1595                   bset.l d5,d0              
               S06:00001504:  0B C0
F00:1596                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001506:  66 00 02 2E
F00:1597                   bset.l d6,d0              ; 
               S06:0000150A:  0D C0
F00:1598                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000150C:  66 00 02 28
F00:1599                   bset.l d7,d0             ; 
               S06:00001510:  0F C0
F00:1600                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001512:  66 00 02 22
F00:1601                   cmpi.l #$80000003,d0
               S06:00001516:  0C 80 80 00 00 03
F00:1602                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000151C:  66 00 02 18
F00:1603       
F00:1604                   
F00:1605                   ; EA = (An)  - BYTE only
F00:1606                   move.l #0,d5              ; populate bit number to test
               S06:00001520:  7A 00
F00:1607                   move.l #1,d6              ; populate bit number to test
               S06:00001522:  7C 01
F00:1608                   move.l #7,d7              ; populate bit number to test           
               S06:00001524:  7E 07
F00:1609                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001526:  30 7C 01 00
F00:1610                   move.b #$00,(a0)          ; populate test data
               S06:0000152A:  10 BC 00 00
F00:1611                   bset.b d5,(a0)            
               S06:0000152E:  0B D0
F00:1612                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001530:  66 00 02 04
F00:1613                   bset.b d6,(a0)            ; 
               S06:00001534:  0D D0
F00:1614                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001536:  66 00 01 FE
F00:1615                   bset.b d7,(a0)            ; 
               S06:0000153A:  0F D0
F00:1616                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000153C:  66 00 01 F8
F00:1617                   cmpi.b #$83,(a0)
               S06:00001540:  0C 10 00 83
F00:1618                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001544:  66 00 01 F0
F00:1619                   
F00:1620           
F00:1621                   ; EA = (An)+  - BYTE only
F00:1622                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001548:  30 7C 01 00
F00:1623                   move.b #$00,(a0)+         ; populate test data
               S06:0000154C:  10 FC 00 00
F00:1624                   move.b #$00,(a0)+         ; populate test data
               S06:00001550:  10 FC 00 00
F00:1625                   move.b #$00,(a0)+         ; populate test data
               S06:00001554:  10 FC 00 00
F00:1626                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001558:  30 7C 01 00
F00:1627                   bset.b d5,(a0)+            
               S06:0000155C:  0B D8
F00:1628                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000155E:  66 00 01 D6
F00:1629                   bset.b d6,(a0)+           ; 
               S06:00001562:  0D D8
F00:1630                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001564:  66 00 01 D0
F00:1631                   bset.b d7,(a0)+           ; 
               S06:00001568:  0F D8
F00:1632                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000156A:  66 00 01 CA
F00:1633                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000156E:  30 7C 01 00
F00:1634                   cmpi.b #$01,(a0)+
               S06:00001572:  0C 18 00 01
F00:1635                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001576:  66 00 01 BE
F00:1636                   cmpi.b #$02,(a0)+
               S06:0000157A:  0C 18 00 02
F00:1637                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000157E:  66 00 01 B6
F00:1638                   cmpi.b #$80,(a0)+
               S06:00001582:  0C 18 00 80
F00:1639                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001586:  66 00 01 AE
F00:1640                       
F00:1641                   ; EA = -(An)  - BYTE only
F00:1642                   move.l #$00000100,a0      ; point to memory to address
               S06:0000158A:  30 7C 01 00
F00:1643                   move.b #$00,(a0)+         ; populate test data
               S06:0000158E:  10 FC 00 00
F00:1644                   move.b #$00,(a0)+         ; populate test data
               S06:00001592:  10 FC 00 00
F00:1645                   move.b #$00,(a0)+         ; populate test data
               S06:00001596:  10 FC 00 00
F00:1646                   move.l #$00000103,a0      ; point to memory to address 
               S06:0000159A:  30 7C 01 03
F00:1647                   bset.b d5,-(a0)            
               S06:0000159E:  0B E0
F00:1648                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015A0:  66 00 01 94
F00:1649                   bset.b d6,-(a0)           ; 
               S06:000015A4:  0D E0
F00:1650                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015A6:  66 00 01 8E
F00:1651                   bset.b d7,-(a0)           ; 
               S06:000015AA:  0F E0
F00:1652                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015AC:  66 00 01 88
F00:1653                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:000015B0:  30 7C 01 03
F00:1654                   cmpi.b #$01,-(a0)
               S06:000015B4:  0C 20 00 01
F00:1655                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015B8:  66 00 01 7C
F00:1656                   cmpi.b #$02,-(a0)
               S06:000015BC:  0C 20 00 02
F00:1657                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015C0:  66 00 01 74
F00:1658                   cmpi.b #$80,-(a0)
               S06:000015C4:  0C 20 00 80
F00:1659                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015C8:  66 00 01 6C
F00:1660                       
F00:1661                   ; EA = n(An)  - BYTE only
F00:1662                   move.l #$00000100,a0      ; point to memory to address
               S06:000015CC:  30 7C 01 00
F00:1663                   move.b #$00,(a0)+         ; populate test data
               S06:000015D0:  10 FC 00 00
F00:1664                   move.b #$00,(a0)+         ; populate test data
               S06:000015D4:  10 FC 00 00
F00:1665                   move.b #$00,(a0)+         ; populate test data
               S06:000015D8:  10 FC 00 00
F00:1666                   move.l #$00000100,a0      ; point to memory to address
               S06:000015DC:  30 7C 01 00
F00:1667                   bset.b d5,0(a0)            
               S06:000015E0:  0B D0
F00:1668                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015E2:  66 00 01 52
F00:1669                   bset.b d6,1(a0)           ; 
               S06:000015E6:  0D E8 00 01
F00:1670                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015EA:  66 00 01 4A
F00:1671                   bset.b d7,2(a0)           ; 
               S06:000015EE:  0F E8 00 02
F00:1672                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015F2:  66 00 01 42
F00:1673                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000015F6:  30 7C 01 00
F00:1674                   cmpi.b #$01,(a0)+
               S06:000015FA:  0C 18 00 01
F00:1675                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015FE:  66 00 01 36
F00:1676                   cmpi.b #$02,(a0)+
               S06:00001602:  0C 18 00 02
F00:1677                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001606:  66 00 01 2E
F00:1678                   cmpi.b #$80,(a0)+
               S06:0000160A:  0C 18 00 80
F00:1679                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000160E:  66 00 01 26
F00:1680                       
F00:1681                   ; EA = n(An,R.W)  - BYTE only
F00:1682                   move.l #$00000100,a0      ; point to memory to address
               S06:00001612:  30 7C 01 00
F00:1683                   move.b #$00,(a0)+         ; populate test data
               S06:00001616:  10 FC 00 00
F00:1684                   move.b #$00,(a0)+         ; populate test data
               S06:0000161A:  10 FC 00 00
F00:1685                   move.b #$00,(a0)+         ; populate test data
               S06:0000161E:  10 FC 00 00
F00:1686                   move.b #$00,(a0)+         ; populate test data
               S06:00001622:  10 FC 00 00
F00:1687                   move.b #$00,(a0)+         ; populate test data
               S06:00001626:  10 FC 00 00
F00:1688                   move.b #$00,(a0)+         ; populate test data
               S06:0000162A:  10 FC 00 00
F00:1689                   move.b #$00,(a0)+         ; populate test data
               S06:0000162E:  10 FC 00 00
F00:1690                   move.b #$00,(a0)+         ; populate test data
               S06:00001632:  10 FC 00 00
F00:1691                   move.b #$00,(a0)+         ; populate test data
               S06:00001636:  10 FC 00 00
F00:1692                   move.b #$00,(a0)+         ; populate test data
               S06:0000163A:  10 FC 00 00
F00:1693                   move.b #$00,(a0)+         ; populate test data
               S06:0000163E:  10 FC 00 00
F00:1694                   move.b #$00,(a0)+         ; populate test data
               S06:00001642:  10 FC 00 00
F00:1695                   move.l #$00000100,a0      ; point to memory to address
               S06:00001646:  30 7C 01 00
F00:1696                   move.l #$00000000,a1      ; point to memory to address
               S06:0000164A:  93 C9
F00:1697                   move.l #$00000001,a2      ; point to memory to address
               S06:0000164C:  34 7C 00 01
F00:1698                   move.l #$00000000,d0      ; point to memory to address
               S06:00001650:  70 00
F00:1699                   move.l #$00000001,d1      ; point to memory to address
               S06:00001652:  72 01
F00:1700                   bset.b d5,0(a0,d0.w)            
               S06:00001654:  0B F0 00 00
F00:1701                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001658:  66 00 00 DC
F00:1702                   bset.b d6,0(a0,d1.w)      ; 
               S06:0000165C:  0D F0 10 00
F00:1703                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001660:  66 00 00 D4
F00:1704                   bset.b d7,1(a0,d1.w)      ; 
               S06:00001664:  0F F0 10 01
F00:1705                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001668:  66 00 00 CC
F00:1706                   ; EA = n(An,R.L)  - BYTE only
F00:1707                   bset.b d5,2(a0,d0.l)  
               S06:0000166C:  0B F0 08 02
F00:1708                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001670:  66 00 00 C4
F00:1709                   bset.b d6,3(a0,d1.l)      ; 
               S06:00001674:  0D F0 18 03
F00:1710                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001678:  66 00 00 BC
F00:1711                   bset.b d7,4(a0,d1.l)      ; 
               S06:0000167C:  0F F0 18 04
F00:1712                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001680:  66 00 00 B4
F00:1713                   ; EA = n(An,A.W)  - BYTE only
F00:1714                   bset.b d5,5(a0,a1.w)            
               S06:00001684:  0B F0 90 05
F00:1715                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001688:  66 00 00 AC
F00:1716                   bset.b d6,6(a0,a2.w)      ; 
               S06:0000168C:  0D F0 A0 06
F00:1717                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001690:  66 00 00 A4
F00:1718                   bset.b d7,7(a0,a2.w)      ; 
               S06:00001694:  0F F0 A0 07
F00:1719                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001698:  66 00 00 9C
F00:1720                   ; EA = n(An,A.L)  - BYTE only
F00:1721                   bset.b d5,8(a0,a1.l)  
               S06:0000169C:  0B F0 98 08
F00:1722                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016A0:  66 00 00 94
F00:1723                   bset.b d6,9(a0,a2.l)      ; 
               S06:000016A4:  0D F0 A8 09
F00:1724                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016A8:  66 00 00 8C
F00:1725                   bset.b d7,10(a0,a2.l)      ; 
               S06:000016AC:  0F F0 A8 0A
F00:1726                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016B0:  66 00 00 84
F00:1727                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000016B4:  30 7C 01 00
F00:1728                   cmpi.l #$01028100,(a0)+
               S06:000016B8:  0C 98 01 02 81 00
F00:1729                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016BE:  66 76
F00:1730                   cmpi.l #$02810002,(a0)+
               S06:000016C0:  0C 98 02 81 00 02
F00:1731                   bne BSET_FAIL;
               S06:000016C6:  66 6E
F00:1732        
F00:1733                   
F00:1734                   ; EA = x.W  - BYTE only
F00:1735                   move.l #$00000100,a0      ; point to memory to address
               S06:000016C8:  30 7C 01 00
F00:1736                   move.b #$00,(a0)+         ; populate test data
               S06:000016CC:  10 FC 00 00
F00:1737                   move.b #$00,(a0)+         ; populate test data
               S06:000016D0:  10 FC 00 00
F00:1738                   move.b #$00,(a0)+         ; populate test data
               S06:000016D4:  10 FC 00 00
F00:1739                   bset.b d5,$0100            
               S06:000016D8:  0B F8 01 00
F00:1740                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016DC:  66 58
F00:1741                   bset.b d6,$0100           ; 
               S06:000016DE:  0D F8 01 00
F00:1742                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016E2:  66 52
F00:1743                   bset.b d7,$0100           ; 
               S06:000016E4:  0F F8 01 00
F00:1744                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016E8:  66 4C
F00:1745                   move.l #$00000100,a0      ; point to memory to address
               S06:000016EA:  30 7C 01 00
F00:1746                   cmpi.b #$83,(a0)+
               S06:000016EE:  0C 18 00 83
F00:1747                   bne BSET_FAIL               ; branch if Z clear  
               S06:000016F2:  66 42
F00:1748                           
F00:1749                   ; EA = x.L  - BYTE only
F00:1750                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:000016F4:  20 7C 00 0F 01 00
F00:1751                   move.b #$00,(a0)+         ; populate test data
               S06:000016FA:  10 FC 00 00
F00:1752                   move.b #$00,(a0)+         ; populate test data
               S06:000016FE:  10 FC 00 00
F00:1753                   move.b #$00,(a0)+         ; populate test data
               S06:00001702:  10 FC 00 00
F00:1754                   bset.b d5,$000F0100 
               S06:00001706:  0B F9 00 0F 01 00
F00:1755                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000170C:  66 28
F00:1756                   bset.b d6,$000F0100       ; 
               S06:0000170E:  0D F9 00 0F 01 00
F00:1757                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001714:  66 20
F00:1758                   bset.b d7,$000F0100       ; 
               S06:00001716:  0F F9 00 0F 01 00
F00:1759                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000171C:  66 18
F00:1760                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:0000171E:  20 7C 00 0F 01 00
F00:1761                   cmpi.b #$83,(a0)
               S06:00001724:  0C 10 00 83
F00:1762                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001728:  66 0C
F00:1763                           
F00:1764           movea #TESTSTATUS,a0
               S06:0000172A:  30 7C FF 00
F00:1765           move.b #$1,$09(a0)
               S06:0000172E:  11 7C 00 01 00 09
F00:1766           rts
               S06:00001734:  4E 75
F00:1767           
F00:1768       BSET_FAIL:
F00:1769           movea #TESTSTATUS,a0
               S06:00001736:  30 7C FF 00
F00:1770           move.b #$1,$09(a0)
               S06:0000173A:  11 7C 00 01 00 09
F00:1771           rts
               S06:00001740:  4E 75
F00:1772       
F00:1773       ;-----------------------------------------------------------
F00:1774       ;-----------------------------------------------------------
F00:1775       ; OPCODE : MOVEP
F00:1776       ;-----------------------------------------------------------
F00:1777       ;-----------------------------------------------------------
F00:1778       op_MOVEP: 
F00:1779       
F00:1780       ; Dn --> x(An)
F00:1781                   move.l #$00000100,a0  
               S06:00001742:  30 7C 01 00
F00:1782                   move.l #$12345678,d0  
               S06:00001746:  20 3C 12 34 56 78
F00:1783                   move.l #$AABBCCDD,d1  
               S06:0000174C:  22 3C AA BB CC DD
F00:1784                   move.l #0,(a0)
               S06:00001752:  20 BC 00 00 00 00
F00:1785                   move.l #0,4(a0)
               S06:00001758:  21 7C 00 00 00 00 00 04
F00:1786                   
F00:1787                   movep.w d0,0(a0)      ; even offset   
               S06:00001760:  01 88 00 00
F00:1788                   movep.w d1,1(a0)      ; odd offset
               S06:00001764:  03 88 00 01
F00:1789                   
F00:1790                   movep.l d0,4(a0)      ; even offset   
               S06:00001768:  01 C8 00 04
F00:1791                   movep.l d1,5(a0)      ; odd offset
               S06:0000176C:  03 C8 00 05
F00:1792                   
F00:1793                   cmpi.l #$56CC78DD,(a0)
               S06:00001770:  0C 90 56 CC 78 DD
F00:1794                   bne MOVEP_FAIL;
               S06:00001776:  66 68
F00:1795                   cmpi.l #$12AA34BB,4(a0)
               S06:00001778:  0C A8 12 AA 34 BB 00 04
F00:1796                   bne MOVEP_FAIL;
               S06:00001780:  66 5E
F00:1797                   cmpi.l #$56CC78DD,8(a0)
               S06:00001782:  0C A8 56 CC 78 DD 00 08
F00:1798                   bne MOVEP_FAIL;
               S06:0000178A:  66 54
F00:1799                   
F00:1800                   
F00:1801       ; x(An)--> Dn
F00:1802                   move.l #$5a5a5a5a,d0  
               S06:0000178C:  20 3C 5A 5A 5A 5A
F00:1803                   move.l #$5a5a5a5a,d1  
               S06:00001792:  22 3C 5A 5A 5A 5A
F00:1804                   move.l #$5a5a5a5a,d2  
               S06:00001798:  24 3C 5A 5A 5A 5A
F00:1805                   move.l #$5a5a5a5a,d3  
               S06:0000179E:  26 3C 5A 5A 5A 5A
F00:1806                   
F00:1807                   movep.w 0(a0),d0      ; even offset   
               S06:000017A4:  01 08 00 00
F00:1808                   movep.w 1(a0),d1      ; odd offset
               S06:000017A8:  03 08 00 01
F00:1809                   
F00:1810                   movep.l 4(a0),d2      ; even offset   
               S06:000017AC:  05 48 00 04
F00:1811                   movep.l 5(a0),d3      ; odd offset
               S06:000017B0:  07 48 00 05
F00:1812                   
F00:1813                   cmpi.l #$5a5a5678,d0
               S06:000017B4:  0C 80 5A 5A 56 78
F00:1814                   bne MOVEP_FAIL;
               S06:000017BA:  66 24
F00:1815                   cmpi.l #$5a5aCCDD,d1
               S06:000017BC:  0C 81 5A 5A CC DD
F00:1816                   bne MOVEP_FAIL;
               S06:000017C2:  66 1C
F00:1817                   cmpi.l #$12345678,d2
               S06:000017C4:  0C 82 12 34 56 78
F00:1818                   bne MOVEP_FAIL;
               S06:000017CA:  66 14
F00:1819                   cmpi.l #$AABBCCDD,d3
               S06:000017CC:  0C 83 AA BB CC DD
F00:1820                   bne MOVEP_FAIL;
               S06:000017D2:  66 0C
F00:1821           
F00:1822                   movea #TESTSTATUS,a0
               S06:000017D4:  30 7C FF 00
F00:1823                   move.b #$1,$0a(a0)
               S06:000017D8:  11 7C 00 01 00 0A
F00:1824                   rts
               S06:000017DE:  4E 75
F00:1825       
F00:1826       MOVEP_FAIL: 
F00:1827           movea #TESTSTATUS,a0
               S06:000017E0:  30 7C FF 00
F00:1828           move.b #$2,$0a(a0)
               S06:000017E4:  11 7C 00 02 00 0A
F00:1829           rts
               S06:000017EA:  4E 75
F00:1830       
F00:1831       ;-----------------------------------------------------------
F00:1832       ;-----------------------------------------------------------
F00:1833       ; OPCODE : BOOL_I
F00:1834       ;-----------------------------------------------------------
F00:1835       ;-----------------------------------------------------------
F00:1836       op_BOOL_I: 
F00:1837               
F00:1838           ; Dn -- BYTE
F00:1839                   move.l #$12345678,d0  
               S06:000017EC:  20 3C 12 34 56 78
F00:1840                   move.w #$000F,CCR          ; pre-set Flags
               S06:000017F2:  44 FC 00 0F
F00:1841                   ori.b  #$FF,d0
               S06:000017F6:  00 00 00 FF
F00:1842                   eori.b #$5A,d0
               S06:000017FA:  0A 00 00 5A
F00:1843                   and.b  #$F0,d0
               S06:000017FE:  C0 3C 00 F0
F00:1844                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001802:  69 00 02 04
F00:1845                   bcs BOOL_I_FAIL;
               S06:00001806:  65 00 02 00
F00:1846                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000180A:  6A 00 01 FC
F00:1847                   and.b  #$00,d0
               S06:0000180E:  C0 3C 00 00
F00:1848                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001812:  6B 00 01 F4
F00:1849                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001816:  66 00 01 F0
F00:1850       
F00:1851           ; Dn -- WORD
F00:1852                   move.l #$12345678,d1  
               S06:0000181A:  22 3C 12 34 56 78
F00:1853                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001820:  44 FC 00 0F
F00:1854                   ori.w  #$FFFF,d1
               S06:00001824:  00 41 FF FF
F00:1855                   eori.w #$5A5A,d1
               S06:00001828:  0A 41 5A 5A
F00:1856                   and.w  #$F0F0,d1
               S06:0000182C:  C2 7C F0 F0
F00:1857                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001830:  69 00 01 D6
F00:1858                   bcs BOOL_I_FAIL;
               S06:00001834:  65 00 01 D2
F00:1859                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001838:  6A 00 01 CE
F00:1860                   and.w  #$0000,d1
               S06:0000183C:  C2 7C 00 00
F00:1861                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001840:  6B 00 01 C6
F00:1862                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001844:  66 00 01 C2
F00:1863       
F00:1864           ; Dn -- LONG
F00:1865                   move.l #$12345678,d2  
               S06:00001848:  24 3C 12 34 56 78
F00:1866                   move.w #$000F,CCR          ; pre-set Flags
               S06:0000184E:  44 FC 00 0F
F00:1867                   ori.l  #$FFFFFFFF,d2
               S06:00001852:  00 82 FF FF FF FF
F00:1868                   eori.l #$5A5A5A5A,d2
               S06:00001858:  0A 82 5A 5A 5A 5A
F00:1869                   and.l  #$F0F0F0F0,d2
               S06:0000185E:  C4 BC F0 F0 F0 F0
F00:1870                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001864:  69 00 01 A2
F00:1871                   bcs BOOL_I_FAIL;
               S06:00001868:  65 00 01 9E
F00:1872                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000186C:  6A 00 01 9A
F00:1873                   and.l  #$00000000,d2
               S06:00001870:  C4 BC 00 00 00 00
F00:1874                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001876:  6B 00 01 90
F00:1875                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000187A:  66 00 01 8C
F00:1876       
F00:1877           
F00:1878           ; (An) -- BYTE
F00:1879                   move.l #$00000100,a0  
               S06:0000187E:  30 7C 01 00
F00:1880                   move.l #$12345678,(a0)  
               S06:00001882:  20 BC 12 34 56 78
F00:1881                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001888:  44 FC 00 0F
F00:1882                   ori.b  #$FF,(a0)
               S06:0000188C:  00 10 00 FF
F00:1883                   eori.b #$5A,(a0)
               S06:00001890:  0A 10 00 5A
F00:1884                   and.b  #$F0,(a0)
               S06:00001894:  02 10 00 F0
F00:1885                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001898:  69 00 01 6E
F00:1886                   bcs BOOL_I_FAIL;
               S06:0000189C:  65 00 01 6A
F00:1887                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000018A0:  6A 00 01 66
F00:1888                   and.b  #$00,(a0)
               S06:000018A4:  02 10 00 00
F00:1889                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000018A8:  6B 00 01 5E
F00:1890                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000018AC:  66 00 01 5A
F00:1891                   cmpi.b #$00,(a0)
               S06:000018B0:  4A 10
F00:1892                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000018B2:  66 00 01 54
F00:1893                   
F00:1894           ; (An) -- WORD
F00:1895                   move.l #$12345678,(a0)  
               S06:000018B6:  20 BC 12 34 56 78
F00:1896                   move.w #$000F,CCR          ; pre-set Flags
               S06:000018BC:  44 FC 00 0F
F00:1897                   ori.w  #$FFFF,(a0)
               S06:000018C0:  00 50 FF FF
F00:1898                   eori.w #$5A5A,(a0)
               S06:000018C4:  0A 50 5A 5A
F00:1899                   and.w  #$F0F0,(a0)
               S06:000018C8:  02 50 F0 F0
F00:1900                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:000018CC:  69 00 01 3A
F00:1901                   bcs BOOL_I_FAIL;
               S06:000018D0:  65 00 01 36
F00:1902                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000018D4:  6A 00 01 32
F00:1903                   and.w  #$0000,(a0)
               S06:000018D8:  02 50 00 00
F00:1904                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000018DC:  6B 00 01 2A
F00:1905                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000018E0:  66 00 01 26
F00:1906                   cmpi.w #$00,(a0)
               S06:000018E4:  4A 50
F00:1907                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000018E6:  66 00 01 20
F00:1908                   
F00:1909           ; (An) -- LONG
F00:1910                   move.l #$12345678,(a0)  
               S06:000018EA:  20 BC 12 34 56 78
F00:1911                   move.w #$000F,CCR          ; pre-set Flags
               S06:000018F0:  44 FC 00 0F
F00:1912                   ori.l  #$FFFFFFFF,(a0)
               S06:000018F4:  00 90 FF FF FF FF
F00:1913                   eori.l #$5A5A5A5A,(a0)
               S06:000018FA:  0A 90 5A 5A 5A 5A
F00:1914                   and.l  #$F0F0F0F0,(a0)
               S06:00001900:  02 90 F0 F0 F0 F0
F00:1915                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001906:  69 00 01 00
F00:1916                   bcs BOOL_I_FAIL;
               S06:0000190A:  65 00 00 FC
F00:1917                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000190E:  6A 00 00 F8
F00:1918                   and.l  #$00000000,(a0)
               S06:00001912:  02 90 00 00 00 00
F00:1919                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001918:  6B 00 00 EE
F00:1920                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000191C:  66 00 00 EA
F00:1921                   cmpi.l #$00,(a0)
               S06:00001920:  4A 90
F00:1922                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001922:  66 00 00 E4
F00:1923                   
F00:1924       
F00:1925       
F00:1926           ; (An)+ -- BYTE
F00:1927                   move.l #$00000100,a0  
               S06:00001926:  30 7C 01 00
F00:1928                   move.l #$00A5FF88,(a0)  
               S06:0000192A:  20 BC 00 A5 FF 88
F00:1929                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001930:  44 FC 00 0F
F00:1930                   
F00:1931                   ori.b  #$F5,(a0)+
               S06:00001934:  00 18 00 F5
F00:1932                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001938:  6A 00 00 CE
F00:1933                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:0000193C:  67 00 00 CA
F00:1934                   
F00:1935                   eori.b #$FF,(a0)+
               S06:00001940:  46 18
F00:1936                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001942:  6B 00 00 C4
F00:1937                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001946:  67 00 00 C0
F00:1938                   
F00:1939                   and.b  #$AA,(a0)+
               S06:0000194A:  02 18 00 AA
F00:1940                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000194E:  6A 00 00 B8
F00:1941                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001952:  67 00 00 B4
F00:1942                   
F00:1943                   move.l #$00000100,a0  
               S06:00001956:  30 7C 01 00
F00:1944                   cmpi.l #$F55AAA88,(a0)
               S06:0000195A:  0C 90 F5 5A AA 88
F00:1945                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001960:  66 00 00 A6
F00:1946                   
F00:1947                   
F00:1948           ; (An)+ -- WORD
F00:1949                   move.l #$00000100,a0  
               S06:00001964:  30 7C 01 00
F00:1950                   move.l #$00000104,a1  
               S06:00001968:  32 7C 01 04
F00:1951                   move.l #$00005a5a,(a0)  
               S06:0000196C:  20 BC 00 00 5A 5A
F00:1952                   move.l #$12345678,(a1)  
               S06:00001972:  22 BC 12 34 56 78
F00:1953                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001978:  44 FC 00 0F
F00:1954                   
F00:1955                   ori.w  #$5678,(a0)+
               S06:0000197C:  00 58 56 78
F00:1956                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001980:  6B 00 00 86
F00:1957                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001984:  67 00 00 82
F00:1958                   
F00:1959                   eori.w #$FFFF,(a0)+
               S06:00001988:  46 58
F00:1960                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000198A:  6A 7C
F00:1961                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:0000198C:  67 7A
F00:1962                   
F00:1963                   and.w  #$A55A,(a0)+
               S06:0000198E:  02 58 A5 5A
F00:1964                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001992:  6B 74
F00:1965                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001994:  67 72
F00:1966                   
F00:1967                   move.l #$00000100,a0  
               S06:00001996:  30 7C 01 00
F00:1968                   cmpi.l #$5678a5a5,(a0)
               S06:0000199A:  0C 90 56 78 A5 A5
F00:1969                   move.l #$00000104,a0  
               S06:000019A0:  30 7C 01 04
F00:1970                   cmpi.l #$00105678,(a0)
               S06:000019A4:  0C 90 00 10 56 78
F00:1971                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000019AA:  66 5C
F00:1972                   
F00:1973           ; (An)+ -- LONG
F00:1974                   move.l #$00000100,a0  
               S06:000019AC:  30 7C 01 00
F00:1975                   move.l #$00000000,(a0)+  
               S06:000019B0:  20 FC 00 00 00 00
F00:1976                   move.l #$5a5a5a5a,(a0)+  
               S06:000019B6:  20 FC 5A 5A 5A 5A
F00:1977                   move.l #$FFFFFFFF,(a0)+  
               S06:000019BC:  20 FC FF FF FF FF
F00:1978                   move.l #$00000100,a0  
               S06:000019C2:  30 7C 01 00
F00:1979                   move.w #$000F,CCR          ; pre-set Flags
               S06:000019C6:  44 FC 00 0F
F00:1980                   
F00:1981                   ori.l  #$12345678,(a0)+
               S06:000019CA:  00 98 12 34 56 78
F00:1982                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000019D0:  6B 36
F00:1983                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000019D2:  67 34
F00:1984                   
F00:1985                   eori.l #$FFFFFFFF,(a0)+
               S06:000019D4:  46 98
F00:1986                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000019D6:  6A 30
F00:1987                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000019D8:  67 2E
F00:1988                   
F00:1989                   and.l  #$A5A5A55A,(a0)+
               S06:000019DA:  02 98 A5 A5 A5 5A
F00:1990                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000019E0:  6A 26
F00:1991                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000019E2:  67 24
F00:1992                   
F00:1993                   move.l #$00000100,a0  
               S06:000019E4:  30 7C 01 00
F00:1994                   cmpi.l #$12345678,(a0)+
               S06:000019E8:  0C 98 12 34 56 78
F00:1995                   cmpi.l #$a5a5a5a5,(a0)+
               S06:000019EE:  0C 98 A5 A5 A5 A5
F00:1996                   cmpi.l #$a5a5a55a,(a0)+
               S06:000019F4:  0C 98 A5 A5 A5 5A
F00:1997                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000019FA:  66 0C
F00:1998                   
F00:1999                   movea #TESTSTATUS,a0
               S06:000019FC:  30 7C FF 00
F00:2000                   move.b #$1,$0b(a0)
               S06:00001A00:  11 7C 00 01 00 0B
F00:2001                   rts
               S06:00001A06:  4E 75
F00:2002       
F00:2003       BOOL_I_FAIL: 
F00:2004           movea #TESTSTATUS,a0
               S06:00001A08:  30 7C FF 00
F00:2005           move.b #$2,$0b(a0)
               S06:00001A0C:  11 7C 00 02 00 0B
F00:2006           rts
               S06:00001A12:  4E 75
F00:2007       
F00:2008       ;-----------------------------------------------------------
F00:2009       ;-----------------------------------------------------------
F00:2010       ; OPCODE : BSR
F00:2011       ;-----------------------------------------------------------
F00:2012       ;-----------------------------------------------------------
F00:2013       
F00:2014            
F00:2015       BSR_CLOSE1:     move.l #$11111111,d1
               S06:00001A14:  22 3C 11 11 11 11
F00:2016                       rts
               S06:00001A1A:  4E 75
F00:2017        
F00:2018       
F00:2019       
F00:2020       op_BSR:         bsr.s BSR_CLOSE1        ; Negative 8-bit displacement
               S06:00001A1C:  61 F6
F00:2021                       bsr.s BSR_CLOSE2        ; Positive 8-bit displacement
               S06:00001A1E:  61 34
F00:2022                       bsr.w BSR_FAR1          ; Negative 16-bit displacement
               S06:00001A20:  61 00 EA D0
F00:2023                       bsr.w BSR_FAR2          ; Positive 16-bit displacement
               S06:00001A24:  61 00 1A 9A
F00:2024                       
F00:2025                       cmpi.l #$11111111,d1
               S06:00001A28:  0C 81 11 11 11 11
F00:2026                       bne BSR_FAIL;
               S06:00001A2E:  66 2C
F00:2027                       cmpi.l #$22222222,d2
               S06:00001A30:  0C 82 22 22 22 22
F00:2028                       bne BSR_FAIL;
               S06:00001A36:  66 24
F00:2029                       cmpi.l #$33333333,d3
               S06:00001A38:  0C 83 33 33 33 33
F00:2030                       bne BSR_FAIL;
               S06:00001A3E:  66 1C
F00:2031                       cmpi.l #$44444444,d4
               S06:00001A40:  0C 84 44 44 44 44
F00:2032                       bne BSR_FAIL;
               S06:00001A46:  66 14
F00:2033                       
F00:2034                       movea #TESTSTATUS,a0
               S06:00001A48:  30 7C FF 00
F00:2035                       move.b #$1,$0c(a0)
               S06:00001A4C:  11 7C 00 01 00 0C
F00:2036                       rts   
               S06:00001A52:  4E 75
F00:2037                       
F00:2038                       
F00:2039       BSR_CLOSE2:     move.l #$22222222,d2
               S06:00001A54:  24 3C 22 22 22 22
F00:2040                       rts
               S06:00001A5A:  4E 75
F00:2041       
F00:2042       BSR_FAIL:
F00:2043           movea #TESTSTATUS,a0
               S06:00001A5C:  30 7C FF 00
F00:2044           move.b #$2,$0c(a0)
               S06:00001A60:  11 7C 00 02 00 0C
F00:2045           rts
               S06:00001A66:  4E 75
F00:2046       
F00:2047       ;-----------------------------------------------------------
F00:2048       ;-----------------------------------------------------------
F00:2049       ; OPCODE : op_CMP_I
F00:2050       ;-----------------------------------------------------------
F00:2051       ;-----------------------------------------------------------
F00:2052       op_CMP_I: 
F00:2053       
F00:2054                   move.l #$00000100,a0 
               S06:00001A68:  30 7C 01 00
F00:2055                   move.l #$00000100,(a0) 
               S06:00001A6C:  20 BC 00 00 01 00
F00:2056        
F00:2057           ; REGISTER - BYTE
F00:2058                   move.l #$FFFFFF80,d0  
               S06:00001A72:  70 80
F00:2059                   cmpi.b #$80,d0
               S06:00001A74:  0C 00 00 80
F00:2060                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A78:  66 00 02 7A
F00:2061                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A7C:  6B 00 02 76
F00:2062                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A80:  65 00 02 72
F00:2063                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A84:  69 00 02 6E
F00:2064                   
F00:2065                   move.l #$FFFFF000,d1  
               S06:00001A88:  22 3C FF FF F0 00
F00:2066                   cmpi.b #$00,d1
               S06:00001A8E:  4A 01
F00:2067                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A90:  66 00 02 62
F00:2068                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A94:  6B 00 02 5E
F00:2069                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A98:  65 00 02 5A
F00:2070                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A9C:  69 00 02 56
F00:2071                   
F00:2072                   move.l #$FFFFFF02,d2  
               S06:00001AA0:  74 81 D4 42
F00:2073                   cmpi.b #$FF,d2
               S06:00001AA4:  0C 02 00 FF
F00:2074                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001AA8:  67 00 02 4A
F00:2075                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AAC:  6B 00 02 46
F00:2076                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001AB0:  64 00 02 42
F00:2077                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001AB4:  69 00 02 3E
F00:2078                       
F00:2079                   move.l #$FFFFFF7F,d3  
               S06:00001AB8:  26 3C FF FF FF 7F
F00:2080                   cmpi.b #$FF,d3
               S06:00001ABE:  0C 03 00 FF
F00:2081                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001AC2:  67 00 02 30
F00:2082                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl  #FIXME
               S06:00001AC6:  6A 00 02 2C
F00:2083                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001ACA:  64 00 02 28
F00:2084                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001ACE:  68 00 02 24
F00:2085                
F00:2086                
F00:2087           ; REGISTER - WORD
F00:2088                   move.l #$FFFF8000,d0  
               S06:00001AD2:  20 3C FF FF 80 00
F00:2089                   cmpi.w #$8000,d0
               S06:00001AD8:  0C 40 80 00
F00:2090                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001ADC:  66 00 02 16
F00:2091                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AE0:  6B 00 02 12
F00:2092                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001AE4:  65 00 02 0E
F00:2093                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001AE8:  69 00 02 0A
F00:2094                   
F00:2095                   move.l #$FFF00000,d1  
               S06:00001AEC:  22 3C FF F0 00 00
F00:2096                   cmpi.w #$0000,d1
               S06:00001AF2:  4A 41
F00:2097                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001AF4:  66 00 01 FE
F00:2098                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AF8:  6B 00 01 FA
F00:2099                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001AFC:  65 00 01 F6
F00:2100                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B00:  69 00 01 F2
F00:2101                   
F00:2102                   move.l #$FFFF0002,d2  
               S06:00001B04:  24 3C FF FF 00 02
F00:2103                   cmpi.w #$FFFF,d2
               S06:00001B0A:  0C 42 FF FF
F00:2104                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B0E:  67 00 01 E4
F00:2105                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B12:  6B 00 01 E0
F00:2106                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B16:  64 00 01 DC
F00:2107                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B1A:  69 00 01 D8
F00:2108                       
F00:2109                   move.l #$FFFF7FFF,d3  
               S06:00001B1E:  26 3C FF FF 7F FF
F00:2110                   cmpi.w #$FFFF,d3
               S06:00001B24:  0C 43 FF FF
F00:2111                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B28:  67 00 01 CA
F00:2112                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B2C:  6A 00 01 C6
F00:2113                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B30:  64 00 01 C2
F00:2114                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B34:  68 00 01 BE
F00:2115                   
F00:2116           ; REGISTER - LONG
F00:2117                   move.l #$80000000,d0  
               S06:00001B38:  20 3C 80 00 00 00
F00:2118                   cmpi.l #$80000000,d0
               S06:00001B3E:  0C 80 80 00 00 00
F00:2119                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B44:  66 00 01 AE
F00:2120                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B48:  6B 00 01 AA
F00:2121                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B4C:  65 00 01 A6
F00:2122                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B50:  69 00 01 A2
F00:2123                   
F00:2124                   move.l #$00000000,d1  
               S06:00001B54:  72 00
F00:2125                   cmpi.l #$00000000,d1
               S06:00001B56:  4A 81
F00:2126                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B58:  66 00 01 9A
F00:2127                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B5C:  6B 00 01 96
F00:2128                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B60:  65 00 01 92
F00:2129                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B64:  69 00 01 8E
F00:2130                   
F00:2131                   move.l #$00000002,d2  
               S06:00001B68:  74 02
F00:2132                   cmpi.l #$FFFFFFFF,d2
               S06:00001B6A:  0C 82 FF FF FF FF
F00:2133                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B70:  67 00 01 82
F00:2134                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B74:  6B 00 01 7E
F00:2135                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B78:  64 00 01 7A
F00:2136                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B7C:  69 00 01 76
F00:2137                       
F00:2138                   move.l #$7FFFFFFF,d3  
               S06:00001B80:  26 3C 7F FF FF FF
F00:2139                   cmpi.l #$FFFFFFFF,d3
               S06:00001B86:  0C 83 FF FF FF FF
F00:2140                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B8C:  67 00 01 66
F00:2141                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B90:  6A 00 01 62
F00:2142                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B94:  64 00 01 5E
F00:2143                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B98:  68 00 01 5A
F00:2144                   
F00:2145                   
F00:2146                   
F00:2147       
F00:2148           ; EA=x(An,Dn) - BYTE
F00:2149                   move.l #$00000100,a0  
               S06:00001B9C:  30 7C 01 00
F00:2150                   move.l #$00000004,d7  
               S06:00001BA0:  7E 04
F00:2151                   
F00:2152                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001BA2:  21 BC FF FF FF 80 70 0C
F00:2153                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001BAA:  21 BC FF FF FF 80 70 0C
F00:2154                   cmpi.b #$80,15(a0,d7)
               S06:00001BB2:  0C 30 00 80 70 0F
F00:2155                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BB8:  66 00 01 3A
F00:2156                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BBC:  6B 00 01 36
F00:2157                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BC0:  65 00 01 32
F00:2158                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BC4:  69 00 01 2E
F00:2159                   
F00:2160                   move.l #$FFFFF000,12(a0,d7)
               S06:00001BC8:  21 BC FF FF F0 00 70 0C
F00:2161                   cmpi.b #$00,15(a0,d7)
               S06:00001BD0:  4A 30 70 0F
F00:2162                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BD4:  66 00 01 1E
F00:2163                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BD8:  6B 00 01 1A
F00:2164                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BDC:  65 00 01 16
F00:2165                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BE0:  69 00 01 12
F00:2166                   
F00:2167                   move.l #$FFFFFF02,12(a0,d7)
               S06:00001BE4:  21 BC FF FF FF 02 70 0C
F00:2168                   cmpi.b #$FF,15(a0,d7)
               S06:00001BEC:  0C 30 00 FF 70 0F
F00:2169                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BF2:  67 00 01 00
F00:2170                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BF6:  6B 00 00 FC
F00:2171                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BFA:  64 00 00 F8
F00:2172                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BFE:  69 00 00 F4
F00:2173                       
F00:2174                   move.l #$FFFFFF7F,12(a0,d7)
               S06:00001C02:  21 BC FF FF FF 7F 70 0C
F00:2175                   cmpi.b #$FF,15(a0,d7)
               S06:00001C0A:  0C 30 00 FF 70 0F
F00:2176                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C10:  67 00 00 E2
F00:2177                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C14:  6A 00 00 DE
F00:2178                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C18:  64 00 00 DA
F00:2179                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C1C:  68 00 00 D6
F00:2180                
F00:2181                
F00:2182           ; EA=x(An,Dn) - WORD
F00:2183                   move.l #$FFFF8000,12(a0,d7)
               S06:00001C20:  21 BC FF FF 80 00 70 0C
F00:2184                   cmpi.w #$8000,14(a0,d7)
               S06:00001C28:  0C 70 80 00 70 0E
F00:2185                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C2E:  66 00 00 C4
F00:2186                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C32:  6B 00 00 C0
F00:2187                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C36:  65 00 00 BC
F00:2188                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C3A:  69 00 00 B8
F00:2189                   
F00:2190                   move.l #$FFF00000,12(a0,d7)
               S06:00001C3E:  21 BC FF F0 00 00 70 0C
F00:2191                   cmpi.w #$0000,14(a0,d7)
               S06:00001C46:  4A 70 70 0E
F00:2192                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C4A:  66 00 00 A8
F00:2193                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C4E:  6B 00 00 A4
F00:2194                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C52:  65 00 00 A0
F00:2195                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C56:  69 00 00 9C
F00:2196                   
F00:2197                   move.l #$FFFF0002,12(a0,d7)
               S06:00001C5A:  21 BC FF FF 00 02 70 0C
F00:2198                   cmpi.w #$FFFF,14(a0,d7)
               S06:00001C62:  0C 70 FF FF 70 0E
F00:2199                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C68:  67 00 00 8A
F00:2200                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C6C:  6B 00 00 86
F00:2201                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C70:  64 00 00 82
F00:2202                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C74:  69 7E
F00:2203                       
F00:2204                   move.l #$FFFF7FFF,12(a0,d7)
               S06:00001C76:  21 BC FF FF 7F FF 70 0C
F00:2205                   cmpi.w #$FFFF,14(a0,d7)
               S06:00001C7E:  0C 70 FF FF 70 0E
F00:2206                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C84:  67 6E
F00:2207                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C86:  6A 6C
F00:2208                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C88:  64 6A
F00:2209                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C8A:  68 68
F00:2210                   
F00:2211           ; EA=x(An,Dn) - LONG
F00:2212                   move.l #$80000000,12(a0,d7)
               S06:00001C8C:  21 BC 80 00 00 00 70 0C
F00:2213                   cmpi.l #$80000000,12(a0,d7)
               S06:00001C94:  0C B0 80 00 00 00 70 0C
F00:2214                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C9C:  66 56
F00:2215                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C9E:  6B 54
F00:2216                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CA0:  65 52
F00:2217                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CA2:  69 50
F00:2218                   
F00:2219                   move.l #$00000000,12(a0,d7)
               S06:00001CA4:  21 BC 00 00 00 00 70 0C
F00:2220                   cmpi.l #$00000000,12(a0,d7)
               S06:00001CAC:  4A B0 70 0C
F00:2221                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CB0:  66 42
F00:2222                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001CB2:  6B 40
F00:2223                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CB4:  65 3E
F00:2224                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CB6:  69 3C
F00:2225                   
F00:2226                   move.l #$00000002,12(a0,d7)
               S06:00001CB8:  21 BC 00 00 00 02 70 0C
F00:2227                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:00001CC0:  0C B0 FF FF FF FF 70 0C
F00:2228                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CC8:  67 2A
F00:2229                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001CCA:  6B 28
F00:2230                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CCC:  64 26
F00:2231                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CCE:  69 24
F00:2232                       
F00:2233                   move.l #$7FFFFFFF,12(a0,d7)
               S06:00001CD0:  21 BC 7F FF FF FF 70 0C
F00:2234                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:00001CD8:  0C B0 FF FF FF FF 70 0C
F00:2235                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CE0:  67 12
F00:2236                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001CE2:  6A 10
F00:2237                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CE4:  64 0E
F00:2238                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs     
               S06:00001CE6:  68 0C
F00:2239                   
F00:2240                   movea #TESTSTATUS,a0
               S06:00001CE8:  30 7C FF 00
F00:2241                   move.b #$1,$0d(a0)
               S06:00001CEC:  11 7C 00 01 00 0D
F00:2242                   rts
               S06:00001CF2:  4E 75
F00:2243                   
F00:2244       CMP_I_FAIL:
F00:2245           movea #TESTSTATUS,a0
               S06:00001CF4:  30 7C FF 00
F00:2246           move.b #$2,$0d(a0)
               S06:00001CF8:  11 7C 00 02 00 0D
F00:2247           rts
               S06:00001CFE:  4E 75
F00:2248         
F00:2249       ;-----------------------------------------------------------
F00:2250       ;-----------------------------------------------------------
F00:2251       ; OPCODE : ADD_I
F00:2252       ;-----------------------------------------------------------
F00:2253       ;-----------------------------------------------------------
F00:2254       op_ADD_I: 
F00:2255           
F00:2256           ; EA = Dn  - Byte
F00:2257                   move.l #$12345678,d0      ; populate test data
               S06:00001D00:  20 3C 12 34 56 78
F00:2258                   addi.b #0,d0                          
               S06:00001D06:  06 00 00 00
F00:2259                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D0A:  67 00 01 FC
F00:2260                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D0E:  6B 00 01 F8
F00:2261                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D12:  65 00 01 F4
F00:2262                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D16:  69 00 01 F0
F00:2263                   addi.b #$10,d0                            
               S06:00001D1A:  06 00 00 10
F00:2264                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D1E:  67 00 01 E8
F00:2265                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D22:  6A 00 01 E4
F00:2266                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D26:  65 00 01 E0
F00:2267                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D2A:  68 00 01 DC
F00:2268                   addi.b #$A5,d0                            
               S06:00001D2E:  06 00 00 A5
F00:2269                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D32:  67 00 01 D4
F00:2270                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D36:  6B 00 01 D0
F00:2271                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D3A:  64 00 01 CC
F00:2272                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D3E:  68 00 01 C8
F00:2273                   cmpi.b #$2D,d0                            
               S06:00001D42:  0C 00 00 2D
F00:2274                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D46:  66 00 01 C0
F00:2275                   
F00:2276           ; EA = Dn  - WORD
F00:2277                   move.l #$12345678,d0      ; populate test data
               S06:00001D4A:  20 3C 12 34 56 78
F00:2278                   addi.w #0,d0                          
               S06:00001D50:  06 40 00 00
F00:2279                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D54:  67 00 01 B2
F00:2280                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D58:  6B 00 01 AE
F00:2281                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D5C:  65 00 01 AA
F00:2282                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D60:  69 00 01 A6
F00:2283                   addi.w #$7000,d0                          
               S06:00001D64:  06 40 70 00
F00:2284                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D68:  67 00 01 9E
F00:2285                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D6C:  6A 00 01 9A
F00:2286                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D70:  65 00 01 96
F00:2287                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D74:  68 00 01 92
F00:2288                   addi.w #$A55A,d0                          
               S06:00001D78:  06 40 A5 5A
F00:2289                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D7C:  67 00 01 8A
F00:2290                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D80:  6B 00 01 86
F00:2291                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D84:  64 00 01 82
F00:2292                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D88:  68 00 01 7E
F00:2293                   cmpi.w #$6BD2,d0                          
               S06:00001D8C:  0C 40 6B D2
F00:2294                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D90:  66 00 01 76
F00:2295           
F00:2296           ; EA = Dn  - LONG
F00:2297                   move.l #$12345678,d0      ; populate test data
               S06:00001D94:  20 3C 12 34 56 78
F00:2298                   addi.l #0,d0                          
               S06:00001D9A:  06 80 00 00 00 00
F00:2299                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DA0:  67 00 01 66
F00:2300                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DA4:  6B 00 01 62
F00:2301                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DA8:  65 00 01 5E
F00:2302                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DAC:  69 00 01 5A
F00:2303                   addi.l #$F0000000,d0                          
               S06:00001DB0:  06 80 F0 00 00 00
F00:2304                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DB6:  67 00 01 50
F00:2305                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DBA:  6B 00 01 4C
F00:2306                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DBE:  64 00 01 48
F00:2307                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DC2:  69 00 01 44
F00:2308                   addi.l #$855AA55A,d0                          
               S06:00001DC6:  06 80 85 5A A5 5A
F00:2309                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DCC:  67 00 01 3A
F00:2310                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DD0:  6A 00 01 36
F00:2311                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DD4:  65 00 01 32
F00:2312                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DD8:  69 00 01 2E
F00:2313                   addi.l #$A0000000,d0                          
               S06:00001DDC:  06 80 A0 00 00 00
F00:2314                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DE2:  68 00 01 24
F00:2315                   cmpi.l #$278EFBD2,d0                          
               S06:00001DE6:  0C 80 27 8E FB D2
F00:2316                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DEC:  66 00 01 1A
F00:2317           
F00:2318           
F00:2319       
F00:2320           ; EA = x.L  - Byte
F00:2321                   move.l #$000F0100,a0      ; populate test data
               S06:00001DF0:  20 7C 00 0F 01 00
F00:2322                   move.l #$12345678,(a0)     ; populate test data
               S06:00001DF6:  20 BC 12 34 56 78
F00:2323                   addi.b #0,$000F0103                           
               S06:00001DFC:  06 39 00 00 00 0F 01 03
F00:2324                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E04:  67 00 01 02
F00:2325                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E08:  6B 00 00 FE
F00:2326                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E0C:  65 00 00 FA
F00:2327                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E10:  69 00 00 F6
F00:2328                   addi.b #$10,$000F0103                         
               S06:00001E14:  06 39 00 10 00 0F 01 03
F00:2329                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E1C:  67 00 00 EA
F00:2330                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E20:  6A 00 00 E6
F00:2331                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E24:  65 00 00 E2
F00:2332                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E28:  68 00 00 DE
F00:2333                   addi.b #$A5,$000F0103                         
               S06:00001E2C:  06 39 00 A5 00 0F 01 03
F00:2334                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E34:  67 00 00 D2
F00:2335                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E38:  6B 00 00 CE
F00:2336                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E3C:  64 00 00 CA
F00:2337                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E40:  68 00 00 C6
F00:2338                   cmpi.b #$2D,$000F0103                         
               S06:00001E44:  0C 39 00 2D 00 0F 01 03
F00:2339                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E4C:  66 00 00 BA
F00:2340                   
F00:2341           ; EA = x.L- WORD
F00:2342                   move.l #$000F0100,a0      ; populate test data
               S06:00001E50:  20 7C 00 0F 01 00
F00:2343                   move.l #$12345678,(a0)     ; populate test data
               S06:00001E56:  20 BC 12 34 56 78
F00:2344                   addi.w #0,$000F0100                           
               S06:00001E5C:  06 79 00 00 00 0F 01 00
F00:2345                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E64:  67 00 00 A2
F00:2346                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E68:  6B 00 00 9E
F00:2347                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E6C:  65 00 00 9A
F00:2348                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E70:  69 00 00 96
F00:2349                   addi.w #$7000,$000F0100                           
               S06:00001E74:  06 79 70 00 00 0F 01 00
F00:2350                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E7C:  67 00 00 8A
F00:2351                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E80:  6A 00 00 86
F00:2352                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E84:  65 00 00 82
F00:2353                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E88:  68 7E
F00:2354                   addi.w #$A55A,$000F0100                           
               S06:00001E8A:  06 79 A5 5A 00 0F 01 00
F00:2355                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E92:  67 74
F00:2356                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E94:  6B 72
F00:2357                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E96:  64 70
F00:2358                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E98:  68 6E
F00:2359                   cmpi.w #$278E,$000F0100                           
               S06:00001E9A:  0C 79 27 8E 00 0F 01 00
F00:2360                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EA2:  66 64
F00:2361           
F00:2362           ; EA = x.L- LONG
F00:2363                   move.l #$12345678,$000F0100  ; populate test data
               S06:00001EA4:  23 FC 12 34 56 78 00 0F 01 00
F00:2364                   addi.l #0,$000F0100                           
               S06:00001EAE:  06 B9 00 00 00 00 00 0F 01 00
F00:2365                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EB8:  67 4E
F00:2366                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EBA:  6B 4C
F00:2367                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EBC:  65 4A
F00:2368                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EBE:  69 48
F00:2369                   addi.l #$F0000000,$000F0100                           
               S06:00001EC0:  06 B9 F0 00 00 00 00 0F 01 00
F00:2370                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001ECA:  67 3C
F00:2371                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001ECC:  6B 3A
F00:2372                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001ECE:  64 38
F00:2373                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001ED0:  69 36
F00:2374                   addi.l #$855AA55A,$000F0100                           
               S06:00001ED2:  06 B9 85 5A A5 5A 00 0F 01 00
F00:2375                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EDC:  67 2A
F00:2376                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EDE:  6A 28
F00:2377                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EE0:  65 26
F00:2378                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EE2:  69 24
F00:2379                   addi.l #$A0000000,$000F0100                           
               S06:00001EE4:  06 B9 A0 00 00 00 00 0F 01 00
F00:2380                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EEE:  68 18
F00:2381                   cmpi.l #$278EFBD2,$000F0100                           
               S06:00001EF0:  0C B9 27 8E FB D2 00 0F 01 00
F00:2382                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EFA:  66 0C
F00:2383           
F00:2384                   movea #TESTSTATUS,a0
               S06:00001EFC:  30 7C FF 00
F00:2385                   move.b #$1,$0e(a0)
               S06:00001F00:  11 7C 00 01 00 0E
F00:2386                   rts
               S06:00001F06:  4E 75
F00:2387       
F00:2388       ADD_I_FAIL:
F00:2389           movea #TESTSTATUS,a0
               S06:00001F08:  30 7C FF 00
F00:2390           move.b #$2,$0e(a0)
               S06:00001F0C:  11 7C 00 02 00 0E
F00:2391           rts
               S06:00001F12:  4E 75
F00:2392       
F00:2393       ;-----------------------------------------------------------
F00:2394       ;-----------------------------------------------------------
F00:2395       ; OPCODE : SUB_I
F00:2396       ;-----------------------------------------------------------
F00:2397       ;-----------------------------------------------------------
F00:2398       op_SUB_I: 
F00:2399           
F00:2400           ; EA = Dn  - Byte
F00:2401                   move.l #$12345678,d0      ; populate test data
               S06:00001F14:  20 3C 12 34 56 78
F00:2402                   subi.b #0,d0                          
               S06:00001F1A:  04 00 00 00
F00:2403                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F1E:  67 00 01 FC
F00:2404                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F22:  6B 00 01 F8
F00:2405                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F26:  65 00 01 F4
F00:2406                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F2A:  69 00 01 F0
F00:2407                   subi.b #$10,d0                            
               S06:00001F2E:  04 00 00 10
F00:2408                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F32:  67 00 01 E8
F00:2409                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F36:  6B 00 01 E4
F00:2410                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F3A:  65 00 01 E0
F00:2411                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F3E:  69 00 01 DC
F00:2412                   subi.b #$A5,d0                            
               S06:00001F42:  04 00 00 A5
F00:2413                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F46:  67 00 01 D4
F00:2414                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F4A:  6A 00 01 D0
F00:2415                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F4E:  64 00 01 CC
F00:2416                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F52:  68 00 01 C8
F00:2417                   cmpi.b #$C3,d0                            
               S06:00001F56:  0C 00 00 C3
F00:2418                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F5A:  66 00 01 C0
F00:2419                   
F00:2420           ; EA = Dn  - WORD
F00:2421                   move.l #$12345678,d0      ; populate test data
               S06:00001F5E:  20 3C 12 34 56 78
F00:2422                   subi.w #0,d0                          
               S06:00001F64:  04 40 00 00
F00:2423                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F68:  67 00 01 B2
F00:2424                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F6C:  6B 00 01 AE
F00:2425                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F70:  65 00 01 AA
F00:2426                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F74:  69 00 01 A6
F00:2427                   subi.w #$7000,d0                          
               S06:00001F78:  04 40 70 00
F00:2428                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F7C:  67 00 01 9E
F00:2429                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F80:  6A 00 01 9A
F00:2430                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F84:  64 00 01 96
F00:2431                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F88:  69 00 01 92
F00:2432                   subi.w #$A55A,d0                          
               S06:00001F8C:  04 40 A5 5A
F00:2433                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F90:  67 00 01 8A
F00:2434                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F94:  6B 00 01 86
F00:2435                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F98:  65 00 01 82
F00:2436                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F9C:  69 00 01 7E
F00:2437                   cmpi.w #$411E,d0                          
               S06:00001FA0:  0C 40 41 1E
F00:2438                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FA4:  66 00 01 76
F00:2439           
F00:2440           ; EA = Dn  - LONG
F00:2441                   move.l #$12345678,d0      ; populate test data
               S06:00001FA8:  20 3C 12 34 56 78
F00:2442                   subi.l #0,d0                          
               S06:00001FAE:  04 80 00 00 00 00
F00:2443                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FB4:  67 00 01 66
F00:2444                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FB8:  6B 00 01 62
F00:2445                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FBC:  65 00 01 5E
F00:2446                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FC0:  69 00 01 5A
F00:2447                   subi.l #$F0000000,d0                          
               S06:00001FC4:  04 80 F0 00 00 00
F00:2448                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FCA:  67 00 01 50
F00:2449                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FCE:  6B 00 01 4C
F00:2450                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FD2:  64 00 01 48
F00:2451                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FD6:  69 00 01 44
F00:2452                   subi.l #$855AA55A,d0                          
               S06:00001FDA:  04 80 85 5A A5 5A
F00:2453                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FE0:  67 00 01 3A
F00:2454                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FE4:  6A 00 01 36
F00:2455                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FE8:  64 00 01 32
F00:2456                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FEC:  68 00 01 2E
F00:2457                   subi.l #$A0000000,d0                          
               S06:00001FF0:  04 80 A0 00 00 00
F00:2458                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FF6:  69 00 01 24
F00:2459                   cmpi.l #$FCD9B11E,d0                          
               S06:00001FFA:  0C 80 FC D9 B1 1E
F00:2460                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002000:  66 00 01 1A
F00:2461           
F00:2462           
F00:2463       
F00:2464           ; EA = x.L  - Byte
F00:2465                   move.l #$000F0100,a0      ; populate test data
               S06:00002004:  20 7C 00 0F 01 00
F00:2466                   move.l #$12345678,(a0)     ; populate test data
               S06:0000200A:  20 BC 12 34 56 78
F00:2467                   subi.b #0,$000F0103                           
               S06:00002010:  04 39 00 00 00 0F 01 03
F00:2468                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002018:  67 00 01 02
F00:2469                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000201C:  6B 00 00 FE
F00:2470                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002020:  65 00 00 FA
F00:2471                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002024:  69 00 00 F6
F00:2472                   subi.b #$10,$000F0103                         
               S06:00002028:  04 39 00 10 00 0F 01 03
F00:2473                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002030:  67 00 00 EA
F00:2474                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002034:  6B 00 00 E6
F00:2475                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002038:  65 00 00 E2
F00:2476                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000203C:  69 00 00 DE
F00:2477                   subi.b #$A5,$000F0103                         
               S06:00002040:  04 39 00 A5 00 0F 01 03
F00:2478                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002048:  67 00 00 D2
F00:2479                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000204C:  6A 00 00 CE
F00:2480                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002050:  64 00 00 CA
F00:2481                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002054:  68 00 00 C6
F00:2482                   cmpi.b #$C3,$000F0103                         
               S06:00002058:  0C 39 00 C3 00 0F 01 03
F00:2483                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002060:  66 00 00 BA
F00:2484                   
F00:2485           ; EA = x.L- WORD
F00:2486                   move.l #$000F0100,a0      ; populate test data
               S06:00002064:  20 7C 00 0F 01 00
F00:2487                   move.l #$12345678,(a0)     ; populate test data
               S06:0000206A:  20 BC 12 34 56 78
F00:2488                   subi.w #0,$000F0100                           
               S06:00002070:  04 79 00 00 00 0F 01 00
F00:2489                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002078:  67 00 00 A2
F00:2490                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000207C:  6B 00 00 9E
F00:2491                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002080:  65 00 00 9A
F00:2492                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002084:  69 00 00 96
F00:2493                   subi.w #$7000,$000F0100                           
               S06:00002088:  04 79 70 00 00 0F 01 00
F00:2494                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002090:  67 00 00 8A
F00:2495                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002094:  6A 00 00 86
F00:2496                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00002098:  64 00 00 82
F00:2497                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000209C:  69 7E
F00:2498                   subi.w #$A55A,$000F0100                           
               S06:0000209E:  04 79 A5 5A 00 0F 01 00
F00:2499                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020A6:  67 74
F00:2500                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020A8:  6A 72
F00:2501                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020AA:  64 70
F00:2502                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020AC:  69 6E
F00:2503                   cmpi.w #$FCDA,$000F0100                           
               S06:000020AE:  0C 79 FC DA 00 0F 01 00
F00:2504                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020B6:  66 64
F00:2505           
F00:2506           ; EA = x.L- LONG
F00:2507                   move.l #$12345678,$000F0100  ; populate test data
               S06:000020B8:  23 FC 12 34 56 78 00 0F 01 00
F00:2508                   subi.l #0,$000F0100                           
               S06:000020C2:  04 B9 00 00 00 00 00 0F 01 00
F00:2509                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020CC:  67 4E
F00:2510                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020CE:  6B 4C
F00:2511                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020D0:  65 4A
F00:2512                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020D2:  69 48
F00:2513                   subi.l #$F0000000,$000F0100                           
               S06:000020D4:  04 B9 F0 00 00 00 00 0F 01 00
F00:2514                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020DE:  67 3C
F00:2515                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020E0:  6B 3A
F00:2516                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020E2:  64 38
F00:2517                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020E4:  69 36
F00:2518                   subi.l #$855AA55A,$000F0100                           
               S06:000020E6:  04 B9 85 5A A5 5A 00 0F 01 00
F00:2519                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020F0:  67 2A
F00:2520                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020F2:  6A 28
F00:2521                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000020F4:  64 26
F00:2522                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000020F6:  68 24
F00:2523                   subi.l #$A0000000,$000F0100                           
               S06:000020F8:  04 B9 A0 00 00 00 00 0F 01 00
F00:2524                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00002102:  69 18
F00:2525                   cmpi.l #$FCD9B11E,$000F0100                           
               S06:00002104:  0C B9 FC D9 B1 1E 00 0F 01 00
F00:2526                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000210E:  66 0C
F00:2527                   
F00:2528                   movea #TESTSTATUS,a0
               S06:00002110:  30 7C FF 00
F00:2529                   move.b #$1,$0f(a0)
               S06:00002114:  11 7C 00 01 00 0F
F00:2530                   rts
               S06:0000211A:  4E 75
F00:2531           
F00:2532       SUB_I_FAIL:
F00:2533           movea #TESTSTATUS,a0
               S06:0000211C:  30 7C FF 00
F00:2534           move.b #$2,$0f(a0) 
               S06:00002120:  11 7C 00 02 00 0F
F00:2535           rts
               S06:00002126:  4E 75
F00:2536       ;-----------------------------------------------------------
F00:2537       ;-----------------------------------------------------------
F00:2538       ; OPCODE : MOVE
F00:2539       ;-----------------------------------------------------------
F00:2540       ;-----------------------------------------------------------
F00:2541       op_MOVE: 
F00:2542                   move.l #$11223344,d0
               S06:00002128:  20 3C 11 22 33 44
F00:2543                   move.l #$55667788,d1
               S06:0000212E:  22 3C 55 66 77 88
F00:2544                   move.l #$8899aabb,d2
               S06:00002134:  24 3C 88 99 AA BB
F00:2545                   move.l #$ccddeeff,d3
               S06:0000213A:  26 3C CC DD EE FF
F00:2546                   move.l #$00000000,d4
               S06:00002140:  78 00
F00:2547                   move.l #$00000000,d5
               S06:00002142:  7A 00
F00:2548                   move.l #$00000000,d6
               S06:00002144:  7C 00
F00:2549                   move.l #$00000000,d7         
               S06:00002146:  7E 00
F00:2550                   move.l #$44332211,a0
               S06:00002148:  20 7C 44 33 22 11
F00:2551                   move.l #$88776655,a1
               S06:0000214E:  22 7C 88 77 66 55
F00:2552                   move.l #$bbaa9988,a2
               S06:00002154:  24 7C BB AA 99 88
F00:2553                   move.l #$ffeeddcc,a3
               S06:0000215A:  26 7C FF EE DD CC
F00:2554                   
F00:2555                   move.b d0,d4              ; BYTE - DATA REGISTER
               S06:00002160:  18 00
F00:2556                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002162:  67 00 02 26
F00:2557                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002166:  6B 00 02 22
F00:2558                   cmpi.l #$00000044,d4                          
               S06:0000216A:  0C 84 00 00 00 44
F00:2559                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002170:  66 00 02 18
F00:2560               
F00:2561                   move.w d1,d5              ; WORD - DATA REGISTER
               S06:00002174:  3A 01
F00:2562                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002176:  67 00 02 12
F00:2563                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000217A:  6B 00 02 0E
F00:2564                   cmpi.l #$00007788,d5                          
               S06:0000217E:  0C 85 00 00 77 88
F00:2565                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002184:  66 00 02 04
F00:2566               
F00:2567                   move.l d2,d6              ; LONG - DATA REGISTER
               S06:00002188:  2C 02
F00:2568                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000218A:  67 00 01 FE
F00:2569                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000218E:  6A 00 01 FA
F00:2570                   cmpi.l #$8899aabb,d6                          
               S06:00002192:  0C 86 88 99 AA BB
F00:2571                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002198:  66 00 01 F0
F00:2572       
F00:2573                   move.w a1,d5              ; WORD - ADDRESS REGISTER
               S06:0000219C:  3A 09
F00:2574                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000219E:  67 00 01 EA
F00:2575                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021A2:  6B 00 01 E6
F00:2576                   cmpi.l #$00006655,d5                          
               S06:000021A6:  0C 85 00 00 66 55
F00:2577                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021AC:  66 00 01 DC
F00:2578               
F00:2579                   move.l a2,d6              ; LONG - ADDRESS REGISTER
               S06:000021B0:  2C 0A
F00:2580                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021B2:  67 00 01 D6
F00:2581                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021B6:  6A 00 01 D2
F00:2582                   cmpi.l #$bbaa9988,d6                         
               S06:000021BA:  0C 86 BB AA 99 88
F00:2583                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021C0:  66 00 01 C8
F00:2584                   
F00:2585           
F00:2586                   movea.w d2,a4             ; WORD - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:000021C4:  38 42
F00:2587                   cmpa.l d2,a4                          
               S06:000021C6:  B9 C2
F00:2588                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
               S06:000021C8:  67 00 01 C0
F00:2589               
F00:2590                   movea.l d1,a5             ; LONG - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:000021CC:  2A 41
F00:2591                   cmpa.l d1,a5                         
               S06:000021CE:  BB C1
F00:2592                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021D0:  66 00 01 B8
F00:2593               
F00:2594       
F00:2595       
F00:2596         ; Too mamy EA combinations to test,so we focus on a few of the more complicted EA's 
F00:2597         
F00:2598                   move.l #$11223344,d0
               S06:000021D4:  20 3C 11 22 33 44
F00:2599                   move.l #$00010100,d1
               S06:000021DA:  22 3C 00 01 01 00
F00:2600                   move.l #$8899aabb,d2
               S06:000021E0:  24 3C 88 99 AA BB
F00:2601                   move.l #$00000001,d3
               S06:000021E6:  76 01
F00:2602                   move.l #$00000000,d4
               S06:000021E8:  78 00
F00:2603                   move.l #$00000000,d5
               S06:000021EA:  7A 00
F00:2604                   move.l #$00000000,d6
               S06:000021EC:  7C 00
F00:2605                   move.l #$00000000,d7         
               S06:000021EE:  7E 00
F00:2606                   move.l #$00000000,a0
               S06:000021F0:  91 C8
F00:2607                   move.l #$00010100,a1
               S06:000021F2:  22 7C 00 01 01 00
F00:2608       
F00:2609           ; x(An,AL) --> x.L
F00:2610                   move.b #$5A,4(a0,a1.l)    ; BYTE 
               S06:000021F8:  11 BC 00 5A 98 04
F00:2611                   lea 4(a0,a1.l),a3    
               S06:000021FE:  47 F0 98 04
F00:2612                   move.b 4(a0,a1.l),$00010105    
               S06:00002202:  13 F0 98 04 00 01 01 05
F00:2613                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000220A:  67 00 01 7E
F00:2614                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000220E:  6B 00 01 7A
F00:2615                   cmpi.b #$5A,5(a0,a1.l)                            
               S06:00002212:  0C 30 00 5A 98 05
F00:2616                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002218:  66 00 01 70
F00:2617                       
F00:2618           ; x.L --> n(An,Dw)
F00:2619       MOVE2:      move.b  $00010105,7(a0,d1.w)    ; BYTE  
               S06:0000221C:  11 B9 00 01 01 05 10 07
F00:2620                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002224:  67 00 01 64
F00:2621                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002228:  6B 00 01 60
F00:2622                   cmpi.b #$5A,7(a0,d1.w)                            
               S06:0000222C:  0C 30 00 5A 10 07
F00:2623                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002232:  66 00 01 56
F00:2624                       
F00:2625           ; x(PC,Ds) --> x.w
F00:2626                   move.b  MOVE1(pc,d3),$0100 ; BYTE  
               S06:00002236:  11 FB 30 76 01 00
F00:2627                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000223C:  67 00 01 4C
F00:2628                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002240:  6A 00 01 48
F00:2629                   cmpi.b #$B9,1+MOVE2                            
               S06:00002244:  0C 38 00 B9 22 1D
F00:2630                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000224A:  66 00 01 3E
F00:2631                           
F00:2632           ; #x -->    n(An,AL)
F00:2633                   move.b  #$78,7(a0,d1.w)    ; BYTE  
               S06:0000224E:  11 BC 00 78 10 07
F00:2634                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002254:  67 00 01 34
F00:2635                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002258:  6B 00 01 30
F00:2636                   cmpi.b #$78,7(a0,d1.w)                         
               S06:0000225C:  0C 30 00 78 10 07
F00:2637                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002262:  66 00 01 26
F00:2638               
F00:2639                   move.l #$11223344,d0
               S06:00002266:  20 3C 11 22 33 44
F00:2640                   move.l #$00010100,d1
               S06:0000226C:  22 3C 00 01 01 00
F00:2641                   move.l #$8899aabb,d2
               S06:00002272:  24 3C 88 99 AA BB
F00:2642                   move.l #$00000002,d3
               S06:00002278:  76 02
F00:2643                   move.l #$00000000,d4
               S06:0000227A:  78 00
F00:2644                   move.l #$00000000,d5
               S06:0000227C:  7A 00
F00:2645                   move.l #$00000000,d6
               S06:0000227E:  7C 00
F00:2646                   move.l #$00000000,d7         
               S06:00002280:  7E 00
F00:2647                   move.l #$00000000,a0
               S06:00002282:  91 C8
F00:2648                   move.l #$00010100,a1
               S06:00002284:  22 7C 00 01 01 00
F00:2649                   
F00:2650           ; x(An,AL) --> x.L
F00:2651                   move.w #$5A5A,4(a0,a1.l)    ; WORD  
               S06:0000228A:  31 BC 5A 5A 98 04
F00:2652                   lea 4(a0,a1.l),a4    
               S06:00002290:  49 F0 98 04
F00:2653                   move.w 4(a0,a1.l),$00010104    
               S06:00002294:  33 F0 98 04 00 01 01 04
F00:2654                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000229C:  67 00 00 EC
F00:2655                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022A0:  6B 00 00 E8
F00:2656                   cmpi.w #$5A5A,4(a0,a1.l)                          
               S06:000022A4:  0C 70 5A 5A 98 04
F00:2657                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022AA:  66 00 00 DE
F00:2658                       
F00:2659           ; x.L --> n(An,Dw)
F00:2660       MOVE1:      move.w  $00010104,6(a0,d1.w)    ; WORD  
               S06:000022AE:  31 B9 00 01 01 04 10 06
F00:2661                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022B6:  67 00 00 D2
F00:2662                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022BA:  6B 00 00 CE
F00:2663                   cmpi.w #$5A5A,6(a0,d1.w)                          
               S06:000022BE:  0C 70 5A 5A 10 06
F00:2664                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022C4:  66 00 00 C4
F00:2665                       
F00:2666           ; x(PC,Ds) --> x.w
F00:2667                   move.w  MOVE1(pc,d3),$0100 ; WORD  
               S06:000022C8:  31 FB 30 E4 01 00
F00:2668                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022CE:  67 00 00 BA
F00:2669                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022D2:  6B 00 00 B6
F00:2670                   cmpi.w #$6700,8+MOVE1                 
               S06:000022D6:  0C 78 67 00 22 B6
F00:2671                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022DC:  66 00 00 AC
F00:2672                           
F00:2673           ; #x -->    n(An,AL)
F00:2674                   move.w  #$7878,6(a0,d1.w)    ; WORD  
               S06:000022E0:  31 BC 78 78 10 06
F00:2675                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022E6:  67 00 00 A2
F00:2676                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000022EA:  6B 00 00 9E
F00:2677                   cmpi.w #$7878,6(a0,d1.w)                           
               S06:000022EE:  0C 70 78 78 10 06
F00:2678                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000022F4:  66 00 00 94
F00:2679               
F00:2680       ; ---
F00:2681               
F00:2682                   move.l #$11223344,d0
               S06:000022F8:  20 3C 11 22 33 44
F00:2683                   move.l #$00010100,d1
               S06:000022FE:  22 3C 00 01 01 00
F00:2684                   move.l #$8899aabb,d2
               S06:00002304:  24 3C 88 99 AA BB
F00:2685                   move.l #$00000002,d3
               S06:0000230A:  76 02
F00:2686                   move.l #$00000000,d4
               S06:0000230C:  78 00
F00:2687                   move.l #$00000000,d5
               S06:0000230E:  7A 00
F00:2688                   move.l #$00000000,d6
               S06:00002310:  7C 00
F00:2689                   move.l #$00000000,d7         
               S06:00002312:  7E 00
F00:2690                   move.l #$00000000,a0
               S06:00002314:  91 C8
F00:2691                   move.l #$00010100,a1
               S06:00002316:  22 7C 00 01 01 00
F00:2692                   
F00:2693           ; x(An,AL) --> x.L
F00:2694                   move.l #$5A5A1234,4(a0,a1.l)    ; LONG  
               S06:0000231C:  21 BC 5A 5A 12 34 98 04
F00:2695                   lea 4(a0,a1.l),a4    
               S06:00002324:  49 F0 98 04
F00:2696                   move.l 4(a0,a1.l),$00010104    
               S06:00002328:  23 F0 98 04 00 01 01 04
F00:2697                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002330:  67 58
F00:2698                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002332:  6B 56
F00:2699                   cmpi.l #$5A5A1234,4(a0,a1.l)                          
               S06:00002334:  0C B0 5A 5A 12 34 98 04
F00:2700                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000233C:  66 4C
F00:2701                       
F00:2702           ; x.L --> n(An,Dw)
F00:2703       MOVE3:      move.l  $00010104,6(a0,d1.w)    ; LONG  
               S06:0000233E:  21 B9 00 01 01 04 10 06
F00:2704                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002346:  67 42
F00:2705                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002348:  6B 40
F00:2706                   cmpi.l #$5A5A1234,6(a0,d1.w)                          
               S06:0000234A:  0C B0 5A 5A 12 34 10 06
F00:2707                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002352:  66 36
F00:2708                       
F00:2709           ; x(PC,Ds) --> x.w
F00:2710                   move.l  MOVE3(pc,d3),$0100 ; LONG  
               S06:00002354:  21 FB 30 E8 01 00
F00:2711                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000235A:  67 2E
F00:2712                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000235C:  6B 2C
F00:2713                   cmpi.l #$67426b40,8+MOVE3           
               S06:0000235E:  0C B8 67 42 6B 40 23 46
F00:2714                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002366:  66 22
F00:2715                           
F00:2716           ; #x -->    n(An,AL)
F00:2717                   move.l  #$78782323,6(a0,d1.w)    ; LONG  
               S06:00002368:  21 BC 78 78 23 23 10 06
F00:2718                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002370:  67 18
F00:2719                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002372:  6B 16
F00:2720                   cmpi.l #$78782323,6(a0,d1.w)                           
               S06:00002374:  0C B0 78 78 23 23 10 06
F00:2721                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000237C:  66 0C
F00:2722               
F00:2723       
F00:2724                movea #TESTSTATUS,a0
               S06:0000237E:  30 7C FF 00
F00:2725                move.b #$1,$10(a0)        
               S06:00002382:  11 7C 00 01 00 10
F00:2726                rts
               S06:00002388:  4E 75
F00:2727       
F00:2728       MOVE_FAIL:
F00:2729           movea #TESTSTATUS,a0
               S06:0000238A:  30 7C FF 00
F00:2730           move.b #$2,$10(a0)
               S06:0000238E:  11 7C 00 02 00 10
F00:2731           rts
               S06:00002394:  4E 75
F00:2732       
F00:2733       ;-----------------------------------------------------------
F00:2734       ;-----------------------------------------------------------
F00:2735       ; OPCODE : MOVE_xxx_FLAGS
F00:2736       ;-----------------------------------------------------------
F00:2737       ;-----------------------------------------------------------
F00:2738       op_MOVE_xxx_FLAGS: 
F00:2739       
F00:2740           ; Move_To_SR
F00:2741           
F00:2742           ; Dn
F00:2743           
F00:2744                   move.w #$2FFF,d0
               S06:00002396:  30 3C 2F FF
F00:2745                   move d0,SR 
               S06:0000239A:  46 C0
F00:2746                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000239C:  6A 00 02 A4
F00:2747                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000023A0:  66 00 02 A0
F00:2748                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000023A4:  68 00 02 9C
F00:2749                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000023A8:  64 00 02 98
F00:2750                   move.w #$2F00,d0
               S06:000023AC:  30 3C 2F 00
F00:2751                   move d0,CCR 
               S06:000023B0:  44 C0
F00:2752                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023B2:  67 00 02 8E
F00:2753                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000023B6:  6B 00 02 8A
F00:2754                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000023BA:  69 00 02 86
F00:2755                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000023BE:  65 00 02 82
F00:2756           
F00:2757                   move.w #$2000,d0
               S06:000023C2:  30 3C 20 00
F00:2758                   move d0,SR 
               S06:000023C6:  46 C0
F00:2759                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023C8:  67 00 02 78
F00:2760                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000023CC:  6B 00 02 74
F00:2761                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000023D0:  69 00 02 70
F00:2762                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000023D4:  65 00 02 6C
F00:2763              
F00:2764           ; (An)
F00:2765                   move.l #$00000100,a0
               S06:000023D8:  30 7C 01 00
F00:2766                   move.w #$2FFF,(a0)
               S06:000023DC:  30 BC 2F FF
F00:2767                   move (a0),SR 
               S06:000023E0:  46 D0
F00:2768                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000023E2:  6A 00 02 5E
F00:2769                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000023E6:  66 00 02 5A
F00:2770                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000023EA:  68 00 02 56
F00:2771                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000023EE:  64 00 02 52
F00:2772           
F00:2773                   move.w #$2000,(a0)
               S06:000023F2:  30 BC 20 00
F00:2774                   move (a0),SR 
               S06:000023F6:  46 D0
F00:2775                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023F8:  67 00 02 48
F00:2776                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000023FC:  6B 00 02 44
F00:2777                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002400:  69 00 02 40
F00:2778                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002404:  65 00 02 3C
F00:2779                   
F00:2780           ; (An)+
F00:2781                   move.l #$00000100,a0
               S06:00002408:  30 7C 01 00
F00:2782                   move.w #$2FFF,(a0)
               S06:0000240C:  30 BC 2F FF
F00:2783                   move (a0)+,SR 
               S06:00002410:  46 D8
F00:2784                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002412:  6A 00 02 2E
F00:2785                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002416:  66 00 02 2A
F00:2786                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000241A:  68 00 02 26
F00:2787                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:0000241E:  64 00 02 22
F00:2788           
F00:2789                   move.w #$2000,(a0)
               S06:00002422:  30 BC 20 00
F00:2790                   move (a0)+,SR 
               S06:00002426:  46 D8
F00:2791                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002428:  67 00 02 18
F00:2792                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000242C:  6B 00 02 14
F00:2793                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002430:  69 00 02 10
F00:2794                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002434:  65 00 02 0C
F00:2795                        
F00:2796           ; -(An)
F00:2797                   move.l #$00000102,a0
               S06:00002438:  30 7C 01 02
F00:2798                   move.w #$2FFF,(a0)
               S06:0000243C:  30 BC 2F FF
F00:2799                   move (a0)+,SR 
               S06:00002440:  46 D8
F00:2800                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002442:  6A 00 01 FE
F00:2801                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002446:  66 00 01 FA
F00:2802                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000244A:  68 00 01 F6
F00:2803                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:0000244E:  64 00 01 F2
F00:2804           
F00:2805                   move.w #$2000,(a0)
               S06:00002452:  30 BC 20 00
F00:2806                   move (a0)+,SR 
               S06:00002456:  46 D8
F00:2807                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002458:  67 00 01 E8
F00:2808                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000245C:  6B 00 01 E4
F00:2809                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002460:  69 00 01 E0
F00:2810                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002464:  65 00 01 DC
F00:2811                                   
F00:2812           ; n(An)
F00:2813                   move.l #$00000102,a0
               S06:00002468:  30 7C 01 02
F00:2814                   move.w #$2FFF,2(a0)
               S06:0000246C:  31 7C 2F FF 00 02
F00:2815                   move 2(a0),SR 
               S06:00002472:  46 E8 00 02
F00:2816                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002476:  6A 00 01 CA
F00:2817                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:0000247A:  66 00 01 C6
F00:2818                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000247E:  68 00 01 C2
F00:2819                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002482:  64 00 01 BE
F00:2820           
F00:2821                   move.w #$2000,2(a0)
               S06:00002486:  31 7C 20 00 00 02
F00:2822                   move 2(a0),SR 
               S06:0000248C:  46 E8 00 02
F00:2823                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002490:  67 00 01 B0
F00:2824                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002494:  6B 00 01 AC
F00:2825                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002498:  69 00 01 A8
F00:2826                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000249C:  65 00 01 A4
F00:2827                                           
F00:2828           ; n(An,Rn.l)
F00:2829                   move.l #$00000100,a0
               S06:000024A0:  30 7C 01 00
F00:2830                   move.l #$00000002,d0
               S06:000024A4:  70 02
F00:2831                   move.w #$2FFF,2(a0,d0.l)
               S06:000024A6:  31 BC 2F FF 08 02
F00:2832                   move 2(a0,d0.l),SR 
               S06:000024AC:  46 F0 08 02
F00:2833                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000024B0:  6A 00 01 90
F00:2834                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000024B4:  66 00 01 8C
F00:2835                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000024B8:  68 00 01 88
F00:2836                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000024BC:  64 00 01 84
F00:2837           
F00:2838                   move.w #$2000,2(a0,d0.l)
               S06:000024C0:  31 BC 20 00 08 02
F00:2839                   move 2(a0,d0.l),SR 
               S06:000024C6:  46 F0 08 02
F00:2840                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000024CA:  67 00 01 76
F00:2841                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000024CE:  6B 00 01 72
F00:2842                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000024D2:  69 00 01 6E
F00:2843                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000024D6:  65 00 01 6A
F00:2844                                                      
F00:2845           ; x.W
F00:2846                   move.w #$2FFF,$0100
               S06:000024DA:  31 FC 2F FF 01 00
F00:2847                   move $0100,SR 
               S06:000024E0:  46 F8 01 00
F00:2848                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000024E4:  6A 00 01 5C
F00:2849                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000024E8:  66 00 01 58
F00:2850                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000024EC:  68 00 01 54
F00:2851                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000024F0:  64 00 01 50
F00:2852           
F00:2853                   move.w #$2000,$0100
               S06:000024F4:  31 FC 20 00 01 00
F00:2854                   move $0100,SR 
               S06:000024FA:  46 F8 01 00
F00:2855                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000024FE:  67 00 01 42
F00:2856                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002502:  6B 00 01 3E
F00:2857                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002506:  69 00 01 3A
F00:2858                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000250A:  65 00 01 36
F00:2859                                                                
F00:2860           ; x.L
F00:2861                   move.w #$2FFF,$00010100
               S06:0000250E:  33 FC 2F FF 00 01 01 00
F00:2862                   move $00010100,SR 
               S06:00002516:  46 F9 00 01 01 00
F00:2863                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000251C:  6A 00 01 24
F00:2864                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002520:  66 00 01 20
F00:2865                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002524:  68 00 01 1C
F00:2866                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002528:  64 00 01 18
F00:2867           
F00:2868       MOVE4:      move.w #$2000,$00010100
               S06:0000252C:  33 FC 20 00 00 01 01 00
F00:2869                   move $00010100,SR 
               S06:00002534:  46 F9 00 01 01 00
F00:2870                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:0000253A:  67 00 01 06
F00:2871                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000253E:  6B 00 01 02
F00:2872                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002542:  69 00 00 FE
F00:2873                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002546:  65 00 00 FA
F00:2874                                                                          
F00:2875           ; x(PC)
F00:2876                   move MOVE4+2(pc),SR 
               S06:0000254A:  46 FA FF E2
F00:2877                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:0000254E:  67 00 00 F2
F00:2878                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002552:  6B 00 00 EE
F00:2879                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002556:  69 00 00 EA
F00:2880                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:0000255A:  65 00 00 E6
F00:2881                                                                          
F00:2882           ; x(PC,d0.l)
F00:2883                   move.l #$00000000,d0
               S06:0000255E:  70 00
F00:2884                   move MOVE4+2(pc,d0.l),SR 
               S06:00002560:  46 FB 08 CC
F00:2885                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002564:  67 00 00 DC
F00:2886                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002568:  6B 00 00 D8
F00:2887                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:0000256C:  69 00 00 D4
F00:2888                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002570:  65 00 00 D0
F00:2889                   move MOVE4+2(pc,d0.l),CCR 
               S06:00002574:  44 FB 08 B8
F00:2890                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002578:  67 00 00 C8
F00:2891                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000257C:  6B 00 00 C4
F00:2892                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002580:  69 00 00 C0
F00:2893                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002584:  65 00 00 BC
F00:2894                                                                          
F00:2895           ; #x
F00:2896                   move #$2FFF,SR 
               S06:00002588:  46 FC 2F FF
F00:2897                   bne MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000258C:  66 00 00 B4
F00:2898                   bpl MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002590:  6A 00 00 B0
F00:2899                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002594:  68 00 00 AC
F00:2900                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002598:  64 00 00 A8
F00:2901                   
F00:2902                   
F00:2903                   
F00:2904        ; MOVE_From_SR
F00:2905       
F00:2906                   
F00:2907                   
F00:2908           ; Dn
F00:2909                   move #$275A,SR        ; Initial value
               S06:0000259C:  46 FC 27 5A
F00:2910                   move SR,d0
               S06:000025A0:  40 C0
F00:2911                   cmpi.w #$271A,d0
               S06:000025A2:  0C 40 27 1A
F00:2912                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000025A6:  66 00 00 9A
F00:2913                        
F00:2914           ; (An)
F00:2915                   move.l #$00000100,a0
               S06:000025AA:  30 7C 01 00
F00:2916                   move #$275A,SR        ; Initial value
               S06:000025AE:  46 FC 27 5A
F00:2917                   move SR,(a0)
               S06:000025B2:  40 D0
F00:2918                   cmpi.w #$271A,(a0)
               S06:000025B4:  0C 50 27 1A
F00:2919                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000025B8:  66 00 00 88
F00:2920                              
F00:2921           ; (An)+
F00:2922                   move.l #$00000100,a0
               S06:000025BC:  30 7C 01 00
F00:2923                   move #$257A,SR        ; Initial value
               S06:000025C0:  46 FC 25 7A
F00:2924                   move SR,(a0)+
               S06:000025C4:  40 D8
F00:2925                   move.l #$00000100,a0
               S06:000025C6:  30 7C 01 00
F00:2926                   cmpi.w #$251A,(a0)+
               S06:000025CA:  0C 58 25 1A
F00:2927                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000025CE:  66 72
F00:2928                                          
F00:2929           ; -(An)
F00:2930                   move.l #$00000102,a0
               S06:000025D0:  30 7C 01 02
F00:2931                   move #$2766,SR        ; Initial value
               S06:000025D4:  46 FC 27 66
F00:2932                   move SR,-(a0)
               S06:000025D8:  40 E0
F00:2933                   move.l #$00000100,a0
               S06:000025DA:  30 7C 01 00
F00:2934                   cmpi.w #$2706,(a0)
               S06:000025DE:  0C 50 27 06
F00:2935                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000025E2:  66 5E
F00:2936                                                
F00:2937           ; x(An)
F00:2938                   move.l #$00000102,a0
               S06:000025E4:  30 7C 01 02
F00:2939                   move #$2733,SR        ; Initial value
               S06:000025E8:  46 FC 27 33
F00:2940                   move SR,4(a0)
               S06:000025EC:  40 E8 00 04
F00:2941                   cmpi.w #$2713,4(a0)
               S06:000025F0:  0C 68 27 13 00 04
F00:2942                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000025F6:  66 4A
F00:2943                                                    
F00:2944           ; x(An,rn)
F00:2945                   move.l #$00000102,a0
               S06:000025F8:  30 7C 01 02
F00:2946                   move.l #$00000004,d0
               S06:000025FC:  70 04
F00:2947                   move #$275a,SR        ; Initial value
               S06:000025FE:  46 FC 27 5A
F00:2948                   move SR,4(a0,d0.l)
               S06:00002602:  40 F0 08 04
F00:2949                   cmpi.w #$271a,4(a0,d0.l)
               S06:00002606:  0C 70 27 1A 08 04
F00:2950                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:0000260C:  66 34
F00:2951                                                               
F00:2952           ; x.W
F00:2953                   move #$2777,SR        ; Initial value
               S06:0000260E:  46 FC 27 77
F00:2954                   move SR,$0102
               S06:00002612:  40 F8 01 02
F00:2955                   cmpi.w #$2717,$0102
               S06:00002616:  0C 78 27 17 01 02
F00:2956                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:0000261C:  66 24
F00:2957                                                                    
F00:2958           ; x.L
F00:2959                   move #$2777,SR        ; Initial value
               S06:0000261E:  46 FC 27 77
F00:2960                   move SR,$10102
               S06:00002622:  40 F9 00 01 01 02
F00:2961                   cmpi.w #$2717,$10102
               S06:00002628:  0C 79 27 17 00 01 01 02
F00:2962                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002630:  66 10
F00:2963                   
F00:2964                   
F00:2965                   
F00:2966                   move #$2700,SR        ; Put flags back to initial value
               S06:00002632:  46 FC 27 00
F00:2967       
F00:2968                   movea #TESTSTATUS,a0
               S06:00002636:  30 7C FF 00
F00:2969                   move.b #$1,$11(a0)
               S06:0000263A:  11 7C 00 01 00 11
F00:2970                   rts
               S06:00002640:  4E 75
F00:2971       
F00:2972       MOVE_FLAGS_FAIL: 
F00:2973           movea #TESTSTATUS,a0
               S06:00002642:  30 7C FF 00
F00:2974           move.b #$2,$11(a0)
               S06:00002646:  11 7C 00 02 00 11
F00:2975           rts
               S06:0000264C:  4E 75
F00:2976       
F00:2977       ;-----------------------------------------------------------
F00:2978       ;-----------------------------------------------------------
F00:2979       ; OPCODE : EXT
F00:2980       ;-----------------------------------------------------------
F00:2981       ;-----------------------------------------------------------
F00:2982       op_EXT: 
F00:2983       
F00:2984                   move.l #$0000007F,d0
               S06:0000264E:  70 7F
F00:2985                   move.l #$00008FFF,d1
               S06:00002650:  22 3C 00 00 8F FF
F00:2986                   move.l #$00000000,d2
               S06:00002656:  74 00
F00:2987                   
F00:2988                   ext.w d0
               S06:00002658:  48 80
F00:2989                   bmi EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000265A:  6B 28
F00:2990                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000265C:  67 26
F00:2991                   cmpi.l #$0000007F,d0
               S06:0000265E:  0C 80 00 00 00 7F
F00:2992                   bne EXT_FAIL;                   ; branch if Z set  
               S06:00002664:  66 1E
F00:2993                   
F00:2994                   ext.l d1
               S06:00002666:  48 C1
F00:2995                   bpl EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002668:  6A 1A
F00:2996                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000266A:  67 18
F00:2997                   cmpi.l #$FFFF8FFF,d1
               S06:0000266C:  0C 81 FF FF 8F FF
F00:2998                   bne EXT_FAIL;                   ; branch if Z set  
               S06:00002672:  66 10
F00:2999                   
F00:3000                   ext.l d2
               S06:00002674:  48 C2
F00:3001                   bne EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002676:  66 0C
F00:3002       
F00:3003                   movea #TESTSTATUS,a0
               S06:00002678:  30 7C FF 00
F00:3004                   move.b #$1,$12(a0)
               S06:0000267C:  11 7C 00 01 00 12
F00:3005                   rts
               S06:00002682:  4E 75
F00:3006       
F00:3007       EXT_FAIL: 
F00:3008           movea #TESTSTATUS,a0
               S06:00002684:  30 7C FF 00
F00:3009           move.b #$2,$12(a0)
               S06:00002688:  11 7C 00 02 00 12
F00:3010           rts
               S06:0000268E:  4E 75
F00:3011                    
F00:3012       ;-----------------------------------------------------------
F00:3013       ;-----------------------------------------------------------
F00:3014       ; OPCODE : SWAP
F00:3015       ;-----------------------------------------------------------
F00:3016       ;-----------------------------------------------------------
F00:3017       op_SWAP: 
F00:3018       
F00:3019                   move.l #$12345678,d0
               S06:00002690:  20 3C 12 34 56 78
F00:3020                   
F00:3021                   swap d0
               S06:00002696:  48 40
F00:3022                   bmi SWAP_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002698:  6B 16
F00:3023                   beq SWAP_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000269A:  67 14
F00:3024                   cmpi.l #$56781234,d0
               S06:0000269C:  0C 80 56 78 12 34
F00:3025                   bne SWAP_FAIL;                   ; branch if Z set  
               S06:000026A2:  66 0C
F00:3026       
F00:3027                   movea #TESTSTATUS,a0
               S06:000026A4:  30 7C FF 00
F00:3028                   move.b #$1,$13(a0)
               S06:000026A8:  11 7C 00 01 00 13
F00:3029                   rts
               S06:000026AE:  4E 75
F00:3030       
F00:3031       SWAP_FAIL:
F00:3032           movea #TESTSTATUS,a0
               S06:000026B0:  30 7C FF 00
F00:3033           move.b #$2,$13(a0) 
               S06:000026B4:  11 7C 00 02 00 13
F00:3034           rts
               S06:000026BA:  4E 75
F00:3035                    
F00:3036       ;-----------------------------------------------------------
F00:3037       ;-----------------------------------------------------------
F00:3038       ; OPCODE : LEA_PEA
F00:3039       ;-----------------------------------------------------------
F00:3040       ;-----------------------------------------------------------
F00:3041       op_LEAPEA: 
F00:3042       
F00:3043                   move.l #$00345678,a0
               S06:000026BC:  20 7C 00 34 56 78
F00:3044                   move.l #$00000000,d4
               S06:000026C2:  78 00
F00:3045                   
F00:3046           ; (An)      
F00:3047                   lea (a0),a6
               S06:000026C4:  4D D0
F00:3048                   move.l a6,d0
               S06:000026C6:  20 0E
F00:3049                   cmpi.l #$00345678,d0
               S06:000026C8:  0C 80 00 34 56 78
F00:3050                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000026CE:  66 00 00 A8
F00:3051                   pea (a0)
               S06:000026D2:  48 50
F00:3052                   cmpi.l #$00345678,(a7)
               S06:000026D4:  0C 97 00 34 56 78
F00:3053                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000026DA:  66 00 00 9C
F00:3054                   addq #4,a7            ; Restore Stack Pointer
               S06:000026DE:  58 4F
F00:3055                   
F00:3056           ; x(An)     
F00:3057                   lea 4(a0),a6
               S06:000026E0:  4D E8 00 04
F00:3058                   move.l a6,d0
               S06:000026E4:  20 0E
F00:3059                   cmpi.l #$0034567C,d0
               S06:000026E6:  0C 80 00 34 56 7C
F00:3060                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000026EC:  66 00 00 8A
F00:3061                   pea 4(a0)
               S06:000026F0:  48 68 00 04
F00:3062                   cmpi.l #$0034567C,(a7)
               S06:000026F4:  0C 97 00 34 56 7C
F00:3063                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000026FA:  66 7C
F00:3064                   addq #4,a7            ; Restore Stack Pointer         
               S06:000026FC:  58 4F
F00:3065       
F00:3066           ; x(An,Dn.l)        
F00:3067                   lea 4(a0,d4),a6
               S06:000026FE:  4D F0 40 04
F00:3068                   move.l a6,d0
               S06:00002702:  20 0E
F00:3069                   cmpi.l #$0034567C,d0
               S06:00002704:  0C 80 00 34 56 7C
F00:3070                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000270A:  66 6C
F00:3071                   pea 4(a0,d4.l)
               S06:0000270C:  48 70 48 04
F00:3072                   cmpi.l #$0034567C,(a7)
               S06:00002710:  0C 97 00 34 56 7C
F00:3073                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002716:  66 60
F00:3074                   addq #4,a7            ; Restore Stack Pointer
               S06:00002718:  58 4F
F00:3075                   
F00:3076           ; x.W       
F00:3077                   lea $1234,a6
               S06:0000271A:  4D F8 12 34
F00:3078                   move.l a6,d0
               S06:0000271E:  20 0E
F00:3079                   cmpi.w #$1234,d0
               S06:00002720:  0C 40 12 34
F00:3080                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002724:  66 52
F00:3081                   pea $1234
               S06:00002726:  48 78 12 34
F00:3082                   cmpi.l #$00001234,(a7)
               S06:0000272A:  0C 97 00 00 12 34
F00:3083                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002730:  66 46
F00:3084                   addq #4,a7            ; Restore Stack Pointer
               S06:00002732:  58 4F
F00:3085                  
F00:3086           ; x.L       
F00:3087                   lea $00345678,a6
               S06:00002734:  4D F9 00 34 56 78
F00:3088                   move.l a6,d0
               S06:0000273A:  20 0E
F00:3089                   cmp.l a6,d0
               S06:0000273C:  B0 8E
F00:3090                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000273E:  66 38
F00:3091                   pea $00345678
               S06:00002740:  48 79 00 34 56 78
F00:3092                   cmpi.l #$00345678,(a7)
               S06:00002746:  0C 97 00 34 56 78
F00:3093                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000274C:  66 2A
F00:3094                   addq #4,a7            ; Restore Stack Pointer
               S06:0000274E:  58 4F
F00:3095                  
F00:3096           ; x(PC)     
F00:3097                   lea LEA1(pc),a6
               S06:00002750:  4D FA 00 08
F00:3098                   move.l a6,d0
               S06:00002754:  20 0E
F00:3099                   cmp.l a6,d0
               S06:00002756:  B0 8E
F00:3100                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002758:  66 1E
F00:3101       LEA1:       pea LEA1(pc)
               S06:0000275A:  48 7A FF FE
F00:3102                   cmpi.l #$0000241E,(a7)
               S06:0000275E:  0C 97 00 00 24 1E
F00:3103                   beq LEAPEA_FAIL;                   ; branch if Z clear  
               S06:00002764:  67 12
F00:3104                   addq #4,a7            ; Restore Stack Pointer
               S06:00002766:  58 4F
F00:3105       
F00:3106       
F00:3107       
F00:3108                 
F00:3109                   move #$2700,SR        ; Put flags back to initial value
               S06:00002768:  46 FC 27 00
F00:3110       
F00:3111                   movea #TESTSTATUS,a0
               S06:0000276C:  30 7C FF 00
F00:3112                   move.b #$1,$14(a0)
               S06:00002770:  11 7C 00 01 00 14
F00:3113                   rts
               S06:00002776:  4E 75
F00:3114           
F00:3115       LEAPEA_FAIL:
F00:3116           movea #TESTSTATUS,a0
               S06:00002778:  30 7C FF 00
F00:3117           move.b #$2,$14(a0)
               S06:0000277C:  11 7C 00 02 00 14
F00:3118           rts
               S06:00002782:  4E 75
F00:3119                    
F00:3120       ;-----------------------------------------------------------
F00:3121       ;-----------------------------------------------------------
F00:3122       ; OPCODE : LEA_TAS
F00:3123       ;-----------------------------------------------------------
F00:3124       ;-----------------------------------------------------------
F00:3125       op_TAS: 
F00:3126       
F00:3127           ; Test just one addressing mode
F00:3128       
F00:3129                   move.l #$00000100,a0
               S06:00002784:  30 7C 01 00
F00:3130                   
F00:3131           ; (An)      
F00:3132                   move.b #$00,(a0)
               S06:00002788:  10 BC 00 00
F00:3133                   bmi TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000278C:  6B 28
F00:3134                   bne TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000278E:  66 26
F00:3135                   tas (a0)
               S06:00002790:  4A D0
F00:3136                   cmpi.b #$80,(a0)
               S06:00002792:  0C 10 00 80
F00:3137                   bne TAS_FAIL;                   ; branch if Z set  
               S06:00002796:  66 1E
F00:3138                   move.b #$F5,(a0)
               S06:00002798:  10 BC 00 F5
F00:3139                   tas (a0)
               S06:0000279C:  4A D0
F00:3140                   bpl TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000279E:  6A 16
F00:3141                   beq TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027A0:  67 14
F00:3142                   tas (a0)
               S06:000027A2:  4A D0
F00:3143                   cmpi.b #$F5,(a0)
               S06:000027A4:  0C 10 00 F5
F00:3144                   bne TAS_FAIL                   ; branch if Z set  
               S06:000027A8:  66 0C
F00:3145       
F00:3146                   movea #TESTSTATUS,a0
               S06:000027AA:  30 7C FF 00
F00:3147                   move.b #$1,$15(a0)
               S06:000027AE:  11 7C 00 01 00 15
F00:3148                   rts
               S06:000027B4:  4E 75
F00:3149                   
F00:3150       TAS_FAIL: 
F00:3151           movea #TESTSTATUS,a0
               S06:000027B6:  30 7C FF 00
F00:3152           move.b #$2,$15(a0)
               S06:000027BA:  11 7C 00 02 00 15
F00:3153           rts
               S06:000027C0:  4E 75
F00:3154       
F00:3155       ;-----------------------------------------------------------
F00:3156       ;-----------------------------------------------------------
F00:3157       ; OPCODE : LEA_TST
F00:3158       ;-----------------------------------------------------------
F00:3159       ;-----------------------------------------------------------
F00:3160       op_TST: 
F00:3161       
F00:3162           ; Test just one addressing mode
F00:3163       
F00:3164                   move.l #$00000100,a0
               S06:000027C2:  30 7C 01 00
F00:3165                   
F00:3166           ; (An) - BYTE       
F00:3167                   move.b #$00,(a0)
               S06:000027C6:  10 BC 00 00
F00:3168                   tst.b (a0)
               S06:000027CA:  4A 10
F00:3169                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000027CC:  6B 44
F00:3170                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027CE:  66 42
F00:3171                   move.b #$F5,(a0)
               S06:000027D0:  10 BC 00 F5
F00:3172                   tst.b (a0)
               S06:000027D4:  4A 10
F00:3173                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000027D6:  6A 3A
F00:3174                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027D8:  67 38
F00:3175                   
F00:3176           ; (An) - WORD       
F00:3177                   move.w #$0000,(a0)
               S06:000027DA:  30 BC 00 00
F00:3178                   tst.w (a0)
               S06:000027DE:  4A 50
F00:3179                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000027E0:  6B 30
F00:3180                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027E2:  66 2E
F00:3181                   move.w #$F567,(a0)
               S06:000027E4:  30 BC F5 67
F00:3182                   tst.w (a0)
               S06:000027E8:  4A 50
F00:3183                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000027EA:  6A 26
F00:3184                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027EC:  67 24
F00:3185                   
F00:3186           ; (An) - LONG       
F00:3187                   move.l #$00000000,(a0)
               S06:000027EE:  20 BC 00 00 00 00
F00:3188                   tst.l (a0)
               S06:000027F4:  4A 90
F00:3189                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000027F6:  6B 1A
F00:3190                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027F8:  66 18
F00:3191                   move.l #$F56789ab,(a0)
               S06:000027FA:  20 BC F5 67 89 AB
F00:3192                   tst.l (a0)
               S06:00002800:  4A 90
F00:3193                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002802:  6A 0E
F00:3194                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002804:  67 0C
F00:3195       
F00:3196                   movea #TESTSTATUS,a0
               S06:00002806:  30 7C FF 00
F00:3197                   move.b #$1,$16(a0)
               S06:0000280A:  11 7C 00 01 00 16
F00:3198                   rts
               S06:00002810:  4E 75
F00:3199       
F00:3200       TST_FAIL:
F00:3201           movea #TESTSTATUS,a0
               S06:00002812:  30 7C FF 00
F00:3202           move.b #$2,$16(a0)
               S06:00002816:  11 7C 00 02 00 16
F00:3203           rts   
               S06:0000281C:  4E 75
F00:3204            
F00:3205       ;-----------------------------------------------------------
F00:3206       ;-----------------------------------------------------------
F00:3207       ; OPCODE : LINKS
F00:3208       ;-----------------------------------------------------------
F00:3209       ;-----------------------------------------------------------
F00:3210       op_LINKS: 
F00:3211       
F00:3212                   move.l #$11223344,a0
               S06:0000281E:  20 7C 11 22 33 44
F00:3213                   move.l #$11223344,d0
               S06:00002824:  20 3C 11 22 33 44
F00:3214                   link a0,#$0
               S06:0000282A:  4E 50 00 00
F00:3215                   cmpi.l #$11223344,(a7)
               S06:0000282E:  0C 97 11 22 33 44
F00:3216                   
F00:3217                   unlk a0
               S06:00002834:  4E 58
F00:3218                   cmp.l d0,a0
               S06:00002836:  B1 C0
F00:3219                   bne LINK_FAIL;                   ; branch if Z set  
               S06:00002838:  66 0C
F00:3220       
F00:3221                   movea #TESTSTATUS,a0
               S06:0000283A:  30 7C FF 00
F00:3222                   move.b #$1,$17(a0)
               S06:0000283E:  11 7C 00 01 00 17
F00:3223                   rts
               S06:00002844:  4E 75
F00:3224       
F00:3225       LINK_FAIL:
F00:3226           movea #TESTSTATUS,a0
               S06:00002846:  30 7C FF 00
F00:3227           move.b #$2,$17(a0)
               S06:0000284A:  11 7C 00 02 00 17
F00:3228           rts
               S06:00002850:  4E 75
F00:3229       
F00:3230       ;-----------------------------------------------------------
F00:3231       ;-----------------------------------------------------------
F00:3232       ; OPCODE : MOVE_USP
F00:3233       ;-----------------------------------------------------------
F00:3234       ;-----------------------------------------------------------
F00:3235       op_MOVE_USP: 
F00:3236       
F00:3237                   move.l #$11223344,a0
               S06:00002852:  20 7C 11 22 33 44
F00:3238                   move USP,a3
               S06:00002858:  4E 6B
F00:3239                   move a0,USP
               S06:0000285A:  4E 60
F00:3240                   move USP,a1
               S06:0000285C:  4E 69
F00:3241                   cmp.l a0,a1
               S06:0000285E:  B3 C8
F00:3242                   bne MOVE_USP_FAIL;                   ; branch if Z set  
               S06:00002860:  66 0E
F00:3243                   move a3,USP
               S06:00002862:  4E 63
F00:3244       
F00:3245                   movea #TESTSTATUS,a0
               S06:00002864:  30 7C FF 00
F00:3246                   move.b #$1,$18(a0)
               S06:00002868:  11 7C 00 01 00 18
F00:3247                   rts
               S06:0000286E:  4E 75
F00:3248       
F00:3249       MOVE_USP_FAIL:
F00:3250           movea #TESTSTATUS,a0
               S06:00002870:  30 7C FF 00
F00:3251           move.b #$2,$18(a0)
               S06:00002874:  11 7C 00 02 00 18
F00:3252           rts
               S06:0000287A:  4E 75
F00:3253       
F00:3254       ;-----------------------------------------------------------
F00:3255       ;-----------------------------------------------------------
F00:3256       ; OPCODE : CHK
F00:3257       ;-----------------------------------------------------------
F00:3258       ;-----------------------------------------------------------
F00:3259       op_CHK: 
F00:3260                   move.w #$1122,d0
               S06:0000287C:  30 3C 11 22
F00:3261                   move.w #$1122,d1
               S06:00002880:  32 3C 11 22
F00:3262                   chk d0,d1 
               S06:00002884:  43 80
F00:3263                   
F00:3264                   nop
               S06:00002886:  4E 71
F00:3265                   nop
               S06:00002888:  4E 71
F00:3266                   
F00:3267                   move.w #$1122,d1
               S06:0000288A:  32 3C 11 22
F00:3268                   chk #$1122,d1 
               S06:0000288E:  43 BC 11 22
F00:3269                           
F00:3270           ; Comment out when using Easy68K
F00:3271                   move.w #$1122,d1
               S06:00002892:  32 3C 11 22
F00:3272                   chk #00122,d1 
               S06:00002896:  43 BC 00 7A
F00:3273                   cmp.l #$EEEE0006,d6
               S06:0000289A:  BC BC EE EE 00 06
F00:3274                   bne CHK_FAIL;                   ; branch if Z set  
               S06:000028A0:  66 1E
F00:3275       
F00:3276                   move.w #$1122,d0      
               S06:000028A2:  30 3C 11 22
F00:3277                   move.w #$8000,d1
               S06:000028A6:  32 3C 80 00
F00:3278                   chk d0,d1 
               S06:000028AA:  43 80
F00:3279                   cmp.l #$EEEE0006,d6
               S06:000028AC:  BC BC EE EE 00 06
F00:3280                   bne CHK_FAIL;                   ; branch if Z set  
               S06:000028B2:  66 0C
F00:3281       
F00:3282                   movea #TESTSTATUS,a0
               S06:000028B4:  30 7C FF 00
F00:3283                   move.b #$1,$19(a0)
               S06:000028B8:  11 7C 00 01 00 19
F00:3284                   rts
               S06:000028BE:  4E 75
F00:3285             
F00:3286       CHK_FAIL: 
F00:3287           movea #TESTSTATUS,a0
               S06:000028C0:  30 7C FF 00
F00:3288           move.b #$2,$19(a0)
               S06:000028C4:  11 7C 00 02 00 19
F00:3289           rts
               S06:000028CA:  4E 75
F00:3290       
F00:3291       ;-----------------------------------------------------------
F00:3292       ;-----------------------------------------------------------
F00:3293       ; OPCODE : NEGS
F00:3294       ;-----------------------------------------------------------
F00:3295       ;-----------------------------------------------------------
F00:3296       op_NEGS: 
F00:3297       
F00:3298           ; NOT - BYTE
F00:3299                   move.l #$00000100,a0
               S06:000028CC:  30 7C 01 00
F00:3300                   move.l #$00000000,d0
               S06:000028D0:  70 00
F00:3301                   not.b d0
               S06:000028D2:  46 00
F00:3302                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000028D4:  6A 00 04 A4
F00:3303                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000028D8:  67 00 04 A0
F00:3304                   not.b d0
               S06:000028DC:  46 00
F00:3305                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000028DE:  6B 00 04 9A
F00:3306                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000028E2:  66 00 04 96
F00:3307                   cmpi.b #$00,d0
               S06:000028E6:  4A 00
F00:3308                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000028E8:  66 00 04 90
F00:3309                   move.b #$80,(a0)
               S06:000028EC:  10 BC 00 80
F00:3310                   not.b (a0)
               S06:000028F0:  46 10
F00:3311                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000028F2:  6B 00 04 86
F00:3312                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000028F6:  67 00 04 82
F00:3313                   not.b (a0)
               S06:000028FA:  46 10
F00:3314                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000028FC:  6A 00 04 7C
F00:3315                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002900:  67 00 04 78
F00:3316                   cmpi.b #$80,(a0)
               S06:00002904:  0C 10 00 80
F00:3317                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002908:  66 00 04 70
F00:3318       
F00:3319           ; NOT - WORD
F00:3320                   move.l #$00000100,a0
               S06:0000290C:  30 7C 01 00
F00:3321                   move.l #$00000000,d0
               S06:00002910:  70 00
F00:3322                   not.w d0
               S06:00002912:  46 40
F00:3323                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002914:  6A 00 04 64
F00:3324                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002918:  67 00 04 60
F00:3325                   not.w d0
               S06:0000291C:  46 40
F00:3326                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000291E:  6B 00 04 5A
F00:3327                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002922:  66 00 04 56
F00:3328                   cmpi.w #$0000,d0
               S06:00002926:  4A 40
F00:3329                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002928:  66 00 04 50
F00:3330                   move.w #$5a5a,(a0)
               S06:0000292C:  30 BC 5A 5A
F00:3331                   not.w (a0)
               S06:00002930:  46 50
F00:3332                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002932:  6A 00 04 46
F00:3333                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002936:  67 00 04 42
F00:3334                   not.w (a0)
               S06:0000293A:  46 50
F00:3335                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000293C:  6B 00 04 3C
F00:3336                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002940:  67 00 04 38
F00:3337                   cmpi.w #$5a5a,(a0)
               S06:00002944:  0C 50 5A 5A
F00:3338                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002948:  66 00 04 30
F00:3339       
F00:3340           ; NOT - LONG
F00:3341                   move.l #$00000100,a0
               S06:0000294C:  30 7C 01 00
F00:3342                   move.l #$00000000,d0
               S06:00002950:  70 00
F00:3343                   not.l d0
               S06:00002952:  46 80
F00:3344                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002954:  6A 00 04 24
F00:3345                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002958:  67 00 04 20
F00:3346                   not.l d0
               S06:0000295C:  46 80
F00:3347                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000295E:  6B 00 04 1A
F00:3348                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002962:  66 00 04 16
F00:3349                   cmpi.l #$00000000,d0
               S06:00002966:  4A 80
F00:3350                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002968:  66 00 04 10
F00:3351                   move.l #$5a5a1234,(a0)
               S06:0000296C:  20 BC 5A 5A 12 34
F00:3352                   not.l (a0)
               S06:00002972:  46 90
F00:3353                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002974:  6A 00 04 04
F00:3354                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002978:  67 00 04 00
F00:3355                   not.l (a0)
               S06:0000297C:  46 90
F00:3356                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000297E:  6B 00 03 FA
F00:3357                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002982:  67 00 03 F6
F00:3358                   cmpi.l #$5a5a1234,(a0)
               S06:00002986:  0C 90 5A 5A 12 34
F00:3359                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000298C:  66 00 03 EC
F00:3360       
F00:3361       ; ----- 
F00:3362       
F00:3363           ; NEG - BYTE
F00:3364                   move.l #$00000100,a0
               S06:00002990:  30 7C 01 00
F00:3365                   move.l #$00000000,d0
               S06:00002994:  70 00
F00:3366                   move.l #$00000080,d1
               S06:00002996:  72 40 D2 41
F00:3367                   neg.b d0
               S06:0000299A:  44 00
F00:3368                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000299C:  6B 00 03 DC
F00:3369                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000029A0:  66 00 03 D8
F00:3370                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000029A4:  65 00 03 D4
F00:3371                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000029A8:  69 00 03 D0
F00:3372                   neg.b d1
               S06:000029AC:  44 01
F00:3373                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000029AE:  6A 00 03 CA
F00:3374                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000029B2:  67 00 03 C6
F00:3375                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000029B6:  64 00 03 C2
F00:3376                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000029BA:  68 00 03 BE
F00:3377                   cmpi.b #$80,d1
               S06:000029BE:  0C 01 00 80
F00:3378                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000029C2:  66 00 03 B6
F00:3379                   move.b #$7F,(a0)
               S06:000029C6:  10 BC 00 7F
F00:3380                   neg.b (a0)
               S06:000029CA:  44 10
F00:3381                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000029CC:  6A 00 03 AC
F00:3382                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000029D0:  67 00 03 A8
F00:3383                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000029D4:  64 00 03 A4
F00:3384                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:000029D8:  69 00 03 A0
F00:3385                   move.b #$F5,(a0)
               S06:000029DC:  10 BC 00 F5
F00:3386                   neg.b (a0)
               S06:000029E0:  44 10
F00:3387                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000029E2:  6B 00 03 96
F00:3388                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000029E6:  67 00 03 92
F00:3389                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000029EA:  64 00 03 8E
F00:3390                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:000029EE:  69 00 03 8A
F00:3391                   cmpi.b #$0B,(a0)
               S06:000029F2:  0C 10 00 0B
F00:3392                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000029F6:  66 00 03 82
F00:3393       
F00:3394       ; -----         
F00:3395       
F00:3396           ; NEG - WORD
F00:3397                   move.l #$00000100,a0
               S06:000029FA:  30 7C 01 00
F00:3398                   move.l #$00000000,d0
               S06:000029FE:  70 00
F00:3399                   move.l #$00008000,d1
               S06:00002A00:  22 3C 00 00 80 00
F00:3400                   neg.w d0
               S06:00002A06:  44 40
F00:3401                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A08:  6B 00 03 70
F00:3402                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002A0C:  66 00 03 6C
F00:3403                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002A10:  65 00 03 68
F00:3404                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002A14:  69 00 03 64
F00:3405                   neg.w d1
               S06:00002A18:  44 41
F00:3406                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002A1A:  6A 00 03 5E
F00:3407                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A1E:  67 00 03 5A
F00:3408                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A22:  64 00 03 56
F00:3409                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002A26:  68 00 03 52
F00:3410                   cmpi.w #$8000,d1
               S06:00002A2A:  0C 41 80 00
F00:3411                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A2E:  66 00 03 4A
F00:3412                   move.w #$7FFF,(a0)
               S06:00002A32:  30 BC 7F FF
F00:3413                   neg.w (a0)
               S06:00002A36:  44 50
F00:3414                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002A38:  6A 00 03 40
F00:3415                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A3C:  67 00 03 3C
F00:3416                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A40:  64 00 03 38
F00:3417                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002A44:  69 00 03 34
F00:3418                   move.w #$F578,(a0)
               S06:00002A48:  30 BC F5 78
F00:3419                   neg.w (a0)
               S06:00002A4C:  44 50
F00:3420                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A4E:  6B 00 03 2A
F00:3421                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A52:  67 00 03 26
F00:3422                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A56:  64 00 03 22
F00:3423                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002A5A:  69 00 03 1E
F00:3424                   cmpi.w #$0A88,(a0)
               S06:00002A5E:  0C 50 0A 88
F00:3425                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A62:  66 00 03 16
F00:3426       
F00:3427       ; -----         
F00:3428       
F00:3429           ; NEG - LONG
F00:3430                   move.l #$00000100,a0
               S06:00002A66:  30 7C 01 00
F00:3431                   move.l #$00000000,d0
               S06:00002A6A:  70 00
F00:3432                   move.l #$80000000,d1
               S06:00002A6C:  22 3C 80 00 00 00
F00:3433                   neg.l d0
               S06:00002A72:  44 80
F00:3434                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A74:  6B 00 03 04
F00:3435                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002A78:  66 00 03 00
F00:3436                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002A7C:  65 00 02 FC
F00:3437                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002A80:  69 00 02 F8
F00:3438                   neg.l d1
               S06:00002A84:  44 81
F00:3439                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002A86:  6A 00 02 F2
F00:3440                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A8A:  67 00 02 EE
F00:3441                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A8E:  64 00 02 EA
F00:3442                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002A92:  68 00 02 E6
F00:3443                   cmpi.l #$80000000,d1
               S06:00002A96:  0C 81 80 00 00 00
F00:3444                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A9C:  66 00 02 DC
F00:3445                   move.l #$7FFFFFFF,(a0)
               S06:00002AA0:  20 BC 7F FF FF FF
F00:3446                   neg.l (a0)
               S06:00002AA6:  44 90
F00:3447                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002AA8:  6A 00 02 D0
F00:3448                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002AAC:  67 00 02 CC
F00:3449                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002AB0:  64 00 02 C8
F00:3450                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002AB4:  69 00 02 C4
F00:3451                   move.l #$F5781234,(a0)
               S06:00002AB8:  20 BC F5 78 12 34
F00:3452                   neg.l (a0)
               S06:00002ABE:  44 90
F00:3453                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002AC0:  6B 00 02 B8
F00:3454                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002AC4:  67 00 02 B4
F00:3455                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002AC8:  64 00 02 B0
F00:3456                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002ACC:  69 00 02 AC
F00:3457                   cmpi.l #$0A87EDCC,(a0)
               S06:00002AD0:  0C 90 0A 87 ED CC
F00:3458                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002AD6:  66 00 02 A2
F00:3459       
F00:3460       
F00:3461       ; -----         
F00:3462       
F00:3463           ; NEGX - BYTE
F00:3464                   move.l #$00000100,a0
               S06:00002ADA:  30 7C 01 00
F00:3465                   move.l #$00000000,d0
               S06:00002ADE:  70 00
F00:3466                   move.l #$00000080,d1
               S06:00002AE0:  72 40 D2 41
F00:3467                   ori.b #$10,CCR        ; Set X Flag
               S06:00002AE4:  00 3C 00 10
F00:3468                   negx.b d0
               S06:00002AE8:  40 00
F00:3469                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002AEA:  6A 00 02 8E
F00:3470                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002AEE:  67 00 02 8A
F00:3471                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002AF2:  64 00 02 86
F00:3472                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:00002AF6:  69 00 02 82
F00:3473                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002AFA:  02 3C 00 EF
F00:3474                   negx.b d0
               S06:00002AFE:  40 00
F00:3475                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B00:  6B 00 02 78
F00:3476                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002B04:  67 00 02 74
F00:3477                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002B08:  64 00 02 70
F00:3478                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002B0C:  69 00 02 6C
F00:3479                   ori.b #$10,CCR        ; Set X Flag
               S06:00002B10:  00 3C 00 10
F00:3480                   negx.b d1
               S06:00002B14:  40 01
F00:3481                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002B16:  6B 00 02 62
F00:3482                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B1A:  67 00 02 5E
F00:3483                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B1E:  64 00 02 5A
F00:3484                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002B22:  69 00 02 56
F00:3485                   cmpi.b #$7F,d1
               S06:00002B26:  0C 01 00 7F
F00:3486                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:00002B2A:  66 00 02 4E
F00:3487                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002B2E:  02 3C 00 EF
F00:3488                   negx.b d1
               S06:00002B32:  40 01
F00:3489                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002B34:  6A 00 02 44
F00:3490                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B38:  67 00 02 40
F00:3491                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B3C:  64 00 02 3C
F00:3492                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002B40:  69 00 02 38
F00:3493                   cmpi.b #$81,d1
               S06:00002B44:  0C 01 00 81
F00:3494                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002B48:  66 00 02 30
F00:3495                   move.b #$7F,(a0)
               S06:00002B4C:  10 BC 00 7F
F00:3496                   ori.b #$10,CCR        ; Set X Flag
               S06:00002B50:  00 3C 00 10
F00:3497                   negx.b (a0)
               S06:00002B54:  40 10
F00:3498                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002B56:  6A 00 02 22
F00:3499                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B5A:  67 00 02 1E
F00:3500                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B5E:  64 00 02 1A
F00:3501                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002B62:  69 00 02 16
F00:3502                   move.b #$7F,(a0)
               S06:00002B66:  10 BC 00 7F
F00:3503                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002B6A:  02 3C 00 EF
F00:3504                   negx.b (a0)
               S06:00002B6E:  40 10
F00:3505                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002B70:  6A 00 02 08
F00:3506                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B74:  67 00 02 04
F00:3507                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B78:  64 00 02 00
F00:3508                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002B7C:  69 00 01 FC
F00:3509                   move.b #$F5,(a0)
               S06:00002B80:  10 BC 00 F5
F00:3510                   ori.b #$10,CCR        ; Set X Flag
               S06:00002B84:  00 3C 00 10
F00:3511                   negx.b (a0)
               S06:00002B88:  40 10
F00:3512                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B8A:  6B 00 01 EE
F00:3513                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B8E:  67 00 01 EA
F00:3514                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B92:  64 00 01 E6
F00:3515                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002B96:  69 00 01 E2
F00:3516                   cmpi.b #$0A,(a0)
               S06:00002B9A:  0C 10 00 0A
F00:3517                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002B9E:  66 00 01 DA
F00:3518                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002BA2:  02 3C 00 EF
F00:3519                   negx.b (a0)
               S06:00002BA6:  40 10
F00:3520                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002BA8:  6A 00 01 D0
F00:3521                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BAC:  67 00 01 CC
F00:3522                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002BB0:  64 00 01 C8
F00:3523                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002BB4:  69 00 01 C4
F00:3524                   cmpi.b #$F6,(a0)
               S06:00002BB8:  0C 10 00 F6
F00:3525                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002BBC:  66 00 01 BC
F00:3526       
F00:3527           
F00:3528       
F00:3529       ; -----         
F00:3530       
F00:3531           ; NEGX - WORD
F00:3532                   move.l #$00000100,a0
               S06:00002BC0:  30 7C 01 00
F00:3533                   move.l #$00000000,d0
               S06:00002BC4:  70 00
F00:3534                   move.l #$00008000,d1
               S06:00002BC6:  22 3C 00 00 80 00
F00:3535                   ori.b #$10,CCR        ; Set X Flag
               S06:00002BCC:  00 3C 00 10
F00:3536                   negx.w d0
               S06:00002BD0:  40 40
F00:3537                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002BD2:  6A 00 01 A6
F00:3538                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002BD6:  67 00 01 A2
F00:3539                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002BDA:  64 00 01 9E
F00:3540                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:00002BDE:  69 00 01 9A
F00:3541                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002BE2:  02 3C 00 EF
F00:3542                   negx.w d0
               S06:00002BE6:  40 40
F00:3543                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002BE8:  6B 00 01 90
F00:3544                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002BEC:  67 00 01 8C
F00:3545                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002BF0:  64 00 01 88
F00:3546                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002BF4:  69 00 01 84
F00:3547                   ori.b #$10,CCR        ; Set X Flag
               S06:00002BF8:  00 3C 00 10
F00:3548                   negx.w d1
               S06:00002BFC:  40 41
F00:3549                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002BFE:  6B 00 01 7A
F00:3550                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C02:  67 00 01 76
F00:3551                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C06:  64 00 01 72
F00:3552                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002C0A:  69 00 01 6E
F00:3553                   cmpi.w #$7FFF,d1
               S06:00002C0E:  0C 41 7F FF
F00:3554                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:00002C12:  66 00 01 66
F00:3555                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002C16:  02 3C 00 EF
F00:3556                   negx.w d1
               S06:00002C1A:  40 41
F00:3557                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002C1C:  6A 00 01 5C
F00:3558                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C20:  67 00 01 58
F00:3559                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C24:  64 00 01 54
F00:3560                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002C28:  69 00 01 50
F00:3561                   cmpi.w #$8001,d1
               S06:00002C2C:  0C 41 80 01
F00:3562                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002C30:  66 00 01 48
F00:3563                   move.w #$7FFF,(a0)
               S06:00002C34:  30 BC 7F FF
F00:3564                   ori.b #$10,CCR        ; Set X Flag
               S06:00002C38:  00 3C 00 10
F00:3565                   negx.w (a0)
               S06:00002C3C:  40 50
F00:3566                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002C3E:  6A 00 01 3A
F00:3567                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C42:  67 00 01 36
F00:3568                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C46:  64 00 01 32
F00:3569                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002C4A:  69 00 01 2E
F00:3570                   move.w #$F567,(a0)            
               S06:00002C4E:  30 BC F5 67
F00:3571                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002C52:  02 3C 00 EF
F00:3572                   negx.w (a0)
               S06:00002C56:  40 50
F00:3573                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002C58:  6B 00 01 20
F00:3574                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C5C:  67 00 01 1C
F00:3575                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C60:  64 00 01 18
F00:3576                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002C64:  69 00 01 14
F00:3577                   move.w #$F567,(a0)
               S06:00002C68:  30 BC F5 67
F00:3578                   ori.b #$10,CCR        ; Set X Flag
               S06:00002C6C:  00 3C 00 10
F00:3579                   negx.w (a0)
               S06:00002C70:  40 50
F00:3580                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002C72:  6B 00 01 06
F00:3581                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C76:  67 00 01 02
F00:3582                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C7A:  64 00 00 FE
F00:3583                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002C7E:  69 00 00 FA
F00:3584                   cmpi.w #$0A98,(a0)
               S06:00002C82:  0C 50 0A 98
F00:3585                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002C86:  66 00 00 F2
F00:3586                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002C8A:  02 3C 00 EF
F00:3587                   negx.w (a0)
               S06:00002C8E:  40 50
F00:3588                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002C90:  6A 00 00 E8
F00:3589                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C94:  67 00 00 E4
F00:3590                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002C98:  64 00 00 E0
F00:3591                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002C9C:  69 00 00 DC
F00:3592                   cmpi.w #$F568,(a0)
               S06:00002CA0:  0C 50 F5 68
F00:3593                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002CA4:  66 00 00 D4
F00:3594       
F00:3595                   
F00:3596       ; -----         
F00:3597           ; NEGX - LONG
F00:3598                   move.l #$00000100,a0
               S06:00002CA8:  30 7C 01 00
F00:3599                   move.l #$00000000,d0
               S06:00002CAC:  70 00
F00:3600                   move.l #$80000000,d1
               S06:00002CAE:  22 3C 80 00 00 00
F00:3601                   ori.b #$10,CCR        ; Set X Flag
               S06:00002CB4:  00 3C 00 10
F00:3602                   negx.l d0
               S06:00002CB8:  40 80
F00:3603                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002CBA:  6A 00 00 BE
F00:3604                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002CBE:  67 00 00 BA
F00:3605                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002CC2:  64 00 00 B6
F00:3606                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:00002CC6:  69 00 00 B2
F00:3607                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002CCA:  02 3C 00 EF
F00:3608                   negx.l d0
               S06:00002CCE:  40 80
F00:3609                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002CD0:  6B 00 00 A8
F00:3610                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002CD4:  67 00 00 A4
F00:3611                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002CD8:  64 00 00 A0
F00:3612                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002CDC:  69 00 00 9C
F00:3613                   ori.b #$10,CCR        ; Set X Flag
               S06:00002CE0:  00 3C 00 10
F00:3614                   negx.l d1
               S06:00002CE4:  40 81
F00:3615                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002CE6:  6B 00 00 92
F00:3616                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CEA:  67 00 00 8E
F00:3617                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002CEE:  64 00 00 8A
F00:3618                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002CF2:  69 00 00 86
F00:3619                   cmpi.l #$7FFFFFFF,d1
               S06:00002CF6:  0C 81 7F FF FF FF
F00:3620                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:00002CFC:  66 7C
F00:3621                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002CFE:  02 3C 00 EF
F00:3622                   negx.l d1
               S06:00002D02:  40 81
F00:3623                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002D04:  6A 74
F00:3624                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D06:  67 72
F00:3625                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002D08:  64 70
F00:3626                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002D0A:  69 6E
F00:3627                   cmpi.l #$80000001,d1
               S06:00002D0C:  0C 81 80 00 00 01
F00:3628                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D12:  66 66
F00:3629                   move.l #$7FFF,(a0)
               S06:00002D14:  20 BC 00 00 7F FF
F00:3630                   ori.b #$10,CCR        ; Set X Flag
               S06:00002D1A:  00 3C 00 10
F00:3631                   negx.l (a0)
               S06:00002D1E:  40 90
F00:3632                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002D20:  6A 58
F00:3633                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D22:  67 56
F00:3634                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002D24:  64 54
F00:3635                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002D26:  69 52
F00:3636                   move.l #$F5671234,(a0)            
               S06:00002D28:  20 BC F5 67 12 34
F00:3637                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002D2E:  02 3C 00 EF
F00:3638                   negx.l (a0)
               S06:00002D32:  40 90
F00:3639                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002D34:  6B 44
F00:3640                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D36:  67 42
F00:3641                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002D38:  64 40
F00:3642                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002D3A:  69 3E
F00:3643                   move.l #$F5675678,(a0)
               S06:00002D3C:  20 BC F5 67 56 78
F00:3644                   ori.b #$10,CCR        ; Set X Flag
               S06:00002D42:  00 3C 00 10
F00:3645                   negx.l (a0)
               S06:00002D46:  40 90
F00:3646                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002D48:  6B 30
F00:3647                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D4A:  67 2E
F00:3648                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002D4C:  64 2C
F00:3649                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002D4E:  69 2A
F00:3650                   cmpi.l #$0A98A987,(a0)
               S06:00002D50:  0C 90 0A 98 A9 87
F00:3651                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D56:  66 22
F00:3652                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002D58:  02 3C 00 EF
F00:3653                   negx.l (a0)
               S06:00002D5C:  40 90
F00:3654                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002D5E:  6A 1A
F00:3655                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D60:  67 18
F00:3656                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002D62:  64 16
F00:3657                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002D64:  69 14
F00:3658                   cmpi.l #$F5675679,(a0)
               S06:00002D66:  0C 90 F5 67 56 79
F00:3659                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002D6C:  66 0C
F00:3660       
F00:3661               movea #TESTSTATUS,a0
               S06:00002D6E:  30 7C FF 00
F00:3662               move.b #$1,$1a(a0)
               S06:00002D72:  11 7C 00 01 00 1A
F00:3663               rts
               S06:00002D78:  4E 75
F00:3664       
F00:3665               NEGS_FAIL:
F00:3666                   movea #TESTSTATUS,a0
               S06:00002D7A:  30 7C FF 00
F00:3667                   move.b #$2,$1a(a0)
               S06:00002D7E:  11 7C 00 02 00 1A
F00:3668                   rts
               S06:00002D84:  4E 75
F00:3669       
F00:3670              
F00:3671       ; -----         
F00:3672       
F00:3673       op_CLR:
F00:3674           ; CLR - BYTE
F00:3675                   move.l #$00000100,a0
               S06:00002D86:  30 7C 01 00
F00:3676                   move.l #$12345678,d0
               S06:00002D8A:  20 3C 12 34 56 78
F00:3677                   move.l #$12345678,d1                   
               S06:00002D90:  22 3C 12 34 56 78
F00:3678                   move.l #$12345678,d2                   
               S06:00002D96:  24 3C 12 34 56 78
F00:3679                   move.l #$12345600,d4                   
               S06:00002D9C:  28 3C 12 34 56 00
F00:3680                   move.l #$12340000,d5                   
               S06:00002DA2:  2A 3C 12 34 00 00
F00:3681                   move.l #$00000000,d6                   
               S06:00002DA8:  7C 00
F00:3682                   
F00:3683                   clr.b d0
               S06:00002DAA:  42 00
F00:3684                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DAC:  66 26
F00:3685                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002DAE:  6B 24
F00:3686                   cmp.l d0,d4
               S06:00002DB0:  B8 80
F00:3687                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DB2:  66 20
F00:3688                   
F00:3689                   clr.w d1
               S06:00002DB4:  42 41
F00:3690                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DB6:  66 1C
F00:3691                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002DB8:  6B 1A
F00:3692                   cmp.l d1,d5
               S06:00002DBA:  BA 81
F00:3693                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DBC:  66 16
F00:3694                   
F00:3695                   clr.l d2
               S06:00002DBE:  74 00
F00:3696                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DC0:  66 12
F00:3697                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002DC2:  6B 10
F00:3698                   cmp.l d2,d6
               S06:00002DC4:  BC 82
F00:3699                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DC6:  66 0C
F00:3700       
F00:3701                   movea #TESTSTATUS,a0
               S06:00002DC8:  30 7C FF 00
F00:3702                   move.b #$1,$1b(a0)
               S06:00002DCC:  11 7C 00 01 00 1B
F00:3703                   rts      
               S06:00002DD2:  4E 75
F00:3704                   
F00:3705       CLR_FAIL:
F00:3706           movea #TESTSTATUS,a0
               S06:00002DD4:  30 7C FF 00
F00:3707           move.b #$2,$1b(a0)
               S06:00002DD8:  11 7C 00 02 00 1B
F00:3708           rts
               S06:00002DDE:  4E 75
F00:3709                                 
F00:3710       ;-----------------------------------------------------------
F00:3711       ;-----------------------------------------------------------
F00:3712       ; OPCODE : MOVEM
F00:3713       ;-----------------------------------------------------------
F00:3714       ;-----------------------------------------------------------
F00:3715       op_MOVEM: 
F00:3716       
F00:3717           ; WORD  Registers --> Memory
F00:3718                   move.l #$0000d0d0,d0
               S06:00002DE0:  20 3C 00 00 D0 D0
F00:3719                   move.l #$0000d1d1,d1
               S06:00002DE6:  22 3C 00 00 D1 D1
F00:3720                   move.l #$0000d2d2,d2
               S06:00002DEC:  24 3C 00 00 D2 D2
F00:3721                   move.l #$0000d3d3,d3
               S06:00002DF2:  26 3C 00 00 D3 D3
F00:3722                   move.l #$0000d4d4,d4
               S06:00002DF8:  28 3C 00 00 D4 D4
F00:3723                   move.l #$0000d5d5,d5
               S06:00002DFE:  2A 3C 00 00 D5 D5
F00:3724                   move.l #$0000d6d6,d6
               S06:00002E04:  2C 3C 00 00 D6 D6
F00:3725                   move.l #$0000d7d7,d7
               S06:00002E0A:  2E 3C 00 00 D7 D7
F00:3726                   move.l #$00000a0a,a0
               S06:00002E10:  30 7C 0A 0A
F00:3727                   move.l #$00001a1a,a1
               S06:00002E14:  32 7C 1A 1A
F00:3728                   move.l #$00002a2a,a2
               S06:00002E18:  34 7C 2A 2A
F00:3729                   move.l #$00003a3a,a3
               S06:00002E1C:  36 7C 3A 3A
F00:3730                   move.l #$00004a4a,a4
               S06:00002E20:  38 7C 4A 4A
F00:3731                   move.l #$00005a5a,a5
               S06:00002E24:  3A 7C 5A 5A
F00:3732                   move.l #$00006a6a,a6
               S06:00002E28:  3C 7C 6A 6A
F00:3733                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3734                   
F00:3735                   movem.w D0-D7/A0-A7,$00000100  
               S06:00002E2C:  48 B8 FF FF 01 00
F00:3736                   
F00:3737                   move.l #$00000100,a0
               S06:00002E32:  30 7C 01 00
F00:3738                   
F00:3739                   cmp.w (a0)+,d0            
               S06:00002E36:  B0 58
F00:3740                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E38:  66 00 03 48
F00:3741                   cmp.w (a0)+,d1            
               S06:00002E3C:  B2 58
F00:3742                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E3E:  66 00 03 42
F00:3743                   cmp.w (a0)+,d2            
               S06:00002E42:  B4 58
F00:3744                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E44:  66 00 03 3C
F00:3745                   cmp.w (a0)+,d3            
               S06:00002E48:  B6 58
F00:3746                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E4A:  66 00 03 36
F00:3747                   cmp.w (a0)+,d4            
               S06:00002E4E:  B8 58
F00:3748                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E50:  66 00 03 30
F00:3749                   cmp.w (a0)+,d5            
               S06:00002E54:  BA 58
F00:3750                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E56:  66 00 03 2A
F00:3751                   cmp.w (a0)+,d6            
               S06:00002E5A:  BC 58
F00:3752                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E5C:  66 00 03 24
F00:3753                   cmp.w (a0)+,d7            
               S06:00002E60:  BE 58
F00:3754                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E62:  66 00 03 1E
F00:3755       
F00:3756                   cmp.w #$0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:00002E66:  0C 58 0A 0A
F00:3757                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E6A:  66 00 03 16
F00:3758        
F00:3759                   cmp.w (a0)+,a1
               S06:00002E6E:  B2 D8
F00:3760                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E70:  66 00 03 10
F00:3761                   cmp.w (a0)+,a2
               S06:00002E74:  B4 D8
F00:3762                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E76:  66 00 03 0A
F00:3763                   cmp.w (a0)+,a3
               S06:00002E7A:  B6 D8
F00:3764                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E7C:  66 00 03 04
F00:3765                   cmp.w (a0)+,a4
               S06:00002E80:  B8 D8
F00:3766                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E82:  66 00 02 FE
F00:3767                   cmp.w (a0)+,a5
               S06:00002E86:  BA D8
F00:3768                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E88:  66 00 02 F8
F00:3769                   cmp.w (a0)+,a6
               S06:00002E8C:  BC D8
F00:3770                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E8E:  66 00 02 F2
F00:3771                 
F00:3772       
F00:3773       
F00:3774       
F00:3775           ; LONG  Registers --> Memory
F00:3776                   move.l #$d0d0d0d0,d0
               S06:00002E92:  20 3C D0 D0 D0 D0
F00:3777                   move.l #$d1d1d1d1,d1
               S06:00002E98:  22 3C D1 D1 D1 D1
F00:3778                   move.l #$d2d2d2d2,d2
               S06:00002E9E:  24 3C D2 D2 D2 D2
F00:3779                   move.l #$d3d3d3d3,d3
               S06:00002EA4:  26 3C D3 D3 D3 D3
F00:3780                   move.l #$d4d4d4d4,d4
               S06:00002EAA:  28 3C D4 D4 D4 D4
F00:3781                   move.l #$d5d5d5d5,d5
               S06:00002EB0:  2A 3C D5 D5 D5 D5
F00:3782                   move.l #$d6d6d6d6,d6
               S06:00002EB6:  2C 3C D6 D6 D6 D6
F00:3783                   move.l #$d7d7d7d7,d7
               S06:00002EBC:  2E 3C D7 D7 D7 D7
F00:3784                   move.l #$0a0a0a0a,a0
               S06:00002EC2:  20 7C 0A 0A 0A 0A
F00:3785                   move.l #$1a1a1a1a,a1
               S06:00002EC8:  22 7C 1A 1A 1A 1A
F00:3786                   move.l #$2a2a2a2a,a2
               S06:00002ECE:  24 7C 2A 2A 2A 2A
F00:3787                   move.l #$3a3a3a3a,a3
               S06:00002ED4:  26 7C 3A 3A 3A 3A
F00:3788                   move.l #$4a4a4a4a,a4
               S06:00002EDA:  28 7C 4A 4A 4A 4A
F00:3789                   move.l #$5a5a5a5a,a5
               S06:00002EE0:  2A 7C 5A 5A 5A 5A
F00:3790                   move.l #$6a6a6a6a,a6
               S06:00002EE6:  2C 7C 6A 6A 6A 6A
F00:3791                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3792                   
F00:3793                   
F00:3794                   movem.l D0-D7/A0-A7,$00000120  
               S06:00002EEC:  48 F8 FF FF 01 20
F00:3795                   
F00:3796                   move.l #$00000120,a0
               S06:00002EF2:  30 7C 01 20
F00:3797                   
F00:3798                   cmp.l (a0)+,d0            
               S06:00002EF6:  B0 98
F00:3799                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EF8:  66 00 02 88
F00:3800                   cmp.l (a0)+,d1            
               S06:00002EFC:  B2 98
F00:3801                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EFE:  66 00 02 82
F00:3802                   cmp.l (a0)+,d2            
               S06:00002F02:  B4 98
F00:3803                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F04:  66 00 02 7C
F00:3804                   cmp.l (a0)+,d3            
               S06:00002F08:  B6 98
F00:3805                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F0A:  66 00 02 76
F00:3806                   cmp.l (a0)+,d4            
               S06:00002F0E:  B8 98
F00:3807                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F10:  66 00 02 70
F00:3808                   cmp.l (a0)+,d5            
               S06:00002F14:  BA 98
F00:3809                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F16:  66 00 02 6A
F00:3810                   cmp.l (a0)+,d6            
               S06:00002F1A:  BC 98
F00:3811                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F1C:  66 00 02 64
F00:3812                   cmp.l (a0)+,d7            
               S06:00002F20:  BE 98
F00:3813                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F22:  66 00 02 5E
F00:3814       
F00:3815                   cmp.l #$0A0A0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:00002F26:  0C 98 0A 0A 0A 0A
F00:3816                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F2C:  66 00 02 54
F00:3817        
F00:3818                   cmp.l (a0)+,a1
               S06:00002F30:  B3 D8
F00:3819                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F32:  66 00 02 4E
F00:3820                   cmp.l (a0)+,a2
               S06:00002F36:  B5 D8
F00:3821                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F38:  66 00 02 48
F00:3822                   cmp.l (a0)+,a3
               S06:00002F3C:  B7 D8
F00:3823                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F3E:  66 00 02 42
F00:3824                   cmp.l (a0)+,a4
               S06:00002F42:  B9 D8
F00:3825                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F44:  66 00 02 3C
F00:3826                   cmp.l (a0)+,a5
               S06:00002F48:  BB D8
F00:3827                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F4A:  66 00 02 36
F00:3828                   cmp.l (a0)+,a6
               S06:00002F4E:  BD D8
F00:3829                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F50:  66 00 02 30
F00:3830            ; ----
F00:3831       
F00:3832       
F00:3833           ; WORD  Registers --> Memory  -(An) EA Mode
F00:3834                   move.l #$0000d0d0,d0
               S06:00002F54:  20 3C 00 00 D0 D0
F00:3835                   move.l #$0000d1d1,d1
               S06:00002F5A:  22 3C 00 00 D1 D1
F00:3836                   move.l #$0000d2d2,d2
               S06:00002F60:  24 3C 00 00 D2 D2
F00:3837                   move.l #$0000d3d3,d3
               S06:00002F66:  26 3C 00 00 D3 D3
F00:3838                   move.l #$0000d4d4,d4
               S06:00002F6C:  28 3C 00 00 D4 D4
F00:3839                   move.l #$0000d5d5,d5
               S06:00002F72:  2A 3C 00 00 D5 D5
F00:3840                   move.l #$0000d6d6,d6
               S06:00002F78:  2C 3C 00 00 D6 D6
F00:3841                   move.l #$0000d7d7,d7
               S06:00002F7E:  2E 3C 00 00 D7 D7
F00:3842                   move.l #$00000a0a,a0
               S06:00002F84:  30 7C 0A 0A
F00:3843                   move.l #$00001a1a,a1
               S06:00002F88:  32 7C 1A 1A
F00:3844                   move.l #$00002a2a,a2
               S06:00002F8C:  34 7C 2A 2A
F00:3845                   move.l #$00003a3a,a3
               S06:00002F90:  36 7C 3A 3A
F00:3846                   move.l #$00004a4a,a4
               S06:00002F94:  38 7C 4A 4A
F00:3847                   move.l #$00005a5a,a5
               S06:00002F98:  3A 7C 5A 5A
F00:3848                   move.l #$00006a6a,a6
               S06:00002F9C:  3C 7C 6A 6A
F00:3849                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3850                  
F00:3851                   move.l #$000001A0,a0
               S06:00002FA0:  30 7C 01 A0
F00:3852                   movem.w D0-D7/A0-A7,-(a0)  
               S06:00002FA4:  48 A0 FF FF
F00:3853                   
F00:3854                   move.l #$0000019E,a0
               S06:00002FA8:  30 7C 01 9E
F00:3855                   
F00:3856                   cmp.w -(a0),a6            
               S06:00002FAC:  BC E0
F00:3857                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FAE:  66 00 01 D2
F00:3858                   cmp.w -(a0),a5            
               S06:00002FB2:  BA E0
F00:3859                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FB4:  66 00 01 CC
F00:3860                   cmp.w -(a0),a4            
               S06:00002FB8:  B8 E0
F00:3861                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FBA:  66 00 01 C6
F00:3862                   cmp.w -(a0),a3            
               S06:00002FBE:  B6 E0
F00:3863                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FC0:  66 00 01 C0
F00:3864                   cmp.w -(a0),a2            
               S06:00002FC4:  B4 E0
F00:3865                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FC6:  66 00 01 BA
F00:3866                   cmp.w -(a0),a1            
               S06:00002FCA:  B2 E0
F00:3867                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FCC:  66 00 01 B4
F00:3868                   cmp.w -(a0),a0            
               S06:00002FD0:  B0 E0
F00:3869                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3870                   cmp.w -(a0),d7            
               S06:00002FD2:  BE 60
F00:3871                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FD4:  66 00 01 AC
F00:3872                   cmp.w -(a0),d6
               S06:00002FD8:  BC 60
F00:3873                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FDA:  66 00 01 A6
F00:3874                   cmp.w -(a0),d5
               S06:00002FDE:  BA 60
F00:3875                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FE0:  66 00 01 A0
F00:3876                   cmp.w -(a0),d4
               S06:00002FE4:  B8 60
F00:3877                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FE6:  66 00 01 9A
F00:3878                   cmp.w -(a0),d3
               S06:00002FEA:  B6 60
F00:3879                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FEC:  66 00 01 94
F00:3880                   cmp.w -(a0),d2
               S06:00002FF0:  B4 60
F00:3881                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FF2:  66 00 01 8E
F00:3882                   cmp.w -(a0),d1
               S06:00002FF6:  B2 60
F00:3883                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FF8:  66 00 01 88
F00:3884                   cmp.w -(a0),d0
               S06:00002FFC:  B0 60
F00:3885                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002FFE:  66 00 01 82
F00:3886                 
F00:3887       
F00:3888       
F00:3889       
F00:3890           ; LONG  Registers --> Memory   -(An) EA Mode
F00:3891                   move.l #$d0d0d0d0,d0
               S06:00003002:  20 3C D0 D0 D0 D0
F00:3892                   move.l #$d1d1d1d1,d1
               S06:00003008:  22 3C D1 D1 D1 D1
F00:3893                   move.l #$d2d2d2d2,d2
               S06:0000300E:  24 3C D2 D2 D2 D2
F00:3894                   move.l #$d3d3d3d3,d3
               S06:00003014:  26 3C D3 D3 D3 D3
F00:3895                   move.l #$d4d4d4d4,d4
               S06:0000301A:  28 3C D4 D4 D4 D4
F00:3896                   move.l #$d5d5d5d5,d5
               S06:00003020:  2A 3C D5 D5 D5 D5
F00:3897                   move.l #$d6d6d6d6,d6
               S06:00003026:  2C 3C D6 D6 D6 D6
F00:3898                   move.l #$d7d7d7d7,d7
               S06:0000302C:  2E 3C D7 D7 D7 D7
F00:3899                   move.l #$0a0a0a0a,a0
               S06:00003032:  20 7C 0A 0A 0A 0A
F00:3900                   move.l #$1a1a1a1a,a1
               S06:00003038:  22 7C 1A 1A 1A 1A
F00:3901                   move.l #$2a2a2a2a,a2
               S06:0000303E:  24 7C 2A 2A 2A 2A
F00:3902                   move.l #$3a3a3a3a,a3
               S06:00003044:  26 7C 3A 3A 3A 3A
F00:3903                   move.l #$4a4a4a4a,a4
               S06:0000304A:  28 7C 4A 4A 4A 4A
F00:3904                   move.l #$5a5a5a5a,a5
               S06:00003050:  2A 7C 5A 5A 5A 5A
F00:3905                   move.l #$6a6a6a6a,a6
               S06:00003056:  2C 7C 6A 6A 6A 6A
F00:3906                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3907                   
F00:3908                
F00:3909                   move.l #$000001A0,a0
               S06:0000305C:  30 7C 01 A0
F00:3910                   movem.l D0-D7/A0-A7,-(a0)  
               S06:00003060:  48 E0 FF FF
F00:3911                   
F00:3912                   move.l #$0000019C,a0
               S06:00003064:  30 7C 01 9C
F00:3913                   
F00:3914                   cmp.l -(a0),a6            
               S06:00003068:  BD E0
F00:3915                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000306A:  66 00 01 16
F00:3916                   cmp.l -(a0),a5            
               S06:0000306E:  BB E0
F00:3917                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003070:  66 00 01 10
F00:3918                   cmp.l -(a0),a4            
               S06:00003074:  B9 E0
F00:3919                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003076:  66 00 01 0A
F00:3920                   cmp.l -(a0),a3            
               S06:0000307A:  B7 E0
F00:3921                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000307C:  66 00 01 04
F00:3922                   cmp.l -(a0),a2            
               S06:00003080:  B5 E0
F00:3923                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003082:  66 00 00 FE
F00:3924                   cmp.l -(a0),a1            
               S06:00003086:  B3 E0
F00:3925                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003088:  66 00 00 F8
F00:3926                   cmp.l -(a0),a0            
               S06:0000308C:  B1 E0
F00:3927                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3928                   cmp.l -(a0),d7            
               S06:0000308E:  BE A0
F00:3929                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003090:  66 00 00 F0
F00:3930                   cmp.l -(a0),d6
               S06:00003094:  BC A0
F00:3931                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003096:  66 00 00 EA
F00:3932                   cmp.l -(a0),d5
               S06:0000309A:  BA A0
F00:3933                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000309C:  66 00 00 E4
F00:3934                   cmp.l -(a0),d4
               S06:000030A0:  B8 A0
F00:3935                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030A2:  66 00 00 DE
F00:3936                   cmp.l -(a0),d3
               S06:000030A6:  B6 A0
F00:3937                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030A8:  66 00 00 D8
F00:3938                   cmp.l -(a0),d2
               S06:000030AC:  B4 A0
F00:3939                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030AE:  66 00 00 D2
F00:3940                   cmp.l -(a0),d1
               S06:000030B2:  B2 A0
F00:3941                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030B4:  66 00 00 CC
F00:3942                   cmp.l -(a0),d0
               S06:000030B8:  B0 A0
F00:3943                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030BA:  66 00 00 C6
F00:3944                 
F00:3945       
F00:3946       
F00:3947            ;----     
F00:3948                 
F00:3949           ; WORD - Memory --> Registers
F00:3950                   move.l #$00000000,d0
               S06:000030BE:  70 00
F00:3951                   move.l #$00000000,d1
               S06:000030C0:  72 00
F00:3952                   move.l #$00000000,d2
               S06:000030C2:  74 00
F00:3953                   move.l #$00000000,d3
               S06:000030C4:  76 00
F00:3954                   move.l #$00000000,d4
               S06:000030C6:  78 00
F00:3955                   move.l #$00000000,d5
               S06:000030C8:  7A 00
F00:3956                   move.l #$00000000,d6
               S06:000030CA:  7C 00
F00:3957                   move.l #$00000000,d7
               S06:000030CC:  7E 00
F00:3958                   move.l #$00000000,a0
               S06:000030CE:  91 C8
F00:3959                   move.l #$00000000,a1
               S06:000030D0:  93 C9
F00:3960                   move.l #$00000000,a2
               S06:000030D2:  95 CA
F00:3961                   move.l #$00000000,a3
               S06:000030D4:  97 CB
F00:3962                   move.l #$00000000,a4
               S06:000030D6:  99 CC
F00:3963                   move.l #$00000000,a5
               S06:000030D8:  9B CD
F00:3964                   move.l #$00000000,a6
               S06:000030DA:  9D CE
F00:3965                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:3966                   
F00:3967                   movem.w $00000100,D0/D2/D4/D6/A1/A3/A5   
               S06:000030DC:  4C B8 2A 55 01 00
F00:3968                   
F00:3969                   cmp.l #$FFFFD0D0,d0           
               S06:000030E2:  B0 BC FF FF D0 D0
F00:3970                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030E8:  66 00 00 98
F00:3971                   cmp.l #$FFFFD1D1,d2           
               S06:000030EC:  B4 BC FF FF D1 D1
F00:3972                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:000030F2:  66 00 00 8E
F00:3973                   cmp.l #$FFFFD2D2,d4           
               S06:000030F6:  B8 BC FF FF D2 D2
F00:3974                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000030FC:  66 00 00 84
F00:3975                   cmp.l #$FFFFD3D3,d6           
               S06:00003100:  BC BC FF FF D3 D3
F00:3976                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003106:  66 7A
F00:3977                   cmp.l #$FFFFD4D4,a1           
               S06:00003108:  B2 FC D4 D4
F00:3978                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000310C:  66 74
F00:3979                   cmp.l #$FFFFD5D5,a3           
               S06:0000310E:  B6 FC D5 D5
F00:3980                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003112:  66 6E
F00:3981                   cmp.l #$FFFFD6D6,a5           
               S06:00003114:  BA FC D6 D6
F00:3982                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003118:  66 68
F00:3983                   
F00:3984        
F00:3985           ; LONG - Memory --> Registers
F00:3986                   move.l #$00000000,d0
               S06:0000311A:  70 00
F00:3987                   move.l #$00000000,d1
               S06:0000311C:  72 00
F00:3988                   move.l #$00000000,d2
               S06:0000311E:  74 00
F00:3989                   move.l #$00000000,d3
               S06:00003120:  76 00
F00:3990                   move.l #$00000000,d4
               S06:00003122:  78 00
F00:3991                   move.l #$00000000,d5
               S06:00003124:  7A 00
F00:3992                   move.l #$00000000,d6
               S06:00003126:  7C 00
F00:3993                   move.l #$00000000,d7
               S06:00003128:  7E 00
F00:3994                   move.l #$00000000,a0
               S06:0000312A:  91 C8
F00:3995                   move.l #$00000000,a1
               S06:0000312C:  93 C9
F00:3996                   move.l #$00000000,a2
               S06:0000312E:  95 CA
F00:3997                   move.l #$00000000,a3
               S06:00003130:  97 CB
F00:3998                   move.l #$00000000,a4
               S06:00003132:  99 CC
F00:3999                   move.l #$00000000,a5
               S06:00003134:  9B CD
F00:4000                   move.l #$00000000,a6
               S06:00003136:  9D CE
F00:4001                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:4002                   
F00:4003                   movem.l $00000120,D0/D2/D4/D6/A1/A3/A5   
               S06:00003138:  4C F8 2A 55 01 20
F00:4004                   
F00:4005                   cmp.l #$D0D0D0D0,d0           
               S06:0000313E:  B0 BC D0 D0 D0 D0
F00:4006                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003144:  66 3C
F00:4007                   cmp.l #$D1D1D1D1,d2           
               S06:00003146:  B4 BC D1 D1 D1 D1
F00:4008                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:0000314C:  66 34
F00:4009                   cmp.l #$D2D2D2D2,d4           
               S06:0000314E:  B8 BC D2 D2 D2 D2
F00:4010                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003154:  66 2C
F00:4011                   cmp.l #$D3D3D3D3,d6           
               S06:00003156:  BC BC D3 D3 D3 D3
F00:4012                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000315C:  66 24
F00:4013                   cmp.l #$D4D4D4D4,a1           
               S06:0000315E:  B3 FC D4 D4 D4 D4
F00:4014                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003164:  66 1C
F00:4015                   cmp.l #$D5D5D5D5,a3           
               S06:00003166:  B7 FC D5 D5 D5 D5
F00:4016                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000316C:  66 14
F00:4017                   cmp.l #$D6D6D6D6,a5           
               S06:0000316E:  BB FC D6 D6 D6 D6
F00:4018                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00003174:  66 0C
F00:4019                   
F00:4020                   movea #TESTSTATUS,a0
               S06:00003176:  30 7C FF 00
F00:4021                   move.b #$1,$1c(a0)
               S06:0000317A:  11 7C 00 01 00 1C
F00:4022                   rts     
               S06:00003180:  4E 75
F00:4023       
F00:4024       MOVEM_FAIL: 
F00:4025           movea #TESTSTATUS,a0
               S06:00003182:  30 7C FF 00
F00:4026           move.b #$2,$1c(a0)
               S06:00003186:  11 7C 00 02 00 1C
F00:4027           rts
               S06:0000318C:  4E 75
F00:4028       
F00:4029       ;-----------------------------------------------------------
F00:4030       ;-----------------------------------------------------------
F00:4031       ; OPCODE : ABCD
F00:4032       ;-----------------------------------------------------------
F00:4033       ;-----------------------------------------------------------
F00:4034       op_ABCD: 
F00:4035           
F00:4036           ; Test with X Flag CLEARED
F00:4037                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000318E:  30 7C 01 10
F00:4038                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003192:  32 7C 01 20
F00:4039                       move.l #$00000000,d0 ; BCD byte-X
               S06:00003196:  70 00
F00:4040                       move.l #$00000000,d1 ; BCD byte-Y
               S06:00003198:  72 00
F00:4041                       move.l #$00000000,d2
               S06:0000319A:  74 00
F00:4042                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:0000319C:  76 00
F00:4043                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:0000319E:  78 00
F00:4044                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:000031A0:  7A 00
F00:4045                       move.l #$00000099,d6 ; Inner loop counter
               S06:000031A2:  2C 3C 00 00 00 99
F00:4046                       move.l #$00000099,d7 ; Outer loop counter
               S06:000031A8:  2E 3C 00 00 00 99
F00:4047       
F00:4048       ABCD_OUTER1:    move.l d7,d0
               S06:000031AE:  20 07
F00:4049       ABCD_INNER1:    move.l d6,d1
               S06:000031B0:  22 06
F00:4050                       andi.b #$EF,CCR     ; Clear X Flag
               S06:000031B2:  02 3C 00 EF
F00:4051                       move.l #$00000110,a0 ; Address pointer-X
               S06:000031B6:  30 7C 01 10
F00:4052                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000031BA:  32 7C 01 20
F00:4053                       move.b d0,-1(a0)
               S06:000031BE:  11 40 FF FF
F00:4054                       move.b d1,-1(a1)
               S06:000031C2:  13 41 FF FF
F00:4055                       
F00:4056                       abcd d0,d1
               S06:000031C6:  C3 00
F00:4057                       bcc ABCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:000031C8:  64 02
F00:4058                       add.l #1,d4
               S06:000031CA:  52 84
F00:4059       ABCD_NO_C1:     add.l d1,d5
               S06:000031CC:  DA 81
F00:4060                       
F00:4061                       abcd -(a0),-(a1)
               S06:000031CE:  C3 08
F00:4062                       bcc ABCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:000031D0:  64 02
F00:4063                       add.l #1,d4
               S06:000031D2:  52 84
F00:4064       ABCD_NO_C2:     add.b (a1),d3
               S06:000031D4:  D6 11
F00:4065       
F00:4066       
F00:4067                       dbf d6,ABCD_INNER1
               S06:000031D6:  51 CE FF D8
F00:4068                       move.l #$00000099,d6
               S06:000031DA:  2C 3C 00 00 00 99
F00:4069                       dbf d7,ABCD_OUTER1
               S06:000031E0:  51 CF FF CC
F00:4070                       cmpi.l #$00005AFC,d4  ; Check the cumulative results
               S06:000031E4:  0C 84 00 00 5A FC
F00:4071                       bne ABCD_FAIL;                 
               S06:000031EA:  66 00 00 B0
F00:4072                       cmpi.l #$001C9A34,d5
               S06:000031EE:  0C 85 00 1C 9A 34
F00:4073                       bne ABCD_FAIL;                
               S06:000031F4:  66 00 00 A6
F00:4074                       cmpi.l #$00000034,d3
               S06:000031F8:  0C 83 00 00 00 34
F00:4075                       bne ABCD_FAIL;                
               S06:000031FE:  66 00 00 9C
F00:4076       
F00:4077           ; Test with X Flag SET
F00:4078                       move.l #$00000110,a0 ; Address pointer-X
               S06:00003202:  30 7C 01 10
F00:4079                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003206:  32 7C 01 20
F00:4080                       move.l #$00000000,d0 ; BCD byte-X
               S06:0000320A:  70 00
F00:4081                       move.l #$00000000,d1 ; BCD byte-Y
               S06:0000320C:  72 00
F00:4082                       move.l #$00000000,d2
               S06:0000320E:  74 00
F00:4083                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00003210:  76 00
F00:4084                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00003212:  78 00
F00:4085                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00003214:  7A 00
F00:4086                       move.l #$00000099,d6 ; Inner loop counter
               S06:00003216:  2C 3C 00 00 00 99
F00:4087                       move.l #$00000099,d7 ; Outer loop counter
               S06:0000321C:  2E 3C 00 00 00 99
F00:4088       
F00:4089       ABCD_OUTER2:    move.l d7,d0
               S06:00003222:  20 07
F00:4090       ABCD_INNER2:    move.l d6,d1
               S06:00003224:  22 06
F00:4091                       ori.b #$10,CCR      ; Set X Flag
               S06:00003226:  00 3C 00 10
F00:4092                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000322A:  30 7C 01 10
F00:4093                       move.l #$00000120,a1 ; Address pointer-Y
               S06:0000322E:  32 7C 01 20
F00:4094                       move.b d0,-1(a0)
               S06:00003232:  11 40 FF FF
F00:4095                       move.b d1,-1(a1)
               S06:00003236:  13 41 FF FF
F00:4096                       
F00:4097                       abcd d0,d1
               S06:0000323A:  C3 00
F00:4098                       bcc ABCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:0000323C:  64 02
F00:4099                       add.l #1,d4
               S06:0000323E:  52 84
F00:4100       ABCD_NO_C3:     add.l d1,d5
               S06:00003240:  DA 81
F00:4101                       
F00:4102                       abcd -(a0),-(a1)
               S06:00003242:  C3 08
F00:4103                       bcc ABCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:00003244:  64 02
F00:4104                       add.l #1,d4
               S06:00003246:  52 84
F00:4105       ABCD_NO_C4:     add.b (a1),d3
               S06:00003248:  D6 11
F00:4106       
F00:4107       
F00:4108                       dbf d6,ABCD_INNER2
               S06:0000324A:  51 CE FF D8
F00:4109                       move.l #$00000099,d6
               S06:0000324E:  2C 3C 00 00 00 99
F00:4110                       dbf d7,ABCD_OUTER2
               S06:00003254:  51 CF FF CC
F00:4111                       cmpi.l #$00005B60,d4  ; Check the cumulative results
               S06:00003258:  0C 84 00 00 5B 60
F00:4112                       bne ABCD_FAIL;                 
               S06:0000325E:  66 3C
F00:4113                       cmpi.l #$001CCFC8,d5
               S06:00003260:  0C 85 00 1C CF C8
F00:4114                       bne ABCD_FAIL;                
               S06:00003266:  66 34
F00:4115                       cmpi.l #$00000034,d3
               S06:00003268:  0C 83 00 00 00 34
F00:4116                       bne ABCD_FAIL;                
               S06:0000326E:  66 2C
F00:4117       
F00:4118                   ; Quick check of Z Flag
F00:4119                       move.b #$00,d0 
               S06:00003270:  10 3C 00 00
F00:4120                       move.b #$00,d1 
               S06:00003274:  12 3C 00 00
F00:4121                       move #$00,CCR              ; Set Z flag to 0
               S06:00003278:  44 FC 00 00
F00:4122                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:0000327C:  C1 01
F00:4123                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000327E:  67 1C
F00:4124                       
F00:4125                       move.b #$01,d0 
               S06:00003280:  10 3C 00 01
F00:4126                       move.b #$00,d1 
               S06:00003284:  12 3C 00 00
F00:4127                       move #$04,CCR              ; Set Z flag to 0
               S06:00003288:  44 FC 00 04
F00:4128                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:0000328C:  C1 01
F00:4129                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000328E:  67 0C
F00:4130                       
F00:4131                       movea #TESTSTATUS,a0
               S06:00003290:  30 7C FF 00
F00:4132                       move.b #$1,$1d(a0)
               S06:00003294:  11 7C 00 01 00 1D
F00:4133                       rts   
               S06:0000329A:  4E 75
F00:4134       
F00:4135       ABCD_FAIL:
F00:4136           movea #TESTSTATUS,a0
               S06:0000329C:  30 7C FF 00
F00:4137           move.b #$2,$1d(a0)
               S06:000032A0:  11 7C 00 02 00 1D
F00:4138           rts
               S06:000032A6:  4E 75
F00:4139       
F00:4140       ;-----------------------------------------------------------
F00:4141       ;-----------------------------------------------------------
F00:4142       ; OPCODE : SBCD
F00:4143       ;-----------------------------------------------------------
F00:4144       ;-----------------------------------------------------------
F00:4145       op_SBCD: 
F00:4146       
F00:4147           ; Test with X Flag CLEARED
F00:4148                       move.l #$00000110,a0 ; Address pointer-X
               S06:000032A8:  30 7C 01 10
F00:4149                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000032AC:  32 7C 01 20
F00:4150                       move.l #$00000000,d0 ; BCD byte-X
               S06:000032B0:  70 00
F00:4151                       move.l #$00000000,d1 ; BCD byte-Y
               S06:000032B2:  72 00
F00:4152                       move.l #$00000000,d2
               S06:000032B4:  74 00
F00:4153                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:000032B6:  76 00
F00:4154                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:000032B8:  78 00
F00:4155                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:000032BA:  7A 00
F00:4156                       move.l #$00000099,d6 ; Inner loop counter
               S06:000032BC:  2C 3C 00 00 00 99
F00:4157                       move.l #$00000099,d7 ; Outer loop counter
               S06:000032C2:  2E 3C 00 00 00 99
F00:4158       
F00:4159       SBCD_OUTER1:    move.l d7,d0
               S06:000032C8:  20 07
F00:4160       SBCD_INNER1:    move.l d6,d1
               S06:000032CA:  22 06
F00:4161                       andi.b #$EF,CCR     ; Clear X Flag
               S06:000032CC:  02 3C 00 EF
F00:4162                       move.l #$00000110,a0 ; Address pointer-X
               S06:000032D0:  30 7C 01 10
F00:4163                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000032D4:  32 7C 01 20
F00:4164                       move.b d0,-1(a0)
               S06:000032D8:  11 40 FF FF
F00:4165                       move.b d1,-1(a1)
               S06:000032DC:  13 41 FF FF
F00:4166                       
F00:4167                       sbcd d0,d1
               S06:000032E0:  83 00
F00:4168                       bcc SBCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:000032E2:  64 02
F00:4169                       add.l #1,d4
               S06:000032E4:  52 84
F00:4170       SBCD_NO_C1:     add.l d1,d5
               S06:000032E6:  DA 81
F00:4171                       
F00:4172                       sbcd -(a0),-(a1)
               S06:000032E8:  83 08
F00:4173                       bcc SBCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:000032EA:  64 02
F00:4174                       add.l #1,d4
               S06:000032EC:  52 84
F00:4175       SBCD_NO_C2:     add.b (a1),d3
               S06:000032EE:  D6 11
F00:4176       
F00:4177       
F00:4178                       dbf d6,SBCD_INNER1
               S06:000032F0:  51 CE FF D8
F00:4179                       move.l #$00000099,d6
               S06:000032F4:  2C 3C 00 00 00 99
F00:4180                       dbf d7,SBCD_OUTER1
               S06:000032FA:  51 CF FF CC
F00:4181                       cmpi.l #$00005C0A,d4  ; Check the cumulative results
               S06:000032FE:  0C 84 00 00 5C 0A
F00:4182                       bne SBCD_FAIL;                 
               S06:00003304:  66 00 00 B0
F00:4183                       cmpi.l #$001C459E,d5
               S06:00003308:  0C 85 00 1C 45 9E
F00:4184                       bne SBCD_FAIL;                
               S06:0000330E:  66 00 00 A6
F00:4185                       cmpi.l #$0000009E,d3
               S06:00003312:  0C 83 00 00 00 9E
F00:4186                       bne SBCD_FAIL;                
               S06:00003318:  66 00 00 9C
F00:4187       
F00:4188           ; Test with X Flag SET
F00:4189                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000331C:  30 7C 01 10
F00:4190                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003320:  32 7C 01 20
F00:4191                       move.l #$00000000,d0 ; BCD byte-X
               S06:00003324:  70 00
F00:4192                       move.l #$00000000,d1 ; BCD byte-Y
               S06:00003326:  72 00
F00:4193                       move.l #$00000000,d2
               S06:00003328:  74 00
F00:4194                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:0000332A:  76 00
F00:4195                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:0000332C:  78 00
F00:4196                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:0000332E:  7A 00
F00:4197                       move.l #$00000099,d6 ; Inner loop counter
               S06:00003330:  2C 3C 00 00 00 99
F00:4198                       move.l #$00000099,d7 ; Outer loop counter
               S06:00003336:  2E 3C 00 00 00 99
F00:4199       
F00:4200       SBCD_OUTER2:    move.l d7,d0
               S06:0000333C:  20 07
F00:4201       SBCD_INNER2:    move.l d6,d1
               S06:0000333E:  22 06
F00:4202                       ori.b #$10,CCR      ; Set X Flag
               S06:00003340:  00 3C 00 10
F00:4203                       move.l #$00000110,a0 ; Address pointer-X
               S06:00003344:  30 7C 01 10
F00:4204                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003348:  32 7C 01 20
F00:4205                       move.b d0,-1(a0)
               S06:0000334C:  11 40 FF FF
F00:4206                       move.b d1,-1(a1)
               S06:00003350:  13 41 FF FF
F00:4207                       
F00:4208                       sbcd d0,d1
               S06:00003354:  83 00
F00:4209                       bcc SBCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:00003356:  64 02
F00:4210                       add.l #1,d4
               S06:00003358:  52 84
F00:4211       SBCD_NO_C3:     add.l d1,d5
               S06:0000335A:  DA 81
F00:4212                       
F00:4213                       sbcd -(a0),-(a1)
               S06:0000335C:  83 08
F00:4214                       bcc SBCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:0000335E:  64 02
F00:4215                       add.l #1,d4
               S06:00003360:  52 84
F00:4216       SBCD_NO_C4:     add.b (a1),d3
               S06:00003362:  D6 11
F00:4217       
F00:4218                       dbf d6,SBCD_INNER2
               S06:00003364:  51 CE FF D8
F00:4219                       move.l #$00000099,d6
               S06:00003368:  2C 3C 00 00 00 99
F00:4220                       dbf d7,SBCD_OUTER2
               S06:0000336E:  51 CF FF CC
F00:4221                       cmpi.l #$00005CA4,d4  ; Check the cumulative results
               S06:00003372:  0C 84 00 00 5C A4
F00:4222                       bne SBCD_FAIL;                 
               S06:00003378:  66 3C
F00:4223                       cmpi.l #$001C5C66,d5
               S06:0000337A:  0C 85 00 1C 5C 66
F00:4224                       bne SBCD_FAIL;                
               S06:00003380:  66 34
F00:4225                       cmpi.l #$0000009E,d3
               S06:00003382:  0C 83 00 00 00 9E
F00:4226                       bne SBCD_FAIL;                
               S06:00003388:  66 2C
F00:4227       
F00:4228       
F00:4229                   ; Quick check of Z Flag
F00:4230                       move.b #$00,d0 
               S06:0000338A:  10 3C 00 00
F00:4231                       move.b #$00,d1 
               S06:0000338E:  12 3C 00 00
F00:4232                       move #$00,CCR              ; Set Z flag to 0
               S06:00003392:  44 FC 00 00
F00:4233                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00003396:  81 01
F00:4234                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:00003398:  67 1C
F00:4235       
F00:4236                       move.b #$01,d0 
               S06:0000339A:  10 3C 00 01
F00:4237                       move.b #$00,d1 
               S06:0000339E:  12 3C 00 00
F00:4238                       move #$04,CCR              ; Set Z flag to 0
               S06:000033A2:  44 FC 00 04
F00:4239                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:000033A6:  81 01
F00:4240                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:000033A8:  67 0C
F00:4241       
F00:4242                       movea #TESTSTATUS,a0
               S06:000033AA:  30 7C FF 00
F00:4243                       move.b #$1,$1e(a0)
               S06:000033AE:  11 7C 00 01 00 1E
F00:4244                       rts
               S06:000033B4:  4E 75
F00:4245       
F00:4246       SBCD_FAIL:
F00:4247           movea #TESTSTATUS,a0
               S06:000033B6:  30 7C FF 00
F00:4248           move.b #$2,$1e(a0)
               S06:000033BA:  11 7C 00 02 00 1E
F00:4249           rts  
               S06:000033C0:  4E 75
F00:4250       ;-----------------------------------------------------------
F00:4251       ;-----------------------------------------------------------
F00:4252       ; OPCODE : NBCD
F00:4253       ;-----------------------------------------------------------
F00:4254       ;-----------------------------------------------------------
F00:4255       op_NBCD: 
F00:4256           
F00:4257              ; NBCD to a  Register
F00:4258              
F00:4259                       move.l #$00000000,d0 ; BCD byte
               S06:000033C2:  70 00
F00:4260                       move.l #$00000000,d1 
               S06:000033C4:  72 00
F00:4261                       move.l #$00000000,d2
               S06:000033C6:  74 00
F00:4262                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:000033C8:  76 00
F00:4263                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:000033CA:  78 00
F00:4264                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:000033CC:  7A 00
F00:4265                       move.l #$00000099,d6
               S06:000033CE:  2C 3C 00 00 00 99
F00:4266                       move.l #$00000099,d7 ; Loop counter
               S06:000033D4:  2E 3C 00 00 00 99
F00:4267       
F00:4268       NBCD_LOOP:      move.l d7,d0
               S06:000033DA:  20 07
F00:4269                       move #$04,CCR        ; Set Z flag to 0
               S06:000033DC:  44 FC 00 04
F00:4270       
F00:4271                       nbcd d0
               S06:000033E0:  48 00
F00:4272                       
F00:4273                       bcc NBCD_NO_C         ; Check C Flag 
               S06:000033E2:  64 02
F00:4274                       add.l #1,d4
               S06:000033E4:  52 84
F00:4275       NBCD_NO_C:      bne NBCD_NO_Z         ; Check Z Flag 
               S06:000033E6:  66 02
F00:4276                       add.l #1,d3
               S06:000033E8:  52 83
F00:4277       NBCD_NO_Z:      add.l d0,d5         ; Add results into d5
               S06:000033EA:  DA 80
F00:4278       
F00:4279                       dbf d7,NBCD_LOOP
               S06:000033EC:  51 CF FF EC
F00:4280                       
F00:4281                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:000033F0:  0C 83 00 00 00 01
F00:4282                       bne NBCD_FAIL;                 
               S06:000033F6:  66 66
F00:4283                       cmpi.l #$00000099,d4
               S06:000033F8:  0C 84 00 00 00 99
F00:4284                       bne NBCD_FAIL;                
               S06:000033FE:  66 5E
F00:4285                       cmpi.l #$00002E3B,d5
               S06:00003400:  0C 85 00 00 2E 3B
F00:4286                       bne NBCD_FAIL;     
               S06:00003406:  66 56
F00:4287                  
F00:4288       
F00:4289              ; NBCD to a memory location
F00:4290              
F00:4291                       move.l #$00000000,d0 ; BCD byte
               S06:00003408:  70 00
F00:4292                       move.l #$00000000,d1 
               S06:0000340A:  72 00
F00:4293                       move.l #$00000000,d2
               S06:0000340C:  74 00
F00:4294                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:0000340E:  76 00
F00:4295                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00003410:  78 00
F00:4296                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:00003412:  7A 00
F00:4297                       move.l #$00000099,d6
               S06:00003414:  2C 3C 00 00 00 99
F00:4298                       move.l #$00000099,d7 ; Loop counter
               S06:0000341A:  2E 3C 00 00 00 99
F00:4299       
F00:4300       NBCD_LOOP1:     move.b d7,$00000100
               S06:00003420:  11 C7 01 00
F00:4301                       move #$04,CCR        ; Set Z flag to 0
               S06:00003424:  44 FC 00 04
F00:4302       
F00:4303                       nbcd $00000100
               S06:00003428:  48 38 01 00
F00:4304                       move.b $00000100,d0
               S06:0000342C:  10 38 01 00
F00:4305                       
F00:4306                       bcc NBCD_NO_C1        ; Check C Flag 
               S06:00003430:  64 02
F00:4307                       add.l #1,d4
               S06:00003432:  52 84
F00:4308       NBCD_NO_C1:     bne NBCD_NO_Z1        ; Check Z Flag 
               S06:00003434:  66 02
F00:4309                       add.l #1,d3
               S06:00003436:  52 83
F00:4310       NBCD_NO_Z1:     add.l d0,d5         ; Add results into d5
               S06:00003438:  DA 80
F00:4311       
F00:4312                       dbf d7,NBCD_LOOP1
               S06:0000343A:  51 CF FF E4
F00:4313                       
F00:4314                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:0000343E:  0C 83 00 00 00 01
F00:4315                       bne NBCD_FAIL;                 
               S06:00003444:  66 18
F00:4316                       cmpi.l #$00000000,d4
               S06:00003446:  4A 84
F00:4317                       bne NBCD_FAIL;                
               S06:00003448:  66 14
F00:4318                       cmpi.l #$00002E3B,d5
               S06:0000344A:  0C 85 00 00 2E 3B
F00:4319                       bne NBCD_FAIL;     
               S06:00003450:  66 0C
F00:4320                  
F00:4321                       movea #TESTSTATUS,a0
               S06:00003452:  30 7C FF 00
F00:4322                       move.b #$1,$1f(a0)
               S06:00003456:  11 7C 00 01 00 1F
F00:4323                       rts   
               S06:0000345C:  4E 75
F00:4324       
F00:4325       NBCD_FAIL:
F00:4326           movea #TESTSTATUS,a0
               S06:0000345E:  30 7C FF 00
F00:4327           move.b #$2,$1f(a0)
               S06:00003462:  11 7C 00 02 00 1F
F00:4328           rts
               S06:00003468:  4E 75
F00:4329                      
F00:4330       ;-----------------------------------------------------------
F00:4331       ;-----------------------------------------------------------
F00:4332       ; OPCODE : TRAPV
F00:4333       ;-----------------------------------------------------------
F00:4334       ;-----------------------------------------------------------
F00:4335       op_TRAPV: 
F00:4336       
F00:4337           ; TRAPV will set d0 to 12345678 if V flag is set
F00:4338           
F00:4339                       move.l #$00000000,d0 ; Clear d0
               S06:0000346A:  70 00
F00:4340                       
F00:4341                       move #$00,CCR        ; Clear V flag
               S06:0000346C:  44 FC 00 00
F00:4342                       trapv
               S06:00003470:  4E 76
F00:4343                       cmpi.l #$00000000,d0  ; Check of d0 was updated (should not be_)
               S06:00003472:  4A 80
F00:4344                       bne TRAPV_FAIL;       
               S06:00003474:  66 1A
F00:4345       
F00:4346                      move #$02,CCR        ; Set V flag
               S06:00003476:  44 FC 00 02
F00:4347                      trapv
               S06:0000347A:  4E 76
F00:4348                      cmpi.l #$12345678,d0  ; Check of d0 was updated (should not be_)
               S06:0000347C:  0C 80 12 34 56 78
F00:4349                      bne TRAPV_FAIL;       
               S06:00003482:  66 0C
F00:4350       
F00:4351                      movea #TESTSTATUS,a0
               S06:00003484:  30 7C FF 00
F00:4352                      move.b #$1,$20(a0)
               S06:00003488:  11 7C 00 01 00 20
F00:4353                      rts   
               S06:0000348E:  4E 75
F00:4354       
F00:4355       TRAPV_FAIL:
F00:4356           movea #TESTSTATUS,a0
               S06:00003490:  30 7C FF 00
F00:4357           move.b #$2,$20(a0)
               S06:00003494:  11 7C 00 02 00 20
F00:4358           rts
               S06:0000349A:  4E 75
F00:4359                      
F00:4360       ;-----------------------------------------------------------
F00:4361       ;-----------------------------------------------------------
F00:4362       ; OPCODE : RTR
F00:4363       ;-----------------------------------------------------------
F00:4364       ;-----------------------------------------------------------
F00:4365       
F00:4366       op_RTR: 
F00:4367           
F00:4368                       lea RTR_DONE,a0
               S06:0000349C:  41 F8 34 A8
F00:4369                       move.l a0,-(a7)     ; push destination PC to the stack
               S06:000034A0:  2F 08
F00:4370                       move.w #$FF15,-(a7)       ; push flags=0xFFFF to the stack
               S06:000034A2:  3F 3C FF 15
F00:4371                       rtr
               S06:000034A6:  4E 77
F00:4372       
F00:4373       RTR_DONE:       move SR,d0
               S06:000034A8:  40 C0
F00:4374                       andi #$1F,d0
               S06:000034AA:  02 40 00 1F
F00:4375                       cmpi #$15,d0
               S06:000034AE:  0C 40 00 15
F00:4376                       bne RTR_FAIL;
               S06:000034B2:  66 14
F00:4377                       
F00:4378                       movea #TESTSTATUS,a0
               S06:000034B4:  30 7C FF 00
F00:4379                       move.b #$1,$21(a0)
               S06:000034B8:  11 7C 00 01 00 21
F00:4380                       rts   
               S06:000034BE:  4E 75
F00:4381       
F00:4382          
F00:4383       BSR_FAR2:       move.l #$44444444,d4
               S06:000034C0:  28 3C 44 44 44 44
F00:4384                       rts
               S06:000034C6:  4E 75
F00:4385       
F00:4386       RTR_FAIL:
F00:4387           movea #TESTSTATUS,a0
               S06:000034C8:  30 7C FF 00
F00:4388           move.b #$1,$21(a0)
               S06:000034CC:  11 7C 00 01 00 21
F00:4389           rts
               S06:000034D2:  4E 75
F00:4390       
F00:4391       ;-----------------------------------------------------------
F00:4392       ;-----------------------------------------------------------
F00:4393       ; OPCODE : BCC
F00:4394       ;-----------------------------------------------------------
F00:4395       ;-----------------------------------------------------------
F00:4396       
F00:4397       op_BCC:         move #$00,CCR
               S06:000034D4:  44 FC 00 00
F00:4398                       bhi.s BCC1            ; Higher Than         C=0 AND Z=0
               S06:000034D8:  62 04
F00:4399                       bra BCC_FAIL;
               S06:000034DA:  60 00 00 84
F00:4400                       
F00:4401       BCC1:           move #$01,CCR
               S06:000034DE:  44 FC 00 01
F00:4402                       bls.w BCC2            ; Lower or Same       C=1 OR Z=1
               S06:000034E2:  63 00 00 04
F00:4403                       bra BCC_FAIL;
               S06:000034E6:  60 78
F00:4404                        
F00:4405       BCC2:           move #$00,CCR
               S06:000034E8:  44 FC 00 00
F00:4406                       bcc.s BCC3            ; Carry Clear         C=0
               S06:000034EC:  64 02
F00:4407                       bra BCC_FAIL;
               S06:000034EE:  60 70
F00:4408                          
F00:4409       BCC3:           move #$01,CCR
               S06:000034F0:  44 FC 00 01
F00:4410                       bcs.w BCC4            ; Carry Set           C=1
               S06:000034F4:  65 00 00 04
F00:4411                       bra BCC_FAIL;
               S06:000034F8:  60 66
F00:4412                          
F00:4413       BCC4:           move #$00,CCR
               S06:000034FA:  44 FC 00 00
F00:4414                       bne.s BCC5            ; Not Equal           Z=0
               S06:000034FE:  66 02
F00:4415                       bra BCC_FAIL;
               S06:00003500:  60 5E
F00:4416                            
F00:4417       BCC5:           move #$04,CCR
               S06:00003502:  44 FC 00 04
F00:4418                       beq.w BCC6            ; Equal               Z=1
               S06:00003506:  67 00 00 04
F00:4419                       bra BCC_FAIL;
               S06:0000350A:  60 54
F00:4420                              
F00:4421       BCC6:           move #$00,CCR
               S06:0000350C:  44 FC 00 00
F00:4422                       bvc.s BCC7            ; V Clear             V=0
               S06:00003510:  68 02
F00:4423                       bra BCC_FAIL;
               S06:00003512:  60 4C
F00:4424                                
F00:4425       BCC7:           move #$02,CCR
               S06:00003514:  44 FC 00 02
F00:4426                       bvs.w BCC8            ; V Set               V=1
               S06:00003518:  69 00 00 04
F00:4427                       bra BCC_FAIL;
               S06:0000351C:  60 42
F00:4428                                 
F00:4429       BCC8:           move #$00,CCR
               S06:0000351E:  44 FC 00 00
F00:4430                       bpl.s BCC9            ; Plus                N=0
               S06:00003522:  6A 02
F00:4431                       bra BCC_FAIL;
               S06:00003524:  60 3A
F00:4432                                  
F00:4433       BCC9:           move #$08,CCR
               S06:00003526:  44 FC 00 08
F00:4434                       bmi.w BCC10           ; Minus               N=1
               S06:0000352A:  6B 00 00 04
F00:4435                       bra BCC_FAIL;
               S06:0000352E:  60 30
F00:4436                                   
F00:4437       BCC10:          move #$00,CCR
               S06:00003530:  44 FC 00 00
F00:4438                       bge.s BCC11           ; Greater or Equal    N=V
               S06:00003534:  6C 02
F00:4439                       bra BCC_FAIL;
               S06:00003536:  60 28
F00:4440                                    
F00:4441       BCC11:          move #$02,CCR
               S06:00003538:  44 FC 00 02
F00:4442                       blt.w BCC12           ; Less Than           N!=V
               S06:0000353C:  6D 00 00 04
F00:4443                       bra BCC_FAIL;
               S06:00003540:  60 1E
F00:4444                                      
F00:4445       BCC12:          move #$0A,CCR
               S06:00003542:  44 FC 00 0A
F00:4446                       bgt.s BCC13           ; Greater Than        N=V  AND Z=0
               S06:00003546:  6E 02
F00:4447                       bra BCC_FAIL;
               S06:00003548:  60 16
F00:4448                                       
F00:4449       BCC13:          move #$06,CCR
               S06:0000354A:  44 FC 00 06
F00:4450                       ble.w BCC14           ; Less Than or Equal  N!=V AND Z=1
               S06:0000354E:  6F 00 00 04
F00:4451                       bra BCC_FAIL;
               S06:00003552:  60 0C
F00:4452                      
F00:4453       
F00:4454       BCC14:          movea #TESTSTATUS,a0
               S06:00003554:  30 7C FF 00
F00:4455                       move.b #$1,$22(a0)
               S06:00003558:  11 7C 00 01 00 22
F00:4456                       rts
               S06:0000355E:  4E 75
F00:4457         
F00:4458       
F00:4459       BCC_FAIL:
F00:4460           movea #TESTSTATUS,a0
               S06:00003560:  30 7C FF 00
F00:4461           move.b #$2,$22(a0)
               S06:00003564:  11 7C 00 02 00 22
F00:4462           rts
               S06:0000356A:  4E 75
F00:4463       
F00:4464       ;-----------------------------------------------------------
F00:4465       ;-----------------------------------------------------------
F00:4466       ; OPCODE : DBCC
F00:4467       ;-----------------------------------------------------------
F00:4468       ;-----------------------------------------------------------
F00:4469       
F00:4470       op_DBCC:        move.l #$00000003,d0    ; Loop counter
               S06:0000356C:  70 03
F00:4471                       move.l #$00000000,d1    ; Accumulator
               S06:0000356E:  72 00
F00:4472                       move #$00,CCR
               S06:00003570:  44 FC 00 00
F00:4473                       
F00:4474       DBCC_LOOP1:     addi.b #$1,d1
               S06:00003574:  52 01
F00:4475                       dbf d0,DBCC_LOOP1
               S06:00003576:  51 C8 FF FC
F00:4476                       
F00:4477                       cmpi.l #$00000004,d1  ; Check Accumulator results
               S06:0000357A:  0C 81 00 00 00 04
F00:4478                       bne DBCC_FAIL;       
               S06:00003580:  66 1A
F00:4479                         
F00:4480       DBCC_LOOP2:     addi.b #$1,d1
               S06:00003582:  52 01
F00:4481                       dbcc d0,DBCC_LOOP2    ; Dont loop
               S06:00003584:  54 C8 FF FC
F00:4482                       
F00:4483                       cmpi.l #$00000005,d1  ; Check Accumulator results
               S06:00003588:  0C 81 00 00 00 05
F00:4484                       bne DBCC_FAIL;       
               S06:0000358E:  66 0C
F00:4485                   
F00:4486                       movea #TESTSTATUS,a0
               S06:00003590:  30 7C FF 00
F00:4487                       move.b #$1,$23(a0)
               S06:00003594:  11 7C 00 01 00 23
F00:4488                       rts
               S06:0000359A:  4E 75
F00:4489                       
F00:4490       DBCC_FAIL:
F00:4491           movea #TESTSTATUS,a0
               S06:0000359C:  30 7C FF 00
F00:4492           move.b #$2,$23(a0)
               S06:000035A0:  11 7C 00 02 00 23
F00:4493           rts
               S06:000035A6:  4E 75
F00:4494       
F00:4495       ;-----------------------------------------------------------
F00:4496       ;-----------------------------------------------------------
F00:4497       ; OPCODE : SCC
F00:4498       ;-----------------------------------------------------------
F00:4499       ;-----------------------------------------------------------
F00:4500       
F00:4501       op_SCC:         move #$01,CCR             
               S06:000035A8:  44 FC 00 01
F00:4502                       scc $00010000                   ; Clear the EA byte
               S06:000035AC:  54 F9 00 01 00 00
F00:4503                       cmpi.b #$00,$00010000
               S06:000035B2:  4A 39 00 01 00 00
F00:4504                       bne SCC_FAIL;       
               S06:000035B8:  66 20
F00:4505       
F00:4506                       move #$00,CCR
               S06:000035BA:  44 FC 00 00
F00:4507                       scc $00010000                   ; Set the EA byte to 0xFF
               S06:000035BE:  54 F9 00 01 00 00
F00:4508                       cmpi.b #$FF,$00010000
               S06:000035C4:  0C 39 00 FF 00 01 00 00
F00:4509                       bne SCC_FAIL;       
               S06:000035CC:  66 0C
F00:4510       
F00:4511                       movea #TESTSTATUS,a0
               S06:000035CE:  30 7C FF 00
F00:4512                       move.b #$1,$24(a0)
               S06:000035D2:  11 7C 00 01 00 24
F00:4513                       rts
               S06:000035D8:  4E 75
F00:4514                       
F00:4515       SCC_FAIL:
F00:4516           movea #TESTSTATUS,a0
               S06:000035DA:  30 7C FF 00
F00:4517           move.b #$2,$24(a0)
               S06:000035DE:  11 7C 00 02 00 24
F00:4518           rts
               S06:000035E4:  4E 75
F00:4519       
F00:4520       ;-----------------------------------------------------------
F00:4521       ;-----------------------------------------------------------
F00:4522       ; OPCODE : ADDQ
F00:4523       ;-----------------------------------------------------------
F00:4524       ;-----------------------------------------------------------
F00:4525       
F00:4526       op_ADDQ:       
F00:4527       
F00:4528           ; BYTE
F00:4529                       move.l #$000000FF,d0    ; Loop counter
               S06:000035E6:  20 3C 00 00 00 FF
F00:4530                       move.l #$00000000,d1    ; Flag results accumulator
               S06:000035EC:  72 00
F00:4531                       move.l #$00000000,d2    ; Data results accumulator
               S06:000035EE:  74 00
F00:4532                       move.l #$00000000,d3   
               S06:000035F0:  76 00
F00:4533                       move.l #$00000000,d4    
               S06:000035F2:  78 00
F00:4534                       move.l #$00000000,d5    
               S06:000035F4:  7A 00
F00:4535                       move.l #$00000000,d6    
               S06:000035F6:  7C 00
F00:4536                       move.l #$00000000,d7    
               S06:000035F8:  7E 00
F00:4537       
F00:4538       ADDQ_LOOP1:     addq.b #3,d5          
               S06:000035FA:  56 05
F00:4539                       move SR,d6      
               S06:000035FC:  40 C6
F00:4540                       andi.l #$1F,d6        ; Isolate flags
               S06:000035FE:  02 86 00 00 00 1F
F00:4541                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003604:  D2 86
F00:4542                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003606:  D4 85
F00:4543                       dbf d0,ADDQ_LOOP1
               S06:00003608:  51 C8 FF F0
F00:4544                       
F00:4545                       cmpi.l #$0000043D,d1
               S06:0000360C:  0C 81 00 00 04 3D
F00:4546                       bne ADDQ_FAIL;       
               S06:00003612:  66 00 00 9A
F00:4547                       cmpi.l #$00007F80,d2
               S06:00003616:  0C 82 00 00 7F 80
F00:4548                       bne ADDQ_FAIL;       
               S06:0000361C:  66 00 00 90
F00:4549       
F00:4550       
F00:4551           ; WORD
F00:4552                       move.l #$000000FF,d0    ; Loop counter
               S06:00003620:  20 3C 00 00 00 FF
F00:4553                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003626:  72 00
F00:4554                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003628:  74 00
F00:4555                       move.l #$00000000,d3   
               S06:0000362A:  76 00
F00:4556                       move.l #$00000000,d4    
               S06:0000362C:  78 00
F00:4557                       move.l #$0000FFF0,d5    
               S06:0000362E:  2A 3C 00 00 FF F0
F00:4558                       move.l #$00000000,d6    
               S06:00003634:  7C 00
F00:4559                       move.l #$00000000,d7   
               S06:00003636:  7E 00
F00:4560                       move.l #$00000100,a0   
               S06:00003638:  30 7C 01 00
F00:4561       
F00:4562       ADDQ_LOOP2:     addq.w #5,d5   
               S06:0000363C:  5A 45
F00:4563                       move SR,d6      
               S06:0000363E:  40 C6
F00:4564                       andi.l #$1F,d6        ; Isolate flags
               S06:00003640:  02 86 00 00 00 1F
F00:4565                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003646:  D2 86
F00:4566                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003648:  D4 85
F00:4567                       dbf d0,ADDQ_LOOP2
               S06:0000364A:  51 C8 FF F0
F00:4568       
F00:4569                       cmpi.l #$00000029,d1
               S06:0000364E:  0C 81 00 00 00 29
F00:4570                       bne ADDQ_FAIL;       
               S06:00003654:  66 58
F00:4571                       cmpi.l #$00057280,d2
               S06:00003656:  0C 82 00 05 72 80
F00:4572                       bne ADDQ_FAIL;       
               S06:0000365C:  66 50
F00:4573       
F00:4574       
F00:4575           ; LONG
F00:4576                       move.l #$000000FF,d0    ; Loop counter
               S06:0000365E:  20 3C 00 00 00 FF
F00:4577                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003664:  72 00
F00:4578                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003666:  74 00
F00:4579                       move.l #$00000000,d3   
               S06:00003668:  76 00
F00:4580                       move.l #$00000000,d4    
               S06:0000366A:  78 00
F00:4581                       move.l #$FFFFFFF0,d5    
               S06:0000366C:  7A F0
F00:4582                       move.l #$00000000,d6    
               S06:0000366E:  7C 00
F00:4583                       move.l #$00000000,d7   
               S06:00003670:  7E 00
F00:4584       
F00:4585       ADDQ_LOOP3:     addq.l #1,d5          
               S06:00003672:  52 85
F00:4586                       move SR,d6      
               S06:00003674:  40 C6
F00:4587                       andi.l #$1F,d6        ; Isolate flags
               S06:00003676:  02 86 00 00 00 1F
F00:4588                       add.l d6,d1           ; Copy flag results into accumulator
               S06:0000367C:  D2 86
F00:4589                       add.l d5,d2           ; Copy data results into data accumulator
               S06:0000367E:  D4 85
F00:4590                       dbf d0,ADDQ_LOOP3
               S06:00003680:  51 C8 FF F0
F00:4591       
F00:4592                       cmpi.l #$0000008D,d1
               S06:00003684:  0C 81 00 00 00 8D
F00:4593                       bne ADDQ_FAIL;       
               S06:0000368A:  66 22
F00:4594                       cmpi.l #$00007080,d2
               S06:0000368C:  0C 82 00 00 70 80
F00:4595                       bne ADDQ_FAIL;      
               S06:00003692:  66 1A
F00:4596       
F00:4597           ; Check that Flags are not updated for Address registers
F00:4598                       move.l #$0000FFFF,a0   
               S06:00003694:  20 7C 00 00 FF FF
F00:4599                       move #$00,CCR         ; Clear flags
               S06:0000369A:  44 FC 00 00
F00:4600                       addq.w #$7,a0         
               S06:0000369E:  5E 48
F00:4601                       bcs ADDQ_FAIL;
               S06:000036A0:  65 0C
F00:4602       
F00:4603                       movea #TESTSTATUS,a0
               S06:000036A2:  30 7C FF 00
F00:4604                       move.b #$1,$25(a0)
               S06:000036A6:  11 7C 00 01 00 25
F00:4605                       rts
               S06:000036AC:  4E 75
F00:4606               
F00:4607       ADDQ_FAIL: 
F00:4608           movea #TESTSTATUS,a0
               S06:000036AE:  30 7C FF 00
F00:4609           move.b #$2,$25(a0)
               S06:000036B2:  11 7C 00 02 00 25
F00:4610           rts
               S06:000036B8:  4E 75
F00:4611       
F00:4612       ;-----------------------------------------------------------
F00:4613       ;-----------------------------------------------------------
F00:4614       ; OPCODE : SUBQ
F00:4615       ;-----------------------------------------------------------
F00:4616       ;-----------------------------------------------------------
F00:4617       
F00:4618       op_SUBQ:       
F00:4619       
F00:4620           ; BYTE
F00:4621                       move.l #$000000FF,d0    ; Loop counter
               S06:000036BA:  20 3C 00 00 00 FF
F00:4622                       move.l #$00000000,d1    ; Flag results accumulator
               S06:000036C0:  72 00
F00:4623                       move.l #$00001234,d2    ; Data results accumulator
               S06:000036C2:  24 3C 00 00 12 34
F00:4624                       move.l #$00000000,d3   
               S06:000036C8:  76 00
F00:4625                       move.l #$00000000,d4    
               S06:000036CA:  78 00
F00:4626                       move.l #$00000012,d5    
               S06:000036CC:  7A 12
F00:4627                       move.l #$00000000,d6    
               S06:000036CE:  7C 00
F00:4628                       move.l #$00000000,d7    
               S06:000036D0:  7E 00
F00:4629       
F00:4630       SUBQ_LOOP1:     subq.b #1,d5          
               S06:000036D2:  53 05
F00:4631                       move SR,d6      
               S06:000036D4:  40 C6
F00:4632                       andi.l #$1F,d6        ; Isolate flags
               S06:000036D6:  02 86 00 00 00 1F
F00:4633                       add.l d6,d1           ; Copy flag results into accumulator
               S06:000036DC:  D2 86
F00:4634                       add.l d5,d2           ; Copy data results into data accumulator
               S06:000036DE:  D4 85
F00:4635                       dbf d0,SUBQ_LOOP1
               S06:000036E0:  51 C8 FF F0
F00:4636                       
F00:4637                       cmpi.l #$00000417,d1
               S06:000036E4:  0C 81 00 00 04 17
F00:4638                       bne SUBQ_FAIL;       
               S06:000036EA:  66 00 00 96
F00:4639                       cmpi.l #$000091B4,d2
               S06:000036EE:  0C 82 00 00 91 B4
F00:4640                       bne SUBQ_FAIL;       
               S06:000036F4:  66 00 00 8C
F00:4641       
F00:4642       
F00:4643           ; WORD
F00:4644                       move.l #$000000FF,d0    ; Loop counter
               S06:000036F8:  20 3C 00 00 00 FF
F00:4645                       move.l #$00000000,d1    ; Flag results accumulator
               S06:000036FE:  72 00
F00:4646                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003700:  74 00
F00:4647                       move.l #$00000000,d3   
               S06:00003702:  76 00
F00:4648                       move.l #$00000000,d4    
               S06:00003704:  78 00
F00:4649                       move.l #$00000002,d5    
               S06:00003706:  7A 02
F00:4650                       move.l #$00000000,d6    
               S06:00003708:  7C 00
F00:4651                       move.l #$00000000,d7   
               S06:0000370A:  7E 00
F00:4652                       move.l #$00000100,a0   
               S06:0000370C:  30 7C 01 00
F00:4653       
F00:4654       SUBQ_LOOP2:     subq.w #5,d5   
               S06:00003710:  5B 45
F00:4655                       move SR,d6      
               S06:00003712:  40 C6
F00:4656                       andi.l #$1F,d6        ; Isolate flags
               S06:00003714:  02 86 00 00 00 1F
F00:4657                       add.l d6,d1           ; Copy flag results into accumulator
               S06:0000371A:  D2 86
F00:4658                       add.l d5,d2           ; Copy data results into data accumulator
               S06:0000371C:  D4 85
F00:4659                       dbf d0,SUBQ_LOOP2
               S06:0000371E:  51 C8 FF F0
F00:4660       
F00:4661                       cmpi.l #$00000811,d1
               S06:00003722:  0C 81 00 00 08 11
F00:4662                       bne SUBQ_FAIL;       
               S06:00003728:  66 58
F00:4663                       cmpi.l #$00FD7F80,d2
               S06:0000372A:  0C 82 00 FD 7F 80
F00:4664                       bne SUBQ_FAIL;       
               S06:00003730:  66 50
F00:4665       
F00:4666       
F00:4667           ; LONG
F00:4668                       move.l #$000000FF,d0    ; Loop counter
               S06:00003732:  20 3C 00 00 00 FF
F00:4669                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003738:  72 00
F00:4670                       move.l #$00000000,d2    ; Data results accumulator
               S06:0000373A:  74 00
F00:4671                       move.l #$00000000,d3   
               S06:0000373C:  76 00
F00:4672                       move.l #$00000000,d4    
               S06:0000373E:  78 00
F00:4673                       move.l #$00000007,d5    
               S06:00003740:  7A 07
F00:4674                       move.l #$00000000,d6    
               S06:00003742:  7C 00
F00:4675                       move.l #$00000000,d7   
               S06:00003744:  7E 00
F00:4676       
F00:4677       SUBQ_LOOP3:     subq.l #1,d5          
               S06:00003746:  53 85
F00:4678                       move SR,d6      
               S06:00003748:  40 C6
F00:4679                       andi.l #$1F,d6        ; Isolate flags
               S06:0000374A:  02 86 00 00 00 1F
F00:4680                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003750:  D2 86
F00:4681                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003752:  D4 85
F00:4682                       dbf d0,SUBQ_LOOP3
               S06:00003754:  51 C8 FF F0
F00:4683       
F00:4684                       cmpi.l #$000007DD,d1
               S06:00003758:  0C 81 00 00 07 DD
F00:4685                       bne SUBQ_FAIL;       
               S06:0000375E:  66 22
F00:4686                       cmpi.l #$FFFF8680,d2
               S06:00003760:  0C 82 FF FF 86 80
F00:4687                       bne SUBQ_FAIL;      
               S06:00003766:  66 1A
F00:4688       
F00:4689           ; Check that Flags are not updated for Address registers
F00:4690                       move.l #$0001FFFF,a0   
               S06:00003768:  20 7C 00 01 FF FF
F00:4691                       move #$00,CCR         ; Clear flags
               S06:0000376E:  44 FC 00 00
F00:4692                       subq.w #$7,a0         
               S06:00003772:  5F 48
F00:4693                       bcs SUBQ_FAIL;
               S06:00003774:  65 0C
F00:4694       
F00:4695                       movea #TESTSTATUS,a0
               S06:00003776:  30 7C FF 00
F00:4696                       move.b #$1,$26(a0)
               S06:0000377A:  11 7C 00 01 00 26
F00:4697                       rts
               S06:00003780:  4E 75
F00:4698       
F00:4699       SUBQ_FAIL:
F00:4700           movea #TESTSTATUS,a0
               S06:00003782:  30 7C FF 00
F00:4701           move.b #$2,$26(a0)  
               S06:00003786:  11 7C 00 02 00 26
F00:4702           rts
               S06:0000378C:  4E 75
F00:4703       
F00:4704       ;-----------------------------------------------------------
F00:4705       ;-----------------------------------------------------------
F00:4706       ; OPCODE : MOVEQ
F00:4707       ;-----------------------------------------------------------
F00:4708       ;-----------------------------------------------------------
F00:4709       
F00:4710       op_MOVEQ:     
F00:4711                       move.l #$00000000,d0  
               S06:0000378E:  70 00
F00:4712                       moveq #$0,d0
               S06:00003790:  70 00
F00:4713                       bne MOVEQ_FAIL;
               S06:00003792:  66 20
F00:4714                       cmpi.l #$00000000,d0
               S06:00003794:  4A 80
F00:4715                       bne MOVEQ_FAIL;
               S06:00003796:  66 1C
F00:4716       
F00:4717                       move.l #$00000000,d0  
               S06:00003798:  70 00
F00:4718 E2028                 moveq #$80,d0
               S06:0000379A:  70 80
F00:4719                       beq MOVEQ_FAIL;
               S06:0000379C:  67 16
F00:4720                       bpl MOVEQ_FAIL;
               S06:0000379E:  6A 14
F00:4721                       cmpi.l #$FFFFFF80,d0
               S06:000037A0:  0C 80 FF FF FF 80
F00:4722                       bne MOVEQ_FAIL;
               S06:000037A6:  66 0C
F00:4723       
F00:4724                       movea #TESTSTATUS,a0
               S06:000037A8:  30 7C FF 00
F00:4725                       move.b #$1,$27(a0)
               S06:000037AC:  11 7C 00 01 00 27
F00:4726                       rts
               S06:000037B2:  4E 75
F00:4727       
F00:4728       MOVEQ_FAIL:
F00:4729           movea #TESTSTATUS,a0
               S06:000037B4:  30 7C FF 00
F00:4730           move.b #$2,$27(a0)
               S06:000037B8:  11 7C 00 02 00 27
F00:4731           rts
               S06:000037BE:  4E 75
F00:4732          
F00:4733       ;-----------------------------------------------------------
F00:4734       ;-----------------------------------------------------------
F00:4735       ; OPCODE : DIVU
F00:4736       ;-----------------------------------------------------------
F00:4737       ;-----------------------------------------------------------
F00:4738       
F00:4739       op_DIVU:     
F00:4740       
F00:4741                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:000037C0:  20 3C A5 A5 A5 A5
F00:4742                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:000037C6:  22 3C 00 00 5A 5A
F00:4743                       move.l #$a5a5a5a5,d2
               S06:000037CC:  24 3C A5 A5 A5 A5
F00:4744                       move.l #$00000000,d3
               S06:000037D2:  76 00
F00:4745                       move.l #$00000000,d4        ; Cumulative data results
               S06:000037D4:  78 00
F00:4746                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000037D6:  7A 00
F00:4747                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000037D8:  7C 0E
F00:4748                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000037DA:  7E 1E
F00:4749       
F00:4750       
F00:4751       DIVU_OUTER1:    divu d1,d0               ; !! Easy68K C not always cleared
               S06:000037DC:  80 C1
F00:4752                       move SR,d3      
               S06:000037DE:  40 C3
F00:4753                       andi.l #$0C,d3            ; Isolate flags 
               S06:000037E0:  02 83 00 00 00 0C
F00:4754                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000037E6:  DA 83
F00:4755                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000037E8:  D8 80
F00:4756                       lsr.l #$1,d1
               S06:000037EA:  E2 89
F00:4757       
F00:4758                       dbf d6,DIVU_OUTER1
               S06:000037EC:  51 CE FF EE
F00:4759                       lsr.l #$1,d2
               S06:000037F0:  E2 8A
F00:4760                       move.l d2,d0
               S06:000037F2:  20 02
F00:4761                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:000037F4:  22 3C 00 00 5A 5A
F00:4762                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000037FA:  7C 0E
F00:4763                       dbf d7,DIVU_OUTER1
               S06:000037FC:  51 CF FF DE
F00:4764                       
F00:4765                       cmpi.l #$92FEDB89,d4      ; Check the data results
               S06:00003800:  0C 84 92 FE DB 89
F00:4766                       bne DIVU_FAIL;                
               S06:00003806:  66 14
F00:4767                            
F00:4768                       cmpi.l #$000000d8,d5      ; Check the Flag results #FIXME: was 0x110
               S06:00003808:  0C 85 00 00 00 D8
F00:4769                       bne DIVU_FAIL;                 
               S06:0000380E:  66 0C
F00:4770                 
F00:4771                       movea #TESTSTATUS,a0
               S06:00003810:  30 7C FF 00
F00:4772                       move.b #$1,$28(a0)
               S06:00003814:  11 7C 00 01 00 28
F00:4773                       rts
               S06:0000381A:  4E 75
F00:4774                       
F00:4775       DIVU_FAIL:
F00:4776           movea #TESTSTATUS,a0
               S06:0000381C:  30 7C FF 00
F00:4777           move.b #$2,$28(a0)
               S06:00003820:  11 7C 00 02 00 28
F00:4778           rts
               S06:00003826:  4E 75
F00:4779          
F00:4780       ;-----------------------------------------------------------
F00:4781       ;-----------------------------------------------------------
F00:4782       ; OPCODE : DIVS
F00:4783       ;-----------------------------------------------------------
F00:4784       ;-----------------------------------------------------------
F00:4785       
F00:4786       op_DIVS:     
F00:4787       
F00:4788                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:00003828:  20 3C A5 A5 A5 A5
F00:4789                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:0000382E:  22 3C 00 00 5A 5A
F00:4790                       move.l #$a5a5a5a5,d2
               S06:00003834:  24 3C A5 A5 A5 A5
F00:4791                       move.l #$00000000,d3
               S06:0000383A:  76 00
F00:4792                       move.l #$00000000,d4        ; Cumulative data results
               S06:0000383C:  78 00
F00:4793                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000383E:  7A 00
F00:4794                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003840:  7C 0E
F00:4795                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003842:  7E 1E
F00:4796       
F00:4797       
F00:4798       DIVS_OUTER1:    divs d1,d0               ; !! Easy68K C not always cleared
               S06:00003844:  81 C1
F00:4799                       move SR,d3      
               S06:00003846:  40 C3
F00:4800                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003848:  02 83 00 00 00 0C
F00:4801                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000384E:  DA 83
F00:4802                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003850:  D8 80
F00:4803                       lsr.l #$1,d1
               S06:00003852:  E2 89
F00:4804       
F00:4805                       dbf d6,DIVS_OUTER1
               S06:00003854:  51 CE FF EE
F00:4806                       lsr.l #$1,d2
               S06:00003858:  E2 8A
F00:4807                       move.l d2,d0
               S06:0000385A:  20 02
F00:4808                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:0000385C:  22 3C 00 00 5A 5A
F00:4809                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003862:  7C 0E
F00:4810                       dbf d7,DIVS_OUTER1
               S06:00003864:  51 CF FF DE
F00:4811                       
F00:4812                       cmpi.l #$4EC5D057,d4      ; Check the data results
               S06:00003868:  0C 84 4E C5 D0 57
F00:4813                       bne DIVS_FAIL;                
               S06:0000386E:  66 14
F00:4814       
F00:4815                       cmpi.l #$00000078,d5      ; Check the Flag results #FIXME: was 0x38
               S06:00003870:  0C 85 00 00 00 78
F00:4816                       bne DIVS_FAIL;                 
               S06:00003876:  66 0C
F00:4817                 
F00:4818                       movea #TESTSTATUS,a0
               S06:00003878:  30 7C FF 00
F00:4819                       move.b #$1,$29(a0)
               S06:0000387C:  11 7C 00 01 00 29
F00:4820                       rts
               S06:00003882:  4E 75
F00:4821              
F00:4822       DIVS_FAIL:
F00:4823           movea #TESTSTATUS,a0
               S06:00003884:  30 7C FF 00
F00:4824           move.b #$2,$29(a0)
               S06:00003888:  11 7C 00 02 00 29
F00:4825           rts
               S06:0000388E:  4E 75
F00:4826          
F00:4827       ;-----------------------------------------------------------
F00:4828       ;-----------------------------------------------------------
F00:4829       ; OPCODE : OR
F00:4830       ;-----------------------------------------------------------
F00:4831       ;-----------------------------------------------------------
F00:4832       
F00:4833       op_OR:   
F00:4834       
F00:4835         ;; <EA> to Register
F00:4836       
F00:4837                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003890:  20 3C A5 A5 A5 A5
F00:4838                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003896:  22 3C 81 67 E1 23
F00:4839                       move.l #$a5a5a5a5,d2
               S06:0000389C:  24 3C A5 A5 A5 A5
F00:4840                       move.l #$00000000,d3
               S06:000038A2:  76 00
F00:4841                       move.l #$00000000,d4       ; Cumulative data results
               S06:000038A4:  78 00
F00:4842                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000038A6:  7A 00
F00:4843                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000038A8:  7C 1E
F00:4844                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000038AA:  7E 1E
F00:4845                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000038AC:  30 7C 01 00
F00:4846       
F00:4847       
F00:4848       OR_OUTER1:    
F00:4849        
F00:4850           ; BYTE     
F00:4851                       move.l d1,(a0)
               S06:000038B0:  20 81
F00:4852                       or.b (a0),d0             
               S06:000038B2:  80 10
F00:4853                       move SR,d3      
               S06:000038B4:  40 C3
F00:4854                       andi.l #$0C,d3            ; Isolate flags 
               S06:000038B6:  02 83 00 00 00 0C
F00:4855                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000038BC:  DA 83
F00:4856                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000038BE:  D8 80
F00:4857        
F00:4858           ; WORD      
F00:4859                       move.l d1,(a0)
               S06:000038C0:  20 81
F00:4860                       or.w (a0),d0             
               S06:000038C2:  80 50
F00:4861                       move SR,d3      
               S06:000038C4:  40 C3
F00:4862                       andi.l #$0C,d3            ; Isolate flags 
               S06:000038C6:  02 83 00 00 00 0C
F00:4863                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000038CC:  DA 83
F00:4864                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000038CE:  D8 80
F00:4865        
F00:4866           ; LONG      
F00:4867                       move.l d1,(a0)
               S06:000038D0:  20 81
F00:4868                       or.l (a0),d0             
               S06:000038D2:  80 90
F00:4869                       move SR,d3      
               S06:000038D4:  40 C3
F00:4870                       andi.l #$0F,d3            ; Isolate flags 
               S06:000038D6:  02 83 00 00 00 0F
F00:4871                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000038DC:  DA 83
F00:4872                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000038DE:  D8 80
F00:4873                       
F00:4874                       
F00:4875                       lsr.l #$1,d1
               S06:000038E0:  E2 89
F00:4876                       dbf d6,OR_OUTER1
               S06:000038E2:  51 CE FF CC
F00:4877                       lsr.l #$1,d2
               S06:000038E6:  E2 8A
F00:4878                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000038E8:  22 3C 81 67 E1 23
F00:4879                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000038EE:  7C 1E
F00:4880                       dbf d7,OR_OUTER1
               S06:000038F0:  51 CF FF BE
F00:4881                       
F00:4882                       cmpi.l #$76EAC803,d4      ; Check the data results
               S06:000038F4:  0C 84 76 EA C8 03
F00:4883                       bne OR_FAIL;                
               S06:000038FA:  66 00 00 8C
F00:4884                       cmpi.l #$00005A18,d5      ; Check the Flag results
               S06:000038FE:  0C 85 00 00 5A 18
F00:4885                       bne OR_FAIL;                
               S06:00003904:  66 00 00 82
F00:4886                          
F00:4887                          
F00:4888         ;; Register to <EA>
F00:4889       
F00:4890                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003908:  20 3C 86 73 83 74
F00:4891                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:0000390E:  22 3C FC 55 F2 FE
F00:4892                       move.l #$86738374,d2
               S06:00003914:  24 3C 86 73 83 74
F00:4893                       move.l #$00000000,d3
               S06:0000391A:  76 00
F00:4894                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000391C:  78 00
F00:4895                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000391E:  7A 00
F00:4896                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003920:  7C 1E
F00:4897                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003922:  7E 1D
F00:4898                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003924:  30 7C 01 00
F00:4899       
F00:4900       
F00:4901       OR_OUTER2:    
F00:4902        
F00:4903           ; BYTE     
F00:4904                       move.l d0,(a0)
               S06:00003928:  20 80
F00:4905                       or.b d1,(a0)             
               S06:0000392A:  83 10
F00:4906                       move SR,d3      
               S06:0000392C:  40 C3
F00:4907                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000392E:  02 83 00 00 00 0C
F00:4908                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003934:  DA 83
F00:4909                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003936:  D8 90
F00:4910        
F00:4911           ; WORD      
F00:4912                       move.l d0,(a0)
               S06:00003938:  20 80
F00:4913                       or.w d1,(a0)  
               S06:0000393A:  83 50
F00:4914                       move SR,d3      
               S06:0000393C:  40 C3
F00:4915                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000393E:  02 83 00 00 00 0C
F00:4916                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003944:  DA 83
F00:4917                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003946:  D8 90
F00:4918        
F00:4919           ; LONG      
F00:4920                       move.l d0,(a0)
               S06:00003948:  20 80
F00:4921                       or.l d1,(a0)  
               S06:0000394A:  83 90
F00:4922                       move SR,d3      
               S06:0000394C:  40 C3
F00:4923                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000394E:  02 83 00 00 00 0F
F00:4924                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003954:  DA 83
F00:4925                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003956:  D8 90
F00:4926                       
F00:4927                       
F00:4928                       lsr.l #$1,d1
               S06:00003958:  E2 89
F00:4929                       dbf d6,OR_OUTER2
               S06:0000395A:  51 CE FF CC
F00:4930                       lsr.l #$1,d2
               S06:0000395E:  E2 8A
F00:4931                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003960:  22 3C 81 67 E1 23
F00:4932                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003966:  7C 1E
F00:4933                       dbf d7,OR_OUTER2
               S06:00003968:  51 CF FF BE
F00:4934                       
F00:4935                       cmpi.l #$FA82B9E4,d4      ; Check the data results
               S06:0000396C:  0C 84 FA 82 B9 E4
F00:4936                       bne OR_FAIL;                
               S06:00003972:  66 14
F00:4937                       cmpi.l #$00005730,d5      ; Check the Flag results
               S06:00003974:  0C 85 00 00 57 30
F00:4938                       bne OR_FAIL;                 
               S06:0000397A:  66 0C
F00:4939                          
F00:4940                       movea #TESTSTATUS,a0
               S06:0000397C:  30 7C FF 00
F00:4941                       move.b #$1,$2a(a0)
               S06:00003980:  11 7C 00 01 00 2A
F00:4942                       rts
               S06:00003986:  4E 75
F00:4943                       
F00:4944       OR_FAIL:
F00:4945           movea #TESTSTATUS,a0
               S06:00003988:  30 7C FF 00
F00:4946           move.b #$2,$2a(a0)
               S06:0000398C:  11 7C 00 02 00 2A
F00:4947           rts 
               S06:00003992:  4E 75
F00:4948       
F00:4949       ;-----------------------------------------------------------
F00:4950       ;-----------------------------------------------------------
F00:4951       ; OPCODE : AND
F00:4952       ;-----------------------------------------------------------
F00:4953       ;-----------------------------------------------------------
F00:4954       
F00:4955       op_AND:   
F00:4956       
F00:4957         ;; <EA> to Register
F00:4958       
F00:4959                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003994:  20 3C A5 A5 A5 A5
F00:4960                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:0000399A:  22 3C 81 67 E1 23
F00:4961                       move.l #$a5a5a5a5,d2
               S06:000039A0:  24 3C A5 A5 A5 A5
F00:4962                       move.l #$00000000,d3
               S06:000039A6:  76 00
F00:4963                       move.l #$00000000,d4       ; Cumulative data results
               S06:000039A8:  78 00
F00:4964                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000039AA:  7A 00
F00:4965                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000039AC:  7C 1E
F00:4966                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000039AE:  7E 1E
F00:4967                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000039B0:  30 7C 01 00
F00:4968       
F00:4969       
F00:4970       AND_OUTER1:    
F00:4971        
F00:4972           ; BYTE     
F00:4973                       move.l d1,(a0)
               S06:000039B4:  20 81
F00:4974                       and.b (a0),d0             
               S06:000039B6:  C0 10
F00:4975                       move SR,d3      
               S06:000039B8:  40 C3
F00:4976                       andi.l #$0C,d3            ; Isolate flags 
               S06:000039BA:  02 83 00 00 00 0C
F00:4977                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000039C0:  DA 83
F00:4978                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000039C2:  D8 80
F00:4979        
F00:4980           ; WORD      
F00:4981                       move.l d1,(a0)
               S06:000039C4:  20 81
F00:4982                       and.w (a0),d0             
               S06:000039C6:  C0 50
F00:4983                       move SR,d3      
               S06:000039C8:  40 C3
F00:4984                       andi.l #$0C,d3            ; Isolate flags 
               S06:000039CA:  02 83 00 00 00 0C
F00:4985                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000039D0:  DA 83
F00:4986                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000039D2:  D8 80
F00:4987        
F00:4988           ; LONG      
F00:4989                       move.l d1,(a0)
               S06:000039D4:  20 81
F00:4990                       and.l (a0),d0             
               S06:000039D6:  C0 90
F00:4991                       move SR,d3      
               S06:000039D8:  40 C3
F00:4992                       andi.l #$0F,d3            ; Isolate flags 
               S06:000039DA:  02 83 00 00 00 0F
F00:4993                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000039E0:  DA 83
F00:4994                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000039E2:  D8 80
F00:4995                       
F00:4996                       
F00:4997                       lsr.l #$1,d1
               S06:000039E4:  E2 89
F00:4998                       dbf d6,AND_OUTER1
               S06:000039E6:  51 CE FF CC
F00:4999                       lsr.l #$1,d2
               S06:000039EA:  E2 8A
F00:5000                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000039EC:  22 3C 81 67 E1 23
F00:5001                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000039F2:  7C 1E
F00:5002                       dbf d7,AND_OUTER1
               S06:000039F4:  51 CF FF BE
F00:5003                       
F00:5004                       cmpi.l #$CF212883,d4      ; Check the data results
               S06:000039F8:  0C 84 CF 21 28 83
F00:5005                       bne AND_FAIL;                
               S06:000039FE:  66 00 00 8C
F00:5006                       cmpi.l #$00002D10,d5      ; Check the Flag results
               S06:00003A02:  0C 85 00 00 2D 10
F00:5007                       bne AND_FAIL;                
               S06:00003A08:  66 00 00 82
F00:5008                          
F00:5009                          
F00:5010         ;; Register to <EA>
F00:5011       
F00:5012                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003A0C:  20 3C 86 73 83 74
F00:5013                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003A12:  22 3C FC 55 F2 FE
F00:5014                       move.l #$86738374,d2
               S06:00003A18:  24 3C 86 73 83 74
F00:5015                       move.l #$00000000,d3
               S06:00003A1E:  76 00
F00:5016                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003A20:  78 00
F00:5017                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003A22:  7A 00
F00:5018                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003A24:  7C 1E
F00:5019                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003A26:  7E 1D
F00:5020                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003A28:  30 7C 01 00
F00:5021       
F00:5022       
F00:5023       AND_OUTER2:    
F00:5024        
F00:5025           ; BYTE     
F00:5026                       move.l d0,(a0)
               S06:00003A2C:  20 80
F00:5027                       and.b d1,(a0)             
               S06:00003A2E:  C3 10
F00:5028                       move SR,d3      
               S06:00003A30:  40 C3
F00:5029                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003A32:  02 83 00 00 00 0C
F00:5030                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A38:  DA 83
F00:5031                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003A3A:  D8 90
F00:5032        
F00:5033           ; WORD      
F00:5034                       move.l d0,(a0)
               S06:00003A3C:  20 80
F00:5035                       and.w d1,(a0)  
               S06:00003A3E:  C3 50
F00:5036                       move SR,d3      
               S06:00003A40:  40 C3
F00:5037                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003A42:  02 83 00 00 00 0C
F00:5038                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A48:  DA 83
F00:5039                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003A4A:  D8 90
F00:5040        
F00:5041           ; LONG      
F00:5042                       move.l d0,(a0)
               S06:00003A4C:  20 80
F00:5043                       and.l d1,(a0)  
               S06:00003A4E:  C3 90
F00:5044                       move SR,d3      
               S06:00003A50:  40 C3
F00:5045                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003A52:  02 83 00 00 00 0F
F00:5046                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A58:  DA 83
F00:5047                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003A5A:  D8 90
F00:5048                       
F00:5049                       
F00:5050                       lsr.l #$1,d1
               S06:00003A5C:  E2 89
F00:5051                       dbf d6,AND_OUTER2
               S06:00003A5E:  51 CE FF CC
F00:5052                       lsr.l #$1,d2
               S06:00003A62:  E2 8A
F00:5053                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003A64:  22 3C 81 67 E1 23
F00:5054                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003A6A:  7C 1E
F00:5055                       dbf d7,AND_OUTER2
               S06:00003A6C:  51 CF FF BE
F00:5056                       
F00:5057                       cmpi.l #$4A3DE544,d4      ; Check the data results
               S06:00003A70:  0C 84 4A 3D E5 44
F00:5058                       bne AND_FAIL;                
               S06:00003A76:  66 14
F00:5059                       cmpi.l #$000018E8,d5      ; Check the Flag results
               S06:00003A78:  0C 85 00 00 18 E8
F00:5060                       bne AND_FAIL;                 
               S06:00003A7E:  66 0C
F00:5061                          
F00:5062                       movea #TESTSTATUS,a0
               S06:00003A80:  30 7C FF 00
F00:5063                       move.b #$1,$2b(a0) 
               S06:00003A84:  11 7C 00 01 00 2B
F00:5064                       rts
               S06:00003A8A:  4E 75
F00:5065                       
F00:5066       AND_FAIL: 
F00:5067           movea #TESTSTATUS,a0
               S06:00003A8C:  30 7C FF 00
F00:5068           move.b #$2,$2b(a0)    
               S06:00003A90:  11 7C 00 02 00 2B
F00:5069           rts     
               S06:00003A96:  4E 75
F00:5070       
F00:5071       ;-----------------------------------------------------------
F00:5072       ;-----------------------------------------------------------
F00:5073       ; OPCODE : EOR
F00:5074       ;-----------------------------------------------------------
F00:5075       ;-----------------------------------------------------------
F00:5076       
F00:5077       op_EOR:   
F00:5078        
F00:5079         ;; Register to <EA>
F00:5080       
F00:5081                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003A98:  20 3C 86 73 83 74
F00:5082                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003A9E:  22 3C FC 55 F2 FE
F00:5083                       move.l #$86738374,d2
               S06:00003AA4:  24 3C 86 73 83 74
F00:5084                       move.l #$00000000,d3
               S06:00003AAA:  76 00
F00:5085                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003AAC:  78 00
F00:5086                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003AAE:  7A 00
F00:5087                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003AB0:  7C 1E
F00:5088                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003AB2:  7E 1D
F00:5089                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003AB4:  30 7C 01 00
F00:5090       
F00:5091       
F00:5092       EOR_OUTER2:    
F00:5093        
F00:5094           ; BYTE     
F00:5095                       move.l d0,(a0)
               S06:00003AB8:  20 80
F00:5096                       eor.b d1,(a0)             
               S06:00003ABA:  B3 10
F00:5097                       move SR,d3      
               S06:00003ABC:  40 C3
F00:5098                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003ABE:  02 83 00 00 00 0C
F00:5099                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003AC4:  DA 83
F00:5100                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003AC6:  D8 90
F00:5101        
F00:5102           ; WORD      
F00:5103                       move.l d0,(a0)
               S06:00003AC8:  20 80
F00:5104                       eor.w d1,(a0)  
               S06:00003ACA:  B3 50
F00:5105                       move SR,d3      
               S06:00003ACC:  40 C3
F00:5106                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003ACE:  02 83 00 00 00 0C
F00:5107                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003AD4:  DA 83
F00:5108                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003AD6:  D8 90
F00:5109        
F00:5110           ; LONG      
F00:5111                       move.l d0,(a0)
               S06:00003AD8:  20 80
F00:5112                       eor.l d1,(a0)  
               S06:00003ADA:  B3 90
F00:5113                       move SR,d3      
               S06:00003ADC:  40 C3
F00:5114                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003ADE:  02 83 00 00 00 0F
F00:5115                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003AE4:  DA 83
F00:5116                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003AE6:  D8 90
F00:5117                       
F00:5118                       
F00:5119                       lsr.l #$1,d1
               S06:00003AE8:  E2 89
F00:5120                       dbf d6,EOR_OUTER2
               S06:00003AEA:  51 CE FF CC
F00:5121                       lsr.l #$1,d2
               S06:00003AEE:  E2 8A
F00:5122                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003AF0:  22 3C 81 67 E1 23
F00:5123                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003AF6:  7C 1E
F00:5124                       dbf d7,EOR_OUTER2
               S06:00003AF8:  51 CF FF BE
F00:5125                       
F00:5126                       cmpi.l #$55C5EB70,d4      ; Check the data results
               S06:00003AFC:  0C 84 55 C5 EB 70
F00:5127                       bne EOR_FAIL;                
               S06:00003B02:  66 14
F00:5128                       cmpi.l #$00004430,d5      ; Check the Flag results
               S06:00003B04:  0C 85 00 00 44 30
F00:5129                       bne EOR_FAIL;                 
               S06:00003B0A:  66 0C
F00:5130                          
F00:5131                       movea #TESTSTATUS,a0
               S06:00003B0C:  30 7C FF 00
F00:5132                       move.b #$1,$2c(a0)
               S06:00003B10:  11 7C 00 01 00 2C
F00:5133                       rts
               S06:00003B16:  4E 75
F00:5134                       
F00:5135       EOR_FAIL:
F00:5136           movea #TESTSTATUS,a0
               S06:00003B18:  30 7C FF 00
F00:5137           move.b #$2,$2c(a0)
               S06:00003B1C:  11 7C 00 02 00 2C
F00:5138           rts
               S06:00003B22:  4E 75
F00:5139       
F00:5140       ;-----------------------------------------------------------
F00:5141       ;-----------------------------------------------------------
F00:5142       ; OPCODE : CMP
F00:5143       ;-----------------------------------------------------------
F00:5144       ;-----------------------------------------------------------
F00:5145       
F00:5146       op_CMP:   
F00:5147       
F00:5148       
F00:5149         ;; <EA> to Register
F00:5150       
F00:5151                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003B24:  20 3C A5 A5 A5 A5
F00:5152                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003B2A:  22 3C 81 67 E1 23
F00:5153                       move.l #$a5a5a5a5,d2
               S06:00003B30:  24 3C A5 A5 A5 A5
F00:5154                       move.l #$00000000,d3
               S06:00003B36:  76 00
F00:5155                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003B38:  78 00
F00:5156                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003B3A:  7A 00
F00:5157                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B3C:  7C 1E
F00:5158                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003B3E:  7E 1E
F00:5159                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003B40:  30 7C 01 00
F00:5160       
F00:5161       
F00:5162       CMP_OUTER1:    
F00:5163        
F00:5164           ; BYTE     
F00:5165                       move.l d1,(a0)
               S06:00003B44:  20 81
F00:5166                       cmp.b (a0),d0             
               S06:00003B46:  B0 10
F00:5167                       move SR,d3      
               S06:00003B48:  40 C3
F00:5168                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003B4A:  02 83 00 00 00 0F
F00:5169                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003B50:  DA 83
F00:5170                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003B52:  D8 80
F00:5171        
F00:5172           ; WORD      
F00:5173                       move.l d1,(a0)
               S06:00003B54:  20 81
F00:5174                       cmp.w (a0),d0             
               S06:00003B56:  B0 50
F00:5175                       move SR,d3      
               S06:00003B58:  40 C3
F00:5176                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003B5A:  02 83 00 00 00 0F
F00:5177                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003B60:  DA 83
F00:5178                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003B62:  D8 80
F00:5179        
F00:5180           ; LONG      
F00:5181                       move.l d1,(a0)
               S06:00003B64:  20 81
F00:5182                       cmp.l (a0),d0             
               S06:00003B66:  B0 90
F00:5183                       move SR,d3      
               S06:00003B68:  40 C3
F00:5184                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003B6A:  02 83 00 00 00 0F
F00:5185                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003B70:  DA 83
F00:5186                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003B72:  D8 80
F00:5187                       
F00:5188                       
F00:5189                       lsr.l #$1,d1
               S06:00003B74:  E2 89
F00:5190                       dbf d6,CMP_OUTER1
               S06:00003B76:  51 CE FF CC
F00:5191                       lsr.l #$1,d2
               S06:00003B7A:  E2 8A
F00:5192                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003B7C:  22 3C 81 67 E1 23
F00:5193                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B82:  7C 1E
F00:5194                       dbf d7,CMP_OUTER1
               S06:00003B84:  51 CF FF BE
F00:5195                       
F00:5196                       cmpi.l #$7878712F,d4      ; Check the data results
               S06:00003B88:  0C 84 78 78 71 2F
F00:5197                       bne CMP_FAIL;                
               S06:00003B8E:  66 14
F00:5198                       cmpi.l #$00005502,d5      ; Check the Flag results
               S06:00003B90:  0C 85 00 00 55 02
F00:5199                       bne CMP_FAIL;                
               S06:00003B96:  66 0C
F00:5200                          
F00:5201                       movea #TESTSTATUS,a0
               S06:00003B98:  30 7C FF 00
F00:5202                       move.b #$1,$2d(a0)
               S06:00003B9C:  11 7C 00 01 00 2D
F00:5203                       rts
               S06:00003BA2:  4E 75
F00:5204       
F00:5205       CMP_FAIL:
F00:5206           movea #TESTSTATUS,a0
               S06:00003BA4:  30 7C FF 00
F00:5207           move.b #$2,$2d(a0)
               S06:00003BA8:  11 7C 00 02 00 2D
F00:5208           rts
               S06:00003BAE:  4E 75
F00:5209       
F00:5210       ;-----------------------------------------------------------
F00:5211       ;-----------------------------------------------------------
F00:5212       ; OPCODE : CMPA
F00:5213       ;-----------------------------------------------------------
F00:5214       ;-----------------------------------------------------------
F00:5215       
F00:5216       op_CMPA:   
F00:5217       
F00:5218       
F00:5219         ;; <EA> to Register
F00:5220       
F00:5221                       move.l #$a5a5a5a5,a0       ; Initial Data-X  Inner loop
               S06:00003BB0:  20 7C A5 A5 A5 A5
F00:5222                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003BB6:  22 3C 81 67 E1 23
F00:5223                       move.l #$a5a5a5a5,d2
               S06:00003BBC:  24 3C A5 A5 A5 A5
F00:5224                       move.l #$00000000,d3
               S06:00003BC2:  76 00
F00:5225                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003BC4:  78 00
F00:5226                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003BC6:  7A 00
F00:5227                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003BC8:  7C 1E
F00:5228                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003BCA:  7E 1E
F00:5229                       move.l #$00000100,a1       ; Address for memory EA operations
               S06:00003BCC:  32 7C 01 00
F00:5230       
F00:5231       
F00:5232       CMPA_OUTER1:    
F00:5233         
F00:5234        
F00:5235           ; WORD      
F00:5236                       move.l d1,(a1)
               S06:00003BD0:  22 81
F00:5237                       cmpa.w (a1),a0             
               S06:00003BD2:  B0 D1
F00:5238                       move SR,d3      
               S06:00003BD4:  40 C3
F00:5239                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003BD6:  02 83 00 00 00 0F
F00:5240                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003BDC:  DA 83
F00:5241                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:00003BDE:  D8 88
F00:5242        
F00:5243           ; LONG      
F00:5244                       move.l d1,(a1)
               S06:00003BE0:  22 81
F00:5245                       cmpa.l (a1),a0             
               S06:00003BE2:  B1 D1
F00:5246                       move SR,d3      
               S06:00003BE4:  40 C3
F00:5247                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003BE6:  02 83 00 00 00 0F
F00:5248                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003BEC:  DA 83
F00:5249                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:00003BEE:  D8 88
F00:5250                       
F00:5251                       
F00:5252                       lsr.l #$1,d1
               S06:00003BF0:  E2 89
F00:5253                       dbf d6,CMPA_OUTER1
               S06:00003BF2:  51 CE FF DC
F00:5254                       lsr.l #$1,d2
               S06:00003BF6:  E2 8A
F00:5255                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003BF8:  22 3C 81 67 E1 23
F00:5256                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003BFE:  7C 1E
F00:5257                       dbf d7,CMPA_OUTER1
               S06:00003C00:  51 CF FF CE
F00:5258                       
F00:5259                       cmpi.l #$a5a5a0ca,d4      ; Check the data results
               S06:00003C04:  0C 84 A5 A5 A0 CA
F00:5260                       bne CMPA_FAIL;                
               S06:00003C0A:  66 14
F00:5261                       cmpi.l #$00003A7D,d5      ; Check the Flag results
               S06:00003C0C:  0C 85 00 00 3A 7D
F00:5262                       bne CMPA_FAIL;                
               S06:00003C12:  66 0C
F00:5263                              
F00:5264                       movea #TESTSTATUS,a0
               S06:00003C14:  30 7C FF 00
F00:5265                       move.b #$1,$2e(a0)
               S06:00003C18:  11 7C 00 01 00 2E
F00:5266                       rts
               S06:00003C1E:  4E 75
F00:5267       
F00:5268       CMPA_FAIL:
F00:5269           movea #TESTSTATUS,a0
               S06:00003C20:  30 7C FF 00
F00:5270           move.b #$2,$2e(a0)
               S06:00003C24:  11 7C 00 02 00 2E
F00:5271           rts
               S06:00003C2A:  4E 75
F00:5272       
F00:5273       ;-----------------------------------------------------------
F00:5274       ;-----------------------------------------------------------
F00:5275       ; OPCODE : CMPM
F00:5276       ;-----------------------------------------------------------
F00:5277       ;-----------------------------------------------------------
F00:5278       
F00:5279       op_CMPM: 
F00:5280       
F00:5281                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003C2C:  30 7C 01 00
F00:5282                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003C30:  32 7C 02 00
F00:5283                       move.l #$00000000,d0       
               S06:00003C34:  70 00
F00:5284                       move.l #$00000000,d1       
               S06:00003C36:  72 00
F00:5285                       move.l #$00000000,d2       
               S06:00003C38:  74 00
F00:5286                       
F00:5287                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00003C3A:  20 FC 11 FF 55 80
F00:5288                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:00003C40:  20 FC 11 11 FF FF
F00:5289                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00003C46:  20 FC 33 33 33 33
F00:5290                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00003C4C:  20 FC 44 44 44 44
F00:5291                       
F00:5292                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00003C52:  22 FC 80 FF 33 7F
F00:5293                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00003C58:  22 FC FF FF 11 11
F00:5294                       move.l #$33333333,(a1)+   ; Populate test data
               S06:00003C5E:  22 FC 33 33 33 33
F00:5295                       move.l #$44444444,(a1)+   ; Populate test data
               S06:00003C64:  22 FC 44 44 44 44
F00:5296                       
F00:5297                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003C6A:  30 7C 01 00
F00:5298                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003C6E:  32 7C 02 00
F00:5299                       move.l #$0000000F,d6       ; Loop counter
               S06:00003C72:  7C 0F
F00:5300                       
F00:5301       CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
               S06:00003C74:  B3 08
F00:5302                       move SR,d3      
               S06:00003C76:  40 C3
F00:5303                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003C78:  02 83 00 00 00 0F
F00:5304                       add.l d3,d0               ; Copy flag results into accumulator                
               S06:00003C7E:  D0 83
F00:5305                       dbf d6,CMPM_LOOP1
               S06:00003C80:  51 CE FF F2
F00:5306       
F00:5307       
F00:5308                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003C84:  30 7C 01 00
F00:5309                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003C88:  32 7C 02 00
F00:5310                       move.l #$00000007,d6       ; Loop counter
               S06:00003C8C:  7C 07
F00:5311                       
F00:5312       CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
               S06:00003C8E:  B3 48
F00:5313                       move SR,d3      
               S06:00003C90:  40 C3
F00:5314                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003C92:  02 83 00 00 00 0F
F00:5315                       add.l d3,d1               ; Copy flag results into accumulator                
               S06:00003C98:  D2 83
F00:5316                       dbf d6,CMPM_LOOP2
               S06:00003C9A:  51 CE FF F2
F00:5317       
F00:5318       
F00:5319                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003C9E:  30 7C 01 00
F00:5320                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003CA2:  32 7C 02 00
F00:5321                       move.l #$00000003,d6       ; Loop counter
               S06:00003CA6:  7C 03
F00:5322                       
F00:5323       CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
               S06:00003CA8:  B3 88
F00:5324                       move SR,d3      
               S06:00003CAA:  40 C3
F00:5325                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003CAC:  02 83 00 00 00 0F
F00:5326                       add.l d3,d2               ; Copy flag results into accumulator                
               S06:00003CB2:  D4 83
F00:5327                       dbf d6,CMPM_LOOP3
               S06:00003CB4:  51 CE FF F2
F00:5328       
F00:5329       
F00:5330                       cmpi.l #$0000004C,d0      ; Check the data results
               S06:00003CB8:  0C 80 00 00 00 4C
F00:5331                       bne CMPM_FAIL;                
               S06:00003CBE:  66 1C
F00:5332                       cmpi.l #$00000024,d1      
               S06:00003CC0:  0C 81 00 00 00 24
F00:5333                       bne CMPM_FAIL;                
               S06:00003CC6:  66 14
F00:5334                       cmpi.l #$00000012,d2      
               S06:00003CC8:  0C 82 00 00 00 12
F00:5335                       bne CMPM_FAIL;                
               S06:00003CCE:  66 0C
F00:5336               
F00:5337                       movea #TESTSTATUS,a0
               S06:00003CD0:  30 7C FF 00
F00:5338                       move.b #$1,$2f(a0)
               S06:00003CD4:  11 7C 00 01 00 2F
F00:5339                       rts
               S06:00003CDA:  4E 75
F00:5340       
F00:5341       CMPM_FAIL: 
F00:5342           movea #TESTSTATUS,a0
               S06:00003CDC:  30 7C FF 00
F00:5343           move.b #$2,$2f(a0)
               S06:00003CE0:  11 7C 00 02 00 2F
F00:5344           rts
               S06:00003CE6:  4E 75
F00:5345       
F00:5346       ;-----------------------------------------------------------
F00:5347       ;-----------------------------------------------------------
F00:5348       ; OPCODE : ADD
F00:5349       ;-----------------------------------------------------------
F00:5350       ;-----------------------------------------------------------
F00:5351       
F00:5352       op_ADD: 
F00:5353       
F00:5354       
F00:5355         ;; <EA> to Register
F00:5356                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003CE8:  20 3C A5 A5 A5 A5
F00:5357                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003CEE:  22 3C 81 67 E1 23
F00:5358                       move.l #$a5a5a5a5,d2
               S06:00003CF4:  24 3C A5 A5 A5 A5
F00:5359                       move.l #$00000000,d3
               S06:00003CFA:  76 00
F00:5360                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003CFC:  78 00
F00:5361                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003CFE:  7A 00
F00:5362                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003D00:  7C 1E
F00:5363                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003D02:  7E 1E
F00:5364                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003D04:  30 7C 01 00
F00:5365       
F00:5366       
F00:5367       ADD_OUTER1:    
F00:5368        
F00:5369           ; BYTE     
F00:5370                       move.l d1,(a0)
               S06:00003D08:  20 81
F00:5371                       add.b (a0),d0             
               S06:00003D0A:  D0 10
F00:5372                       move SR,d3      
               S06:00003D0C:  40 C3
F00:5373                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003D0E:  02 83 00 00 00 1F
F00:5374                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D14:  DA 83
F00:5375                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003D16:  D8 80
F00:5376        
F00:5377           ; WORD      
F00:5378                       move.l d1,(a0)
               S06:00003D18:  20 81
F00:5379                       add.w (a0),d0             
               S06:00003D1A:  D0 50
F00:5380                       move SR,d3      
               S06:00003D1C:  40 C3
F00:5381                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003D1E:  02 83 00 00 00 0C
F00:5382                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D24:  DA 83
F00:5383                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003D26:  D8 80
F00:5384        
F00:5385           ; LONG      
F00:5386                       move.l d1,(a0)
               S06:00003D28:  20 81
F00:5387                       add.l (a0),d0             
               S06:00003D2A:  D0 90
F00:5388                       move SR,d3      
               S06:00003D2C:  40 C3
F00:5389                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003D2E:  02 83 00 00 00 0F
F00:5390                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D34:  DA 83
F00:5391                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003D36:  D8 80
F00:5392                       
F00:5393                       
F00:5394                       ror.l #$1,d1
               S06:00003D38:  E2 99
F00:5395                       dbf d6,ADD_OUTER1
               S06:00003D3A:  51 CE FF CC
F00:5396                       ror.l #$1,d2
               S06:00003D3E:  E2 9A
F00:5397                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003D40:  22 3C 81 67 E1 23
F00:5398                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003D46:  7C 1E
F00:5399                       dbf d7,ADD_OUTER1
               S06:00003D48:  51 CF FF BE
F00:5400                       
F00:5401                       cmpi.l #$23ED428F,d4      ; Check the data results
               S06:00003D4C:  0C 84 23 ED 42 8F
F00:5402                       bne ADD_FAIL;                
               S06:00003D52:  66 00 00 8C
F00:5403                       cmpi.l #$00004C96,d5      ; Check the Flag results
               S06:00003D56:  0C 85 00 00 4C 96
F00:5404                       bne ADD_FAIL;                
               S06:00003D5C:  66 00 00 82
F00:5405                          
F00:5406                          
F00:5407         ;; Register to <EA>
F00:5408                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003D60:  20 3C 86 73 83 74
F00:5409                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003D66:  22 3C FC 55 F2 FE
F00:5410                       move.l #$86738374,d2
               S06:00003D6C:  24 3C 86 73 83 74
F00:5411                       move.l #$00000000,d3
               S06:00003D72:  76 00
F00:5412                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003D74:  78 00
F00:5413                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003D76:  7A 00
F00:5414                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003D78:  7C 1E
F00:5415                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003D7A:  7E 1D
F00:5416                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003D7C:  30 7C 01 00
F00:5417       
F00:5418       
F00:5419       ADD_OUTER2:    
F00:5420        
F00:5421           ; BYTE     
F00:5422                       move.l d0,(a0)
               S06:00003D80:  20 80
F00:5423                       add.b d1,(a0)             
               S06:00003D82:  D3 10
F00:5424                       move SR,d3      
               S06:00003D84:  40 C3
F00:5425                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003D86:  02 83 00 00 00 0C
F00:5426                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D8C:  DA 83
F00:5427                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003D8E:  D8 90
F00:5428        
F00:5429           ; WORD      
F00:5430                       move.l d0,(a0)
               S06:00003D90:  20 80
F00:5431                       add.w d1,(a0)  
               S06:00003D92:  D3 50
F00:5432                       move SR,d3      
               S06:00003D94:  40 C3
F00:5433                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003D96:  02 83 00 00 00 1F
F00:5434                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003D9C:  DA 83
F00:5435                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003D9E:  D8 90
F00:5436        
F00:5437           ; LONG      
F00:5438                       move.l d0,(a0)
               S06:00003DA0:  20 80
F00:5439                       add.l d1,(a0)  
               S06:00003DA2:  D3 90
F00:5440                       move SR,d3      
               S06:00003DA4:  40 C3
F00:5441                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003DA6:  02 83 00 00 00 0F
F00:5442                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003DAC:  DA 83
F00:5443                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003DAE:  D8 90
F00:5444                       
F00:5445                       
F00:5446                       ror.l #$1,d1
               S06:00003DB0:  E2 99
F00:5447                       dbf d6,ADD_OUTER2
               S06:00003DB2:  51 CE FF CC
F00:5448                       ror.l #$1,d2
               S06:00003DB6:  E2 9A
F00:5449                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003DB8:  22 3C 81 67 E1 23
F00:5450                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003DBE:  7C 1E
F00:5451                       dbf d7,ADD_OUTER2
               S06:00003DC0:  51 CF FF BE
F00:5452                       
F00:5453                       cmpi.l #$6701B884,d4      ; Check the data results
               S06:00003DC4:  0C 84 67 01 B8 84
F00:5454                       bne ADD_FAIL;                
               S06:00003DCA:  66 14
F00:5455                       cmpi.l #$00005467,d5      ; Check the Flag results
               S06:00003DCC:  0C 85 00 00 54 67
F00:5456                       bne ADD_FAIL;                 
               S06:00003DD2:  66 0C
F00:5457                       
F00:5458                       movea #TESTSTATUS,a0
               S06:00003DD4:  30 7C FF 00
F00:5459                       move.b #$1,$30(a0)
               S06:00003DD8:  11 7C 00 01 00 30
F00:5460                       rts
               S06:00003DDE:  4E 75
F00:5461       
F00:5462       ADD_FAIL:
F00:5463           movea #TESTSTATUS,a0
               S06:00003DE0:  30 7C FF 00
F00:5464           move.b #$2,$30(a0)
               S06:00003DE4:  11 7C 00 02 00 30
F00:5465           rts
               S06:00003DEA:  4E 75
F00:5466       
F00:5467       ;-----------------------------------------------------------
F00:5468       ;-----------------------------------------------------------
F00:5469       ; OPCODE : SUB
F00:5470       ;-----------------------------------------------------------
F00:5471       ;-----------------------------------------------------------
F00:5472       
F00:5473       op_SUB: 
F00:5474       
F00:5475         ;; <EA> to Register
F00:5476                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003DEC:  20 3C A5 A5 A5 A5
F00:5477                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003DF2:  22 3C 81 67 E1 23
F00:5478                       move.l #$a5a5a5a5,d2
               S06:00003DF8:  24 3C A5 A5 A5 A5
F00:5479                       move.l #$00000000,d3
               S06:00003DFE:  76 00
F00:5480                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003E00:  78 00
F00:5481                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003E02:  7A 00
F00:5482                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E04:  7C 1E
F00:5483                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003E06:  7E 1E
F00:5484                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003E08:  30 7C 01 00
F00:5485       
F00:5486       
F00:5487       SUB_OUTER1:    
F00:5488        
F00:5489           ; BYTE     
F00:5490                       move.l d1,(a0)
               S06:00003E0C:  20 81
F00:5491                       sub.b (a0),d0             
               S06:00003E0E:  90 10
F00:5492                       move SR,d3      
               S06:00003E10:  40 C3
F00:5493                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003E12:  02 83 00 00 00 1F
F00:5494                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E18:  DA 83
F00:5495                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E1A:  D8 80
F00:5496        
F00:5497           ; WORD      
F00:5498                       move.l d1,(a0)
               S06:00003E1C:  20 81
F00:5499                       sub.w (a0),d0             
               S06:00003E1E:  90 50
F00:5500                       move SR,d3      
               S06:00003E20:  40 C3
F00:5501                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003E22:  02 83 00 00 00 0C
F00:5502                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E28:  DA 83
F00:5503                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E2A:  D8 80
F00:5504        
F00:5505           ; LONG      
F00:5506                       move.l d1,(a0)
               S06:00003E2C:  20 81
F00:5507                       sub.l (a0),d0             
               S06:00003E2E:  90 90
F00:5508                       move SR,d3      
               S06:00003E30:  40 C3
F00:5509                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003E32:  02 83 00 00 00 0F
F00:5510                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E38:  DA 83
F00:5511                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E3A:  D8 80
F00:5512                       
F00:5513                       
F00:5514                       ror.l #$1,d1
               S06:00003E3C:  E2 99
F00:5515                       dbf d6,SUB_OUTER1
               S06:00003E3E:  51 CE FF CC
F00:5516                       ror.l #$1,d2
               S06:00003E42:  E2 9A
F00:5517                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003E44:  22 3C 81 67 E1 23
F00:5518                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E4A:  7C 1E
F00:5519                       dbf d7,SUB_OUTER1
               S06:00003E4C:  51 CF FF BE
F00:5520                       
F00:5521                       cmpi.l #$1A8D14CF,d4      ; Check the data results
               S06:00003E50:  0C 84 1A 8D 14 CF
F00:5522                       bne SUB_FAIL;                
               S06:00003E56:  66 00 00 8C
F00:5523                       cmpi.l #$00004FC4,d5      ; Check the Flag results
               S06:00003E5A:  0C 85 00 00 4F C4
F00:5524                       bne SUB_FAIL;                
               S06:00003E60:  66 00 00 82
F00:5525                          
F00:5526                          
F00:5527         ;; Register to <EA>
F00:5528                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003E64:  20 3C 86 73 83 74
F00:5529                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003E6A:  22 3C FC 55 F2 FE
F00:5530                       move.l #$86738374,d2
               S06:00003E70:  24 3C 86 73 83 74
F00:5531                       move.l #$00000000,d3
               S06:00003E76:  76 00
F00:5532                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003E78:  78 00
F00:5533                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003E7A:  7A 00
F00:5534                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003E7C:  7C 1E
F00:5535                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003E7E:  7E 1D
F00:5536                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003E80:  30 7C 01 00
F00:5537       
F00:5538       
F00:5539       SUB_OUTER2:    
F00:5540        
F00:5541           ; BYTE     
F00:5542                       move.l d0,(a0)
               S06:00003E84:  20 80
F00:5543                       sub.b d1,(a0)             
               S06:00003E86:  93 10
F00:5544                       move SR,d3      
               S06:00003E88:  40 C3
F00:5545                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003E8A:  02 83 00 00 00 0C
F00:5546                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E90:  DA 83
F00:5547                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003E92:  D8 90
F00:5548        
F00:5549           ; WORD      
F00:5550                       move.l d0,(a0)
               S06:00003E94:  20 80
F00:5551                       sub.w d1,(a0)  
               S06:00003E96:  93 50
F00:5552                       move SR,d3      
               S06:00003E98:  40 C3
F00:5553                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003E9A:  02 83 00 00 00 1F
F00:5554                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003EA0:  DA 83
F00:5555                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003EA2:  D8 90
F00:5556        
F00:5557           ; LONG      
F00:5558                       move.l d0,(a0)
               S06:00003EA4:  20 80
F00:5559                       sub.l d1,(a0)  
               S06:00003EA6:  93 90
F00:5560                       move SR,d3      
               S06:00003EA8:  40 C3
F00:5561                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003EAA:  02 83 00 00 00 0F
F00:5562                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003EB0:  DA 83
F00:5563                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003EB2:  D8 90
F00:5564                       
F00:5565                       
F00:5566                       ror.l #$1,d1
               S06:00003EB4:  E2 99
F00:5567                       dbf d6,SUB_OUTER2
               S06:00003EB6:  51 CE FF CC
F00:5568                       ror.l #$1,d2
               S06:00003EBA:  E2 9A
F00:5569                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003EBC:  22 3C 81 67 E1 23
F00:5570                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003EC2:  7C 1E
F00:5571                       dbf d7,SUB_OUTER2
               S06:00003EC4:  51 CF FF BE
F00:5572                       
F00:5573                       cmpi.l #$36D38BEC,d4      ; Check the data results
               S06:00003EC8:  0C 84 36 D3 8B EC
F00:5574                       bne SUB_FAIL;                
               S06:00003ECE:  66 14
F00:5575                       cmpi.l #$000045A5,d5      ; Check the Flag results
               S06:00003ED0:  0C 85 00 00 45 A5
F00:5576                       bne SUB_FAIL;                 
               S06:00003ED6:  66 0C
F00:5577       
F00:5578                       movea #TESTSTATUS,a0
               S06:00003ED8:  30 7C FF 00
F00:5579                       move.b #$1,$31(a0)
               S06:00003EDC:  11 7C 00 01 00 31
F00:5580                       rts
               S06:00003EE2:  4E 75
F00:5581       
F00:5582       SUB_FAIL:
F00:5583           movea #TESTSTATUS,a0
               S06:00003EE4:  30 7C FF 00
F00:5584           move.b #$2,$31(a0)
               S06:00003EE8:  11 7C 00 02 00 31
F00:5585           rts
               S06:00003EEE:  4E 75
F00:5586       
F00:5587       ;-----------------------------------------------------------
F00:5588       ;-----------------------------------------------------------
F00:5589       ; OPCODE : ADDA
F00:5590       ;-----------------------------------------------------------
F00:5591       ;-----------------------------------------------------------
F00:5592       
F00:5593       op_ADDA: 
F00:5594       
F00:5595         ;; <EA> to Register
F00:5596                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003EF0:  20 3C A5 A5 A5 A5
F00:5597                       move.l #$8167E123,d1       
               S06:00003EF6:  22 3C 81 67 E1 23
F00:5598                       move.l #$a5a5a5a5,d2
               S06:00003EFC:  24 3C A5 A5 A5 A5
F00:5599                       move.l #$00000000,d3
               S06:00003F02:  76 00
F00:5600                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003F04:  78 00
F00:5601                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003F06:  7A 00
F00:5602                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F08:  7C 1E
F00:5603                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003F0A:  7E 1E
F00:5604                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003F0C:  30 7C 01 00
F00:5605                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:00003F10:  22 7C 81 67 E1 23
F00:5606       
F00:5607       ADDA_OUTER1:    
F00:5608       
F00:5609           ; WORD      
F00:5610                       move.l d1,(a0)  
               S06:00003F16:  20 81
F00:5611                       adda.w (a0),a1             
               S06:00003F18:  D2 D0
F00:5612                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003F1A:  D8 89
F00:5613        
F00:5614           ; LONG      
F00:5615                       move.l d1,(a0)
               S06:00003F1C:  20 81
F00:5616                       adda.l (a0),a1             
               S06:00003F1E:  D3 D0
F00:5617                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003F20:  D8 89
F00:5618                       
F00:5619                       ror.l #$1,d1
               S06:00003F22:  E2 99
F00:5620                       dbf d6,ADDA_OUTER1
               S06:00003F24:  51 CE FF F0
F00:5621                       ror.l #$1,d1
               S06:00003F28:  E2 99
F00:5622                       move.l d1,a1
               S06:00003F2A:  22 41
F00:5623                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003F2C:  22 3C 81 67 E1 23
F00:5624                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F32:  7C 1E
F00:5625                       dbf d7,ADDA_OUTER1
               S06:00003F34:  51 CF FF E0
F00:5626                       
F00:5627                       cmpi.l #$abe3cab5,d4       ; Check the data results
               S06:00003F38:  0C 84 AB E3 CA B5
F00:5628                       bne ADDA_FAIL;                
               S06:00003F3E:  66 0C
F00:5629                     
F00:5630                       movea #TESTSTATUS,a0
               S06:00003F40:  30 7C FF 00
F00:5631                       move.b #$1,$32(a0)
               S06:00003F44:  11 7C 00 01 00 32
F00:5632                       rts
               S06:00003F4A:  4E 75
F00:5633       
F00:5634       ADDA_FAIL:
F00:5635           movea #TESTSTATUS,a0
               S06:00003F4C:  30 7C FF 00
F00:5636           move.b #$2,$32(a0)
               S06:00003F50:  11 7C 00 02 00 32
F00:5637           rts
               S06:00003F56:  4E 75
F00:5638       
F00:5639       ;-----------------------------------------------------------
F00:5640       ;-----------------------------------------------------------
F00:5641       ; OPCODE : SUBA
F00:5642       ;-----------------------------------------------------------
F00:5643       ;-----------------------------------------------------------
F00:5644       
F00:5645       op_SUBA: 
F00:5646       
F00:5647         ;; <EA> to Register
F00:5648                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003F58:  20 3C A5 A5 A5 A5
F00:5649                       move.l #$8167E123,d1       
               S06:00003F5E:  22 3C 81 67 E1 23
F00:5650                       move.l #$a5a5a5a5,d2
               S06:00003F64:  24 3C A5 A5 A5 A5
F00:5651                       move.l #$00000000,d3
               S06:00003F6A:  76 00
F00:5652                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003F6C:  78 00
F00:5653                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003F6E:  7A 00
F00:5654                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F70:  7C 1E
F00:5655                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003F72:  7E 1E
F00:5656                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003F74:  30 7C 01 00
F00:5657                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:00003F78:  22 7C 81 67 E1 23
F00:5658       
F00:5659       SUBA_OUTER1:    
F00:5660       
F00:5661           ; WORD      
F00:5662                       move.l d1,(a0)
               S06:00003F7E:  20 81
F00:5663                       suba.w (a0),a1             
               S06:00003F80:  92 D0
F00:5664                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003F82:  D8 89
F00:5665        
F00:5666           ; LONG      
F00:5667                       move.l d1,(a0)
               S06:00003F84:  20 81
F00:5668                       suba.l (a0),a1             
               S06:00003F86:  93 D0
F00:5669                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003F88:  D8 89
F00:5670                       
F00:5671                       ror.l #$1,d1
               S06:00003F8A:  E2 99
F00:5672                       dbf d6,SUBA_OUTER1
               S06:00003F8C:  51 CE FF F0
F00:5673                       ror.l #$1,d1
               S06:00003F90:  E2 99
F00:5674                       move.l d1,a1
               S06:00003F92:  22 41
F00:5675                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003F94:  22 3C 81 67 E1 23
F00:5676                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003F9A:  7C 1E
F00:5677                       dbf d7,SUBA_OUTER1
               S06:00003F9C:  51 CF FF E0
F00:5678                       
F00:5679                       cmpi.l #$6fecc6d7,d4 * #$E1E36D7A,d4      ; Check the data results
               S06:00003FA0:  0C 84 6F EC C6 D7
F00:5680                       bne SUBA_FAIL;                
               S06:00003FA6:  66 0C
F00:5681                     
F00:5682                       movea #TESTSTATUS,a0
               S06:00003FA8:  30 7C FF 00
F00:5683                       move.b #$1,$33(a0)
               S06:00003FAC:  11 7C 00 01 00 33
F00:5684                       rts
               S06:00003FB2:  4E 75
F00:5685       
F00:5686       SUBA_FAIL:
F00:5687           movea #TESTSTATUS,a0
               S06:00003FB4:  30 7C FF 00
F00:5688           move.b #$2,$33(a0)
               S06:00003FB8:  11 7C 00 02 00 33
F00:5689           rts
               S06:00003FBE:  4E 75
F00:5690       
F00:5691       ;-----------------------------------------------------------
F00:5692       ;-----------------------------------------------------------
F00:5693       ; OPCODE : ADDX
F00:5694       ;-----------------------------------------------------------
F00:5695       ;-----------------------------------------------------------
F00:5696       
F00:5697       op_ADDX: 
F00:5698       
F00:5699       
F00:5700         ;; Register to Register
F00:5701                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003FC0:  20 3C A5 A5 A5 A5
F00:5702                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003FC6:  22 3C 81 67 E1 23
F00:5703                       move.l #$a5a5a5a5,d2
               S06:00003FCC:  24 3C A5 A5 A5 A5
F00:5704                       move.l #$00000000,d3
               S06:00003FD2:  76 00
F00:5705                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003FD4:  78 00
F00:5706                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003FD6:  7A 00
F00:5707                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003FD8:  7C 1E
F00:5708                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003FDA:  7E 1E
F00:5709                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003FDC:  30 7C 01 00
F00:5710       
F00:5711       
F00:5712       ADDX_OUTER1:    
F00:5713        
F00:5714           ; BYTE    
F00:5715                       move.l d2,d0
               S06:00003FE0:  20 02
F00:5716                       addx.b d1,d0             
               S06:00003FE2:  D1 01
F00:5717                       move SR,d3      
               S06:00003FE4:  40 C3
F00:5718                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003FE6:  02 83 00 00 00 1F
F00:5719                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003FEC:  DA 83
F00:5720                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003FEE:  D8 80
F00:5721        
F00:5722           ; WORD      
F00:5723                       move.l d2,d0
               S06:00003FF0:  20 02
F00:5724                       addx.w d1,d0             
               S06:00003FF2:  D1 41
F00:5725                       move SR,d3      
               S06:00003FF4:  40 C3
F00:5726                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003FF6:  02 83 00 00 00 1F
F00:5727                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003FFC:  DA 83
F00:5728                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003FFE:  D8 80
F00:5729        
F00:5730           ; LONG      
F00:5731                       move.l d2,d0
               S06:00004000:  20 02
F00:5732                       addx.l d1,d0             
               S06:00004002:  D1 81
F00:5733                       move SR,d3      
               S06:00004004:  40 C3
F00:5734                       andi.l #$1F,d3            ; Isolate flags 
               S06:00004006:  02 83 00 00 00 1F
F00:5735                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000400C:  DA 83
F00:5736                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000400E:  D8 80
F00:5737                       
F00:5738                       ror.l #$1,d1
               S06:00004010:  E2 99
F00:5739                       dbf d6,ADDX_OUTER1
               S06:00004012:  51 CE FF CC
F00:5740                       ror.l #$1,d2
               S06:00004016:  E2 9A
F00:5741                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004018:  22 3C 81 67 E1 23
F00:5742                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000401E:  7C 1E
F00:5743                       dbf d7,ADDX_OUTER1
               S06:00004020:  51 CF FF BE
F00:5744                       
F00:5745                       cmpi.l #$4E96A4D9,d4      ; Check the data results
               S06:00004024:  0C 84 4E 96 A4 D9
F00:5746                       bne ADDX_FAIL;                
               S06:0000402A:  66 00 00 B2
F00:5747                       cmpi.l #$000085CD,d5      ; Check the Flag results
               S06:0000402E:  0C 85 00 00 85 CD
F00:5748                       bne ADDX_FAIL;                
               S06:00004034:  66 00 00 A8
F00:5749                          
F00:5750           
F00:5751           
F00:5752           ; -(An),-(An)
F00:5753           
F00:5754                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:00004038:  70 00
F00:5755                       move.l #$00000000,d1        
               S06:0000403A:  72 00
F00:5756                       move.l #$00000000,d2      
               S06:0000403C:  74 00
F00:5757                       move.l #$00000100,a0       ; Address for Data-X
               S06:0000403E:  30 7C 01 00
F00:5758                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00004042:  32 7C 02 00
F00:5759                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00004046:  20 FC 11 FF 55 80
F00:5760                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:0000404C:  20 FC 11 11 FF FF
F00:5761                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00004052:  20 FC 33 33 33 33
F00:5762                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00004058:  20 FC 44 44 44 44
F00:5763                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:0000405E:  22 FC 80 FF 33 7F
F00:5764                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00004064:  22 FC FF FF 11 11
F00:5765                       move.l #$33333333,(a1)+   ; Populate test data
               S06:0000406A:  22 FC 33 33 33 33
F00:5766                       move.l #$44444444,(a1)+   ; Populate test data
               S06:00004070:  22 FC 44 44 44 44
F00:5767                       
F00:5768       
F00:5769                       move.l #$0000000F,d6       ; Loop counter
               S06:00004076:  7C 0F
F00:5770                       
F00:5771       ADDX_LOOP3:     addx.b -(a0),-(a1)
               S06:00004078:  D3 08
F00:5772                       move SR,d3      
               S06:0000407A:  40 C3
F00:5773                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000407C:  02 83 00 00 00 0F
F00:5774                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00004082:  D0 83
F00:5775                       add.b (a1),d1     
               S06:00004084:  D2 11
F00:5776                       dbf d6,ADDX_LOOP3
               S06:00004086:  51 CE FF F0
F00:5777       
F00:5778       
F00:5779                       move.l #$00000110,a0       ; Address for Data-X
               S06:0000408A:  30 7C 01 10
F00:5780                       move.l #$00000210,a1       ; Address for Data-Y
               S06:0000408E:  32 7C 02 10
F00:5781                       move.l #$00000007,d6       ; Loop counter
               S06:00004092:  7C 07
F00:5782                       
F00:5783       ADDX_LOOP4:     addx.w -(a0),-(a1)
               S06:00004094:  D3 48
F00:5784                       move SR,d3      
               S06:00004096:  40 C3
F00:5785                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004098:  02 83 00 00 00 0F
F00:5786                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:0000409E:  D0 83
F00:5787                       add.w (a1),d1     
               S06:000040A0:  D2 51
F00:5788                       dbf d6,ADDX_LOOP4
               S06:000040A2:  51 CE FF F0
F00:5789       
F00:5790       
F00:5791                       move.l #$00000110,a0       ; Address for Data-X
               S06:000040A6:  30 7C 01 10
F00:5792                       move.l #$00000210,a1       ; Address for Data-Y
               S06:000040AA:  32 7C 02 10
F00:5793                       move.l #$00000003,d6       ; Loop counter
               S06:000040AE:  7C 03
F00:5794                       
F00:5795       ADDX_LOOP5:     addx.l -(a0),-(a1)
               S06:000040B0:  D3 88
F00:5796                       move SR,d3      
               S06:000040B2:  40 C3
F00:5797                       andi.l #$0F,d3            ; Isolate flags 
               S06:000040B4:  02 83 00 00 00 0F
F00:5798                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000040BA:  D0 83
F00:5799                       add.l (a1),d1     
               S06:000040BC:  D2 91
F00:5800                       dbf d6,ADDX_LOOP5
               S06:000040BE:  51 CE FF F0
F00:5801       
F00:5802       
F00:5803                       cmpi.l #$00000095,d0      ; Check the flag results
               S06:000040C2:  0C 80 00 00 00 95
F00:5804                       bne ADDX_FAIL;                
               S06:000040C8:  66 14
F00:5805                       cmpi.l #$c812a67f,d1 *#$C812A682,d1      ; Check the data results 
               S06:000040CA:  0C 81 C8 12 A6 7F
F00:5806                       bne ADDX_FAIL;                
               S06:000040D0:  66 0C
F00:5807        
F00:5808                       movea #TESTSTATUS,a0
               S06:000040D2:  30 7C FF 00
F00:5809                       move.b #$1,$34(a0)
               S06:000040D6:  11 7C 00 01 00 34
F00:5810                       rts
               S06:000040DC:  4E 75
F00:5811       
F00:5812       ADDX_FAIL:
F00:5813           movea #TESTSTATUS,a0
               S06:000040DE:  30 7C FF 00
F00:5814           move.b #$2,$34(a0)
               S06:000040E2:  11 7C 00 02 00 34
F00:5815       
F00:5816       ;-----------------------------------------------------------
F00:5817       ;-----------------------------------------------------------
F00:5818       ; OPCODE : SUBX
F00:5819       ;-----------------------------------------------------------
F00:5820       ;-----------------------------------------------------------
F00:5821       
F00:5822       op_SUBX: 
F00:5823       
F00:5824       
F00:5825         ;; Register to Register
F00:5826                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:000040E8:  20 3C A5 A5 A5 A5
F00:5827                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000040EE:  22 3C 81 67 E1 23
F00:5828                       move.l #$a5a5a5a5,d2
               S06:000040F4:  24 3C A5 A5 A5 A5
F00:5829                       move.l #$00000000,d3
               S06:000040FA:  76 00
F00:5830                       move.l #$00000000,d4       ; Cumulative data results
               S06:000040FC:  78 00
F00:5831                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000040FE:  7A 00
F00:5832                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004100:  7C 1E
F00:5833                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00004102:  7E 1E
F00:5834                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00004104:  30 7C 01 00
F00:5835       
F00:5836       
F00:5837       SUBX_OUTER1:    
F00:5838        
F00:5839           ; BYTE    
F00:5840                       move.l d2,d0
               S06:00004108:  20 02
F00:5841                       subx.b d1,d0             
               S06:0000410A:  91 01
F00:5842                       move SR,d3      
               S06:0000410C:  40 C3
F00:5843                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000410E:  02 83 00 00 00 1F
F00:5844                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004114:  DA 83
F00:5845                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004116:  D8 80
F00:5846        
F00:5847           ; WORD      
F00:5848                       move.l d2,d0
               S06:00004118:  20 02
F00:5849                       subx.w d1,d0             
               S06:0000411A:  91 41
F00:5850                       move SR,d3      
               S06:0000411C:  40 C3
F00:5851                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000411E:  02 83 00 00 00 1F
F00:5852                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004124:  DA 83
F00:5853                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004126:  D8 80
F00:5854        
F00:5855           ; LONG      
F00:5856                       move.l d2,d0
               S06:00004128:  20 02
F00:5857                       subx.l d1,d0             
               S06:0000412A:  91 81
F00:5858                       move SR,d3      
               S06:0000412C:  40 C3
F00:5859                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000412E:  02 83 00 00 00 1F
F00:5860                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004134:  DA 83
F00:5861                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00004136:  D8 80
F00:5862                       
F00:5863                       ror.l #$1,d1
               S06:00004138:  E2 99
F00:5864                       dbf d6,SUBX_OUTER1
               S06:0000413A:  51 CE FF CC
F00:5865                       ror.l #$1,d2
               S06:0000413E:  E2 9A
F00:5866                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00004140:  22 3C 81 67 E1 23
F00:5867                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00004146:  7C 1E
F00:5868                       dbf d7,SUBX_OUTER1
               S06:00004148:  51 CF FF BE
F00:5869                       
F00:5870                       cmpi.l #$FCAA913E,d4      ; Check the data results
               S06:0000414C:  0C 84 FC AA 91 3E
F00:5871                       bne SUBX_FAIL;                
               S06:00004152:  66 00 00 B2
F00:5872                       cmpi.l #$00007E89,d5      ; Check the Flag results
               S06:00004156:  0C 85 00 00 7E 89
F00:5873                       bne SUBX_FAIL;                
               S06:0000415C:  66 00 00 A8
F00:5874                          
F00:5875           
F00:5876           
F00:5877           ; -(An),-(An)
F00:5878           
F00:5879                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:00004160:  70 00
F00:5880                       move.l #$00000000,d1        
               S06:00004162:  72 00
F00:5881                       move.l #$00000000,d2      
               S06:00004164:  74 00
F00:5882                       move.l #$00000100,a0       ; Address for Data-X
               S06:00004166:  30 7C 01 00
F00:5883                       move.l #$00000200,a1       ; Address for Data-Y
               S06:0000416A:  32 7C 02 00
F00:5884                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:0000416E:  20 FC 11 FF 55 80
F00:5885                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:00004174:  20 FC 11 11 FF FF
F00:5886                       move.l #$80FF337F,(a0)+   ; Populate test data
               S06:0000417A:  20 FC 80 FF 33 7F
F00:5887                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00004180:  20 FC 44 44 44 44
F00:5888                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00004186:  22 FC 80 FF 33 7F
F00:5889                       move.l #$1111FFFF,(a1)+   ; Populate test data
               S06:0000418C:  22 FC 11 11 FF FF
F00:5890                       move.l #$33333333,(a1)+   ; Populate test data
               S06:00004192:  22 FC 33 33 33 33
F00:5891                       move.l #$5580EECC,(a1)+   ; Populate test data
               S06:00004198:  22 FC 55 80 EE CC
F00:5892                       
F00:5893       
F00:5894                       move.l #$0000000F,d6       ; Loop counter
               S06:0000419E:  7C 0F
F00:5895                       
F00:5896       SUBX_LOOP3:     subx.b -(a0),-(a1)
               S06:000041A0:  93 08
F00:5897                       move SR,d3      
               S06:000041A2:  40 C3
F00:5898                       andi.l #$0F,d3            ; Isolate flags 
               S06:000041A4:  02 83 00 00 00 0F
F00:5899                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000041AA:  D0 83
F00:5900                       add.b (a1),d1     
               S06:000041AC:  D2 11
F00:5901                       dbf d6,SUBX_LOOP3
               S06:000041AE:  51 CE FF F0
F00:5902       
F00:5903       
F00:5904                       move.l #$00000110,a0       ; Address for Data-X
               S06:000041B2:  30 7C 01 10
F00:5905                       move.l #$00000210,a1       ; Address for Data-Y
               S06:000041B6:  32 7C 02 10
F00:5906                       move.l #$00000007,d6       ; Loop counter
               S06:000041BA:  7C 07
F00:5907                       
F00:5908       SUBX_LOOP4:     subx.w -(a0),-(a1)
               S06:000041BC:  93 48
F00:5909                       move SR,d3      
               S06:000041BE:  40 C3
F00:5910                       andi.l #$0F,d3            ; Isolate flags 
               S06:000041C0:  02 83 00 00 00 0F
F00:5911                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000041C6:  D0 83
F00:5912                       add.w (a1),d1     
               S06:000041C8:  D2 51
F00:5913                       dbf d6,SUBX_LOOP4
               S06:000041CA:  51 CE FF F0
F00:5914       
F00:5915       
F00:5916                       move.l #$00000110,a0       ; Address for Data-X
               S06:000041CE:  30 7C 01 10
F00:5917                       move.l #$00000210,a1       ; Address for Data-Y
               S06:000041D2:  32 7C 02 10
F00:5918                       move.l #$00000003,d6       ; Loop counter
               S06:000041D6:  7C 03
F00:5919                       
F00:5920       SUBX_LOOP5:     subx.l -(a0),-(a1)
               S06:000041D8:  93 88
F00:5921                       move SR,d3      
               S06:000041DA:  40 C3
F00:5922                       andi.l #$0F,d3            ; Isolate flags 
               S06:000041DC:  02 83 00 00 00 0F
F00:5923                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:000041E2:  D0 83
F00:5924                       add.l (a1),d1     
               S06:000041E4:  D2 91
F00:5925                       dbf d6,SUBX_LOOP5
               S06:000041E6:  51 CE FF F0
F00:5926       
F00:5927       
F00:5928                       cmpi.l #$000000B1,d0      ; Check the flag results
               S06:000041EA:  0C 80 00 00 00 B1
F00:5929                       bne SUBX_FAIL;                
               S06:000041F0:  66 14
F00:5930                       cmpi.l #$62C6F417,d1      ; Check the data results 
               S06:000041F2:  0C 81 62 C6 F4 17
F00:5931                       bne SUBX_FAIL;                
               S06:000041F8:  66 0C
F00:5932        
F00:5933                       movea #TESTSTATUS,a0
               S06:000041FA:  30 7C FF 00
F00:5934                       move.b #$1,$35(a0)
               S06:000041FE:  11 7C 00 01 00 35
F00:5935                       rts
               S06:00004204:  4E 75
F00:5936       
F00:5937       SUBX_FAIL:
F00:5938           movea #TESTSTATUS,a0
               S06:00004206:  30 7C FF 00
F00:5939           move.b #$2,$35(a0)
               S06:0000420A:  11 7C 00 02 00 35
F00:5940           rts
               S06:00004210:  4E 75
F00:5941       
F00:5942       ;-----------------------------------------------------------
F00:5943       ;-----------------------------------------------------------
F00:5944       ; OPCODE : MULU
F00:5945       ;-----------------------------------------------------------
F00:5946       ;-----------------------------------------------------------
F00:5947       
F00:5948       op_MULU:     
F00:5949       
F00:5950                       move.l #$FE805501,d0        ; Initial 
               S06:00004212:  20 3C FE 80 55 01
F00:5951                       move.l #$5697EDB6,d1        ; Initial Y
               S06:00004218:  22 3C 56 97 ED B6
F00:5952                       move.l #$FE805501,d2
               S06:0000421E:  24 3C FE 80 55 01
F00:5953                       move.l #$00000000,d3
               S06:00004224:  76 00
F00:5954                       move.l #$00000000,d4        ; Cumulative data results
               S06:00004226:  78 00
F00:5955                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00004228:  7A 00
F00:5956                       move.l #$0000000E,d6       ; Inner loop counter
               S06:0000422A:  7C 0E
F00:5957                       move.l #$0000000E,d7       ; Outer loop counter
               S06:0000422C:  7E 0E
F00:5958       
F00:5959       
F00:5960       MULU_OUTER1:    mulu d1,d0             
               S06:0000422E:  C0 C1
F00:5961                       move SR,d3      
               S06:00004230:  40 C3
F00:5962                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004232:  02 83 00 00 00 0C
F00:5963                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004238:  DA 83
F00:5964                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000423A:  D8 80
F00:5965                       ror.l #$1,d1
               S06:0000423C:  E2 99
F00:5966       
F00:5967                       dbf d6,MULU_OUTER1
               S06:0000423E:  51 CE FF EE
F00:5968                       ror.l #$1,d2
               S06:00004242:  E2 9A
F00:5969                       move.l d2,d0
               S06:00004244:  20 02
F00:5970                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00004246:  7C 0E
F00:5971                       dbf d7,MULU_OUTER1
               S06:00004248:  51 CF FF E4
F00:5972                       
F00:5973                       cmpi.l #$76FB988C,d4      ; Check the data results
               S06:0000424C:  0C 84 76 FB 98 8C
F00:5974                       bne MULU_FAIL;                
               S06:00004252:  66 14
F00:5975                            
F00:5976                       cmpi.l #$00000170,d5      ; Check the Flag results
               S06:00004254:  0C 85 00 00 01 70
F00:5977                       bne MULU_FAIL;                 
               S06:0000425A:  66 0C
F00:5978                 
F00:5979                       movea #TESTSTATUS,a0
               S06:0000425C:  30 7C FF 00
F00:5980                       move.b #$1,$36(a0)
               S06:00004260:  11 7C 00 01 00 36
F00:5981                       rts
               S06:00004266:  4E 75
F00:5982       
F00:5983       MULU_FAIL:
F00:5984           movea #TESTSTATUS,a0
               S06:00004268:  30 7C FF 00
F00:5985           move.b #$2,$36(a0)
               S06:0000426C:  11 7C 00 02 00 36
F00:5986           rts            
               S06:00004272:  4E 75
F00:5987                       
F00:5988       ;-----------------------------------------------------------
F00:5989       ;-----------------------------------------------------------
F00:5990       ; OPCODE : MULS
F00:5991       ;-----------------------------------------------------------
F00:5992       ;-----------------------------------------------------------
F00:5993       
F00:5994       op_MULS:     
F00:5995       
F00:5996                       move.l #$FE805501,d0        ; Initial 
               S06:00004274:  20 3C FE 80 55 01
F00:5997                       move.l #$5697EDB6,d1        ; Initial Y
               S06:0000427A:  22 3C 56 97 ED B6
F00:5998                       move.l #$FE805501,d2
               S06:00004280:  24 3C FE 80 55 01
F00:5999                       move.l #$00000000,d3
               S06:00004286:  76 00
F00:6000                       move.l #$00000000,d4        ; Cumulative data results
               S06:00004288:  78 00
F00:6001                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000428A:  7A 00
F00:6002                       move.l #$0000000E,d6       ; Inner loop counter
               S06:0000428C:  7C 0E
F00:6003                       move.l #$0000000E,d7       ; Outer loop counter
               S06:0000428E:  7E 0E
F00:6004       
F00:6005       
F00:6006       MULS_OUTER1:    muls d1,d0             
               S06:00004290:  C1 C1
F00:6007                       move SR,d3      
               S06:00004292:  40 C3
F00:6008                       andi.l #$0C,d3            ; Isolate flags 
               S06:00004294:  02 83 00 00 00 0C
F00:6009                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000429A:  DA 83
F00:6010                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000429C:  D8 80
F00:6011                       ror.l #$1,d1
               S06:0000429E:  E2 99
F00:6012       
F00:6013                       dbf d6,MULS_OUTER1
               S06:000042A0:  51 CE FF EE
F00:6014                       ror.l #$1,d2
               S06:000042A4:  E2 9A
F00:6015                       move.l d2,d0
               S06:000042A6:  20 02
F00:6016                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000042A8:  7C 0E
F00:6017                       dbf d7,MULS_OUTER1
               S06:000042AA:  51 CF FF E4
F00:6018                       
F00:6019                       cmpi.l #$D4E2988C,d4      ; Check the data results
               S06:000042AE:  0C 84 D4 E2 98 8C
F00:6020                       bne MULS_FAIL;                
               S06:000042B4:  66 14
F00:6021                            
F00:6022                       cmpi.l #$000003E0,d5      ; Check the Flag results
               S06:000042B6:  0C 85 00 00 03 E0
F00:6023                       bne MULS_FAIL;                 
               S06:000042BC:  66 0C
F00:6024                 
F00:6025                       movea #TESTSTATUS,a0
               S06:000042BE:  30 7C FF 00
F00:6026                       move.b #$1,$37(a0)
               S06:000042C2:  11 7C 00 01 00 37
F00:6027                       rts
               S06:000042C8:  4E 75
F00:6028                       
F00:6029       MULS_FAIL:
F00:6030           movea #TESTSTATUS,a0
               S06:000042CA:  30 7C FF 00
F00:6031           move.b #$2,$37(a0)
               S06:000042CE:  11 7C 00 02 00 37
F00:6032           rts
               S06:000042D4:  4E 75
F00:6033                       
F00:6034       ;-----------------------------------------------------------
F00:6035       ;-----------------------------------------------------------
F00:6036       ; OPCODE : EXG
F00:6037       ;-----------------------------------------------------------
F00:6038       ;-----------------------------------------------------------
F00:6039       
F00:6040       op_EXG:     
F00:6041                       move.l #$d1d1d1d1,d1      
               S06:000042D6:  22 3C D1 D1 D1 D1
F00:6042                       move.l #$d2d2d2d2,d2      
               S06:000042DC:  24 3C D2 D2 D2 D2
F00:6043                       move.l #$d3d3d3d3,d3      
               S06:000042E2:  26 3C D3 D3 D3 D3
F00:6044                       move.l #$a1a1a1a1,a1      
               S06:000042E8:  22 7C A1 A1 A1 A1
F00:6045                       move.l #$a2a2a2a2,a2  
               S06:000042EE:  24 7C A2 A2 A2 A2
F00:6046                       move.l #$a3a3a3a3,a3  
               S06:000042F4:  26 7C A3 A3 A3 A3
F00:6047                       
F00:6048                       exg d1,d2    
               S06:000042FA:  C3 42
F00:6049                       exg a1,a2    
               S06:000042FC:  C3 4A
F00:6050                       exg d3,a3  
               S06:000042FE:  C7 8B
F00:6051       
F00:6052                       cmpi.l #$d2d2d2d2,d1      ; Check the results
               S06:00004300:  0C 81 D2 D2 D2 D2
F00:6053                       bne EXG_FAIL;                 
               S06:00004306:  66 3A
F00:6054                       cmpi.l #$d1d1d1d1,d2    
               S06:00004308:  0C 82 D1 D1 D1 D1
F00:6055                       bne EXG_FAIL;                 
               S06:0000430E:  66 32
F00:6056                       cmpi.l #$a3a3a3a3,d3    
               S06:00004310:  0C 83 A3 A3 A3 A3
F00:6057                       bne EXG_FAIL;                 
               S06:00004316:  66 2A
F00:6058                       
F00:6059                       move.l a1,d1
               S06:00004318:  22 09
F00:6060                       move.l a2,d2
               S06:0000431A:  24 0A
F00:6061                       move.l a3,d3
               S06:0000431C:  26 0B
F00:6062        
F00:6063                       cmpi.l #$a2a2a2a2,d1    
               S06:0000431E:  0C 81 A2 A2 A2 A2
F00:6064                       bne EXG_FAIL;                 
               S06:00004324:  66 1C
F00:6065                       cmpi.l #$a1a1a1a1,d2     
               S06:00004326:  0C 82 A1 A1 A1 A1
F00:6066                       bne EXG_FAIL;                 
               S06:0000432C:  66 14
F00:6067                       cmpi.l #$d3d3d3d3,d3     
               S06:0000432E:  0C 83 D3 D3 D3 D3
F00:6068                       bne EXG_FAIL;                 
               S06:00004334:  66 0C
F00:6069        
F00:6070                       movea #TESTSTATUS,a0
               S06:00004336:  30 7C FF 00
F00:6071                       move.b #$1,$38(a0)
               S06:0000433A:  11 7C 00 01 00 38
F00:6072                       rts
               S06:00004340:  4E 75
F00:6073             
F00:6074       EXG_FAIL:
F00:6075           movea #TESTSTATUS,a0
               S06:00004342:  30 7C FF 00
F00:6076           move.b #$2,$38(a0)
               S06:00004346:  11 7C 00 02 00 38
F00:6077           rts
               S06:0000434C:  4E 75
F00:6078       
F00:6079       ;-----------------------------------------------------------
F00:6080       ;-----------------------------------------------------------
F00:6081       ; OPCODE : ROx
F00:6082       ;-----------------------------------------------------------
F00:6083       ;-----------------------------------------------------------
F00:6084       
F00:6085           ; Subroutine to check and accumulate the flags 
F00:6086       ROx_FLAGS:      move SR,d3      
               S06:0000434E:  40 C3
F00:6087                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004350:  02 83 00 00 00 0F
F00:6088                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004356:  DA 83
F00:6089                       rts
               S06:00004358:  4E 75
F00:6090           
F00:6091       op_ROx:   
F00:6092                  
F00:6093           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6094           
F00:6095              ; BYTE LEFT
F00:6096                       move.l #$80018FF1,d0   
               S06:0000435A:  20 3C 80 01 8F F1
F00:6097                       move.l #$00000000,d5  
               S06:00004360:  7A 00
F00:6098                       move.l #$00000011,d6  
               S06:00004362:  7C 11
F00:6099       ROx_LOOP1:
F00:6100                       rol.b d6,d0       
               S06:00004364:  ED 38
F00:6101                       jsr ROx_FLAGS
               S06:00004366:  4E B8 43 4E
F00:6102                       dbf d6,ROx_LOOP1
               S06:0000436A:  51 CE FF F8
F00:6103                       cmpi.l #$80018FE3,d0     
               S06:0000436E:  0C 80 80 01 8F E3
F00:6104                       bne ROX_FAIL;                 
               S06:00004374:  66 00 02 4C
F00:6105                       cmpi.l #$0000006B,d5     
               S06:00004378:  0C 85 00 00 00 6B
F00:6106                       bne ROX_FAIL;      
               S06:0000437E:  66 00 02 42
F00:6107           
F00:6108              ; BYTE RIGHT
F00:6109                       move.l #$80018FF1,d0   
               S06:00004382:  20 3C 80 01 8F F1
F00:6110                       move.l #$00000012,d6  
               S06:00004388:  7C 12
F00:6111       ROx_LOOP2:
F00:6112                       ror.b d6,d0       
               S06:0000438A:  EC 38
F00:6113                       jsr ROx_FLAGS
               S06:0000438C:  4E B8 43 4E
F00:6114                       dbf d6,ROx_LOOP2
               S06:00004390:  51 CE FF F8
F00:6115                       cmpi.l #$80018F3E,d0     
               S06:00004394:  0C 80 80 01 8F 3E
F00:6116                       bne ROX_FAIL;                 
               S06:0000439A:  66 00 02 26
F00:6117                       cmpi.l #$000000C5,d5     
               S06:0000439E:  0C 85 00 00 00 C5
F00:6118                       bne ROX_FAIL;      
               S06:000043A4:  66 00 02 1C
F00:6119       
F00:6120           
F00:6121              ; WORD LEFT
F00:6122                       move.l #$80018FF1,d0   
               S06:000043A8:  20 3C 80 01 8F F1
F00:6123                       move.l #$00000013,d6  
               S06:000043AE:  7C 13
F00:6124       ROx_LOOP3:
F00:6125                       rol.w d6,d0       
               S06:000043B0:  ED 78
F00:6126                       jsr ROx_FLAGS
               S06:000043B2:  4E B8 43 4E
F00:6127                       dbf d6,ROx_LOOP3
               S06:000043B6:  51 CE FF F8
F00:6128                       cmpi.l #$800163FC,d0     
               S06:000043BA:  0C 80 80 01 63 FC
F00:6129                       bne ROX_FAIL;                 
               S06:000043C0:  66 00 02 00
F00:6130                       cmpi.l #$00000131,d5     
               S06:000043C4:  0C 85 00 00 01 31
F00:6131                       bne ROX_FAIL;      
               S06:000043CA:  66 00 01 F6
F00:6132           
F00:6133              ; WORD RIGHT
F00:6134                       move.l #$80018FF1,d0   
               S06:000043CE:  20 3C 80 01 8F F1
F00:6135                       move.l #$0000001E,d6  
               S06:000043D4:  7C 1E
F00:6136       ROx_LOOP4:
F00:6137                       ror.w d6,d0       
               S06:000043D6:  EC 78
F00:6138                       jsr ROx_FLAGS
               S06:000043D8:  4E B8 43 4E
F00:6139                       dbf d6,ROx_LOOP4
               S06:000043DC:  51 CE FF F8
F00:6140                       cmpi.l #$8001C7F8,d0     
               S06:000043E0:  0C 80 80 01 C7 F8
F00:6141                       bne ROX_FAIL;                 
               S06:000043E6:  66 00 01 DA
F00:6142                       cmpi.l #$000001DB,d5     
               S06:000043EA:  0C 85 00 00 01 DB
F00:6143                       bne ROX_FAIL;      
               S06:000043F0:  66 00 01 D0
F00:6144       
F00:6145           
F00:6146              ; LONG LEFT
F00:6147                       move.l #$80018FF1,d0   
               S06:000043F4:  20 3C 80 01 8F F1
F00:6148                       move.l #$00000015,d6  
               S06:000043FA:  7C 15
F00:6149       ROx_LOOP5:
F00:6150                       rol.l d6,d0       
               S06:000043FC:  ED B8
F00:6151                       jsr ROx_FLAGS
               S06:000043FE:  4E B8 43 4E
F00:6152                       dbf d6,ROx_LOOP5
               S06:00004402:  51 CE FF F8
F00:6153                       cmpi.l #$00C7F8C0,d0     
               S06:00004406:  0C 80 00 C7 F8 C0
F00:6154                       bne ROX_FAIL;                 
               S06:0000440C:  66 00 01 B4
F00:6155                       cmpi.l #$0000021A,d5     
               S06:00004410:  0C 85 00 00 02 1A
F00:6156                       bne ROX_FAIL;      
               S06:00004416:  66 00 01 AA
F00:6157           
F00:6158              ; LONG RIGHT
F00:6159                       move.l #$80018FF1,d0   
               S06:0000441A:  20 3C 80 01 8F F1
F00:6160                       move.l #$00000016,d6  
               S06:00004420:  7C 16
F00:6161       ROx_LOOP6:
F00:6162                       ror.l d6,d0       
               S06:00004422:  EC B8
F00:6163                       jsr ROx_FLAGS
               S06:00004424:  4E B8 43 4E
F00:6164                       dbf d6,ROx_LOOP6
               S06:00004428:  51 CE FF F8
F00:6165                       cmpi.l #$000C7F8C,d0     
               S06:0000442C:  0C 80 00 0C 7F 8C
F00:6166                       bne ROX_FAIL;                 
               S06:00004432:  66 00 01 8E
F00:6167                       cmpi.l #$00000250,d5     
               S06:00004436:  0C 85 00 00 02 50
F00:6168                       bne ROX_FAIL;      
               S06:0000443C:  66 00 01 84
F00:6169       
F00:6170                   
F00:6171           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6172           
F00:6173                       move.l #$80018FF1,d0   
               S06:00004440:  20 3C 80 01 8F F1
F00:6174                       move.l #$00000000,d5   
               S06:00004446:  7A 00
F00:6175       
F00:6176              ; BYTE LEFT
F00:6177                       rol.b #1,d0       
               S06:00004448:  E3 18
F00:6178                       jsr ROx_FLAGS
               S06:0000444A:  4E B8 43 4E
F00:6179                       rol.b #5,d0      
               S06:0000444E:  EB 18
F00:6180                       jsr ROx_FLAGS
               S06:00004450:  4E B8 43 4E
F00:6181                       rol.b #7,d0   
               S06:00004454:  EF 18
F00:6182                       jsr ROx_FLAGS
               S06:00004456:  4E B8 43 4E
F00:6183                       rol.b #8,d0   
               S06:0000445A:  E1 18
F00:6184                       jsr ROx_FLAGS
               S06:0000445C:  4E B8 43 4E
F00:6185                       cmpi.l #$80018F3E,d0     
               S06:00004460:  0C 80 80 01 8F 3E
F00:6186                       bne ROX_FAIL;                 
               S06:00004466:  66 00 01 5A
F00:6187                       cmpi.l #$00000009,d5     
               S06:0000446A:  0C 85 00 00 00 09
F00:6188                       bne ROX_FAIL;                 
               S06:00004470:  66 00 01 50
F00:6189            
F00:6190              ; BYTE RIGHT
F00:6191                       ror.b #1,d0       
               S06:00004474:  E2 18
F00:6192                       jsr ROx_FLAGS
               S06:00004476:  4E B8 43 4E
F00:6193                       ror.b #5,d0      
               S06:0000447A:  EA 18
F00:6194                       jsr ROx_FLAGS
               S06:0000447C:  4E B8 43 4E
F00:6195                       ror.b #7,d0   
               S06:00004480:  EE 18
F00:6196                       jsr ROx_FLAGS
               S06:00004482:  4E B8 43 4E
F00:6197                       ror.b #8,d0   
               S06:00004486:  E0 18
F00:6198                       jsr ROx_FLAGS
               S06:00004488:  4E B8 43 4E
F00:6199                       cmpi.l #$80018FF1,d0     
               S06:0000448C:  0C 80 80 01 8F F1
F00:6200                       bne ROX_FAIL;                 
               S06:00004492:  66 00 01 2E
F00:6201                       cmpi.l #$00000024,d5     
               S06:00004496:  0C 85 00 00 00 24
F00:6202                       bne ROX_FAIL;                 
               S06:0000449C:  66 00 01 24
F00:6203            
F00:6204              ; WORD LEFT
F00:6205                       rol.w #1,d0       
               S06:000044A0:  E3 58
F00:6206                       jsr ROx_FLAGS
               S06:000044A2:  4E B8 43 4E
F00:6207                       rol.w #5,d0      
               S06:000044A6:  EB 58
F00:6208                       jsr ROx_FLAGS
               S06:000044A8:  4E B8 43 4E
F00:6209                       rol.w #7,d0   
               S06:000044AC:  EF 58
F00:6210                       jsr ROx_FLAGS
               S06:000044AE:  4E B8 43 4E
F00:6211                       rol.w #8,d0   
               S06:000044B2:  E1 58
F00:6212                       jsr ROx_FLAGS
               S06:000044B4:  4E B8 43 4E
F00:6213                       cmpi.l #$8001FE31,d0     
               S06:000044B8:  0C 80 80 01 FE 31
F00:6214                       bne ROX_FAIL;                 
               S06:000044BE:  66 00 01 02
F00:6215                       cmpi.l #$00000037,d5     
               S06:000044C2:  0C 85 00 00 00 37
F00:6216                       bne ROX_FAIL;                 
               S06:000044C8:  66 00 00 F8
F00:6217                         
F00:6218              ; WORD RIGHT
F00:6219                       ror.w #1,d0       
               S06:000044CC:  E2 58
F00:6220                       jsr ROx_FLAGS
               S06:000044CE:  4E B8 43 4E
F00:6221                       ror.w #5,d0      
               S06:000044D2:  EA 58
F00:6222                       jsr ROx_FLAGS
               S06:000044D4:  4E B8 43 4E
F00:6223                       ror.w #7,d0   
               S06:000044D8:  EE 58
F00:6224                       jsr ROx_FLAGS
               S06:000044DA:  4E B8 43 4E
F00:6225                       ror.w #8,d0   
               S06:000044DE:  E0 58
F00:6226                       jsr ROx_FLAGS
               S06:000044E0:  4E B8 43 4E
F00:6227                       cmpi.l #$80018FF1,d0     
               S06:000044E4:  0C 80 80 01 8F F1
F00:6228                       bne ROX_FAIL;                 
               S06:000044EA:  66 00 00 D6
F00:6229                       cmpi.l #$0000005B,d5     
               S06:000044EE:  0C 85 00 00 00 5B
F00:6230                       bne ROX_FAIL;                 
               S06:000044F4:  66 00 00 CC
F00:6231                      
F00:6232              ; LONG LEFT
F00:6233                       rol.l #1,d0       
               S06:000044F8:  E3 98
F00:6234                       jsr ROx_FLAGS
               S06:000044FA:  4E B8 43 4E
F00:6235                       rol.l #5,d0      
               S06:000044FE:  EB 98
F00:6236                       jsr ROx_FLAGS
               S06:00004500:  4E B8 43 4E
F00:6237                       rol.l #7,d0   
               S06:00004504:  EF 98
F00:6238                       jsr ROx_FLAGS
               S06:00004506:  4E B8 43 4E
F00:6239                       rol.l #8,d0   
               S06:0000450A:  E1 98
F00:6240                       jsr ROx_FLAGS
               S06:0000450C:  4E B8 43 4E
F00:6241                       cmpi.l #$FE300031,d0     
               S06:00004510:  0C 80 FE 30 00 31
F00:6242                       bne ROX_FAIL;                 
               S06:00004516:  66 00 00 AA
F00:6243                       cmpi.l #$00000065,d5     
               S06:0000451A:  0C 85 00 00 00 65
F00:6244                       bne ROX_FAIL;                 
               S06:00004520:  66 00 00 A0
F00:6245                                       
F00:6246              ; LONG RIGHT
F00:6247                       ror.l #1,d0       
               S06:00004524:  E2 98
F00:6248                       jsr ROx_FLAGS
               S06:00004526:  4E B8 43 4E
F00:6249                       ror.l #5,d0      
               S06:0000452A:  EA 98
F00:6250                       jsr ROx_FLAGS
               S06:0000452C:  4E B8 43 4E
F00:6251                       ror.l #7,d0   
               S06:00004530:  EE 98
F00:6252                       jsr ROx_FLAGS
               S06:00004532:  4E B8 43 4E
F00:6253                       ror.l #8,d0   
               S06:00004536:  E0 98
F00:6254                       jsr ROx_FLAGS
               S06:00004538:  4E B8 43 4E
F00:6255                       cmpi.l #$80018FF1,d0     
               S06:0000453C:  0C 80 80 01 8F F1
F00:6256                       bne ROX_FAIL;                 
               S06:00004542:  66 7E
F00:6257                       cmpi.l #$00000080,d5     
               S06:00004544:  0C 85 00 00 00 80
F00:6258                       bne ROX_FAIL;                 
               S06:0000454A:  66 76
F00:6259          
F00:6260                   
F00:6261           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6262           
F00:6263                       move.l #$00000000,d5   
               S06:0000454C:  7A 00
F00:6264                       move.l #$00000100,a0 
               S06:0000454E:  30 7C 01 00
F00:6265                       move.w #$8FF1,(a0)
               S06:00004552:  30 BC 8F F1
F00:6266                       
F00:6267              ; WORD LEFT
F00:6268                       rol (a0)       
               S06:00004556:  E7 D0
F00:6269                       jsr ROx_FLAGS
               S06:00004558:  4E B8 43 4E
F00:6270                       rol (a0)       
               S06:0000455C:  E7 D0
F00:6271                       jsr ROx_FLAGS
               S06:0000455E:  4E B8 43 4E
F00:6272                       rol (a0)       
               S06:00004562:  E7 D0
F00:6273                       jsr ROx_FLAGS
               S06:00004564:  4E B8 43 4E
F00:6274                       rol (a0)       
               S06:00004568:  E7 D0
F00:6275                       jsr ROx_FLAGS
               S06:0000456A:  4E B8 43 4E
F00:6276                       move.w (a0),d0
               S06:0000456E:  30 10
F00:6277                       cmpi.l #$8001FF18,d0     
               S06:00004570:  0C 80 80 01 FF 18
F00:6278                       bne ROX_FAIL;                 
               S06:00004576:  66 4A
F00:6279                       cmpi.l #$00000009,d5     
               S06:00004578:  0C 85 00 00 00 09
F00:6280                       bne ROX_FAIL;                 
               S06:0000457E:  66 42
F00:6281                         
F00:6282              ; WORD RIGHT
F00:6283                       ror (a0)       
               S06:00004580:  E6 D0
F00:6284                       jsr ROx_FLAGS
               S06:00004582:  4E B8 43 4E
F00:6285                       ror (a0)       
               S06:00004586:  E6 D0
F00:6286                       jsr ROx_FLAGS
               S06:00004588:  4E B8 43 4E
F00:6287                       ror (a0)       
               S06:0000458C:  E6 D0
F00:6288                       jsr ROx_FLAGS                
               S06:0000458E:  4E B8 43 4E
F00:6289                       ror (a0)       
               S06:00004592:  E6 D0
F00:6290                       jsr ROx_FLAGS               
               S06:00004594:  4E B8 43 4E
F00:6291                       ror (a0)       
               S06:00004598:  E6 D0
F00:6292                       jsr ROx_FLAGS
               S06:0000459A:  4E B8 43 4E
F00:6293                       ror (a0)       
               S06:0000459E:  E6 D0
F00:6294                       jsr ROx_FLAGS
               S06:000045A0:  4E B8 43 4E
F00:6295                       move.w (a0),d0
               S06:000045A4:  30 10
F00:6296                       cmpi.l #$800163FC,d0     
               S06:000045A6:  0C 80 80 01 63 FC
F00:6297                       bne ROX_FAIL;                 
               S06:000045AC:  66 14
F00:6298                       cmpi.l #$0000001B,d5     
               S06:000045AE:  0C 85 00 00 00 1B
F00:6299                       bne ROX_FAIL;                 
               S06:000045B4:  66 0C
F00:6300       
F00:6301                       movea #TESTSTATUS,a0
               S06:000045B6:  30 7C FF 00
F00:6302                       move.b #$1,$39(a0)
               S06:000045BA:  11 7C 00 01 00 39
F00:6303                       rts
               S06:000045C0:  4E 75
F00:6304             
F00:6305       ROX_FAIL:
F00:6306           movea #TESTSTATUS,a0
               S06:000045C2:  30 7C FF 00
F00:6307           move.b #$2,$39(a0)
               S06:000045C6:  11 7C 00 02 00 39
F00:6308           rts
               S06:000045CC:  4E 75
F00:6309                       
F00:6310       ;-----------------------------------------------------------
F00:6311       ;-----------------------------------------------------------
F00:6312       ; OPCODE : ROXx
F00:6313       ;-----------------------------------------------------------
F00:6314       ;-----------------------------------------------------------
F00:6315       
F00:6316           ; Subroutine to check and accumulate the flags 
F00:6317       ROXx_FLAGS:     move SR,d3      
               S06:000045CE:  40 C3
F00:6318                       andi.l #$0F,d3            ; Isolate flags 
               S06:000045D0:  02 83 00 00 00 0F
F00:6319                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000045D6:  DA 83
F00:6320                       rts
               S06:000045D8:  4E 75
F00:6321           
F00:6322       op_ROXx:   
F00:6323                  
F00:6324           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6325           
F00:6326              ; BYTE LEFT
F00:6327                       move.l #$80018FF1,d0   
               S06:000045DA:  20 3C 80 01 8F F1
F00:6328                       move.l #$00000000,d5  
               S06:000045E0:  7A 00
F00:6329                       move.l #$00000011,d6  
               S06:000045E2:  7C 11
F00:6330       ROXx_LOOP1:
F00:6331                       roxl.b d6,d0       
               S06:000045E4:  ED 30
F00:6332                       jsr ROXx_FLAGS
               S06:000045E6:  4E B8 45 CE
F00:6333                       dbf d6,ROXx_LOOP1
               S06:000045EA:  51 CE FF F8
F00:6334                       cmpi.l #$80018FD0,d0     
               S06:000045EE:  0C 80 80 01 8F D0
F00:6335                       bne ROXX_FAIL;                 
               S06:000045F4:  66 00 02 4C
F00:6336                       cmpi.l #$00000042,d5     
               S06:000045F8:  0C 85 00 00 00 42
F00:6337                       bne ROXX_FAIL;      
               S06:000045FE:  66 00 02 42
F00:6338           
F00:6339              ; BYTE RIGHT
F00:6340                       move.l #$80018FF1,d0   
               S06:00004602:  20 3C 80 01 8F F1
F00:6341                       move.l #$00000012,d6  
               S06:00004608:  7C 12
F00:6342       ROXx_LOOP2:
F00:6343                       roxr.b d6,d0       
               S06:0000460A:  EC 30
F00:6344                       jsr ROXx_FLAGS
               S06:0000460C:  4E B8 45 CE
F00:6345                       dbf d6,ROXx_LOOP2
               S06:00004610:  51 CE FF F8
F00:6346                       cmpi.l #$80018F51,d0     
               S06:00004614:  0C 80 80 01 8F 51
F00:6347                       bne ROXX_FAIL;                 
               S06:0000461A:  66 00 02 26
F00:6348                       cmpi.l #$0000009C,d5     
               S06:0000461E:  0C 85 00 00 00 9C
F00:6349                       bne ROXX_FAIL;      
               S06:00004624:  66 00 02 1C
F00:6350       
F00:6351           
F00:6352              ; WORD LEFT
F00:6353                       move.l #$80018FF1,d0   
               S06:00004628:  20 3C 80 01 8F F1
F00:6354                       move.l #$00000013,d6  
               S06:0000462E:  7C 13
F00:6355       ROXx_LOOP3:
F00:6356                       roxl.w d6,d0       
               S06:00004630:  ED 70
F00:6357                       jsr ROXx_FLAGS
               S06:00004632:  4E B8 45 CE
F00:6358                       dbf d6,ROXx_LOOP3
               S06:00004636:  51 CE FF F8
F00:6359                       cmpi.l #$80013980,d0     
               S06:0000463A:  0C 80 80 01 39 80
F00:6360                       bne ROXX_FAIL;                 
               S06:00004640:  66 00 02 00
F00:6361                       cmpi.l #$000000C9,d5     
               S06:00004644:  0C 85 00 00 00 C9
F00:6362                       bne ROXX_FAIL;      
               S06:0000464A:  66 00 01 F6
F00:6363           
F00:6364              ; WORD RIGHT
F00:6365                       move.l #$80018FF1,d0   
               S06:0000464E:  20 3C 80 01 8F F1
F00:6366                       move.l #$0000001E,d6  
               S06:00004654:  7C 1E
F00:6367       ROXx_LOOP4:
F00:6368                       roxr.w d6,d0       
               S06:00004656:  EC 70
F00:6369                       jsr ROXx_FLAGS
               S06:00004658:  4E B8 45 CE
F00:6370                       dbf d6,ROXx_LOOP4
               S06:0000465C:  51 CE FF F8
F00:6371                       cmpi.l #$80010A1D,d0     
               S06:00004660:  0C 80 80 01 0A 1D
F00:6372                       bne ROXX_FAIL;                 
               S06:00004666:  66 00 01 DA
F00:6373                       cmpi.l #$0000014D,d5     
               S06:0000466A:  0C 85 00 00 01 4D
F00:6374                       bne ROXX_FAIL;      
               S06:00004670:  66 00 01 D0
F00:6375       
F00:6376           
F00:6377              ; LONG LEFT
F00:6378                       move.l #$80018FF1,d0   
               S06:00004674:  20 3C 80 01 8F F1
F00:6379                       move.l #$00000015,d6  
               S06:0000467A:  7C 15
F00:6380       ROXx_LOOP5:
F00:6381                       roxl.l d6,d0       
               S06:0000467C:  ED B0
F00:6382                       jsr ROXx_FLAGS
               S06:0000467E:  4E B8 45 CE
F00:6383                       dbf d6,ROXx_LOOP5
               S06:00004682:  51 CE FF F8
F00:6384                       cmpi.l #$800185D0,d0     
               S06:00004686:  0C 80 80 01 85 D0
F00:6385                       bne ROXX_FAIL;                 
               S06:0000468C:  66 00 01 B4
F00:6386                       cmpi.l #$000001A1,d5     
               S06:00004690:  0C 85 00 00 01 A1
F00:6387                       bne ROXX_FAIL;      
               S06:00004696:  66 00 01 AA
F00:6388           
F00:6389              ; LONG RIGHT
F00:6390                       move.l #$80018FF1,d0   
               S06:0000469A:  20 3C 80 01 8F F1
F00:6391                       move.l #$00000016,d6  
               S06:000046A0:  7C 16
F00:6392       ROXx_LOOP6:
F00:6393                       roxr.l d6,d0       
               S06:000046A2:  EC B0
F00:6394                       jsr ROXx_FLAGS
               S06:000046A4:  4E B8 45 CE
F00:6395                       dbf d6,ROXx_LOOP6
               S06:000046A8:  51 CE FF F8
F00:6396                       cmpi.l #$082D8200,d0     
               S06:000046AC:  0C 80 08 2D 82 00
F00:6397                       bne ROXX_FAIL;                 
               S06:000046B2:  66 00 01 8E
F00:6398                       cmpi.l #$000001DE,d5     
               S06:000046B6:  0C 85 00 00 01 DE
F00:6399                       bne ROXX_FAIL;      
               S06:000046BC:  66 00 01 84
F00:6400       
F00:6401                   
F00:6402           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6403           
F00:6404                       move.l #$80018FF1,d0   
               S06:000046C0:  20 3C 80 01 8F F1
F00:6405                       move.l #$00000000,d5   
               S06:000046C6:  7A 00
F00:6406       
F00:6407              ; BYTE LEFT
F00:6408                       roxl.b #1,d0       
               S06:000046C8:  E3 10
F00:6409                       jsr ROXx_FLAGS
               S06:000046CA:  4E B8 45 CE
F00:6410                       roxl.b #5,d0      
               S06:000046CE:  EB 10
F00:6411                       jsr ROXx_FLAGS
               S06:000046D0:  4E B8 45 CE
F00:6412                       roxl.b #7,d0   
               S06:000046D4:  EF 10
F00:6413                       jsr ROXx_FLAGS
               S06:000046D6:  4E B8 45 CE
F00:6414                       roxl.b #8,d0   
               S06:000046DA:  E1 10
F00:6415                       jsr ROXx_FLAGS
               S06:000046DC:  4E B8 45 CE
F00:6416                       cmpi.l #$80018F09,d0     
               S06:000046E0:  0C 80 80 01 8F 09
F00:6417                       bne ROXX_FAIL;                 
               S06:000046E6:  66 00 01 5A
F00:6418                       cmpi.l #$0000000B,d5     
               S06:000046EA:  0C 85 00 00 00 0B
F00:6419                       bne ROXX_FAIL;                 
               S06:000046F0:  66 00 01 50
F00:6420            
F00:6421              ; BYTE RIGHT
F00:6422                       roxr.b #1,d0       
               S06:000046F4:  E2 10
F00:6423                       jsr ROXx_FLAGS
               S06:000046F6:  4E B8 45 CE
F00:6424                       roxr.b #5,d0      
               S06:000046FA:  EA 10
F00:6425                       jsr ROXx_FLAGS
               S06:000046FC:  4E B8 45 CE
F00:6426                       roxr.b #7,d0   
               S06:00004700:  EE 10
F00:6427                       jsr ROXx_FLAGS
               S06:00004702:  4E B8 45 CE
F00:6428                       roxr.b #8,d0   
               S06:00004706:  E0 10
F00:6429                       jsr ROXx_FLAGS
               S06:00004708:  4E B8 45 CE
F00:6430                       cmpi.l #$80018F00,d0     
               S06:0000470C:  0C 80 80 01 8F 00
F00:6431                       bne ROXX_FAIL;                 
               S06:00004712:  66 00 01 2E
F00:6432                       cmpi.l #$00000015,d5     
               S06:00004716:  0C 85 00 00 00 15
F00:6433                       bne ROXX_FAIL;                 
               S06:0000471C:  66 00 01 24
F00:6434            
F00:6435              ; WORD LEFT
F00:6436                       roxl.w #1,d0       
               S06:00004720:  E3 50
F00:6437                       jsr ROXx_FLAGS
               S06:00004722:  4E B8 45 CE
F00:6438                       roxl.w #5,d0      
               S06:00004726:  EB 50
F00:6439                       jsr ROXx_FLAGS
               S06:00004728:  4E B8 45 CE
F00:6440                       roxl.w #7,d0   
               S06:0000472C:  EF 50
F00:6441                       jsr ROXx_FLAGS
               S06:0000472E:  4E B8 45 CE
F00:6442                       roxl.w #8,d0   
               S06:00004732:  E1 50
F00:6443                       jsr ROXx_FLAGS
               S06:00004734:  4E B8 45 CE
F00:6444                       cmpi.l #$8001B000,d0     
               S06:00004738:  0C 80 80 01 B0 00
F00:6445                       bne ROXX_FAIL;                 
               S06:0000473E:  66 00 01 02
F00:6446                       cmpi.l #$00000027,d5     
               S06:00004742:  0C 85 00 00 00 27
F00:6447                       bne ROXX_FAIL;                 
               S06:00004748:  66 00 00 F8
F00:6448                         
F00:6449              ; WORD RIGHT
F00:6450                       roxr.w #1,d0       
               S06:0000474C:  E2 50
F00:6451                       jsr ROXx_FLAGS
               S06:0000474E:  4E B8 45 CE
F00:6452                       roxr.w #5,d0      
               S06:00004752:  EA 50
F00:6453                       jsr ROXx_FLAGS
               S06:00004754:  4E B8 45 CE
F00:6454                       roxr.w #7,d0   
               S06:00004758:  EE 50
F00:6455                       jsr ROXx_FLAGS
               S06:0000475A:  4E B8 45 CE
F00:6456                       roxr.w #8,d0   
               S06:0000475E:  E0 50
F00:6457                       jsr ROXx_FLAGS
               S06:00004760:  4E B8 45 CE
F00:6458                       cmpi.l #$80010A00,d0     
               S06:00004764:  0C 80 80 01 0A 00
F00:6459                       bne ROXX_FAIL;                 
               S06:0000476A:  66 00 00 D6
F00:6460                       cmpi.l #$00000028,d5     
               S06:0000476E:  0C 85 00 00 00 28
F00:6461                       bne ROXX_FAIL;                 
               S06:00004774:  66 00 00 CC
F00:6462                      
F00:6463              ; LONG LEFT
F00:6464                       roxl.l #1,d0       
               S06:00004778:  E3 90
F00:6465                       jsr ROXx_FLAGS
               S06:0000477A:  4E B8 45 CE
F00:6466                       roxl.l #5,d0      
               S06:0000477E:  EB 90
F00:6467                       jsr ROXx_FLAGS
               S06:00004780:  4E B8 45 CE
F00:6468                       roxl.l #7,d0   
               S06:00004784:  EF 90
F00:6469                       jsr ROXx_FLAGS
               S06:00004786:  4E B8 45 CE
F00:6470                       roxl.l #8,d0   
               S06:0000478A:  E1 90
F00:6471                       jsr ROXx_FLAGS
               S06:0000478C:  4E B8 45 CE
F00:6472                       cmpi.l #$40000010,d0     
               S06:00004790:  0C 80 40 00 00 10
F00:6473                       bne ROXX_FAIL;                 
               S06:00004796:  66 00 00 AA
F00:6474                       cmpi.l #$0000002A,d5     
               S06:0000479A:  0C 85 00 00 00 2A
F00:6475                       bne ROXX_FAIL;                 
               S06:000047A0:  66 00 00 A0
F00:6476                                       
F00:6477              ; LONG RIGHT
F00:6478                       roxr.l #1,d0       
               S06:000047A4:  E2 90
F00:6479                       jsr ROXx_FLAGS
               S06:000047A6:  4E B8 45 CE
F00:6480                       roxr.l #5,d0      
               S06:000047AA:  EA 90
F00:6481                       jsr ROXx_FLAGS
               S06:000047AC:  4E B8 45 CE
F00:6482                       roxr.l #7,d0   
               S06:000047B0:  EE 90
F00:6483                       jsr ROXx_FLAGS
               S06:000047B2:  4E B8 45 CE
F00:6484                       roxr.l #8,d0   
               S06:000047B6:  E0 90
F00:6485                       jsr ROXx_FLAGS
               S06:000047B8:  4E B8 45 CE
F00:6486                       cmpi.l #$00010200,d0     
               S06:000047BC:  0C 80 00 01 02 00
F00:6487                       bne ROXX_FAIL;                 
               S06:000047C2:  66 7E
F00:6488                       cmpi.l #$00000032,d5     
               S06:000047C4:  0C 85 00 00 00 32
F00:6489                       bne ROXX_FAIL;                 
               S06:000047CA:  66 76
F00:6490          
F00:6491                   
F00:6492           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6493           
F00:6494                       move.l #$00000000,d5   
               S06:000047CC:  7A 00
F00:6495                       move.l #$00000100,a0 
               S06:000047CE:  30 7C 01 00
F00:6496                       move.w #$8FF1,(a0)
               S06:000047D2:  30 BC 8F F1
F00:6497                       
F00:6498              ; WORD LEFT
F00:6499                       roxl (a0)       
               S06:000047D6:  E5 D0
F00:6500                       jsr ROXx_FLAGS
               S06:000047D8:  4E B8 45 CE
F00:6501                       roxl (a0)       
               S06:000047DC:  E5 D0
F00:6502                       jsr ROXx_FLAGS
               S06:000047DE:  4E B8 45 CE
F00:6503                       roxl (a0)       
               S06:000047E2:  E5 D0
F00:6504                       jsr ROXx_FLAGS
               S06:000047E4:  4E B8 45 CE
F00:6505                       roxl (a0)       
               S06:000047E8:  E5 D0
F00:6506                       jsr ROXx_FLAGS
               S06:000047EA:  4E B8 45 CE
F00:6507                       move.w (a0),d0
               S06:000047EE:  30 10
F00:6508                       cmpi.l #$0001FF10,d0     
               S06:000047F0:  0C 80 00 01 FF 10
F00:6509                       bne ROXX_FAIL;                 
               S06:000047F6:  66 4A
F00:6510                       cmpi.l #$00000009,d5     
               S06:000047F8:  0C 85 00 00 00 09
F00:6511                       bne ROXX_FAIL;                 
               S06:000047FE:  66 42
F00:6512                         
F00:6513              ; WORD RIGHT
F00:6514                       roxr (a0)       
               S06:00004800:  E4 D0
F00:6515                       jsr ROXx_FLAGS
               S06:00004802:  4E B8 45 CE
F00:6516                       roxr (a0)       
               S06:00004806:  E4 D0
F00:6517                       jsr ROXx_FLAGS
               S06:00004808:  4E B8 45 CE
F00:6518                       roxr (a0)       
               S06:0000480C:  E4 D0
F00:6519                       jsr ROXx_FLAGS                
               S06:0000480E:  4E B8 45 CE
F00:6520                       roxr (a0)       
               S06:00004812:  E4 D0
F00:6521                       jsr ROXx_FLAGS               
               S06:00004814:  4E B8 45 CE
F00:6522                       roxr (a0)       
               S06:00004818:  E4 D0
F00:6523                       jsr ROXx_FLAGS
               S06:0000481A:  4E B8 45 CE
F00:6524                       roxr (a0)       
               S06:0000481E:  E4 D0
F00:6525                       jsr ROXx_FLAGS
               S06:00004820:  4E B8 45 CE
F00:6526                       move.w (a0),d0
               S06:00004824:  30 10
F00:6527                       cmpi.l #$000103FC,d0     
               S06:00004826:  0C 80 00 01 03 FC
F00:6528                       bne ROXX_FAIL;                 
               S06:0000482C:  66 14
F00:6529                       cmpi.l #$0000000A,d5     
               S06:0000482E:  0C 85 00 00 00 0A
F00:6530                       bne ROXX_FAIL;                 
               S06:00004834:  66 0C
F00:6531       
F00:6532                       movea #TESTSTATUS,a0
               S06:00004836:  30 7C FF 00
F00:6533                       move.b #$1,$3a(a0)
               S06:0000483A:  11 7C 00 01 00 3A
F00:6534                       rts        
               S06:00004840:  4E 75
F00:6535       
F00:6536       ROXX_FAIL:
F00:6537           movea #TESTSTATUS,a0
               S06:00004842:  30 7C FF 00
F00:6538           move.b #$2,$3a(a0)
               S06:00004846:  11 7C 00 02 00 3A
F00:6539           rts
               S06:0000484C:  4E 75
F00:6540        
F00:6541                       
F00:6542       ;-----------------------------------------------------------
F00:6543       ;-----------------------------------------------------------
F00:6544       ; OPCODE : SHIFTS
F00:6545       ;-----------------------------------------------------------
F00:6546       ;-----------------------------------------------------------
F00:6547       
F00:6548           ; Subroutine to check and accumulate the flags 
F00:6549       SHIFTS_FLAGS:   move SR,d3      
               S06:0000484E:  40 C3
F00:6550                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004850:  02 83 00 00 00 0F
F00:6551                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004856:  DA 83
F00:6552                       rts
               S06:00004858:  4E 75
F00:6553           
F00:6554       op_SHIFTS:   
F00:6555                  
F00:6556           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6557           
F00:6558              ; BYTE LEFT
F00:6559                       move.l #$80018F81,d0   
               S06:0000485A:  20 3C 80 01 8F 81
F00:6560                       move.l #$00000000,d5  
               S06:00004860:  7A 00
F00:6561                       move.l #$00000002,d6  
               S06:00004862:  7C 02
F00:6562       SHIFTS_LOOP1:
F00:6563                       asl.b d6,d0       
               S06:00004864:  ED 20
F00:6564                       jsr SHIFTS_FLAGS
               S06:00004866:  4E B8 48 4E
F00:6565                       dbf d6,SHIFTS_LOOP1
               S06:0000486A:  51 CE FF F8
F00:6566                       cmpi.l #$80018F08,d0     
               S06:0000486E:  0C 80 80 01 8F 08
F00:6567                       bne SHIFT_FAIL;                 
               S06:00004874:  66 00 02 58
F00:6568                       cmpi.l #$00000002,d5     
               S06:00004878:  0C 85 00 00 00 02
F00:6569                       bne SHIFT_FAIL;      
               S06:0000487E:  66 00 02 4E
F00:6570           
F00:6571              ; BYTE RIGHT
F00:6572                       move.l #$80018F81,d0   
               S06:00004882:  20 3C 80 01 8F 81
F00:6573                       move.l #$00000002,d6  
               S06:00004888:  7C 02
F00:6574       SHIFTS_LOOP2:
F00:6575                       asr.b d6,d0       
               S06:0000488A:  EC 20
F00:6576                       jsr SHIFTS_FLAGS
               S06:0000488C:  4E B8 48 4E
F00:6577                       dbf d6,SHIFTS_LOOP2
               S06:00004890:  51 CE FF F8
F00:6578                       cmpi.l #$80018FF0,d0     
               S06:00004894:  0C 80 80 01 8F F0
F00:6579                       bne SHIFT_FAIL;                 
               S06:0000489A:  66 00 02 32
F00:6580                       cmpi.l #$0000001A,d5     
               S06:0000489E:  0C 85 00 00 00 1A
F00:6581                       bne SHIFT_FAIL;      
               S06:000048A4:  66 00 02 28
F00:6582       
F00:6583           
F00:6584              ; WORD LEFT
F00:6585                       move.l #$80018FF1,d0   
               S06:000048A8:  20 3C 80 01 8F F1
F00:6586                       move.l #$00000002,d6  
               S06:000048AE:  7C 02
F00:6587       SHIFTS_LOOP3:
F00:6588                       asl.w d6,d0       
               S06:000048B0:  ED 60
F00:6589                       jsr SHIFTS_FLAGS
               S06:000048B2:  4E B8 48 4E
F00:6590                       dbf d6,SHIFTS_LOOP3
               S06:000048B6:  51 CE FF F8
F00:6591                       cmpi.l #$80017F88,d0     
               S06:000048BA:  0C 80 80 01 7F 88
F00:6592                       bne SHIFT_FAIL;                 
               S06:000048C0:  66 00 02 0C
F00:6593                       cmpi.l #$0000001C,d5     
               S06:000048C4:  0C 85 00 00 00 1C
F00:6594                       bne SHIFT_FAIL;      
               S06:000048CA:  66 00 02 02
F00:6595           
F00:6596              ; WORD RIGHT
F00:6597                       move.l #$80018FF1,d0   
               S06:000048CE:  20 3C 80 01 8F F1
F00:6598                       move.l #$00000002,d6  
               S06:000048D4:  7C 02
F00:6599       SHIFTS_LOOP4:
F00:6600                       asr.w d6,d0       
               S06:000048D6:  EC 60
F00:6601                       jsr SHIFTS_FLAGS
               S06:000048D8:  4E B8 48 4E
F00:6602                       dbf d6,SHIFTS_LOOP4
               S06:000048DC:  51 CE FF F8
F00:6603                       cmpi.l #$8001F1FE,d0     
               S06:000048E0:  0C 80 80 01 F1 FE
F00:6604                       bne SHIFT_FAIL;                 
               S06:000048E6:  66 00 01 E6
F00:6605                       cmpi.l #$00000034,d5     
               S06:000048EA:  0C 85 00 00 00 34
F00:6606                       bne SHIFT_FAIL;      
               S06:000048F0:  66 00 01 DC
F00:6607       
F00:6608           
F00:6609              ; LONG LEFT
F00:6610                       move.l #$80018FF1,d0   
               S06:000048F4:  20 3C 80 01 8F F1
F00:6611                       move.l #$00000002,d6  
               S06:000048FA:  7C 02
F00:6612       SHIFTS_LOOP5:
F00:6613                       asl.l d6,d0       
               S06:000048FC:  ED A0
F00:6614                       jsr SHIFTS_FLAGS
               S06:000048FE:  4E B8 48 4E
F00:6615                       dbf d6,SHIFTS_LOOP5
               S06:00004902:  51 CE FF F8
F00:6616                       cmpi.l #$000C7F88,d0     
               S06:00004906:  0C 80 00 0C 7F 88
F00:6617                       bne SHIFT_FAIL;                 
               S06:0000490C:  66 00 01 C0
F00:6618                       cmpi.l #$00000036,d5     
               S06:00004910:  0C 85 00 00 00 36
F00:6619                       bne SHIFT_FAIL;      
               S06:00004916:  66 00 01 B6
F00:6620           
F00:6621              ; LONG RIGHT
F00:6622                       move.l #$80018FF1,d0   
               S06:0000491A:  20 3C 80 01 8F F1
F00:6623                       move.l #$00000002,d6  
               S06:00004920:  7C 02
F00:6624       SHIFTS_LOOP6:
F00:6625                       asr.l d6,d0       
               S06:00004922:  EC A0
F00:6626                       jsr SHIFTS_FLAGS
               S06:00004924:  4E B8 48 4E
F00:6627                       dbf d6,SHIFTS_LOOP6
               S06:00004928:  51 CE FF F8
F00:6628                       cmpi.l #$F00031FE,d0     
               S06:0000492C:  0C 80 F0 00 31 FE
F00:6629                       bne SHIFT_FAIL;                 
               S06:00004932:  66 00 01 9A
F00:6630                       cmpi.l #$0000004E,d5     
               S06:00004936:  0C 85 00 00 00 4E
F00:6631                       bne SHIFT_FAIL;      
               S06:0000493C:  66 00 01 90
F00:6632       
F00:6633                   
F00:6634           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6635           
F00:6636                       move.l #$80018FF1,d0   
               S06:00004940:  20 3C 80 01 8F F1
F00:6637                       move.l #$00000000,d5   
               S06:00004946:  7A 00
F00:6638       
F00:6639              ; BYTE LEFT
F00:6640                       asl.b #1,d0       
               S06:00004948:  D0 00     
F00:6641                       jsr SHIFTS_FLAGS
               S06:0000494A:  4E B8 48 4E
F00:6642                       asl.b #2,d0      
               S06:0000494E:  E5 00
F00:6643                       jsr SHIFTS_FLAGS
               S06:00004950:  4E B8 48 4E
F00:6644                       asl.b #1,d0   
               S06:00004954:  D0 00
F00:6645                       jsr SHIFTS_FLAGS
               S06:00004956:  4E B8 48 4E
F00:6646                       asl.b #3,d0   
               S06:0000495A:  E7 00
F00:6647                       jsr SHIFTS_FLAGS
               S06:0000495C:  4E B8 48 4E
F00:6648                       cmpi.l #$80018F80,d0     
               S06:00004960:  0C 80 80 01 8F 80
F00:6649                       bne SHIFT_FAIL;                 
               S06:00004966:  66 00 01 66
F00:6650                       cmpi.l #$0000001F,d5     
               S06:0000496A:  0C 85 00 00 00 1F
F00:6651                       bne SHIFT_FAIL;                 
               S06:00004970:  66 00 01 5C
F00:6652            
F00:6653              ; BYTE RIGHT
F00:6654                       asr.b #1,d0       
               S06:00004974:  E2 00
F00:6655                       jsr SHIFTS_FLAGS
               S06:00004976:  4E B8 48 4E
F00:6656                       asr.b #2,d0      
               S06:0000497A:  E4 00
F00:6657                       jsr SHIFTS_FLAGS
               S06:0000497C:  4E B8 48 4E
F00:6658                       asr.b #3,d0   
               S06:00004980:  E6 00
F00:6659                       jsr SHIFTS_FLAGS
               S06:00004982:  4E B8 48 4E
F00:6660                       asr.b #1,d0   
               S06:00004986:  E2 00
F00:6661                       jsr SHIFTS_FLAGS
               S06:00004988:  4E B8 48 4E
F00:6662                       cmpi.l #$80018FFF,d0     
               S06:0000498C:  0C 80 80 01 8F FF
F00:6663                       bne SHIFT_FAIL;                 
               S06:00004992:  66 00 01 3A
F00:6664                       cmpi.l #$0000003F,d5     
               S06:00004996:  0C 85 00 00 00 3F
F00:6665                       bne SHIFT_FAIL;                 
               S06:0000499C:  66 00 01 30
F00:6666            
F00:6667              ; WORD LEFT
F00:6668                       asl.w #1,d0       
               S06:000049A0:  D0 40
F00:6669                       jsr SHIFTS_FLAGS
               S06:000049A2:  4E B8 48 4E
F00:6670                       asl.w #2,d0      
               S06:000049A6:  E5 40
F00:6671                       jsr SHIFTS_FLAGS
               S06:000049A8:  4E B8 48 4E
F00:6672                       asl.w #3,d0   
               S06:000049AC:  E7 40
F00:6673                       jsr SHIFTS_FLAGS
               S06:000049AE:  4E B8 48 4E
F00:6674                       asl.w #5,d0   
               S06:000049B2:  EB 40
F00:6675                       jsr SHIFTS_FLAGS
               S06:000049B4:  4E B8 48 4E
F00:6676                       cmpi.l #$8001F800,d0     
               S06:000049B8:  0C 80 80 01 F8 00
F00:6677                       bne SHIFT_FAIL;                 
               S06:000049BE:  66 00 01 0E
F00:6678                       cmpi.l #$00000056,d5     
               S06:000049C2:  0C 85 00 00 00 56
F00:6679                       bne SHIFT_FAIL;                 
               S06:000049C8:  66 00 01 04
F00:6680                         
F00:6681              ; WORD RIGHT
F00:6682                       asr.w #5,d0       
               S06:000049CC:  EA 40
F00:6683                       jsr SHIFTS_FLAGS
               S06:000049CE:  4E B8 48 4E
F00:6684                       asr.w #1,d0      
               S06:000049D2:  E2 40
F00:6685                       jsr SHIFTS_FLAGS
               S06:000049D4:  4E B8 48 4E
F00:6686                       asr.w #2,d0   
               S06:000049D8:  E4 40
F00:6687                       jsr SHIFTS_FLAGS
               S06:000049DA:  4E B8 48 4E
F00:6688                       asr.w #4,d0   
               S06:000049DE:  E8 40
F00:6689                       jsr SHIFTS_FLAGS
               S06:000049E0:  4E B8 48 4E
F00:6690                       cmpi.l #$8001FFFF,d0     
               S06:000049E4:  0C 80 80 01 FF FF
F00:6691                       bne SHIFT_FAIL;                 
               S06:000049EA:  66 00 00 E2
F00:6692                       cmpi.l #$00000077,d5     
               S06:000049EE:  0C 85 00 00 00 77
F00:6693                       bne SHIFT_FAIL;                 
               S06:000049F4:  66 00 00 D8
F00:6694                      
F00:6695              ; LONG LEFT
F00:6696                       move.l #$80018FF1,d0   
               S06:000049F8:  20 3C 80 01 8F F1
F00:6697                       asl.l #1,d0       
               S06:000049FE:  D0 80
F00:6698                       jsr SHIFTS_FLAGS
               S06:00004A00:  4E B8 48 4E
F00:6699                       asl.l #2,d0      
               S06:00004A04:  E5 80
F00:6700                       jsr SHIFTS_FLAGS
               S06:00004A06:  4E B8 48 4E
F00:6701                       asl.l #7,d0   
               S06:00004A0A:  EF 80
F00:6702                       jsr SHIFTS_FLAGS
               S06:00004A0C:  4E B8 48 4E
F00:6703                       asl.l #4,d0   
               S06:00004A10:  E9 80
F00:6704                       jsr SHIFTS_FLAGS
               S06:00004A12:  4E B8 48 4E
F00:6705                       cmpi.l #$63FC4000,d0     
               S06:00004A16:  0C 80 63 FC 40 00
F00:6706                       bne SHIFT_FAIL;                 
               S06:00004A1C:  66 00 00 B0
F00:6707                       cmpi.l #$0000007A,d5     
               S06:00004A20:  0C 85 00 00 00 7A
F00:6708                       bne SHIFT_FAIL;                 
               S06:00004A26:  66 00 00 A6
F00:6709                                       
F00:6710              ; LONG RIGHT
F00:6711                       move.l #$80018FF1,d0   
               S06:00004A2A:  20 3C 80 01 8F F1
F00:6712                       asr.l #1,d0       
               S06:00004A30:  E2 80
F00:6713                       jsr SHIFTS_FLAGS
               S06:00004A32:  4E B8 48 4E
F00:6714                       asr.l #5,d0      
               S06:00004A36:  EA 80
F00:6715                       jsr SHIFTS_FLAGS
               S06:00004A38:  4E B8 48 4E
F00:6716                       asr.l #7,d0   
               S06:00004A3C:  EE 80
F00:6717                       jsr SHIFTS_FLAGS
               S06:00004A3E:  4E B8 48 4E
F00:6718                       asr.l #8,d0   
               S06:00004A42:  E0 80
F00:6719                       jsr SHIFTS_FLAGS
               S06:00004A44:  4E B8 48 4E
F00:6720                       cmpi.l #$FFFFFC00,d0     
               S06:00004A48:  0C 80 FF FF FC 00
F00:6721                       bne SHIFT_FAIL;                 
               S06:00004A4E:  66 7E
F00:6722                       cmpi.l #$0000009C,d5     
               S06:00004A50:  0C 85 00 00 00 9C
F00:6723                       bne SHIFT_FAIL;                 
               S06:00004A56:  66 76
F00:6724          
F00:6725                   
F00:6726           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6727           
F00:6728                       move.l #$00000000,d5   
               S06:00004A58:  7A 00
F00:6729                       move.l #$00000100,a0 
               S06:00004A5A:  30 7C 01 00
F00:6730                       move.w #$8FF1,(a0)
               S06:00004A5E:  30 BC 8F F1
F00:6731                       
F00:6732              ; WORD LEFT
F00:6733                       asl  (a0)       
               S06:00004A62:  E1 D0
F00:6734                       jsr SHIFTS_FLAGS
               S06:00004A64:  4E B8 48 4E
F00:6735                       asl  (a0)       
               S06:00004A68:  E1 D0
F00:6736                       jsr SHIFTS_FLAGS
               S06:00004A6A:  4E B8 48 4E
F00:6737                       asl  (a0)       
               S06:00004A6E:  E1 D0
F00:6738                       jsr SHIFTS_FLAGS
               S06:00004A70:  4E B8 48 4E
F00:6739                       asl  (a0)       
               S06:00004A74:  E1 D0
F00:6740                       jsr SHIFTS_FLAGS
               S06:00004A76:  4E B8 48 4E
F00:6741                       move.w (a0),d0
               S06:00004A7A:  30 10
F00:6742                       cmpi.l #$FFFFFF10,d0     
               S06:00004A7C:  0C 80 FF FF FF 10
F00:6743                       bne SHIFT_FAIL;                 
               S06:00004A82:  66 4A
F00:6744                       cmpi.l #$0000000D,d5     
               S06:00004A84:  0C 85 00 00 00 0D
F00:6745                       bne SHIFT_FAIL;                 
               S06:00004A8A:  66 42
F00:6746                         
F00:6747              ; WORD RIGHT
F00:6748                       asr (a0)       
               S06:00004A8C:  E0 D0
F00:6749                       jsr SHIFTS_FLAGS
               S06:00004A8E:  4E B8 48 4E
F00:6750                       asr (a0)       
               S06:00004A92:  E0 D0
F00:6751                       jsr SHIFTS_FLAGS
               S06:00004A94:  4E B8 48 4E
F00:6752                       asr (a0)       
               S06:00004A98:  E0 D0
F00:6753                       jsr SHIFTS_FLAGS                
               S06:00004A9A:  4E B8 48 4E
F00:6754                       asr (a0)       
               S06:00004A9E:  E0 D0
F00:6755                       jsr SHIFTS_FLAGS               
               S06:00004AA0:  4E B8 48 4E
F00:6756                       asr (a0)       
               S06:00004AA4:  E0 D0
F00:6757                       jsr SHIFTS_FLAGS
               S06:00004AA6:  4E B8 48 4E
F00:6758                       asr (a0)       
               S06:00004AAA:  E0 D0
F00:6759                       jsr SHIFTS_FLAGS
               S06:00004AAC:  4E B8 48 4E
F00:6760                       move.w (a0),d0
               S06:00004AB0:  30 10
F00:6761                       cmpi.l #$FFFFFFFC,d0     
               S06:00004AB2:  0C 80 FF FF FF FC
F00:6762                       bne SHIFT_FAIL;                 
               S06:00004AB8:  66 14
F00:6763                       cmpi.l #$0000003E,d5     
               S06:00004ABA:  0C 85 00 00 00 3E
F00:6764                       bne SHIFT_FAIL;                 
               S06:00004AC0:  66 0C
F00:6765       
F00:6766                       movea #TESTSTATUS,a0
               S06:00004AC2:  30 7C FF 00
F00:6767                       move.b #$1,$3b(a0)
               S06:00004AC6:  11 7C 00 01 00 3B
F00:6768                       rts      
               S06:00004ACC:  4E 75
F00:6769               
F00:6770       SHIFT_FAIL:
F00:6771           movea #TESTSTATUS,a0
               S06:00004ACE:  30 7C FF 00
F00:6772           move.b #$2,$3b(a0)
               S06:00004AD2:  11 7C 00 02 00 3B
F00:6773           rts
               S06:00004AD8:  4E 75
F00:6774                       
F00:6775       ;-----------------------------------------------------------
F00:6776       ;-----------------------------------------------------------
F00:6777       ; OPCODE : SHIFTS2
F00:6778       ;-----------------------------------------------------------
F00:6779       ;-----------------------------------------------------------
F00:6780       
F00:6781           ; Subroutine to check and accumulate the flags 
F00:6782       SHIFTS2_FLAGS:  move SR,d3      
               S06:00004ADA:  40 C3
F00:6783                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004ADC:  02 83 00 00 00 0F
F00:6784                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004AE2:  DA 83
F00:6785                       rts
               S06:00004AE4:  4E 75
F00:6786           
F00:6787       op_SHIFTS2:   
F00:6788                  
F00:6789           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6790           
F00:6791              ; BYTE LEFT
F00:6792                       move.l #$80018F81,d0   
               S06:00004AE6:  20 3C 80 01 8F 81
F00:6793                       move.l #$00000000,d5  
               S06:00004AEC:  7A 00
F00:6794                       move.l #$00000002,d6  
               S06:00004AEE:  7C 02
F00:6795       SHIFTS2_LOOP1:
F00:6796                       lsl.b d6,d0       
               S06:00004AF0:  ED 28
F00:6797                       jsr SHIFTS2_FLAGS
               S06:00004AF2:  4E B8 4A DA
F00:6798                       dbf d6,SHIFTS2_LOOP1
               S06:00004AF6:  51 CE FF F8
F00:6799                       cmpi.l #$80018F08,d0     
               S06:00004AFA:  0C 80 80 01 8F 08
F00:6800                       bne LSHIFT_FAIL;                 
               S06:00004B00:  66 00 02 40
F00:6801                       cmpi.l #$00000000,d5     
               S06:00004B04:  4A 85
F00:6802                       bne LSHIFT_FAIL;      
               S06:00004B06:  66 00 02 3A
F00:6803           
F00:6804              ; BYTE RIGHT
F00:6805                       move.l #$80018F81,d0   
               S06:00004B0A:  20 3C 80 01 8F 81
F00:6806                       move.l #$00000002,d6  
               S06:00004B10:  7C 02
F00:6807       SHIFTS2_LOOP2:
F00:6808                       lsr.b d6,d0       
               S06:00004B12:  EC 28
F00:6809                       jsr SHIFTS2_FLAGS
               S06:00004B14:  4E B8 4A DA
F00:6810                       dbf d6,SHIFTS2_LOOP2
               S06:00004B18:  51 CE FF F8
F00:6811                       cmpi.l #$80018F10,d0     
               S06:00004B1C:  0C 80 80 01 8F 10
F00:6812                       bne LSHIFT_FAIL;                 
               S06:00004B22:  66 00 02 1E
F00:6813                       cmpi.l #$00000000,d5     
               S06:00004B26:  4A 85
F00:6814                       bne LSHIFT_FAIL;      
               S06:00004B28:  66 00 02 18
F00:6815       
F00:6816           
F00:6817              ; WORD LEFT
F00:6818                       move.l #$80018FF1,d0   
               S06:00004B2C:  20 3C 80 01 8F F1
F00:6819                       move.l #$00000002,d6  
               S06:00004B32:  7C 02
F00:6820       SHIFTS2_LOOP3:
F00:6821                       lsl.w d6,d0       
               S06:00004B34:  ED 68
F00:6822                       jsr SHIFTS2_FLAGS
               S06:00004B36:  4E B8 4A DA
F00:6823                       dbf d6,SHIFTS2_LOOP3
               S06:00004B3A:  51 CE FF F8
F00:6824                       cmpi.l #$80017F88,d0     
               S06:00004B3E:  0C 80 80 01 7F 88
F00:6825                       bne LSHIFT_FAIL;                 
               S06:00004B44:  66 00 01 FC
F00:6826                       cmpi.l #$00000000,d5     
               S06:00004B48:  4A 85
F00:6827                       bne LSHIFT_FAIL;      
               S06:00004B4A:  66 00 01 F6
F00:6828           
F00:6829              ; WORD RIGHT
F00:6830                       move.l #$80018FF1,d0   
               S06:00004B4E:  20 3C 80 01 8F F1
F00:6831                       move.l #$00000002,d6  
               S06:00004B54:  7C 02
F00:6832       SHIFTS2_LOOP4:
F00:6833                       lsr.w d6,d0       
               S06:00004B56:  EC 68
F00:6834                       jsr SHIFTS2_FLAGS
               S06:00004B58:  4E B8 4A DA
F00:6835                       dbf d6,SHIFTS2_LOOP4
               S06:00004B5C:  51 CE FF F8
F00:6836                       cmpi.l #$800111FE,d0     
               S06:00004B60:  0C 80 80 01 11 FE
F00:6837                       bne LSHIFT_FAIL;                 
               S06:00004B66:  66 00 01 DA
F00:6838                       cmpi.l #$00000000,d5     
               S06:00004B6A:  4A 85
F00:6839                       bne LSHIFT_FAIL;      
               S06:00004B6C:  66 00 01 D4
F00:6840       
F00:6841           
F00:6842              ; LONG LEFT
F00:6843                       move.l #$80018FF1,d0   
               S06:00004B70:  20 3C 80 01 8F F1
F00:6844                       move.l #$00000002,d6  
               S06:00004B76:  7C 02
F00:6845       SHIFTS2_LOOP5:
F00:6846                       lsl.l d6,d0       
               S06:00004B78:  ED A8
F00:6847                       jsr SHIFTS2_FLAGS
               S06:00004B7A:  4E B8 4A DA
F00:6848                       dbf d6,SHIFTS2_LOOP5
               S06:00004B7E:  51 CE FF F8
F00:6849                       cmpi.l #$000C7F88,d0     
               S06:00004B82:  0C 80 00 0C 7F 88
F00:6850                       bne LSHIFT_FAIL;                 
               S06:00004B88:  66 00 01 B8
F00:6851                       cmpi.l #$00000000,d5     
               S06:00004B8C:  4A 85
F00:6852                       bne LSHIFT_FAIL;      
               S06:00004B8E:  66 00 01 B2
F00:6853           
F00:6854              ; LONG RIGHT
F00:6855                       move.l #$80018FF1,d0   
               S06:00004B92:  20 3C 80 01 8F F1
F00:6856                       move.l #$00000002,d6  
               S06:00004B98:  7C 02
F00:6857       SHIFTS2_LOOP6:
F00:6858                       lsr.l d6,d0       
               S06:00004B9A:  EC A8
F00:6859                       jsr SHIFTS2_FLAGS
               S06:00004B9C:  4E B8 4A DA
F00:6860                       dbf d6,SHIFTS2_LOOP6
               S06:00004BA0:  51 CE FF F8
F00:6861                       cmpi.l #$100031FE,d0     
               S06:00004BA4:  0C 80 10 00 31 FE
F00:6862                       bne LSHIFT_FAIL;                 
               S06:00004BAA:  66 00 01 96
F00:6863                       cmpi.l #$00000000,d5     
               S06:00004BAE:  4A 85
F00:6864                       bne LSHIFT_FAIL;      
               S06:00004BB0:  66 00 01 90
F00:6865       
F00:6866                   
F00:6867           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6868           
F00:6869                       move.l #$80018FF1,d0   
               S06:00004BB4:  20 3C 80 01 8F F1
F00:6870                       move.l #$00000000,d5   
               S06:00004BBA:  7A 00
F00:6871       
F00:6872              ; BYTE LEFT
F00:6873                       lsl.b #1,d0       
               S06:00004BBC:  E3 08
F00:6874                       jsr SHIFTS2_FLAGS
               S06:00004BBE:  4E B8 4A DA
F00:6875                       lsl.b #2,d0      
               S06:00004BC2:  E5 08
F00:6876                       jsr SHIFTS2_FLAGS
               S06:00004BC4:  4E B8 4A DA
F00:6877                       lsl.b #1,d0   
               S06:00004BC8:  E3 08
F00:6878                       jsr SHIFTS2_FLAGS
               S06:00004BCA:  4E B8 4A DA
F00:6879                       lsl.b #3,d0   
               S06:00004BCE:  E7 08
F00:6880                       jsr SHIFTS2_FLAGS
               S06:00004BD0:  4E B8 4A DA
F00:6881                       cmpi.l #$80018F80,d0     
               S06:00004BD4:  0C 80 80 01 8F 80
F00:6882                       bne LSHIFT_FAIL;                 
               S06:00004BDA:  66 00 01 66
F00:6883                       cmpi.l #$0000001B,d5     
               S06:00004BDE:  0C 85 00 00 00 1B
F00:6884                       bne LSHIFT_FAIL;                 
               S06:00004BE4:  66 00 01 5C
F00:6885            
F00:6886              ; BYTE RIGHT
F00:6887                       lsr.b #1,d0       
               S06:00004BE8:  E2 08
F00:6888                       jsr SHIFTS2_FLAGS
               S06:00004BEA:  4E B8 4A DA
F00:6889                       lsr.b #2,d0      
               S06:00004BEE:  E4 08
F00:6890                       jsr SHIFTS2_FLAGS
               S06:00004BF0:  4E B8 4A DA
F00:6891                       lsr.b #3,d0   
               S06:00004BF4:  E6 08
F00:6892                       jsr SHIFTS2_FLAGS
               S06:00004BF6:  4E B8 4A DA
F00:6893                       lsr.b #1,d0   
               S06:00004BFA:  E2 08
F00:6894                       jsr SHIFTS2_FLAGS
               S06:00004BFC:  4E B8 4A DA
F00:6895                       cmpi.l #$80018F01,d0     
               S06:00004C00:  0C 80 80 01 8F 01
F00:6896                       bne LSHIFT_FAIL;                 
               S06:00004C06:  66 00 01 3A
F00:6897                       cmpi.l #$0000001B,d5     
               S06:00004C0A:  0C 85 00 00 00 1B
F00:6898                       bne LSHIFT_FAIL;                 
               S06:00004C10:  66 00 01 30
F00:6899            
F00:6900              ; WORD LEFT
F00:6901                       lsl.w #1,d0       
               S06:00004C14:  E3 48
F00:6902                       jsr SHIFTS2_FLAGS
               S06:00004C16:  4E B8 4A DA
F00:6903                       lsl.w #2,d0      
               S06:00004C1A:  E5 48
F00:6904                       jsr SHIFTS2_FLAGS
               S06:00004C1C:  4E B8 4A DA
F00:6905                       lsl.w #3,d0   
               S06:00004C20:  E7 48
F00:6906                       jsr SHIFTS2_FLAGS
               S06:00004C22:  4E B8 4A DA
F00:6907                       lsl.w #5,d0   
               S06:00004C26:  EB 48
F00:6908                       jsr SHIFTS2_FLAGS
               S06:00004C28:  4E B8 4A DA
F00:6909                       cmpi.l #$80010800,d0     
               S06:00004C2C:  0C 80 80 01 08 00
F00:6910                       bne LSHIFT_FAIL;                 
               S06:00004C32:  66 00 01 0E
F00:6911                       cmpi.l #$00000025,d5     
               S06:00004C36:  0C 85 00 00 00 25
F00:6912                       bne LSHIFT_FAIL;                 
               S06:00004C3C:  66 00 01 04
F00:6913                         
F00:6914              ; WORD RIGHT
F00:6915                       lsr.w #5,d0       
               S06:00004C40:  EA 48
F00:6916                       jsr SHIFTS2_FLAGS
               S06:00004C42:  4E B8 4A DA
F00:6917                       lsr.w #1,d0      
               S06:00004C46:  E2 48
F00:6918                       jsr SHIFTS2_FLAGS
               S06:00004C48:  4E B8 4A DA
F00:6919                       lsr.w #2,d0   
               S06:00004C4C:  E4 48
F00:6920                       jsr SHIFTS2_FLAGS
               S06:00004C4E:  4E B8 4A DA
F00:6921                       lsr.w #4,d0   
               S06:00004C52:  E8 48
F00:6922                       jsr SHIFTS2_FLAGS
               S06:00004C54:  4E B8 4A DA
F00:6923                       cmpi.l #$80010000,d0     
               S06:00004C58:  0C 80 80 01 00 00
F00:6924                       bne LSHIFT_FAIL;                 
               S06:00004C5E:  66 00 00 E2
F00:6925                       cmpi.l #$0000002A,d5     
               S06:00004C62:  0C 85 00 00 00 2A
F00:6926                       bne LSHIFT_FAIL;                 
               S06:00004C68:  66 00 00 D8
F00:6927                      
F00:6928              ; LONG LEFT
F00:6929                       move.l #$80018FF1,d0   
               S06:00004C6C:  20 3C 80 01 8F F1
F00:6930                       lsl.l #1,d0       
               S06:00004C72:  E3 88
F00:6931                       jsr SHIFTS2_FLAGS
               S06:00004C74:  4E B8 4A DA
F00:6932                       lsl.l #2,d0      
               S06:00004C78:  E5 88
F00:6933                       jsr SHIFTS2_FLAGS
               S06:00004C7A:  4E B8 4A DA
F00:6934                       lsl.l #7,d0   
               S06:00004C7E:  EF 88
F00:6935                       jsr SHIFTS2_FLAGS
               S06:00004C80:  4E B8 4A DA
F00:6936                       lsl.l #4,d0   
               S06:00004C84:  E9 88
F00:6937                       jsr SHIFTS2_FLAGS
               S06:00004C86:  4E B8 4A DA
F00:6938                       cmpi.l #$63FC4000,d0     
               S06:00004C8A:  0C 80 63 FC 40 00
F00:6939                       bne LSHIFT_FAIL;                 
               S06:00004C90:  66 00 00 B0
F00:6940                       cmpi.l #$0000002B,d5     
               S06:00004C94:  0C 85 00 00 00 2B
F00:6941                       bne LSHIFT_FAIL;                 
               S06:00004C9A:  66 00 00 A6
F00:6942                                       
F00:6943              ; LONG RIGHT
F00:6944                       move.l #$80018FF1,d0   
               S06:00004C9E:  20 3C 80 01 8F F1
F00:6945                       lsr.l #1,d0       
               S06:00004CA4:  E2 88
F00:6946                       jsr SHIFTS2_FLAGS
               S06:00004CA6:  4E B8 4A DA
F00:6947                       lsr.l #5,d0      
               S06:00004CAA:  EA 88
F00:6948                       jsr SHIFTS2_FLAGS
               S06:00004CAC:  4E B8 4A DA
F00:6949                       lsr.l #7,d0   
               S06:00004CB0:  EE 88
F00:6950                       jsr SHIFTS2_FLAGS
               S06:00004CB2:  4E B8 4A DA
F00:6951                       lsr.l #8,d0   
               S06:00004CB6:  E0 88
F00:6952                       jsr SHIFTS2_FLAGS
               S06:00004CB8:  4E B8 4A DA
F00:6953                       cmpi.l #$00000400,d0     
               S06:00004CBC:  0C 80 00 00 04 00
F00:6954                       bne LSHIFT_FAIL;                 
               S06:00004CC2:  66 7E
F00:6955                       cmpi.l #$0000002D,d5     
               S06:00004CC4:  0C 85 00 00 00 2D
F00:6956                       bne LSHIFT_FAIL;                 
               S06:00004CCA:  66 76
F00:6957          
F00:6958                   
F00:6959           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6960           
F00:6961                       move.l #$00000000,d5   
               S06:00004CCC:  7A 00
F00:6962                       move.l #$00000100,a0 
               S06:00004CCE:  30 7C 01 00
F00:6963                       move.w #$8FF1,(a0)
               S06:00004CD2:  30 BC 8F F1
F00:6964                       
F00:6965              ; WORD LEFT
F00:6966                       lsl  (a0)       
               S06:00004CD6:  E3 D0
F00:6967                       jsr SHIFTS2_FLAGS
               S06:00004CD8:  4E B8 4A DA
F00:6968                       lsl  (a0)       
               S06:00004CDC:  E3 D0
F00:6969                       jsr SHIFTS2_FLAGS
               S06:00004CDE:  4E B8 4A DA
F00:6970                       lsl  (a0)       
               S06:00004CE2:  E3 D0
F00:6971                       jsr SHIFTS2_FLAGS
               S06:00004CE4:  4E B8 4A DA
F00:6972                       lsl  (a0)       
               S06:00004CE8:  E3 D0
F00:6973                       jsr SHIFTS2_FLAGS
               S06:00004CEA:  4E B8 4A DA
F00:6974                       move.w (a0),d0
               S06:00004CEE:  30 10
F00:6975                       cmpi.l #$0000FF10,d0     
               S06:00004CF0:  0C 80 00 00 FF 10
F00:6976                       bne LSHIFT_FAIL;                 
               S06:00004CF6:  66 4A
F00:6977                       cmpi.l #$00000009,d5     
               S06:00004CF8:  0C 85 00 00 00 09
F00:6978                       bne LSHIFT_FAIL;                 
               S06:00004CFE:  66 42
F00:6979                         
F00:6980              ; WORD RIGHT
F00:6981                       lsr (a0)       
               S06:00004D00:  E2 D0
F00:6982                       jsr SHIFTS2_FLAGS
               S06:00004D02:  4E B8 4A DA
F00:6983                       lsr (a0)       
               S06:00004D06:  E2 D0
F00:6984                       jsr SHIFTS2_FLAGS
               S06:00004D08:  4E B8 4A DA
F00:6985                       lsr (a0)       
               S06:00004D0C:  E2 D0
F00:6986                       jsr SHIFTS2_FLAGS                
               S06:00004D0E:  4E B8 4A DA
F00:6987                       lsr (a0)       
               S06:00004D12:  E2 D0
F00:6988                       jsr SHIFTS2_FLAGS               
               S06:00004D14:  4E B8 4A DA
F00:6989                       lsr (a0)       
               S06:00004D18:  E2 D0
F00:6990                       jsr SHIFTS2_FLAGS
               S06:00004D1A:  4E B8 4A DA
F00:6991                       lsr (a0)       
               S06:00004D1E:  E2 D0
F00:6992                       jsr SHIFTS2_FLAGS
               S06:00004D20:  4E B8 4A DA
F00:6993                       move.w (a0),d0
               S06:00004D24:  30 10
F00:6994                       cmpi.l #$000003FC,d0     
               S06:00004D26:  0C 80 00 00 03 FC
F00:6995                       bne LSHIFT_FAIL;                 
               S06:00004D2C:  66 14
F00:6996                       cmpi.l #$0000000A,d5     
               S06:00004D2E:  0C 85 00 00 00 0A
F00:6997                       bne LSHIFT_FAIL;                 
               S06:00004D34:  66 0C
F00:6998       
F00:6999                       movea #TESTSTATUS,a0
               S06:00004D36:  30 7C FF 00
F00:7000                       move.b #$1,$3c(a0)
               S06:00004D3A:  11 7C 00 01 00 3C
F00:7001                       rts      
               S06:00004D40:  4E 75
F00:7002       
F00:7003       LSHIFT_FAIL:
F00:7004           movea #TESTSTATUS,a0
               S06:00004D42:  30 7C FF 00
F00:7005           move.b #$2,$3c(a0)
               S06:00004D46:  11 7C 00 02 00 3C
F00:7006           rts
               S06:00004D4C:  4E 75


Sections:
S01  seg0
S02  seg60
S03  segf000
S04  segf010
S05  segf020
S06  seg400


Sources:
F00  opcode_tests.asm


Symbols:
SHIFTS2_LOOP6 EXPR(19354=0x4b9a) ABS 
SHIFTS2_LOOP5 EXPR(19320=0x4b78) ABS 
SHIFTS2_LOOP4 EXPR(19286=0x4b56) ABS 
SHIFTS2_LOOP3 EXPR(19252=0x4b34) ABS 
SHIFTS2_LOOP2 EXPR(19218=0x4b12) ABS 
LSHIFT_FAIL EXPR(19778=0x4d42) ABS 
SHIFTS2_LOOP1 EXPR(19184=0x4af0) ABS 
SHIFTS2_FLAGS EXPR(19162=0x4ada) ABS 
SHIFTS_LOOP6 EXPR(18722=0x4922) ABS 
SHIFTS_LOOP5 EXPR(18684=0x48fc) ABS 
SHIFTS_LOOP4 EXPR(18646=0x48d6) ABS 
SHIFTS_LOOP3 EXPR(18608=0x48b0) ABS 
SHIFTS_LOOP2 EXPR(18570=0x488a) ABS 
SHIFT_FAIL EXPR(19150=0x4ace) ABS 
SHIFTS_LOOP1 EXPR(18532=0x4864) ABS 
SHIFTS_FLAGS EXPR(18510=0x484e) ABS 
ROXx_LOOP6 EXPR(18082=0x46a2) ABS 
ROXx_LOOP5 EXPR(18044=0x467c) ABS 
ROXx_LOOP4 EXPR(18006=0x4656) ABS 
ROXx_LOOP3 EXPR(17968=0x4630) ABS 
ROXx_LOOP2 EXPR(17930=0x460a) ABS 
ROXX_FAIL EXPR(18498=0x4842) ABS 
ROXx_LOOP1 EXPR(17892=0x45e4) ABS 
ROXx_FLAGS EXPR(17870=0x45ce) ABS 
ROx_LOOP6 EXPR(17442=0x4422) ABS 
ROx_LOOP5 EXPR(17404=0x43fc) ABS 
ROx_LOOP4 EXPR(17366=0x43d6) ABS 
ROx_LOOP3 EXPR(17328=0x43b0) ABS 
ROx_LOOP2 EXPR(17290=0x438a) ABS 
ROX_FAIL EXPR(17858=0x45c2) ABS 
ROx_LOOP1 EXPR(17252=0x4364) ABS 
ROx_FLAGS EXPR(17230=0x434e) ABS 
EXG_FAIL EXPR(17218=0x4342) ABS 
MULS_FAIL EXPR(17098=0x42ca) ABS 
MULS_OUTER1 EXPR(17040=0x4290) ABS 
MULU_FAIL EXPR(17000=0x4268) ABS 
MULU_OUTER1 EXPR(16942=0x422e) ABS 
SUBX_LOOP5 EXPR(16856=0x41d8) ABS 
SUBX_LOOP4 EXPR(16828=0x41bc) ABS 
SUBX_LOOP3 EXPR(16800=0x41a0) ABS 
SUBX_FAIL EXPR(16902=0x4206) ABS 
SUBX_OUTER1 EXPR(16648=0x4108) ABS 
ADDX_LOOP5 EXPR(16560=0x40b0) ABS 
ADDX_LOOP4 EXPR(16532=0x4094) ABS 
ADDX_LOOP3 EXPR(16504=0x4078) ABS 
ADDX_FAIL EXPR(16606=0x40de) ABS 
ADDX_OUTER1 EXPR(16352=0x3fe0) ABS 
SUBA_FAIL EXPR(16308=0x3fb4) ABS 
SUBA_OUTER1 EXPR(16254=0x3f7e) ABS 
ADDA_FAIL EXPR(16204=0x3f4c) ABS 
ADDA_OUTER1 EXPR(16150=0x3f16) ABS 
SUB_OUTER2 EXPR(16004=0x3e84) ABS 
SUB_FAIL EXPR(16100=0x3ee4) ABS 
SUB_OUTER1 EXPR(15884=0x3e0c) ABS 
ADD_OUTER2 EXPR(15744=0x3d80) ABS 
ADD_FAIL EXPR(15840=0x3de0) ABS 
ADD_OUTER1 EXPR(15624=0x3d08) ABS 
CMPM_FAIL EXPR(15580=0x3cdc) ABS 
CMPM_LOOP3 EXPR(15528=0x3ca8) ABS 
CMPM_LOOP2 EXPR(15502=0x3c8e) ABS 
CMPM_LOOP1 EXPR(15476=0x3c74) ABS 
CMPA_FAIL EXPR(15392=0x3c20) ABS 
CMPA_OUTER1 EXPR(15312=0x3bd0) ABS 
CMP_FAIL EXPR(15268=0x3ba4) ABS 
CMP_OUTER1 EXPR(15172=0x3b44) ABS 
EOR_FAIL EXPR(15128=0x3b18) ABS 
EOR_OUTER2 EXPR(15032=0x3ab8) ABS 
AND_OUTER2 EXPR(14892=0x3a2c) ABS 
AND_FAIL EXPR(14988=0x3a8c) ABS 
AND_OUTER1 EXPR(14772=0x39b4) ABS 
OR_OUTER2 EXPR(14632=0x3928) ABS 
OR_FAIL EXPR(14728=0x3988) ABS 
OR_OUTER1 EXPR(14512=0x38b0) ABS 
DIVS_FAIL EXPR(14468=0x3884) ABS 
DIVS_OUTER1 EXPR(14404=0x3844) ABS 
DIVU_FAIL EXPR(14364=0x381c) ABS 
DIVU_OUTER1 EXPR(14300=0x37dc) ABS 
MOVEQ_FAIL EXPR(14260=0x37b4) ABS 
SUBQ_LOOP3 EXPR(14150=0x3746) ABS 
SUBQ_LOOP2 EXPR(14096=0x3710) ABS 
SUBQ_FAIL EXPR(14210=0x3782) ABS 
SUBQ_LOOP1 EXPR(14034=0x36d2) ABS 
ADDQ_LOOP3 EXPR(13938=0x3672) ABS 
ADDQ_LOOP2 EXPR(13884=0x363c) ABS 
ADDQ_FAIL EXPR(13998=0x36ae) ABS 
ADDQ_LOOP1 EXPR(13818=0x35fa) ABS 
SCC_FAIL EXPR(13786=0x35da) ABS 
DBCC_LOOP2 EXPR(13698=0x3582) ABS 
DBCC_FAIL EXPR(13724=0x359c) ABS 
DBCC_LOOP1 EXPR(13684=0x3574) ABS 
BCC14 EXPR(13652=0x3554) ABS 
BCC13 EXPR(13642=0x354a) ABS 
BCC12 EXPR(13634=0x3542) ABS 
BCC11 EXPR(13624=0x3538) ABS 
BCC10 EXPR(13616=0x3530) ABS 
BCC9 EXPR(13606=0x3526) ABS 
BCC8 EXPR(13598=0x351e) ABS 
BCC7 EXPR(13588=0x3514) ABS 
BCC6 EXPR(13580=0x350c) ABS 
BCC5 EXPR(13570=0x3502) ABS 
BCC4 EXPR(13562=0x34fa) ABS 
BCC3 EXPR(13552=0x34f0) ABS 
BCC2 EXPR(13544=0x34e8) ABS 
BCC_FAIL EXPR(13664=0x3560) ABS 
BCC1 EXPR(13534=0x34de) ABS 
RTR_FAIL EXPR(13512=0x34c8) ABS 
RTR_DONE EXPR(13480=0x34a8) ABS 
TRAPV_FAIL EXPR(13456=0x3490) ABS 
NBCD_NO_Z1 EXPR(13368=0x3438) ABS 
NBCD_NO_C1 EXPR(13364=0x3434) ABS 
NBCD_LOOP1 EXPR(13344=0x3420) ABS 
NBCD_FAIL EXPR(13406=0x345e) ABS 
NBCD_NO_Z EXPR(13290=0x33ea) ABS 
NBCD_NO_C EXPR(13286=0x33e6) ABS 
NBCD_LOOP EXPR(13274=0x33da) ABS 
op_NBCD EXPR(13250=0x33c2) UNUSED ABS 
SBCD_NO_C4 EXPR(13154=0x3362) ABS 
SBCD_NO_C3 EXPR(13146=0x335a) ABS 
SBCD_INNER2 EXPR(13118=0x333e) ABS 
SBCD_OUTER2 EXPR(13116=0x333c) ABS 
SBCD_FAIL EXPR(13238=0x33b6) ABS 
SBCD_NO_C2 EXPR(13038=0x32ee) ABS 
SBCD_NO_C1 EXPR(13030=0x32e6) ABS 
SBCD_INNER1 EXPR(13002=0x32ca) ABS 
SBCD_OUTER1 EXPR(13000=0x32c8) ABS 
op_SBCD EXPR(12968=0x32a8) UNUSED ABS 
ABCD_NO_C4 EXPR(12872=0x3248) ABS 
ABCD_NO_C3 EXPR(12864=0x3240) ABS 
ABCD_INNER2 EXPR(12836=0x3224) ABS 
ABCD_OUTER2 EXPR(12834=0x3222) ABS 
ABCD_FAIL EXPR(12956=0x329c) ABS 
ABCD_NO_C2 EXPR(12756=0x31d4) ABS 
ABCD_NO_C1 EXPR(12748=0x31cc) ABS 
ABCD_INNER1 EXPR(12720=0x31b0) ABS 
ABCD_OUTER1 EXPR(12718=0x31ae) ABS 
op_ABCD EXPR(12686=0x318e) UNUSED ABS 
MOVEM_FAIL EXPR(12674=0x3182) ABS 
CLR_FAIL EXPR(11732=0x2dd4) ABS 
NEGS_FAIL EXPR(11642=0x2d7a) ABS 
CHK_FAIL EXPR(10432=0x28c0) ABS 
MOVE_USP_FAIL EXPR(10352=0x2870) ABS 
LINK_FAIL EXPR(10310=0x2846) ABS 
TST_FAIL EXPR(10258=0x2812) ABS 
TAS_FAIL EXPR(10166=0x27b6) ABS 
LEA1 EXPR(10074=0x275a) ABS 
LEAPEA_FAIL EXPR(10104=0x2778) ABS 
SWAP_FAIL EXPR(9904=0x26b0) ABS 
EXT_FAIL EXPR(9860=0x2684) ABS 
MOVE4 EXPR(9516=0x252c) ABS 
MOVE_FLAGS_FAIL EXPR(9794=0x2642) ABS 
MOVE3 EXPR(9022=0x233e) ABS 
MOVE1 EXPR(8878=0x22ae) ABS 
MOVE2 EXPR(8732=0x221c) ABS 
MOVE_FAIL EXPR(9098=0x238a) ABS 
SUB_I_FAIL EXPR(8476=0x211c) ABS 
ADD_I_FAIL EXPR(7944=0x1f08) ABS 
CMP_I_FAIL EXPR(7412=0x1cf4) ABS 
BSR_FAIL EXPR(6748=0x1a5c) ABS 
BSR_FAR2 EXPR(13504=0x34c0) ABS 
BSR_CLOSE2 EXPR(6740=0x1a54) ABS 
BSR_CLOSE1 EXPR(6676=0x1a14) ABS 
BOOL_I_FAIL EXPR(6664=0x1a08) ABS 
MOVEP_FAIL EXPR(6112=0x17e0) ABS 
BSET_FAIL EXPR(5942=0x1736) ABS 
BCLR_FAIL EXPR(4828=0x12dc) ABS 
BCHG_FAIL EXPR(3802=0xeda) ABS 
op_BTST32 EXPR(2700=0xa8c) UNUSED ABS 
op_BTST31 EXPR(2696=0xa88) ABS 
op_BTST30 EXPR(2690=0xa82) ABS 
op_BTST29 EXPR(2684=0xa7c) ABS 
op_BTST28 EXPR(2678=0xa76) ABS 
op_BTST27 EXPR(2672=0xa70) ABS 
op_BTST26 EXPR(2666=0xa6a) ABS 
op_BTST25 EXPR(2660=0xa64) ABS 
op_BTST24 EXPR(2654=0xa5e) ABS 
op_BTST23 EXPR(2648=0xa58) ABS 
op_BTST22 EXPR(2642=0xa52) ABS 
op_BTST21 EXPR(2636=0xa4c) ABS 
op_BTST20 EXPR(2626=0xa42) ABS 
op_BTST11 EXPR(2202=0x89a) ABS 
op_BTST10 EXPR(2192=0x890) ABS 
op_BTST9 EXPR(2182=0x886) ABS 
op_BTST8 EXPR(2172=0x87c) ABS 
op_BTST7 EXPR(2162=0x872) ABS 
op_BTST6 EXPR(2152=0x868) ABS 
op_BTST5 EXPR(2142=0x85e) ABS 
op_BTST4 EXPR(2132=0x854) ABS 
op_BTST3 EXPR(2122=0x84a) ABS 
op_BTST2 EXPR(2112=0x840) ABS 
op_BTST1 EXPR(2102=0x836) ABS 
op_BTST12 EXPR(2208=0x8a0) ABS 
op_BTST0 EXPR(2088=0x828) ABS 
BTST_FAIL EXPR(2738=0xab2) ABS 
ANDI_TO_SR_FAIL EXPR(1610=0x64a) ABS 
ANDI_TO_CCR_FAIL EXPR(1550=0x60e) ABS 
EORI_TO_SR_FAIL EXPR(1490=0x5d2) ABS 
EORI_TO_CCR_FAIL EXPR(1430=0x596) ABS 
ORI_TO_SR_FAIL EXPR(1370=0x55a) ABS 
ORI_TO_CCR_FAIL EXPR(1316=0x524) ABS 
BSR_FAR1 EXPR(1266=0x4f2) ABS 
op_SHIFTS EXPR(18522=0x485a) ABS 
op_SHIFTS2 EXPR(19174=0x4ae6) ABS 
op_ROXx EXPR(17882=0x45da) ABS 
op_ROx EXPR(17242=0x435a) ABS 
op_EXG EXPR(17110=0x42d6) ABS 
op_MULS EXPR(17012=0x4274) ABS 
op_MULU EXPR(16914=0x4212) ABS 
op_SUBX EXPR(16616=0x40e8) ABS 
op_ADDX EXPR(16320=0x3fc0) ABS 
op_SUBA EXPR(16216=0x3f58) ABS 
op_ADDA EXPR(16112=0x3ef0) ABS 
op_SUB EXPR(15852=0x3dec) ABS 
op_ADD EXPR(15592=0x3ce8) ABS 
op_CMPM EXPR(15404=0x3c2c) ABS 
op_CMPA EXPR(15280=0x3bb0) ABS 
op_CMP EXPR(15140=0x3b24) ABS 
op_EOR EXPR(15000=0x3a98) ABS 
op_AND EXPR(14740=0x3994) ABS 
op_OR EXPR(14480=0x3890) ABS 
op_DIVS EXPR(14376=0x3828) ABS 
op_DIVU EXPR(14272=0x37c0) ABS 
op_MOVEQ EXPR(14222=0x378e) ABS 
op_SUBQ EXPR(14010=0x36ba) ABS 
op_ADDQ EXPR(13798=0x35e6) ABS 
op_SCC EXPR(13736=0x35a8) ABS 
op_DBCC EXPR(13676=0x356c) ABS 
op_BCC EXPR(13524=0x34d4) ABS 
op_RTR EXPR(13468=0x349c) ABS 
op_TRAPV EXPR(13418=0x346a) ABS 
op_MOVEM EXPR(11744=0x2de0) ABS 
op_CLR EXPR(11654=0x2d86) ABS 
op_NEGS EXPR(10444=0x28cc) ABS 
op_CHK EXPR(10364=0x287c) ABS 
op_MOVE_USP EXPR(10322=0x2852) ABS 
op_LINKS EXPR(10270=0x281e) ABS 
op_TST EXPR(10178=0x27c2) ABS 
op_TAS EXPR(10116=0x2784) ABS 
op_LEAPEA EXPR(9916=0x26bc) ABS 
op_SWAP EXPR(9872=0x2690) ABS 
op_EXT EXPR(9806=0x264e) ABS 
op_MOVE_xxx_FLAGS EXPR(9110=0x2396) ABS 
op_MOVE EXPR(8488=0x2128) ABS 
op_SUB_I EXPR(7956=0x1f14) ABS 
op_ADD_I EXPR(7424=0x1d00) ABS 
op_CMP_I EXPR(6760=0x1a68) ABS 
op_BSR EXPR(6684=0x1a1c) ABS 
op_BOOL_I EXPR(6124=0x17ec) ABS 
op_MOVEP EXPR(5954=0x1742) ABS 
op_BSET EXPR(4840=0x12e8) ABS 
op_BCLR EXPR(3814=0xee6) ABS 
op_BCHG EXPR(2750=0xabe) ABS 
op_BTST EXPR(1622=0x656) ABS 
op_ANDI_TO_SR EXPR(1562=0x61a) ABS 
op_ANDI_TO_CCR EXPR(1502=0x5de) ABS 
op_EORI_TO_SR EXPR(1442=0x5a2) ABS 
op_EORI_TO_CCR EXPR(1382=0x566) ABS 
op_ORI_TO_SR EXPR(1326=0x52e) ABS 
op_ORI_TO_CCR EXPR(1274=0x4fa) ABS 
EXCEPTION_7 EXPR(61472=0xf020) UNUSED ABS 
EXCEPTION_6 EXPR(61456=0xf010) UNUSED ABS 
ALL_DONE EXPR(61440=0xf000) ABS 
TESTSTATUS EXPR(-256=0xffffff00) EQU 
_MOVEMBYTES EXPR(28=0x1c) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(10837=0x2a55) INTERNAL 
__LINE__ EXPR(7006=0x1b5e) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
