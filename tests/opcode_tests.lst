F00:0001       ;
F00:0002       ;
F00:0003       ;  File Name   :  MCL68 Opcode Tests
F00:0004       ;  Used on     :  
F00:0005       ;  Author      :  Ted Fried,MicroCore Labs
F00:0006       ;  Creation    :  7/14/2020
F00:0007       ;
F00:0008       ;   Description:
F00:0009       ;   ============
F00:0010       ;   
F00:0011       ;  Program to test all of the Motorola 68000's opcodes.
F00:0012       ;
F00:0013       ;  If failures are detected,the code will immediately loop on itself.
F00:0014       ;  All addressing modes,data sizes,and opcode combinations are tested.
F00:0015       ;
F00:0016       ;  This code was developed using the Easy68K simulator where all tests passed!
F00:0017       ;
F00:0018       ;------------------------------------------------------------------------
F00:0019       ;
F00:0020       ; Modification History:
F00:0021       ; =====================
F00:0022       ;
F00:0023       ; Revision 1 7/14/2020 
F00:0024       ; Initial revision
F00:0025       ;
F00:0026       ;
F00:0027       ;------------------------------------------------------------------------
F00:0028       ;
F00:0029       ; Copyright (c) 2020 Ted Fried
F00:0030       ; 
F00:0031       ; Permission is hereby granted,free of charge,to any person obtaining a copy
F00:0032       ; of this software and associated documentation files (the "Software"),to deal
F00:0033       ; in the Software without restriction,including without limitation the rights
F00:0034       ; to use,copy,modify,merge,publish,distribute,sublicense,and/or sell
F00:0035       ; copies of the Software,and to permit persons to whom the Software is
F00:0036       ; furnished to do so,subject to the following conditions:
F00:0037       ; 
F00:0038       ; The above copyright notice and this permission notice shall be included in all
F00:0039       ; copies or substantial portions of the Software.
F00:0040       ; 
F00:0041       ; THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
F00:0042       ; IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
F00:0043       ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
F00:0044       ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,DAMAGES OR OTHER
F00:0045       ; LIABILITY,WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE,ARISING FROM,
F00:0046       ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
F00:0047       ; SOFTWARE.
F00:0048       ;
F00:0049       
F00:0050       
F00:0051       ; Populate Exception Vectors
F00:0052       ;
F00:0053           org $00000   
F00:0054         dc.l    $000003F0  ; Vector = 0   Reset Supervisor Stack Pointer
               S01:00000000:  00 00 03 F0
F00:0055         dc.l    $00000400  ; Vector = 1   Reset Initial PC
               S01:00000004:  00 00 04 00
F00:0056         dc.l    $22222222  ; Vector = 2   Bus Error
               S01:00000008:  22 22 22 22
F00:0057         dc.l    $30303033  ; Vector = 3   Address Error
               S01:0000000C:  30 30 30 33
F00:0058         dc.l    $44444444  ; Vector = 4   Illegal Instruction
               S01:00000010:  44 44 44 44
F00:0059         dc.l    $55555555  ; Vector = 5   Zero Divide
               S01:00000014:  55 55 55 55
F00:0060         dc.l    $0000F010  ; Vector = 6   CHK Instruction
               S01:00000018:  00 00 F0 10
F00:0061         dc.l    $0000F020  ; Vector = 7   TRAPV Instruction
               S01:0000001C:  00 00 F0 20
F00:0062         dc.l    $88888888  ; Vector = 8   Privilege Violation 
               S01:00000020:  88 88 88 88
F00:0063         dc.l    $99999999  ; Vector = 9   Trace
               S01:00000024:  99 99 99 99
F00:0064         dc.l    $aaaaaaaa  ; Vector = 10  Line A Emulator
               S01:00000028:  AA AA AA AA
F00:0065         dc.l    $bbbbbbbb  ; Vector = 11  Line F Emulator
               S01:0000002C:  BB BB BB BB
F00:0066         
F00:0067           org $00060   
F00:0068         dc.l    $12121212  ; Vector = 24  Spurrious Interrupt
               S02:00000060:  12 12 12 12
F00:0069         dc.l    $11111111  ; Vector = 25  Level 1 Interrupt Autovector
               S02:00000064:  11 11 11 11
F00:0070         dc.l    $22222222  ; Vector = 26  Level 2 Interrupt Autovector
               S02:00000068:  22 22 22 22
F00:0071         dc.l    $33333333  ; Vector = 27  Level 3 Interrupt Autovector
               S02:0000006C:  33 33 33 33
F00:0072         dc.l    $44444444  ; Vector = 28  Level 4 Interrupt Autovector
               S02:00000070:  44 44 44 44
F00:0073         dc.l    $55555555  ; Vector = 29  Level 5 Interrupt Autovector
               S02:00000074:  55 55 55 55
F00:0074         dc.l    $66666666  ; Vector = 30  Level 6 Interrupt Autovector
               S02:00000078:  66 66 66 66
F00:0075         dc.l    $77777777  ; Vector = 31  Level 7 Interrupt Autovector
               S02:0000007C:  77 77 77 77
F00:0076         
F00:0077       
F00:0078       ; Loop here when all tests pass
F00:0079       ;
F00:0080           org $00F000 
F00:0081       ALL_DONE: bra ALL_DONE
               S03:0000F000:  60 FE
F00:0082       
F00:0083        
F00:0084       ; Exception Vector = 6   CHK Instruction
F00:0085       ;
F00:0086           org $00F010 
F00:0087         
F00:0088       EXCEPTION_6:
F00:0089                   move.l #$EEEE0006,d6      ; Set d6 to the exception vector 
               S04:0000F010:  2C 3C EE EE 00 06
F00:0090                   rte
               S04:0000F016:  4E 73
F00:0091                 
F00:0092       
F00:0093        
F00:0094       ; Exception Vector = 7   TRAPV Instruction
F00:0095       ;
F00:0096           org $00F020 
F00:0097         
F00:0098       EXCEPTION_7:
F00:0099                   move.l #$12345678,d0      ; Set d6 to the exception vector 
               S05:0000F020:  20 3C 12 34 56 78
F00:0100                   rte
               S05:0000F026:  4E 73
F00:0101                 
F00:0102       
F00:0103       
F00:0104       ; Beginning of opcode tests
F00:0105       ;
F00:0106           org $000400 
F00:0107       
F00:0108          move.l #$000003F0,a7      ; populate stack pointer
               S06:00000400:  3E 7C 03 F0
F00:0109       
F00:0110       
F00:0111          jsr op_ORI_TO_CCR
               S06:00000404:  4E B8 05 06
F00:0112          jsr op_ORI_TO_SR
               S06:00000408:  4E B8 05 2A
F00:0113          jsr op_EORI_TO_CCR
               S06:0000040C:  4E B8 05 4E
F00:0114          jsr op_EORI_TO_SR
               S06:00000410:  4E B8 05 76
F00:0115          jsr op_ANDI_TO_CCR
               S06:00000414:  4E B8 05 9E
F00:0116          jsr op_ANDI_TO_SR
               S06:00000418:  4E B8 05 C6
F00:0117          jsr op_BTST
               S06:0000041C:  4E B8 05 EE
F00:0118          jsr op_BCHG
               S06:00000420:  4E B8 0A 3E
F00:0119          jsr op_BCLR
               S06:00000424:  4E B8 0E 4E
F00:0120          jsr op_BSET
               S06:00000428:  4E B8 12 3A
F00:0121          jsr op_MOVEP
               S06:0000042C:  4E B8 16 7C
F00:0122          jsr op_BOOL_I
               S06:00000430:  4E B8 17 12
F00:0123          jsr op_CMP_I
               S06:00000434:  4E B8 19 62
F00:0124          jsr op_ADD_I
               S06:00000438:  4E B8 1B E0
F00:0125          jsr op_SUB_I
               S06:0000043C:  4E B8 1D DA
F00:0126          jsr op_MOVE
               S06:00000440:  4E B8 1F D4
F00:0127          jsr op_MOVE_xxx_FLAGS
               S06:00000444:  4E B8 22 2E
F00:0128          jsr op_EXT
               S06:00000448:  4E B8 24 D0
F00:0129          jsr op_SWAP
               S06:0000044C:  4E B8 24 FA
F00:0130          jsr op_LEAPEA 
               S06:00000450:  4E B8 25 12
F00:0131          jsr op_TAS 
               S06:00000454:  4E B8 25 C4
F00:0132          jsr op_TST 
               S06:00000458:  4E B8 25 EE
F00:0133          jsr op_LINKS 
               S06:0000045C:  4E B8 26 36
F00:0134          jsr op_MOVE_USP
               S06:00000460:  4E B8 26 56
F00:0135          jsr op_CHK
               S06:00000464:  4E B8 26 64
F00:0136          jsr op_NEGS
               S06:00000468:  4E B8 26 A0
F00:0137          jsr op_CLR
               S06:0000046C:  4E B8 2B 40
F00:0138          jsr op_MOVEM
               S06:00000470:  4E B8 2B 86
F00:0139          jsr op_ABCD
               S06:00000474:  4E B8 2F 1E
F00:0140          jsr op_SBCD
               S06:00000478:  4E B8 30 24
F00:0141          jsr op_NBCD
               S06:0000047C:  4E B8 31 2A
F00:0142          jsr op_TRAPV
               S06:00000480:  4E B8 31 BE
F00:0143          jsr op_RTR
               S06:00000484:  4E B8 31 DC
F00:0144          jsr op_BSR
               S06:00000488:  4E B8 19 2A
F00:0145          jsr op_BCC
               S06:0000048C:  4E B8 32 00
F00:0146          jsr op_DBCC
               S06:00000490:  4E B8 32 82
F00:0147          jsr op_SCC
               S06:00000494:  4E B8 32 AA
F00:0148          jsr op_ADDQ
               S06:00000498:  4E B8 32 D4
F00:0149          jsr op_SUBQ
               S06:0000049C:  4E B8 33 94
F00:0150          jsr op_MOVEQ
               S06:000004A0:  4E B8 34 54
F00:0151          jsr op_DIVU
               S06:000004A4:  4E B8 34 72
F00:0152          jsr op_DIVS
               S06:000004A8:  4E B8 34 C6
F00:0153          jsr op_OR
               S06:000004AC:  4E B8 35 1A
F00:0154          jsr op_AND
               S06:000004B0:  4E B8 36 06
F00:0155          jsr op_EOR
               S06:000004B4:  4E B8 36 F2
F00:0156          jsr op_CMP
               S06:000004B8:  4E B8 37 6A
F00:0157          jsr op_CMPA
               S06:000004BC:  4E B8 37 E2
F00:0158          jsr op_CMPM
               S06:000004C0:  4E B8 38 4A
F00:0159          jsr op_ADD
               S06:000004C4:  4E B8 38 F2
F00:0160          jsr op_SUB
               S06:000004C8:  4E B8 39 DE
F00:0161          jsr op_ADDA
               S06:000004CC:  4E B8 3A CA
F00:0162          jsr op_SUBA
               S06:000004D0:  4E B8 3B 1E
F00:0163          jsr op_ADDX
               S06:000004D4:  4E B8 3B 72
F00:0164          jsr op_SUBX
               S06:000004D8:  4E B8 3C 88
F00:0165          jsr op_MULU
               S06:000004DC:  4E B8 3D 9E
F00:0166          jsr op_MULS
               S06:000004E0:  4E B8 3D EC
F00:0167          jsr op_EXG
               S06:000004E4:  4E B8 3E 3A
F00:0168          jsr op_ROx
               S06:000004E8:  4E B8 3E AA
F00:0169          jsr op_ROXx
               S06:000004EC:  4E B8 41 16
F00:0170          jsr op_SHIFTS
               S06:000004F0:  4E B8 43 82
F00:0171          jsr op_SHIFTS2
               S06:000004F4:  4E B8 45 FA
F00:0172          
F00:0173          jmp ALL_DONE
               S06:000004F8:  4E F9 00 00 F0 00
F00:0174       
F00:0175          
F00:0176       
F00:0177       BSR_FAR1:       move.l #$33333333,d3
               S06:000004FE:  26 3C 33 33 33 33
F00:0178                       rts
               S06:00000504:  4E 75
F00:0179       
F00:0180       ;-----------------------------------------------------------
F00:0181       ;-----------------------------------------------------------
F00:0182       ; OPCODE : ORI_TO_CCR
F00:0183       ;-----------------------------------------------------------
F00:0184       ;-----------------------------------------------------------
F00:0185       op_ORI_TO_CCR: 
F00:0186       
F00:0187           ori.b #$FF,CCR
               S06:00000506:  00 3C 00 FF
F00:0188           bpl ORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:0000050A:  6A 1C
F00:0189           bne ORI_TO_CCR_FAIL     ; branch if N clear
               S06:0000050C:  66 1A
F00:0190           bvc ORI_TO_CCR_FAIL     ; branch if V clear 
               S06:0000050E:  68 18
F00:0191           bcc ORI_TO_CCR_FAIL     ; branch if C clear 
               S06:00000510:  64 16
F00:0192           
F00:0193           move #$00,CCR
               S06:00000512:  44 FC 00 00
F00:0194           ori.b #$00,CCR
               S06:00000516:  00 3C 00 00
F00:0195           beq ORI_TO_CCR_FAIL     ; branch if Z set  
               S06:0000051A:  67 0C
F00:0196           bmi ORI_TO_CCR_FAIL     ; branch if N set  
               S06:0000051C:  6B 0A
F00:0197           bvs ORI_TO_CCR_FAIL     ; branch if V set  
               S06:0000051E:  69 08
F00:0198           bcs ORI_TO_CCR_FAIL     ; branch if C set  
               S06:00000520:  65 06
F00:0199          
F00:0200           move #$2700,SR         ; Put flags back to initial value
               S06:00000522:  46 FC 27 00
F00:0201       
F00:0202           rts
               S06:00000526:  4E 75
F00:0203           
F00:0204       ORI_TO_CCR_FAIL: bra ORI_TO_CCR_FAIL
               S06:00000528:  60 FE
F00:0205          
F00:0206       
F00:0207       ;-----------------------------------------------------------
F00:0208       ;-----------------------------------------------------------
F00:0209       ; OPCODE : ORI_TO_SR
F00:0210       ;-----------------------------------------------------------
F00:0211       ;-----------------------------------------------------------
F00:0212       op_ORI_TO_SR: 
F00:0213       
F00:0214           ori.w #$2FFF,SR
               S06:0000052A:  00 7C 2F FF
F00:0215           bpl ORI_TO_SR_FAIL     ; branch if Z clear  
               S06:0000052E:  6A 1C
F00:0216           bne ORI_TO_SR_FAIL     ; branch if N clear
               S06:00000530:  66 1A
F00:0217           bvc ORI_TO_SR_FAIL     ; branch if V clear 
               S06:00000532:  68 18
F00:0218           bcc ORI_TO_SR_FAIL     ; branch if C clear 
               S06:00000534:  64 16
F00:0219           
F00:0220           move #$2000,SR
               S06:00000536:  46 FC 20 00
F00:0221           ori.w #$0000,SR
               S06:0000053A:  00 7C 00 00
F00:0222           beq ORI_TO_SR_FAIL     ; branch if Z set  
               S06:0000053E:  67 0C
F00:0223           bmi ORI_TO_SR_FAIL     ; branch if N set  
               S06:00000540:  6B 0A
F00:0224           bvs ORI_TO_SR_FAIL     ; branch if V set  
               S06:00000542:  69 08
F00:0225           bcs ORI_TO_SR_FAIL     ; branch if C set  
               S06:00000544:  65 06
F00:0226          
F00:0227           move #$2700,SR        ; Put flags back to initial value
               S06:00000546:  46 FC 27 00
F00:0228       
F00:0229           rts
               S06:0000054A:  4E 75
F00:0230           
F00:0231       ORI_TO_SR_FAIL: bra ORI_TO_SR_FAIL
               S06:0000054C:  60 FE
F00:0232          
F00:0233       
F00:0234       ;-----------------------------------------------------------
F00:0235       ;-----------------------------------------------------------
F00:0236       ; OPCODE : EORI_TO_CCR
F00:0237       ;-----------------------------------------------------------
F00:0238       ;-----------------------------------------------------------
F00:0239       op_EORI_TO_CCR: 
F00:0240       
F00:0241           move #$00,CCR
               S06:0000054E:  44 FC 00 00
F00:0242           eori.b #$FF,CCR
               S06:00000552:  0A 3C 00 FF
F00:0243           bpl EORI_TO_CCR_FAIL     ; branch if Z clear  
               S06:00000556:  6A 1C
F00:0244           bne EORI_TO_CCR_FAIL     ; branch if N clear
               S06:00000558:  66 1A
F00:0245           bvc EORI_TO_CCR_FAIL     ; branch if V clear 
               S06:0000055A:  68 18
F00:0246           bcc EORI_TO_CCR_FAIL     ; branch if C clear 
               S06:0000055C:  64 16
F00:0247           
F00:0248           move #$00,CCR
               S06:0000055E:  44 FC 00 00
F00:0249           eori.b #$00,CCR
               S06:00000562:  0A 3C 00 00
F00:0250           beq EORI_TO_CCR_FAIL     ; branch if Z set  
               S06:00000566:  67 0C
F00:0251           bmi EORI_TO_CCR_FAIL     ; branch if N set  
               S06:00000568:  6B 0A
F00:0252           bvs EORI_TO_CCR_FAIL     ; branch if V set  
               S06:0000056A:  69 08
F00:0253           bcs EORI_TO_CCR_FAIL     ; branch if C set  
               S06:0000056C:  65 06
F00:0254          
F00:0255           move #$2700,SR         ; Put flags back to initial value
               S06:0000056E:  46 FC 27 00
F00:0256       
F00:0257           rts
               S06:00000572:  4E 75
F00:0258           
F00:0259       EORI_TO_CCR_FAIL: bra EORI_TO_CCR_FAIL
               S06:00000574:  60 FE
F00:0260          
F00:0261       
F00:0262       ;-----------------------------------------------------------
F00:0263       ;-----------------------------------------------------------
F00:0264       ; OPCODE : EORI_TO_SR
F00:0265       ;-----------------------------------------------------------
F00:0266       ;-----------------------------------------------------------
F00:0267       op_EORI_TO_SR: 
F00:0268       
F00:0269           move #$2000,SR
               S06:00000576:  46 FC 20 00
F00:0270           eori.w #$0FFF,SR
               S06:0000057A:  0A 7C 0F FF
F00:0271           bpl EORI_TO_SR_FAIL     ; branch if Z clear  
               S06:0000057E:  6A 1C
F00:0272           bne EORI_TO_SR_FAIL     ; branch if N clear
               S06:00000580:  66 1A
F00:0273           bvc EORI_TO_SR_FAIL     ; branch if V clear 
               S06:00000582:  68 18
F00:0274           bcc EORI_TO_SR_FAIL     ; branch if C clear 
               S06:00000584:  64 16
F00:0275           
F00:0276           move #$2000,SR
               S06:00000586:  46 FC 20 00
F00:0277           eori.w #$0000,SR
               S06:0000058A:  0A 7C 00 00
F00:0278           beq EORI_TO_SR_FAIL     ; branch if Z set  
               S06:0000058E:  67 0C
F00:0279           bmi EORI_TO_SR_FAIL     ; branch if N set  
               S06:00000590:  6B 0A
F00:0280           bvs EORI_TO_SR_FAIL     ; branch if V set  
               S06:00000592:  69 08
F00:0281           bcs EORI_TO_SR_FAIL     ; branch if C set  
               S06:00000594:  65 06
F00:0282          
F00:0283           move #$2700,SR        ; Put flags back to initial value
               S06:00000596:  46 FC 27 00
F00:0284       
F00:0285           rts
               S06:0000059A:  4E 75
F00:0286           
F00:0287       EORI_TO_SR_FAIL: bra EORI_TO_SR_FAIL
               S06:0000059C:  60 FE
F00:0288          
F00:0289       
F00:0290       
F00:0291       ;-----------------------------------------------------------
F00:0292       ;-----------------------------------------------------------
F00:0293       ; OPCODE : ANDI_TO_CCR
F00:0294       ;-----------------------------------------------------------
F00:0295       ;-----------------------------------------------------------
F00:0296       op_ANDI_TO_CCR: 
F00:0297       
F00:0298           move #$FF,CCR
               S06:0000059E:  44 FC 00 FF
F00:0299           andi.b #$FF,CCR
               S06:000005A2:  02 3C 00 FF
F00:0300           bpl ANDI_TO_CCR_FAIL     ; branch if Z clear  
               S06:000005A6:  6A 1C
F00:0301           bne ANDI_TO_CCR_FAIL     ; branch if N clear
               S06:000005A8:  66 1A
F00:0302           bvc ANDI_TO_CCR_FAIL     ; branch if V clear 
               S06:000005AA:  68 18
F00:0303           bcc ANDI_TO_CCR_FAIL     ; branch if C clear 
               S06:000005AC:  64 16
F00:0304           
F00:0305           move #$FF,CCR
               S06:000005AE:  44 FC 00 FF
F00:0306           andi.b #$00,CCR
               S06:000005B2:  02 3C 00 00
F00:0307           beq ANDI_TO_CCR_FAIL     ; branch if Z set  
               S06:000005B6:  67 0C
F00:0308           bmi ANDI_TO_CCR_FAIL     ; branch if N set  
               S06:000005B8:  6B 0A
F00:0309           bvs ANDI_TO_CCR_FAIL     ; branch if V set  
               S06:000005BA:  69 08
F00:0310           bcs ANDI_TO_CCR_FAIL     ; branch if C set  
               S06:000005BC:  65 06
F00:0311          
F00:0312           move #$2700,SR         ; Put flags back to initial value
               S06:000005BE:  46 FC 27 00
F00:0313       
F00:0314           rts
               S06:000005C2:  4E 75
F00:0315           
F00:0316       ANDI_TO_CCR_FAIL: bra ANDI_TO_CCR_FAIL
               S06:000005C4:  60 FE
F00:0317          
F00:0318       
F00:0319       ;-----------------------------------------------------------
F00:0320       ;-----------------------------------------------------------
F00:0321       ; OPCODE : ANDI_TO_SR
F00:0322       ;-----------------------------------------------------------
F00:0323       ;-----------------------------------------------------------
F00:0324       op_ANDI_TO_SR: 
F00:0325           move #$20FF,SR
               S06:000005C6:  46 FC 20 FF
F00:0326           andi.w #$FFFF,SR
               S06:000005CA:  02 7C FF FF
F00:0327           bpl ANDI_TO_SR_FAIL     ; branch if Z clear  
               S06:000005CE:  6A 1C
F00:0328           bne ANDI_TO_SR_FAIL     ; branch if N clear
               S06:000005D0:  66 1A
F00:0329           bvc ANDI_TO_SR_FAIL     ; branch if V clear 
               S06:000005D2:  68 18
F00:0330           bcc ANDI_TO_SR_FAIL     ; branch if C clear 
               S06:000005D4:  64 16
F00:0331           
F00:0332           move #$20FF,SR
               S06:000005D6:  46 FC 20 FF
F00:0333           andi.w #$FF00,SR
               S06:000005DA:  02 7C FF 00
F00:0334           beq ANDI_TO_SR_FAIL     ; branch if Z set  
               S06:000005DE:  67 0C
F00:0335           bmi ANDI_TO_SR_FAIL     ; branch if N set  
               S06:000005E0:  6B 0A
F00:0336           bvs ANDI_TO_SR_FAIL     ; branch if V set  
               S06:000005E2:  69 08
F00:0337           bcs ANDI_TO_SR_FAIL     ; branch if C set  
               S06:000005E4:  65 06
F00:0338          
F00:0339           move #$2700,SR         ; Put flags back to initial value
               S06:000005E6:  46 FC 27 00
F00:0340       
F00:0341           rts
               S06:000005EA:  4E 75
F00:0342           
F00:0343       ANDI_TO_SR_FAIL: bra ANDI_TO_SR_FAIL
               S06:000005EC:  60 FE
F00:0344         
F00:0345         
F00:0346       ;-----------------------------------------------------------
F00:0347       ;-----------------------------------------------------------
F00:0348       ; OPCODE : BTST
F00:0349       ;-----------------------------------------------------------
F00:0350       ;-----------------------------------------------------------
F00:0351       op_BTST: 
F00:0352       
F00:0353       ;  Bit Number Static 
F00:0354           
F00:0355                   ; EA = Dn  - LONG only
F00:0356                   move.l #$80000001,d0      ; populate test data
               S06:000005EE:  20 3C 80 00 00 01
F00:0357                   btst.l #0,d0              
               S06:000005F4:  08 00 00 00
F00:0358                   beq BTST_FAIL               ; branch if Z set
               S06:000005F8:  67 00 04 42
F00:0359                   btst.l #1,d0              ; 
               S06:000005FC:  08 00 00 01
F00:0360                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000600:  66 00 04 3A
F00:0361                   btst.l #31,d0             ; 
               S06:00000604:  08 00 00 1F
F00:0362                   beq BTST_FAIL               ; branch if Z set
               S06:00000608:  67 00 04 32
F00:0363                   
F00:0364                   
F00:0365                   ; EA = (An)  - BYTE only
F00:0366                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:0000060C:  30 7C 01 00
F00:0367                   move.b #$81,(a0)          ; populate test data
               S06:00000610:  10 BC 00 81
F00:0368                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000614:  12 10
F00:0369                   btst.b #0,(a0)            
               S06:00000616:  08 10 00 00
F00:0370                   beq BTST_FAIL               ; branch if Z set
               S06:0000061A:  67 00 04 20
F00:0371                   btst.b #1,(a0)            ; 
               S06:0000061E:  08 10 00 01
F00:0372                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000622:  66 00 04 18
F00:0373                   btst.b #7,(a0)            ; 
               S06:00000626:  08 10 00 07
F00:0374                   beq BTST_FAIL               ; branch if Z set
               S06:0000062A:  67 00 04 10
F00:0375                   
F00:0376                   
F00:0377                   ; EA = (An)+  - BYTE only
F00:0378                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000062E:  30 7C 01 00
F00:0379                   move.b #$01,(a0)+         ; populate test data
               S06:00000632:  10 FC 00 01
F00:0380                   move.b #$FC,(a0)+         ; populate test data
               S06:00000636:  10 FC 00 FC
F00:0381                   move.b #$80,(a0)+         ; populate test data
               S06:0000063A:  10 FC 00 80
F00:0382                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000063E:  30 7C 01 00
F00:0383                   btst.b #0,(a0)+            
               S06:00000642:  08 18 00 00
F00:0384                   beq BTST_FAIL               ; branch if Z set
               S06:00000646:  67 00 03 F4
F00:0385                   btst.b #1,(a0)+           ; 
               S06:0000064A:  08 18 00 01
F00:0386                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000064E:  66 00 03 EC
F00:0387                   btst.b #7,(a0)+           ; 
               S06:00000652:  08 18 00 07
F00:0388                   beq BTST_FAIL               ; branch if Z set
               S06:00000656:  67 00 03 E4
F00:0389               
F00:0390               
F00:0391                   ; EA = -(An)  - BYTE only
F00:0392                   move.l #$00000100,a0      ; point to memory to address
               S06:0000065A:  30 7C 01 00
F00:0393                   move.b #$80,(a0)+         ; populate test data
               S06:0000065E:  10 FC 00 80
F00:0394                   move.b #$FC,(a0)+         ; populate test data
               S06:00000662:  10 FC 00 FC
F00:0395                   move.b #$01,(a0)+         ; populate test data
               S06:00000666:  10 FC 00 01
F00:0396                   move.l #$00000103,a0      ; point to memory to address 
               S06:0000066A:  30 7C 01 03
F00:0397                   btst.b #0,-(a0)            
               S06:0000066E:  08 20 00 00
F00:0398                   beq BTST_FAIL               ; branch if Z set
               S06:00000672:  67 00 03 C8
F00:0399                   btst.b #1,-(a0)           ; 
               S06:00000676:  08 20 00 01
F00:0400                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000067A:  66 00 03 C0
F00:0401                   btst.b #7,-(a0)           ; 
               S06:0000067E:  08 20 00 07
F00:0402                   beq BTST_FAIL               ; branch if Z set
               S06:00000682:  67 00 03 B8
F00:0403               
F00:0404               
F00:0405                   ; EA = n(An)  - BYTE only
F00:0406                   move.l #$00000100,a0      ; point to memory to address
               S06:00000686:  30 7C 01 00
F00:0407                   move.b #$01,(a0)+         ; populate test data
               S06:0000068A:  10 FC 00 01
F00:0408                   move.b #$FC,(a0)+         ; populate test data
               S06:0000068E:  10 FC 00 FC
F00:0409                   move.b #$80,(a0)+         ; populate test data
               S06:00000692:  10 FC 00 80
F00:0410                   move.l #$00000100,a0      ; point to memory to address
               S06:00000696:  30 7C 01 00
F00:0411                   btst.b #0,0(a0)            
               S06:0000069A:  08 10 00 00
F00:0412                   beq BTST_FAIL               ; branch if Z set
               S06:0000069E:  67 00 03 9C
F00:0413                   btst.b #1,1(a0)           ; 
               S06:000006A2:  08 28 00 01 00 01
F00:0414                   bne BTST_FAIL               ; branch if Z clear  
               S06:000006A8:  66 00 03 92
F00:0415                   btst.b #7,2(a0)           ; 
               S06:000006AC:  08 28 00 07 00 02
F00:0416                   beq BTST_FAIL               ; branch if Z set
               S06:000006B2:  67 00 03 88
F00:0417               
F00:0418               
F00:0419                   ; EA = n(An,R.W)  - BYTE only
F00:0420                   move.l #$00000100,a0      ; point to memory to address
               S06:000006B6:  30 7C 01 00
F00:0421                   move.l #$00000000,a1      ; point to memory to address
               S06:000006BA:  93 C9
F00:0422                   move.l #$00000001,a2      ; point to memory to address
               S06:000006BC:  34 7C 00 01
F00:0423                   move.l #$00000000,d0      ; point to memory to address
               S06:000006C0:  70 00
F00:0424                   move.l #$00000001,d1      ; point to memory to address
               S06:000006C2:  72 01
F00:0425                   btst.b #0,0(a0,d0.w)            
               S06:000006C4:  08 30 00 00 00 00
F00:0426                   beq BTST_FAIL               ; branch if Z set
               S06:000006CA:  67 00 03 70
F00:0427                   btst.b #1,0(a0,d1.w)      ; 
               S06:000006CE:  08 30 00 01 10 00
F00:0428                   bne BTST_FAIL               ; branch if Z clear  
               S06:000006D4:  66 00 03 66
F00:0429                   btst.b #7,1(a0,d1.w)      ; 
               S06:000006D8:  08 30 00 07 10 01
F00:0430                   beq BTST_FAIL               ; branch if Z set
               S06:000006DE:  67 00 03 5C
F00:0431                   ; EA = n(An,R.L)  - BYTE only
F00:0432                   btst.b #0,0(a0,d0.l)  
               S06:000006E2:  08 30 00 00 08 00
F00:0433                   beq BTST_FAIL               ; branch if Z set
               S06:000006E8:  67 00 03 52
F00:0434                   btst.b #1,0(a0,d1.l)      ; 
               S06:000006EC:  08 30 00 01 18 00
F00:0435                   bne BTST_FAIL               ; branch if Z clear  
               S06:000006F2:  66 00 03 48
F00:0436                   btst.b #7,1(a0,d1.l)      ; 
               S06:000006F6:  08 30 00 07 18 01
F00:0437                   beq BTST_FAIL               ; branch if Z set
               S06:000006FC:  67 00 03 3E
F00:0438                   ; EA = n(An,A.W)  - BYTE only
F00:0439                   btst.b #0,0(a0,a1.w)            
               S06:00000700:  08 30 00 00 90 00
F00:0440                   beq BTST_FAIL               ; branch if Z set
               S06:00000706:  67 00 03 34
F00:0441                   btst.b #1,0(a0,a2.w)      ; 
               S06:0000070A:  08 30 00 01 A0 00
F00:0442                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000710:  66 00 03 2A
F00:0443                   btst.b #7,1(a0,a2.w)      ; 
               S06:00000714:  08 30 00 07 A0 01
F00:0444                   beq BTST_FAIL               ; branch if Z set
               S06:0000071A:  67 00 03 20
F00:0445                   ; EA = n(An,A.L)  - BYTE only
F00:0446                   btst.b #0,0(a0,a1.l)  
               S06:0000071E:  08 30 00 00 98 00
F00:0447                   beq BTST_FAIL               ; branch if Z set
               S06:00000724:  67 00 03 16
F00:0448                   btst.b #1,0(a0,a2.l)      ; 
               S06:00000728:  08 30 00 01 A8 00
F00:0449                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000072E:  66 00 03 0C
F00:0450                   btst.b #7,1(a0,a2.l)      ; 
               S06:00000732:  08 30 00 07 A8 01
F00:0451                   beq BTST_FAIL               ; branch if Z set
               S06:00000738:  67 00 03 02
F00:0452               
F00:0453               
F00:0454                   ; EA = x.W  - BYTE only
F00:0455                   btst.b #0,$0100            
               S06:0000073C:  08 38 00 00 01 00
F00:0456                   beq BTST_FAIL               ; branch if Z set
               S06:00000742:  67 00 02 F8
F00:0457                   btst.b #1,$0101           ; 
               S06:00000746:  08 38 00 01 01 01
F00:0458                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000074C:  66 00 02 EE
F00:0459                   btst.b #7,$0102           ; 
               S06:00000750:  08 38 00 07 01 02
F00:0460                   beq BTST_FAIL               ; branch if Z set
               S06:00000756:  67 00 02 E4
F00:0461               
F00:0462               
F00:0463                   ; EA = x.L  - BYTE only
F00:0464                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:0000075A:  20 7C 00 0F 01 00
F00:0465                   move.b #$01,(a0)+         ; populate test data
               S06:00000760:  10 FC 00 01
F00:0466                   move.b #$FC,(a0)+         ; populate test data
               S06:00000764:  10 FC 00 FC
F00:0467                   move.b #$80,(a0)+         ; populate test data
               S06:00000768:  10 FC 00 80
F00:0468                   btst.b #0,$000F0100 
               S06:0000076C:  08 39 00 00 00 0F 01 00
F00:0469                   beq BTST_FAIL               ; branch if Z set
               S06:00000774:  67 00 02 C6
F00:0470                   btst.b #1,$000F0101       ; 
               S06:00000778:  08 39 00 01 00 0F 01 01
F00:0471                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000780:  66 00 02 BA
F00:0472                   btst.b #7,$000F0102       ; 
               S06:00000784:  08 39 00 07 00 0F 01 02
F00:0473                   beq BTST_FAIL               ; branch if Z set
               S06:0000078C:  67 00 02 AE
F00:0474               
F00:0475       
F00:0476       
F00:0477                   ; EA = x(PC)  - BYTE only
F00:0478                   lea op_BTST(pc),a5
               S06:00000790:  4B FA FE 5C
F00:0479                   btst.b #0,op_BTST(pc) 
               S06:00000794:  08 3A 00 00 FE 56
F00:0480                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000079A:  66 00 02 A0
F00:0481                   btst.b #3,op_BTST0(pc)     ; 
               S06:0000079E:  08 3A 00 03 00 1E
F00:0482                   beq BTST_FAIL               ; branch if Z set
               S06:000007A4:  67 00 02 96
F00:0483                   btst.b #6,op_BTST12(pc)    ; 
               S06:000007A8:  08 3A 00 06 00 8C
F00:0484                   beq BTST_FAIL               ; branch if Z set
               S06:000007AE:  67 00 02 8C
F00:0485           
F00:0486                   ; EA = n(PC,R.W)  - BYTE only
F00:0487                   move.l #$00000100,a0      ; point to memory to address
               S06:000007B2:  30 7C 01 00
F00:0488                   move.l #$00000000,a1      ; point to memory to address
               S06:000007B6:  93 C9
F00:0489                   move.l #$00000001,a2      ; point to memory to address
               S06:000007B8:  34 7C 00 01
F00:0490                   move.l #$00000000,d0      ; point to memory to address
               S06:000007BC:  70 00
F00:0491                   move.l #$00000001,d1      ; point to memory to address
               S06:000007BE:  72 01
F00:0492           
F00:0493       op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)            
               S06:000007C0:  08 3B 00 00 00 FC
F00:0494                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007C6:  66 00 02 74
F00:0495                   
F00:0496                   lea op_BTST1(pc,d1.w),a5
               S06:000007CA:  4B FB 10 02
F00:0497       op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      ; 
               S06:000007CE:  08 3B 00 01 10 FC
F00:0498                   beq BTST_FAIL               ; branch if Z set
               S06:000007D4:  67 00 02 66
F00:0499       op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      ; 
               S06:000007D8:  08 3B 00 07 10 FC
F00:0500                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007DE:  66 00 02 5C
F00:0501                   ; EA = n(PC,R.L)  - BYTE only
F00:0502       op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)  
               S06:000007E2:  08 3B 00 00 08 FC
F00:0503                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007E8:  66 00 02 52
F00:0504       op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      ; 
               S06:000007EC:  08 3B 00 01 18 FC
F00:0505                   beq BTST_FAIL               ; branch if Z set
               S06:000007F2:  67 00 02 48
F00:0506       op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      ; 
               S06:000007F6:  08 3B 00 07 18 FC
F00:0507                   bne BTST_FAIL               ; branch if Z clear  
               S06:000007FC:  66 00 02 3E
F00:0508                   ; EA = n(PC,A.W)  - BYTE only
F00:0509       op_BTST6    btst.b #0,op_BTST6(pc,a1.w)            
               S06:00000800:  08 3B 00 00 90 FC
F00:0510                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000806:  66 00 02 34
F00:0511       op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      ; 
               S06:0000080A:  08 3B 00 01 A0 FC
F00:0512                   beq BTST_FAIL               ; branch if Z set
               S06:00000810:  67 00 02 2A
F00:0513       op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      ; 
               S06:00000814:  08 3B 00 07 A0 FC
F00:0514                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000081A:  66 00 02 20
F00:0515                   ; EA = n(PC,A.L)  - BYTE only
F00:0516       op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)  
               S06:0000081E:  08 3B 00 00 98 FC
F00:0517                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000824:  66 00 02 16
F00:0518       op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      ; 
               S06:00000828:  08 3B 00 01 A8 FC
F00:0519                   beq BTST_FAIL               ; branch if Z set
               S06:0000082E:  67 00 02 0C
F00:0520       op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      ; 
               S06:00000832:  08 3B 00 07 A8 FC
F00:0521       op_BTST12:  bne BTST_FAIL               ; branch if Z clear  
               S06:00000838:  66 00 02 02
F00:0522        
F00:0523       
F00:0524       
F00:0525       ; Bit Number Dynamic
F00:0526           
F00:0527                   ; EA = Dn  - LONG only
F00:0528                   move.l #$80000001,d0      ; populate test data
               S06:0000083C:  20 3C 80 00 00 01
F00:0529                   move.l #0,d5              ; populate bit number to test
               S06:00000842:  7A 00
F00:0530                   move.l #1,d6              ; populate bit number to test
               S06:00000844:  7C 01
F00:0531                   move.l #31,d7              ; populate bit number to test
               S06:00000846:  7E 1F
F00:0532                   
F00:0533                   btst.l d5,d0              
               S06:00000848:  0B 00
F00:0534                   beq BTST_FAIL               ; branch if Z set
               S06:0000084A:  67 00 01 F0
F00:0535                   btst.l d6,d0              ; 
               S06:0000084E:  0D 00
F00:0536                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000850:  66 00 01 EA
F00:0537                   btst.l d7,d0             ; 
               S06:00000854:  0F 00
F00:0538                   beq BTST_FAIL               ; branch if Z set
               S06:00000856:  67 00 01 E4
F00:0539                   
F00:0540                   
F00:0541                   ; EA = (An)  - BYTE only
F00:0542                   move.l #0,d5              ; populate bit number to test
               S06:0000085A:  7A 00
F00:0543                   move.l #1,d6              ; populate bit number to test
               S06:0000085C:  7C 01
F00:0544                   move.l #7,d7              ; populate bit number to test           
               S06:0000085E:  7E 07
F00:0545                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000860:  30 7C 01 00
F00:0546                   move.b #$81,(a0)          ; populate test data
               S06:00000864:  10 BC 00 81
F00:0547                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000868:  12 10
F00:0548                   btst.b d5,(a0)            
               S06:0000086A:  0B 10
F00:0549                   beq BTST_FAIL               ; branch if Z set
               S06:0000086C:  67 00 01 CE
F00:0550                   btst.b d6,(a0)            ; 
               S06:00000870:  0D 10
F00:0551                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000872:  66 00 01 C8
F00:0552                   btst.b d7,(a0)            ; 
               S06:00000876:  0F 10
F00:0553                   beq BTST_FAIL               ; branch if Z set
               S06:00000878:  67 00 01 C2
F00:0554                   
F00:0555       ; ---
F00:0556       
F00:0557           
F00:0558                   ; EA = (An)+  - BYTE only
F00:0559                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000087C:  30 7C 01 00
F00:0560                   move.b #$01,(a0)+         ; populate test data
               S06:00000880:  10 FC 00 01
F00:0561                   move.b #$FC,(a0)+         ; populate test data
               S06:00000884:  10 FC 00 FC
F00:0562                   move.b #$80,(a0)+         ; populate test data
               S06:00000888:  10 FC 00 80
F00:0563                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000088C:  30 7C 01 00
F00:0564                   btst.b d5,(a0)+            
               S06:00000890:  0B 18
F00:0565                   beq BTST_FAIL               ; branch if Z set
               S06:00000892:  67 00 01 A8
F00:0566                   btst.b d6,(a0)+           ; 
               S06:00000896:  0D 18
F00:0567                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000898:  66 00 01 A2
F00:0568                   btst.b d7,(a0)+           ; 
               S06:0000089C:  0F 18
F00:0569                   beq BTST_FAIL               ; branch if Z set
               S06:0000089E:  67 00 01 9C
F00:0570               
F00:0571               
F00:0572                   ; EA = -(An)  - BYTE only
F00:0573                   move.l #$00000100,a0      ; point to memory to address
               S06:000008A2:  30 7C 01 00
F00:0574                   move.b #$80,(a0)+         ; populate test data
               S06:000008A6:  10 FC 00 80
F00:0575                   move.b #$FC,(a0)+         ; populate test data
               S06:000008AA:  10 FC 00 FC
F00:0576                   move.b #$01,(a0)+         ; populate test data
               S06:000008AE:  10 FC 00 01
F00:0577                   move.l #$00000103,a0      ; point to memory to address 
               S06:000008B2:  30 7C 01 03
F00:0578                   btst.b d5,-(a0)            
               S06:000008B6:  0B 20
F00:0579                   beq BTST_FAIL               ; branch if Z set
               S06:000008B8:  67 00 01 82
F00:0580                   btst.b d6,-(a0)           ; 
               S06:000008BC:  0D 20
F00:0581                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008BE:  66 00 01 7C
F00:0582                   btst.b d7,-(a0)           ; 
               S06:000008C2:  0F 20
F00:0583                   beq BTST_FAIL               ; branch if Z set
               S06:000008C4:  67 00 01 76
F00:0584               
F00:0585               
F00:0586                   ; EA = n(An)  - BYTE only
F00:0587                   move.l #$00000100,a0      ; point to memory to address
               S06:000008C8:  30 7C 01 00
F00:0588                   move.b #$01,(a0)+         ; populate test data
               S06:000008CC:  10 FC 00 01
F00:0589                   move.b #$FC,(a0)+         ; populate test data
               S06:000008D0:  10 FC 00 FC
F00:0590                   move.b #$80,(a0)+         ; populate test data
               S06:000008D4:  10 FC 00 80
F00:0591                   move.l #$00000100,a0      ; point to memory to address
               S06:000008D8:  30 7C 01 00
F00:0592                   btst.b d5,0(a0)            
               S06:000008DC:  0B 10
F00:0593                   beq BTST_FAIL               ; branch if Z set
               S06:000008DE:  67 00 01 5C
F00:0594                   btst.b d6,1(a0)           ; 
               S06:000008E2:  0D 28 00 01
F00:0595                   bne BTST_FAIL               ; branch if Z clear  
               S06:000008E6:  66 00 01 54
F00:0596                   btst.b d7,2(a0)           ; 
               S06:000008EA:  0F 28 00 02
F00:0597                   beq BTST_FAIL               ; branch if Z set
               S06:000008EE:  67 00 01 4C
F00:0598               
F00:0599               
F00:0600                   ; EA = n(An,R.W)  - BYTE only
F00:0601                   move.l #$00000100,a0      ; point to memory to address
               S06:000008F2:  30 7C 01 00
F00:0602                   move.l #$00000000,a1      ; point to memory to address
               S06:000008F6:  93 C9
F00:0603                   move.l #$00000001,a2      ; point to memory to address
               S06:000008F8:  34 7C 00 01
F00:0604                   move.l #$00000000,d0      ; point to memory to address
               S06:000008FC:  70 00
F00:0605                   move.l #$00000001,d1      ; point to memory to address
               S06:000008FE:  72 01
F00:0606                   btst.b d5,0(a0,d0.w)            
               S06:00000900:  0B 30 00 00
F00:0607                   beq BTST_FAIL               ; branch if Z set
               S06:00000904:  67 00 01 36
F00:0608                   btst.b d6,0(a0,d1.w)      ; 
               S06:00000908:  0D 30 10 00
F00:0609                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000090C:  66 00 01 2E
F00:0610                   btst.b d7,1(a0,d1.w)      ; 
               S06:00000910:  0F 30 10 01
F00:0611                   beq BTST_FAIL               ; branch if Z set
               S06:00000914:  67 00 01 26
F00:0612                   ; EA = n(An,R.L)  - BYTE only
F00:0613                   btst.b d5,0(a0,d0.l)  
               S06:00000918:  0B 30 08 00
F00:0614                   beq BTST_FAIL               ; branch if Z set
               S06:0000091C:  67 00 01 1E
F00:0615                   btst.b d6,0(a0,d1.l)      ; 
               S06:00000920:  0D 30 18 00
F00:0616                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000924:  66 00 01 16
F00:0617                   btst.b d7,1(a0,d1.l)      ; 
               S06:00000928:  0F 30 18 01
F00:0618                   beq BTST_FAIL               ; branch if Z set
               S06:0000092C:  67 00 01 0E
F00:0619                   ; EA = n(An,A.W)  - BYTE only
F00:0620                   btst.b d5,0(a0,a1.w)            
               S06:00000930:  0B 30 90 00
F00:0621                   beq BTST_FAIL               ; branch if Z set
               S06:00000934:  67 00 01 06
F00:0622                   btst.b d6,0(a0,a2.w)      ; 
               S06:00000938:  0D 30 A0 00
F00:0623                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000093C:  66 00 00 FE
F00:0624                   btst.b d7,1(a0,a2.w)      ; 
               S06:00000940:  0F 30 A0 01
F00:0625                   beq BTST_FAIL               ; branch if Z set
               S06:00000944:  67 00 00 F6
F00:0626                   ; EA = n(An,A.L)  - BYTE only
F00:0627                   btst.b d5,0(a0,a1.l)  
               S06:00000948:  0B 30 98 00
F00:0628                   beq BTST_FAIL               ; branch if Z set
               S06:0000094C:  67 00 00 EE
F00:0629                   btst.b d6,0(a0,a2.l)      ; 
               S06:00000950:  0D 30 A8 00
F00:0630                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000954:  66 00 00 E6
F00:0631                   btst.b d7,1(a0,a2.l)      ; 
               S06:00000958:  0F 30 A8 01
F00:0632                   beq BTST_FAIL               ; branch if Z set
               S06:0000095C:  67 00 00 DE
F00:0633               
F00:0634               
F00:0635                   ; EA = x.W  - BYTE only
F00:0636                   btst.b d5,$0100            
               S06:00000960:  0B 38 01 00
F00:0637                   beq BTST_FAIL               ; branch if Z set
               S06:00000964:  67 00 00 D6
F00:0638                   btst.b d6,$0101           ; 
               S06:00000968:  0D 38 01 01
F00:0639                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000096C:  66 00 00 CE
F00:0640                   btst.b d7,$0102           ; 
               S06:00000970:  0F 38 01 02
F00:0641                   beq BTST_FAIL               ; branch if Z set
               S06:00000974:  67 00 00 C6
F00:0642               
F00:0643               
F00:0644                   ; EA = x.L  - BYTE only
F00:0645                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000978:  20 7C 00 0F 01 00
F00:0646                   move.b #$01,(a0)+         ; populate test data
               S06:0000097E:  10 FC 00 01
F00:0647                   move.b #$FC,(a0)+         ; populate test data
               S06:00000982:  10 FC 00 FC
F00:0648                   move.b #$80,(a0)+         ; populate test data
               S06:00000986:  10 FC 00 80
F00:0649                   btst.b d5,$000F0100 
               S06:0000098A:  0B 39 00 0F 01 00
F00:0650                   beq BTST_FAIL               ; branch if Z set
               S06:00000990:  67 00 00 AA
F00:0651                   btst.b d6,$000F0101       ; 
               S06:00000994:  0D 39 00 0F 01 01
F00:0652                   bne BTST_FAIL               ; branch if Z clear  
               S06:0000099A:  66 00 00 A0
F00:0653                   btst.b d7,$000F0102       ; 
               S06:0000099E:  0F 39 00 0F 01 02
F00:0654                   beq BTST_FAIL               ; branch if Z set
               S06:000009A4:  67 00 00 96
F00:0655               
F00:0656               
F00:0657                   ; EA = x(PC)  - BYTE only
F00:0658                   move.l #3,d6              ; populate bit number to test
               S06:000009A8:  7C 03
F00:0659                   move.l #6,d7              ; populate bit number to test
               S06:000009AA:  7E 06
F00:0660                   lea op_BTST(pc),a5
               S06:000009AC:  4B FA FC 40
F00:0661                   btst.b d5,op_BTST(pc) 
               S06:000009B0:  0B 3A FC 3C
F00:0662                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009B4:  66 00 00 86
F00:0663                   btst.b d6,op_BTST0(pc)     ; 
               S06:000009B8:  0D 3A FE 06
F00:0664                   beq BTST_FAIL               ; branch if Z set
               S06:000009BC:  67 7E
F00:0665                   btst.b d7,op_BTST12(pc)    ; 
               S06:000009BE:  0F 3A FE 78
F00:0666                   beq BTST_FAIL               ; branch if Z set
               S06:000009C2:  67 78
F00:0667         
F00:0668         
F00:0669                   ; EA = n(PC,R.W)  - BYTE only
F00:0670                   move.l #$00000100,a0      ; point to memory to address
               S06:000009C4:  30 7C 01 00
F00:0671                   move.l #$00000000,a1      ; point to memory to address
               S06:000009C8:  93 C9
F00:0672                   move.l #$00000001,a2      ; point to memory to address
               S06:000009CA:  34 7C 00 01
F00:0673                   move.l #$00000000,d0      ; point to memory to address
               S06:000009CE:  70 00
F00:0674                   move.l #$00000001,d1      ; point to memory to address
               S06:000009D0:  72 01
F00:0675                   move.l #1,d6              ; populate bit number to test
               S06:000009D2:  7C 01
F00:0676                   move.l #7,d7              ; populate bit number to test
               S06:000009D4:  7E 07
F00:0677           
F00:0678       op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)            
               S06:000009D6:  0B 3B 00 FE
F00:0679                   beq BTST_FAIL               ; branch if Z set            
               S06:000009DA:  67 60
F00:0680                   lea op_BTST21(pc,d1.w),a5
               S06:000009DC:  4B FB 10 02
F00:0681       op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      ; 
               S06:000009E0:  0D 3B 10 FE
F00:0682                   beq BTST_FAIL               ; branch if Z set
               S06:000009E4:  67 56
F00:0683       op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      ; 
               S06:000009E6:  0F 3B 10 FE
F00:0684                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009EA:  66 50
F00:0685                   ; EA = n(PC,R.L)  - BYTE only
F00:0686       op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)  
               S06:000009EC:  0B 3B 08 FE
F00:0687                   beq BTST_FAIL               ; branch if Z set
               S06:000009F0:  67 4A
F00:0688       op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      ; 
               S06:000009F2:  0D 3B 18 FE
F00:0689                   beq BTST_FAIL               ; branch if Z set
               S06:000009F6:  67 44
F00:0690       op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      ; 
               S06:000009F8:  0F 3B 18 FE
F00:0691                   bne BTST_FAIL               ; branch if Z clear  
               S06:000009FC:  66 3E
F00:0692                   ; EA = n(PC,A.W)  - BYTE only
F00:0693       op_BTST26   btst.b d5,op_BTST26(pc,a1.w)            
               S06:000009FE:  0B 3B 90 FE
F00:0694                   beq BTST_FAIL               ; branch if Z set
               S06:00000A02:  67 38
F00:0695       op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      ; 
               S06:00000A04:  0D 3B A0 FE
F00:0696                   beq BTST_FAIL               ; branch if Z set
               S06:00000A08:  67 32
F00:0697       op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      ; 
               S06:00000A0A:  0F 3B A0 FE
F00:0698                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A0E:  66 2C
F00:0699                   ; EA = n(PC,A.L)  - BYTE only
F00:0700       op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)  
               S06:00000A10:  0B 3B 98 FE
F00:0701                   beq BTST_FAIL               ; branch if Z set
               S06:00000A14:  67 26
F00:0702       op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      ; 
               S06:00000A16:  0D 3B A8 FE
F00:0703                   beq BTST_FAIL               ; branch if Z set
               S06:00000A1A:  67 20
F00:0704       op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      ; 
               S06:00000A1C:  0F 3B A8 FE
F00:0705       op_BTST32:  bne BTST_FAIL               ; branch if Z clear  
               S06:00000A20:  66 1A
F00:0706        
F00:0707                   ; EA = #x  - BYTE only
F00:0708       
F00:0709                   move.l #0,d5              ; populate bit number to test
               S06:00000A22:  7A 00
F00:0710                   move.l #3,d6              ; populate bit number to test
               S06:00000A24:  7C 03
F00:0711                   move.l #7,d7              ; populate bit number to test
               S06:00000A26:  7E 07
F00:0712                   
F00:0713                   btst.b d5,#$88
               S06:00000A28:  0B 3C 00 88
F00:0714                   bne BTST_FAIL               ; branch if Z clear  
               S06:00000A2C:  66 0E
F00:0715                   btst.b d6,#$88
               S06:00000A2E:  0D 3C 00 88
F00:0716                   beq BTST_FAIL               ; branch if Z set
               S06:00000A32:  67 08
F00:0717                   btst.b d7,#$88
               S06:00000A34:  0F 3C 00 88
F00:0718                   beq BTST_FAIL               ; branch if Z set
               S06:00000A38:  67 02
F00:0719                   
F00:0720       
F00:0721           rts
               S06:00000A3A:  4E 75
F00:0722           
F00:0723       BTST_FAIL: bra BTST_FAIL
               S06:00000A3C:  60 FE
F00:0724          
F00:0725        
F00:0726        
F00:0727         
F00:0728       ;-----------------------------------------------------------
F00:0729       ;-----------------------------------------------------------
F00:0730       ; OPCODE : BCHG
F00:0731       ;-----------------------------------------------------------
F00:0732       ;-----------------------------------------------------------
F00:0733       op_BCHG: 
F00:0734       
F00:0735       
F00:0736       ;  Bit Number Static 
F00:0737           
F00:0738                   ; EA = Dn  - LONG only
F00:0739                   move.l #$80000001,d0      ; populate test data
               S06:00000A3E:  20 3C 80 00 00 01
F00:0740                   bchg.l #0,d0              
               S06:00000A44:  08 40 00 00
F00:0741                   beq BCHG_FAIL               ; branch if Z set
               S06:00000A48:  67 00 04 02
F00:0742                   bchg.l #1,d0              ; 
               S06:00000A4C:  08 40 00 01
F00:0743                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000A50:  66 00 03 FA
F00:0744                   bchg.l #31,d0             ; 
               S06:00000A54:  08 40 00 1F
F00:0745                   beq BCHG_FAIL               ; branch if Z set
               S06:00000A58:  67 00 03 F2
F00:0746                   cmpi.l #$00000002,d0
               S06:00000A5C:  0C 80 00 00 00 02
F00:0747                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000A62:  66 00 03 E8
F00:0748       
F00:0749                   
F00:0750                   ; EA = (An)  - BYTE only
F00:0751                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000A66:  30 7C 01 00
F00:0752                   move.b #$81,(a0)          ; populate test data
               S06:00000A6A:  10 BC 00 81
F00:0753                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000A6E:  12 10
F00:0754                   bchg.b #0,(a0)            
               S06:00000A70:  08 50 00 00
F00:0755                   beq BCHG_FAIL               ; branch if Z set
               S06:00000A74:  67 00 03 D6
F00:0756                   bchg.b #1,(a0)            ; 
               S06:00000A78:  08 50 00 01
F00:0757                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000A7C:  66 00 03 CE
F00:0758                   bchg.b #7,(a0)            ; 
               S06:00000A80:  08 50 00 07
F00:0759                   beq BCHG_FAIL               ; branch if Z set
               S06:00000A84:  67 00 03 C6
F00:0760                   cmpi.b #$02,(a0)
               S06:00000A88:  0C 10 00 02
F00:0761                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000A8C:  66 00 03 BE
F00:0762                   
F00:0763                   ; EA = (An)+  - BYTE only
F00:0764                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000A90:  30 7C 01 00
F00:0765                   move.b #$01,(a0)+         ; populate test data
               S06:00000A94:  10 FC 00 01
F00:0766                   move.b #$FC,(a0)+         ; populate test data
               S06:00000A98:  10 FC 00 FC
F00:0767                   move.b #$80,(a0)+         ; populate test data
               S06:00000A9C:  10 FC 00 80
F00:0768                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000AA0:  30 7C 01 00
F00:0769                   bchg.b #0,(a0)+            
               S06:00000AA4:  08 58 00 00
F00:0770                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AA8:  67 00 03 A2
F00:0771                   bchg.b #1,(a0)+           ; 
               S06:00000AAC:  08 58 00 01
F00:0772                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AB0:  66 00 03 9A
F00:0773                   bchg.b #7,(a0)+           ; 
               S06:00000AB4:  08 58 00 07
F00:0774                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AB8:  67 00 03 92
F00:0775                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000ABC:  30 7C 01 00
F00:0776                   cmpi.b #$00,(a0)+
               S06:00000AC0:  4A 18
F00:0777                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AC2:  66 00 03 88
F00:0778                   cmpi.b #$FE,(a0)+
               S06:00000AC6:  0C 18 00 FE
F00:0779                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000ACA:  66 00 03 80
F00:0780                   cmpi.b #$00,(a0)+
               S06:00000ACE:  4A 18
F00:0781                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AD0:  66 00 03 7A
F00:0782               
F00:0783                   ; EA = -(An)  - BYTE only
F00:0784                   move.l #$00000100,a0      ; point to memory to address
               S06:00000AD4:  30 7C 01 00
F00:0785                   move.b #$80,(a0)+         ; populate test data
               S06:00000AD8:  10 FC 00 80
F00:0786                   move.b #$FC,(a0)+         ; populate test data
               S06:00000ADC:  10 FC 00 FC
F00:0787                   move.b #$01,(a0)+         ; populate test data
               S06:00000AE0:  10 FC 00 01
F00:0788                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000AE4:  30 7C 01 03
F00:0789                   bchg.b #0,-(a0)            
               S06:00000AE8:  08 60 00 00
F00:0790                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AEC:  67 00 03 5E
F00:0791                   bchg.b #1,-(a0)           ; 
               S06:00000AF0:  08 60 00 01
F00:0792                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000AF4:  66 00 03 56
F00:0793                   bchg.b #7,-(a0)           ; 
               S06:00000AF8:  08 60 00 07
F00:0794                   beq BCHG_FAIL               ; branch if Z set
               S06:00000AFC:  67 00 03 4E
F00:0795                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000B00:  30 7C 01 03
F00:0796                   cmpi.b #$00,-(a0)
               S06:00000B04:  4A 20
F00:0797                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B06:  66 00 03 44
F00:0798                   cmpi.b #$FE,-(a0)
               S06:00000B0A:  0C 20 00 FE
F00:0799                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B0E:  66 00 03 3C
F00:0800                   cmpi.b #$00,-(a0)
               S06:00000B12:  4A 20
F00:0801                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B14:  66 00 03 36
F00:0802               
F00:0803               
F00:0804                   ; EA = n(An)  - BYTE only
F00:0805                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B18:  30 7C 01 00
F00:0806                   move.b #$01,(a0)+         ; populate test data
               S06:00000B1C:  10 FC 00 01
F00:0807                   move.b #$FC,(a0)+         ; populate test data
               S06:00000B20:  10 FC 00 FC
F00:0808                   move.b #$80,(a0)+         ; populate test data
               S06:00000B24:  10 FC 00 80
F00:0809                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B28:  30 7C 01 00
F00:0810                   bchg.b #0,0(a0)            
               S06:00000B2C:  08 50 00 00
F00:0811                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B30:  67 00 03 1A
F00:0812                   bchg.b #1,1(a0)           ; 
               S06:00000B34:  08 68 00 01 00 01
F00:0813                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B3A:  66 00 03 10
F00:0814                   bchg.b #7,2(a0)           ; 
               S06:00000B3E:  08 68 00 07 00 02
F00:0815                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B44:  67 00 03 06
F00:0816                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000B48:  30 7C 01 00
F00:0817                   cmpi.b #$00,(a0)+
               S06:00000B4C:  4A 18
F00:0818                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B4E:  66 00 02 FC
F00:0819                   cmpi.b #$FE,(a0)+
               S06:00000B52:  0C 18 00 FE
F00:0820                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B56:  66 00 02 F4
F00:0821                   cmpi.b #$00,(a0)+
               S06:00000B5A:  4A 18
F00:0822                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B5C:  66 00 02 EE
F00:0823                       
F00:0824                       
F00:0825                   ; EA = n(An,D.W)  - BYTE only
F00:0826                   move.l #$00000100,a0      ; point to memory to address
               S06:00000B60:  30 7C 01 00
F00:0827                   move.l #$00000000,a1      ; point to memory to address
               S06:00000B64:  93 C9
F00:0828                   move.l #$00000001,a2      ; point to memory to address
               S06:00000B66:  34 7C 00 01
F00:0829                   move.l #$00000000,d0      ; point to memory to address
               S06:00000B6A:  70 00
F00:0830                   move.l #$00000001,d1      ; point to memory to address
               S06:00000B6C:  72 01
F00:0831                   bchg.b #0,0(a0,d0.w)            
               S06:00000B6E:  08 70 00 00 00 00
F00:0832                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B74:  66 00 02 D6
F00:0833                   bchg.b #1,0(a0,d1.w)      ; 
               S06:00000B78:  08 70 00 01 10 00
F00:0834                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B7E:  67 00 02 CC
F00:0835                   bchg.b #7,1(a0,d1.w)      ; 
               S06:00000B82:  08 70 00 07 10 01
F00:0836                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B88:  66 00 02 C2
F00:0837                   ; EA = n(An,D.L)  - BYTE only
F00:0838                   bchg.b #0,0(a0,d0.l)  
               S06:00000B8C:  08 70 00 00 08 00
F00:0839                   beq BCHG_FAIL               ; branch if Z set
               S06:00000B92:  67 00 02 B8
F00:0840                   bchg.b #1,0(a0,d1.l)      ; 
               S06:00000B96:  08 70 00 01 18 00
F00:0841                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000B9C:  66 00 02 AE
F00:0842                   bchg.b #7,1(a0,d1.l)      ; 
               S06:00000BA0:  08 70 00 07 18 01
F00:0843                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BA6:  67 00 02 A4
F00:0844                   ; EA = n(An,A.W)  - BYTE only
F00:0845                   bchg.b #0,0(a0,a1.w)            
               S06:00000BAA:  08 70 00 00 90 00
F00:0846                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BB0:  66 00 02 9A
F00:0847                   bchg.b #1,0(a0,a2.w)      ; 
               S06:00000BB4:  08 70 00 01 A0 00
F00:0848                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BBA:  67 00 02 90
F00:0849                   bchg.b #7,1(a0,a2.w)      ; 
               S06:00000BBE:  08 70 00 07 A0 01
F00:0850                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BC4:  66 00 02 86
F00:0851                   ; EA = n(An,A.L)  - BYTE only
F00:0852                   bchg.b #0,0(a0,a1.l)  
               S06:00000BC8:  08 70 00 00 98 00
F00:0853                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BCE:  67 00 02 7C
F00:0854                   bchg.b #1,0(a0,a2.l)      ; 
               S06:00000BD2:  08 70 00 01 A8 00
F00:0855                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BD8:  66 00 02 72
F00:0856                   bchg.b #7,1(a0,a2.l)      ; 
               S06:00000BDC:  08 70 00 07 A8 01
F00:0857                   beq BCHG_FAIL               ; branch if Z set
               S06:00000BE2:  67 00 02 68
F00:0858                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000BE6:  30 7C 01 00
F00:0859                   cmpi.b #$00,(a0)+
               S06:00000BEA:  4A 18
F00:0860                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BEC:  66 00 02 5E
F00:0861                   cmpi.b #$FE,(a0)+
               S06:00000BF0:  0C 18 00 FE
F00:0862                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BF4:  66 00 02 56
F00:0863                   cmpi.b #$00,(a0)+
               S06:00000BF8:  4A 18
F00:0864                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000BFA:  66 00 02 50
F00:0865           
F00:0866               
F00:0867                   ; EA = x.W  - BYTE only
F00:0868                   bchg.b #0,$0100            
               S06:00000BFE:  08 78 00 00 01 00
F00:0869                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C04:  66 00 02 46
F00:0870                   bchg.b #1,$0101           ; 
               S06:00000C08:  08 78 00 01 01 01
F00:0871                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C0E:  67 00 02 3C
F00:0872                   bchg.b #7,$0102           ; 
               S06:00000C12:  08 78 00 07 01 02
F00:0873                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C18:  66 00 02 32
F00:0874                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000C1C:  30 7C 01 00
F00:0875                   cmpi.b #$01,(a0)+
               S06:00000C20:  0C 18 00 01
F00:0876                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C24:  66 00 02 26
F00:0877                   cmpi.b #$FC,(a0)+
               S06:00000C28:  0C 18 00 FC
F00:0878                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C2C:  66 00 02 1E
F00:0879                   cmpi.b #$80,(a0)+
               S06:00000C30:  0C 18 00 80
F00:0880                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C34:  66 00 02 16
F00:0881                   
F00:0882                   ; EA = x.L  - BYTE only
F00:0883                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000C38:  20 7C 00 0F 01 00
F00:0884                   move.b #$01,(a0)+         ; populate test data
               S06:00000C3E:  10 FC 00 01
F00:0885                   move.b #$FC,(a0)+         ; populate test data
               S06:00000C42:  10 FC 00 FC
F00:0886                   move.b #$80,(a0)+         ; populate test data
               S06:00000C46:  10 FC 00 80
F00:0887                   bchg.b #0,$000F0100 
               S06:00000C4A:  08 79 00 00 00 0F 01 00
F00:0888                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C52:  67 00 01 F8
F00:0889                   bchg.b #1,$000F0101       ; 
               S06:00000C56:  08 79 00 01 00 0F 01 01
F00:0890                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C5E:  66 00 01 EC
F00:0891                   bchg.b #7,$000F0102       ; 
               S06:00000C62:  08 79 00 07 00 0F 01 02
F00:0892                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C6A:  67 00 01 E0
F00:0893                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000C6E:  30 7C 01 00
F00:0894                   cmpi.b #$01,(a0)+
               S06:00000C72:  0C 18 00 01
F00:0895                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C76:  66 00 01 D4
F00:0896                   cmpi.b #$FC,(a0)+
               S06:00000C7A:  0C 18 00 FC
F00:0897                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C7E:  66 00 01 CC
F00:0898                   cmpi.b #$80,(a0)+
               S06:00000C82:  0C 18 00 80
F00:0899                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C86:  66 00 01 C4
F00:0900                   
F00:0901       
F00:0902       ; Bit Number Dynamic
F00:0903           
F00:0904                   ; EA = Dn  - LONG only
F00:0905                   move.l #$80000001,d0      ; populate test data
               S06:00000C8A:  20 3C 80 00 00 01
F00:0906                   move.l #0,d5              ; populate bit number to test
               S06:00000C90:  7A 00
F00:0907                   move.l #1,d6              ; populate bit number to test
               S06:00000C92:  7C 01
F00:0908                   move.l #31,d7              ; populate bit number to test
               S06:00000C94:  7E 1F
F00:0909                   
F00:0910                   bchg.l d5,d0              
               S06:00000C96:  0B 40
F00:0911                   beq BCHG_FAIL               ; branch if Z set
               S06:00000C98:  67 00 01 B2
F00:0912                   bchg.l d6,d0              ; 
               S06:00000C9C:  0D 40
F00:0913                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000C9E:  66 00 01 AC
F00:0914                   bchg.l d7,d0             ; 
               S06:00000CA2:  0F 40
F00:0915                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CA4:  67 00 01 A6
F00:0916                   cmpi.l #$00000002,d0
               S06:00000CA8:  0C 80 00 00 00 02
F00:0917                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CAE:  66 00 01 9C
F00:0918       
F00:0919                   
F00:0920                   ; EA = (An)  - BYTE only
F00:0921                   move.l #0,d5              ; populate bit number to test
               S06:00000CB2:  7A 00
F00:0922                   move.l #1,d6              ; populate bit number to test
               S06:00000CB4:  7C 01
F00:0923                   move.l #7,d7              ; populate bit number to test           
               S06:00000CB6:  7E 07
F00:0924                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000CB8:  30 7C 01 00
F00:0925                   move.b #$81,(a0)          ; populate test data
               S06:00000CBC:  10 BC 00 81
F00:0926                   move.b (a0),d1            ; Check to see if data in memory is 0x81
               S06:00000CC0:  12 10
F00:0927                   bchg.b d5,(a0)            
               S06:00000CC2:  0B 50
F00:0928                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CC4:  67 00 01 86
F00:0929                   bchg.b d6,(a0)            ; 
               S06:00000CC8:  0D 50
F00:0930                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CCA:  66 00 01 80
F00:0931                   bchg.b d7,(a0)            ; 
               S06:00000CCE:  0F 50
F00:0932                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CD0:  67 00 01 7A
F00:0933                   cmpi.b #$02,(a0)
               S06:00000CD4:  0C 10 00 02
F00:0934                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CD8:  66 00 01 72
F00:0935                   
F00:0936           
F00:0937                   ; EA = (An)+  - BYTE only
F00:0938                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CDC:  30 7C 01 00
F00:0939                   move.b #$01,(a0)+         ; populate test data
               S06:00000CE0:  10 FC 00 01
F00:0940                   move.b #$FC,(a0)+         ; populate test data
               S06:00000CE4:  10 FC 00 FC
F00:0941                   move.b #$80,(a0)+         ; populate test data
               S06:00000CE8:  10 FC 00 80
F00:0942                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000CEC:  30 7C 01 00
F00:0943                   bchg.b d5,(a0)+            
               S06:00000CF0:  0B 58
F00:0944                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CF2:  67 00 01 58
F00:0945                   bchg.b d6,(a0)+           ; 
               S06:00000CF6:  0D 58
F00:0946                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000CF8:  66 00 01 52
F00:0947                   bchg.b d7,(a0)+           ; 
               S06:00000CFC:  0F 58
F00:0948                   beq BCHG_FAIL               ; branch if Z set
               S06:00000CFE:  67 00 01 4C
F00:0949                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D02:  30 7C 01 00
F00:0950                   cmpi.b #$00,(a0)+
               S06:00000D06:  4A 18
F00:0951                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D08:  66 00 01 42
F00:0952                   cmpi.b #$FE,(a0)+
               S06:00000D0C:  0C 18 00 FE
F00:0953                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D10:  66 00 01 3A
F00:0954                   cmpi.b #$00,(a0)+
               S06:00000D14:  4A 18
F00:0955                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D16:  66 00 01 34
F00:0956                       
F00:0957                   ; EA = -(An)  - BYTE only
F00:0958                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D1A:  30 7C 01 00
F00:0959                   move.b #$80,(a0)+         ; populate test data
               S06:00000D1E:  10 FC 00 80
F00:0960                   move.b #$FC,(a0)+         ; populate test data
               S06:00000D22:  10 FC 00 FC
F00:0961                   move.b #$01,(a0)+         ; populate test data
               S06:00000D26:  10 FC 00 01
F00:0962                   move.l #$00000103,a0      ; point to memory to address 
               S06:00000D2A:  30 7C 01 03
F00:0963                   bchg.b d5,-(a0)            
               S06:00000D2E:  0B 60
F00:0964                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D30:  67 00 01 1A
F00:0965                   bchg.b d6,-(a0)           ; 
               S06:00000D34:  0D 60
F00:0966                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D36:  66 00 01 14
F00:0967                   bchg.b d7,-(a0)           ; 
               S06:00000D3A:  0F 60
F00:0968                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D3C:  67 00 01 0E
F00:0969                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00000D40:  30 7C 01 03
F00:0970                   cmpi.b #$00,-(a0)
               S06:00000D44:  4A 20
F00:0971                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D46:  66 00 01 04
F00:0972                   cmpi.b #$FE,-(a0)
               S06:00000D4A:  0C 20 00 FE
F00:0973                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D4E:  66 00 00 FC
F00:0974                   cmpi.b #$00,-(a0)
               S06:00000D52:  4A 20
F00:0975                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D54:  66 00 00 F6
F00:0976                       
F00:0977                   ; EA = n(An)  - BYTE only
F00:0978                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D58:  30 7C 01 00
F00:0979                   move.b #$01,(a0)+         ; populate test data
               S06:00000D5C:  10 FC 00 01
F00:0980                   move.b #$FC,(a0)+         ; populate test data
               S06:00000D60:  10 FC 00 FC
F00:0981                   move.b #$80,(a0)+         ; populate test data
               S06:00000D64:  10 FC 00 80
F00:0982                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D68:  30 7C 01 00
F00:0983                   bchg.b d5,0(a0)            
               S06:00000D6C:  0B 50
F00:0984                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D6E:  67 00 00 DC
F00:0985                   bchg.b d6,1(a0)           ; 
               S06:00000D72:  0D 68 00 01
F00:0986                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D76:  66 00 00 D4
F00:0987                   bchg.b d7,2(a0)           ; 
               S06:00000D7A:  0F 68 00 02
F00:0988                   beq BCHG_FAIL               ; branch if Z set
               S06:00000D7E:  67 00 00 CC
F00:0989                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000D82:  30 7C 01 00
F00:0990                   cmpi.b #$00,(a0)+
               S06:00000D86:  4A 18
F00:0991                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D88:  66 00 00 C2
F00:0992                   cmpi.b #$FE,(a0)+
               S06:00000D8C:  0C 18 00 FE
F00:0993                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D90:  66 00 00 BA
F00:0994                   cmpi.b #$00,(a0)+
               S06:00000D94:  4A 18
F00:0995                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000D96:  66 00 00 B4
F00:0996                       
F00:0997                   ; EA = n(An,R.W)  - BYTE only
F00:0998                   move.l #$00000100,a0      ; point to memory to address
               S06:00000D9A:  30 7C 01 00
F00:0999                   move.l #$00000000,a1      ; point to memory to address
               S06:00000D9E:  93 C9
F00:1000                   move.l #$00000001,a2      ; point to memory to address
               S06:00000DA0:  34 7C 00 01
F00:1001                   move.l #$00000000,d0      ; point to memory to address
               S06:00000DA4:  70 00
F00:1002                   move.l #$00000001,d1      ; point to memory to address
               S06:00000DA6:  72 01
F00:1003                   bchg.b d5,0(a0,d0.w)            
               S06:00000DA8:  0B 70 00 00
F00:1004                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DAC:  66 00 00 9E
F00:1005                   bchg.b d6,0(a0,d1.w)      ; 
               S06:00000DB0:  0D 70 10 00
F00:1006                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DB4:  67 00 00 96
F00:1007                   bchg.b d7,1(a0,d1.w)      ; 
               S06:00000DB8:  0F 70 10 01
F00:1008                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DBC:  66 00 00 8E
F00:1009                   ; EA = n(An,R.L)  - BYTE only
F00:1010                   bchg.b d5,0(a0,d0.l)  
               S06:00000DC0:  0B 70 08 00
F00:1011                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DC4:  67 00 00 86
F00:1012                   bchg.b d6,0(a0,d1.l)      ; 
               S06:00000DC8:  0D 70 18 00
F00:1013                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DCC:  66 7E
F00:1014                   bchg.b d7,1(a0,d1.l)      ; 
               S06:00000DCE:  0F 70 18 01
F00:1015                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DD2:  67 78
F00:1016                   ; EA = n(An,A.W)  - BYTE only
F00:1017                   bchg.b d5,0(a0,a1.w)            
               S06:00000DD4:  0B 70 90 00
F00:1018                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DD8:  66 72
F00:1019                   bchg.b d6,0(a0,a2.w)      ; 
               S06:00000DDA:  0D 70 A0 00
F00:1020                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DDE:  67 6C
F00:1021                   bchg.b d7,1(a0,a2.w)      ; 
               S06:00000DE0:  0F 70 A0 01
F00:1022                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DE4:  66 66
F00:1023                   ; EA = n(An,A.L)  - BYTE only
F00:1024                   bchg.b d5,0(a0,a1.l)  
               S06:00000DE6:  0B 70 98 00
F00:1025                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DEA:  67 60
F00:1026                   bchg.b d6,0(a0,a2.l)      ; 
               S06:00000DEC:  0D 70 A8 00
F00:1027                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DF0:  66 5A
F00:1028                   bchg.b d7,1(a0,a2.l)      ; 
               S06:00000DF2:  0F 70 A8 01
F00:1029                   beq BCHG_FAIL               ; branch if Z set
               S06:00000DF6:  67 54
F00:1030                   cmpi.b #$00,(a0)+
               S06:00000DF8:  4A 18
F00:1031                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000DFA:  66 50
F00:1032                   
F00:1033                   ; EA = x.W  - BYTE only
F00:1034                   bchg.b d5,$0100            
               S06:00000DFC:  0B 78 01 00
F00:1035                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E00:  66 4A
F00:1036                   bchg.b d6,$0101           ; 
               S06:00000E02:  0D 78 01 01
F00:1037                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E06:  67 44
F00:1038                   bchg.b d7,$0102           ; 
               S06:00000E08:  0F 78 01 02
F00:1039                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E0C:  66 3E
F00:1040                   cmpi.b #$FC,(a0)+
               S06:00000E0E:  0C 18 00 FC
F00:1041                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E12:  66 38
F00:1042                           
F00:1043                   ; EA = x.L  - BYTE only
F00:1044                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00000E14:  20 7C 00 0F 01 00
F00:1045                   move.b #$01,(a0)+         ; populate test data
               S06:00000E1A:  10 FC 00 01
F00:1046                   move.b #$FC,(a0)+         ; populate test data
               S06:00000E1E:  10 FC 00 FC
F00:1047                   move.b #$80,(a0)+         ; populate test data
               S06:00000E22:  10 FC 00 80
F00:1048                   bchg.b d5,$000F0100 
               S06:00000E26:  0B 79 00 0F 01 00
F00:1049                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E2C:  67 1E
F00:1050                   bchg.b d6,$000F0101       ; 
               S06:00000E2E:  0D 79 00 0F 01 01
F00:1051                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E34:  66 16
F00:1052                   bchg.b d7,$000F0102       ; 
               S06:00000E36:  0F 79 00 0F 01 02
F00:1053                   beq BCHG_FAIL               ; branch if Z set
               S06:00000E3C:  67 0E
F00:1054                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:00000E3E:  20 7C 00 0F 01 01
F00:1055                   cmpi.b #$FE,(a0)
               S06:00000E44:  0C 10 00 FE
F00:1056                   bne BCHG_FAIL               ; branch if Z clear  
               S06:00000E48:  66 02
F00:1057                           
F00:1058       
F00:1059           rts
               S06:00000E4A:  4E 75
F00:1060           
F00:1061       BCHG_FAIL: bra BCHG_FAIL
               S06:00000E4C:  60 FE
F00:1062       
F00:1063       
F00:1064       
F00:1065         
F00:1066       ;-----------------------------------------------------------
F00:1067       ;-----------------------------------------------------------
F00:1068       ; OPCODE : BCLR
F00:1069       ;-----------------------------------------------------------
F00:1070       ;-----------------------------------------------------------
F00:1071       op_BCLR: 
F00:1072       
F00:1073       
F00:1074       ;  Bit Number Static 
F00:1075           
F00:1076                   ; EA = Dn  - LONG only
F00:1077                   move.l #$FF0000FF,d0      ; populate test data
               S06:00000E4E:  20 3C FF 00 00 FF
F00:1078                   bclr.l #0,d0              
               S06:00000E54:  08 80 00 00
F00:1079                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000E58:  67 00 03 DE
F00:1080                   bclr.l #1,d0              ; 
               S06:00000E5C:  08 80 00 01
F00:1081                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000E60:  67 00 03 D6
F00:1082                   bclr.l #15,d0             ; 
               S06:00000E64:  08 80 00 0F
F00:1083                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000E68:  66 00 03 CE
F00:1084                   bclr.l #31,d0             ; 
               S06:00000E6C:  08 80 00 1F
F00:1085                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000E70:  67 00 03 C6
F00:1086                   cmpi.l #$7F0000FC,d0
               S06:00000E74:  0C 80 7F 00 00 FC
F00:1087                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000E7A:  66 00 03 BC
F00:1088       
F00:1089                   
F00:1090                   ; EA = (An)  - BYTE only
F00:1091                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00000E7E:  30 7C 01 00
F00:1092                   move.b #$0F,(a0)          ; populate test data
               S06:00000E82:  10 BC 00 0F
F00:1093                   bclr.b #0,(a0)            
               S06:00000E86:  08 90 00 00
F00:1094                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000E8A:  67 00 03 AC
F00:1095                   bclr.b #7,(a0)            ; 
               S06:00000E8E:  08 90 00 07
F00:1096                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000E92:  66 00 03 A4
F00:1097                   cmpi.b #$0E,(a0)
               S06:00000E96:  0C 10 00 0E
F00:1098                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000E9A:  66 00 03 9C
F00:1099                   
F00:1100                   ; EA = (An)+  - BYTE only
F00:1101                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000E9E:  30 7C 01 00
F00:1102                   move.b #$01,(a0)+         ; populate test data
               S06:00000EA2:  10 FC 00 01
F00:1103                   move.b #$00,(a0)+         ; populate test data
               S06:00000EA6:  10 FC 00 00
F00:1104                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000EAA:  30 7C 01 00
F00:1105                   bclr.b #0,(a0)+            
               S06:00000EAE:  08 98 00 00
F00:1106                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000EB2:  67 00 03 84
F00:1107                   bclr.b #1,(a0)+           ; 
               S06:00000EB6:  08 98 00 01
F00:1108                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000EBA:  66 00 03 7C
F00:1109                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000EBE:  30 7C 01 00
F00:1110                   cmpi.b #$00,(a0)+
               S06:00000EC2:  4A 18
F00:1111                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000EC4:  66 00 03 72
F00:1112                   cmpi.b #$00,(a0)+
               S06:00000EC8:  4A 18
F00:1113                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000ECA:  66 00 03 6C
F00:1114        
F00:1115               
F00:1116                   ; EA = -(An)  - BYTE only
F00:1117                   move.l #$00000100,a0      ; point to memory to address
               S06:00000ECE:  30 7C 01 00
F00:1118                   move.b #$01,(a0)+         ; populate test data
               S06:00000ED2:  10 FC 00 01
F00:1119                   move.b #$80,(a0)+         ; populate test data
               S06:00000ED6:  10 FC 00 80
F00:1120                   bclr.b #7,-(a0)            
               S06:00000EDA:  08 A0 00 07
F00:1121                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000EDE:  67 00 03 58
F00:1122                   bclr.b #0,-(a0)           ; 
               S06:00000EE2:  08 A0 00 00
F00:1123                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000EE6:  67 00 03 50
F00:1124                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:00000EEA:  30 7C 01 02
F00:1125                   cmpi.b #$00,-(a0)
               S06:00000EEE:  4A 20
F00:1126                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000EF0:  66 00 03 46
F00:1127                   cmpi.b #$00,-(a0)
               S06:00000EF4:  4A 20
F00:1128                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000EF6:  66 00 03 40
F00:1129       
F00:1130               
F00:1131                   ; EA = n(An)  - BYTE only
F00:1132                   move.l #$00000100,a0      ; point to memory to address
               S06:00000EFA:  30 7C 01 00
F00:1133                   move.b #$FF,(a0)+         ; populate test data
               S06:00000EFE:  10 FC 00 FF
F00:1134                   move.b #$FF,(a0)+         ; populate test data
               S06:00000F02:  10 FC 00 FF
F00:1135                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F06:  30 7C 01 00
F00:1136                   bclr.b #0,0(a0)            
               S06:00000F0A:  08 90 00 00
F00:1137                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F0E:  67 00 03 28
F00:1138                   bclr.b #4,1(a0)           ; 
               S06:00000F12:  08 A8 00 04 00 01
F00:1139                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F18:  67 00 03 1E
F00:1140                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000F1C:  30 7C 01 00
F00:1141                   cmpi.b #$FE,(a0)+
               S06:00000F20:  0C 18 00 FE
F00:1142                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F24:  66 00 03 12
F00:1143                   cmpi.b #$EF,(a0)+
               S06:00000F28:  0C 18 00 EF
F00:1144                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F2C:  66 00 03 0A
F00:1145       
F00:1146                       
F00:1147                   ; EA = n(An,D.W)  - BYTE only
F00:1148                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F30:  30 7C 01 00
F00:1149                   move.l #$00000000,a1      ; point to memory to address
               S06:00000F34:  93 C9
F00:1150                   move.l #$00000001,a2      ; point to memory to address
               S06:00000F36:  34 7C 00 01
F00:1151                   move.l #$00000000,d0      ; point to memory to address
               S06:00000F3A:  70 00
F00:1152                   move.l #$00000001,d1      ; point to memory to address
               S06:00000F3C:  72 01
F00:1153                   move.b #$FF,(a0)+         ; populate test data
               S06:00000F3E:  10 FC 00 FF
F00:1154                   move.b #$FF,(a0)+         ; populate test data
               S06:00000F42:  10 FC 00 FF
F00:1155                   move.l #$00000100,a0      ; point to memory to address
               S06:00000F46:  30 7C 01 00
F00:1156                   bclr.b #0,0(a0,d0.w)            
               S06:00000F4A:  08 B0 00 00 00 00
F00:1157                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F50:  67 00 02 E6
F00:1158                   bclr.b #1,0(a0,d1.w)      ; 
               S06:00000F54:  08 B0 00 01 10 00
F00:1159                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F5A:  67 00 02 DC
F00:1160                   bclr.b #2,1(a0,d1.w)      ; 
               S06:00000F5E:  08 B0 00 02 10 01
F00:1161                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F64:  66 00 02 D2
F00:1162                   ; EA = n(An,D.L)  - BYTE only
F00:1163                   bclr.b #3,0(a0,d0.l)  
               S06:00000F68:  08 B0 00 03 08 00
F00:1164                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F6E:  67 00 02 C8
F00:1165                   bclr.b #4,0(a0,d1.l)      ; 
               S06:00000F72:  08 B0 00 04 18 00
F00:1166                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F78:  67 00 02 BE
F00:1167                   bclr.b #5,1(a0,d1.l)      ; 
               S06:00000F7C:  08 B0 00 05 18 01
F00:1168                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F82:  66 00 02 B4
F00:1169                   ; EA = n(An,A.W)  - BYTE only
F00:1170                   bclr.b #6,0(a0,a1.w)            
               S06:00000F86:  08 B0 00 06 90 00
F00:1171                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000F8C:  67 00 02 AA
F00:1172                   bclr.b #1,0(a0,a2.w)      ; 
               S06:00000F90:  08 B0 00 01 A0 00
F00:1173                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000F96:  66 00 02 A0
F00:1174                   bclr.b #7,1(a0,a2.w)      ; 
               S06:00000F9A:  08 B0 00 07 A0 01
F00:1175                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FA0:  67 00 02 96
F00:1176                   ; EA = n(An,A.L)  - BYTE only
F00:1177                   bclr.b #0,0(a0,a1.l)  
               S06:00000FA4:  08 B0 00 00 98 00
F00:1178                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FAA:  66 00 02 8C
F00:1179                   bclr.b #0,0(a0,a2.l)      ; 
               S06:00000FAE:  08 B0 00 00 A8 00
F00:1180                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FB4:  67 00 02 82
F00:1181                   bclr.b #1,1(a0,a2.l)      ; 
               S06:00000FB8:  08 B0 00 01 A8 01
F00:1182                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FBE:  66 00 02 78
F00:1183                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000FC2:  30 7C 01 00
F00:1184                   cmpi.b #$B6,(a0)+
               S06:00000FC6:  0C 18 00 B6
F00:1185                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FCA:  66 00 02 6C
F00:1186                   cmpi.b #$EC,(a0)+
               S06:00000FCE:  0C 18 00 EC
F00:1187                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00000FD2:  66 00 02 64
F00:1188                   cmpi.b #$59,(a0)+
               S06:00000FD6:  0C 18 00 59
F00:1189                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FDA:  67 00 02 5C
F00:1190           
F00:1191               
F00:1192                   ; EA = x.W  - BYTE only
F00:1193                   move.l #$00000100,a0      ; point to memory to address
               S06:00000FDE:  30 7C 01 00
F00:1194                   move.b #$FF,(a0)+         ; populate test data
               S06:00000FE2:  10 FC 00 FF
F00:1195                   bclr.b #0,$0100            
               S06:00000FE6:  08 B8 00 00 01 00
F00:1196                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FEC:  67 00 02 4A
F00:1197                   bclr.b #1,$0100           ; 
               S06:00000FF0:  08 B8 00 01 01 00
F00:1198                   beq BCLR_FAIL;               ; branch if Z set
               S06:00000FF6:  67 00 02 40
F00:1199                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00000FFA:  30 7C 01 00
F00:1200                   cmpi.b #$FC,(a0)+
               S06:00000FFE:  0C 18 00 FC
F00:1201                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001002:  66 00 02 34
F00:1202       
F00:1203                   
F00:1204                   ; EA = x.L  - BYTE only
F00:1205                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001006:  20 7C 00 0F 01 00
F00:1206                   move.b #$FF,(a0)          ; populate test data
               S06:0000100C:  10 BC 00 FF
F00:1207                   bclr.b #0,$000F0100 
               S06:00001010:  08 B9 00 00 00 0F 01 00
F00:1208                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001018:  67 00 02 1E
F00:1209                   bclr.b #1,$000F0100       ; 
               S06:0000101C:  08 B9 00 01 00 0F 01 00
F00:1210                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001024:  67 00 02 12
F00:1211                   bclr.b #2,$000F0100       ; 
               S06:00001028:  08 B9 00 02 00 0F 01 00
F00:1212                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001030:  67 00 02 06
F00:1213                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001034:  20 7C 00 0F 01 00
F00:1214                   cmpi.b #$F8,(a0)+
               S06:0000103A:  0C 18 00 F8
F00:1215                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000103E:  66 00 01 F8
F00:1216       
F00:1217       
F00:1218       ; Bit Number Dynamic
F00:1219           
F00:1220                   ; EA = Dn  - LONG only
F00:1221                   move.l #$FF00FF00,d0      ; populate test data
               S06:00001042:  20 3C FF 00 FF 00
F00:1222                   move.l #0,d5              ; populate bit number to test
               S06:00001048:  7A 00
F00:1223                   move.l #1,d6              ; populate bit number to test
               S06:0000104A:  7C 01
F00:1224                   move.l #31,d7              ; populate bit number to test
               S06:0000104C:  7E 1F
F00:1225                   
F00:1226                   bclr.l d5,d0              
               S06:0000104E:  0B 80
F00:1227                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001050:  66 00 01 E6
F00:1228                   bclr.l d6,d0              ; 
               S06:00001054:  0D 80
F00:1229                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001056:  66 00 01 E0
F00:1230                   bclr.l d7,d0             ; 
               S06:0000105A:  0F 80
F00:1231                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000105C:  67 00 01 DA
F00:1232                   cmpi.l #$7F00FF00,d0
               S06:00001060:  0C 80 7F 00 FF 00
F00:1233                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001066:  66 00 01 D0
F00:1234       
F00:1235                   
F00:1236                   ; EA = (An)  - BYTE only
F00:1237                   move.l #0,d5              ; populate bit number to test
               S06:0000106A:  7A 00
F00:1238                   move.l #1,d6              ; populate bit number to test
               S06:0000106C:  7C 01
F00:1239                   move.l #7,d7              ; populate bit number to test           
               S06:0000106E:  7E 07
F00:1240                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001070:  30 7C 01 00
F00:1241                   move.b #$81,(a0)          ; populate test data
               S06:00001074:  10 BC 00 81
F00:1242                   bclr.b d5,(a0)            
               S06:00001078:  0B 90
F00:1243                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000107A:  67 00 01 BC
F00:1244                   bclr.b d6,(a0)            ; 
               S06:0000107E:  0D 90
F00:1245                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001080:  66 00 01 B6
F00:1246                   bclr.b d7,(a0)            ; 
               S06:00001084:  0F 90
F00:1247                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001086:  67 00 01 B0
F00:1248                   cmpi.b #$00,(a0)
               S06:0000108A:  4A 10
F00:1249                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000108C:  66 00 01 AA
F00:1250                   
F00:1251           
F00:1252                   ; EA = (An)+  - BYTE only
F00:1253                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001090:  30 7C 01 00
F00:1254                   move.b #$01,(a0)+         ; populate test data
               S06:00001094:  10 FC 00 01
F00:1255                   move.b #$FC,(a0)+         ; populate test data
               S06:00001098:  10 FC 00 FC
F00:1256                   move.b #$80,(a0)+         ; populate test data
               S06:0000109C:  10 FC 00 80
F00:1257                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000010A0:  30 7C 01 00
F00:1258                   bclr.b d5,(a0)+            
               S06:000010A4:  0B 98
F00:1259                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010A6:  67 00 01 90
F00:1260                   bclr.b d6,(a0)+           ; 
               S06:000010AA:  0D 98
F00:1261                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010AC:  66 00 01 8A
F00:1262                   bclr.b d7,(a0)+           ; 
               S06:000010B0:  0F 98
F00:1263                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010B2:  67 00 01 84
F00:1264                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000010B6:  30 7C 01 00
F00:1265                   cmpi.b #$00,(a0)+
               S06:000010BA:  4A 18
F00:1266                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010BC:  66 00 01 7A
F00:1267                   cmpi.b #$FC,(a0)+
               S06:000010C0:  0C 18 00 FC
F00:1268                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010C4:  66 00 01 72
F00:1269                   cmpi.b #$00,(a0)+
               S06:000010C8:  4A 18
F00:1270                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010CA:  66 00 01 6C
F00:1271                       
F00:1272                   ; EA = -(An)  - BYTE only
F00:1273                   move.l #$00000100,a0      ; point to memory to address
               S06:000010CE:  30 7C 01 00
F00:1274                   move.b #$80,(a0)+         ; populate test data
               S06:000010D2:  10 FC 00 80
F00:1275                   move.b #$FC,(a0)+         ; populate test data
               S06:000010D6:  10 FC 00 FC
F00:1276                   move.b #$01,(a0)+         ; populate test data
               S06:000010DA:  10 FC 00 01
F00:1277                   move.l #$00000103,a0      ; point to memory to address 
               S06:000010DE:  30 7C 01 03
F00:1278                   bclr.b d5,-(a0)            
               S06:000010E2:  0B A0
F00:1279                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010E4:  67 00 01 52
F00:1280                   bclr.b d6,-(a0)           ; 
               S06:000010E8:  0D A0
F00:1281                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010EA:  66 00 01 4C
F00:1282                   bclr.b d7,-(a0)           ; 
               S06:000010EE:  0F A0
F00:1283                   beq BCLR_FAIL;               ; branch if Z set
               S06:000010F0:  67 00 01 46
F00:1284                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:000010F4:  30 7C 01 03
F00:1285                   cmpi.b #$00,-(a0)
               S06:000010F8:  4A 20
F00:1286                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000010FA:  66 00 01 3C
F00:1287                   cmpi.b #$FC,-(a0)
               S06:000010FE:  0C 20 00 FC
F00:1288                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001102:  66 00 01 34
F00:1289                   cmpi.b #$00,-(a0)
               S06:00001106:  4A 20
F00:1290                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001108:  66 00 01 2E
F00:1291                       
F00:1292                   ; EA = n(An)  - BYTE only
F00:1293                   move.l #$00000100,a0      ; point to memory to address
               S06:0000110C:  30 7C 01 00
F00:1294                   move.b #$01,(a0)+         ; populate test data
               S06:00001110:  10 FC 00 01
F00:1295                   move.b #$FC,(a0)+         ; populate test data
               S06:00001114:  10 FC 00 FC
F00:1296                   move.b #$80,(a0)+         ; populate test data
               S06:00001118:  10 FC 00 80
F00:1297                   move.l #$00000100,a0      ; point to memory to address
               S06:0000111C:  30 7C 01 00
F00:1298                   bclr.b d5,0(a0)            
               S06:00001120:  0B 90
F00:1299                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001122:  67 00 01 14
F00:1300                   bclr.b d6,1(a0)           ; 
               S06:00001126:  0D A8 00 01
F00:1301                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000112A:  66 00 01 0C
F00:1302                   bclr.b d7,2(a0)           ; 
               S06:0000112E:  0F A8 00 02
F00:1303                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001132:  67 00 01 04
F00:1304                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001136:  30 7C 01 00
F00:1305                   cmpi.b #$00,(a0)+
               S06:0000113A:  4A 18
F00:1306                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000113C:  66 00 00 FA
F00:1307                   cmpi.b #$FC,(a0)+
               S06:00001140:  0C 18 00 FC
F00:1308                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001144:  66 00 00 F2
F00:1309                   cmpi.b #$00,(a0)+
               S06:00001148:  4A 18
F00:1310                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000114A:  66 00 00 EC
F00:1311                       
F00:1312                   ; EA = n(An,R.W)  - BYTE only
F00:1313                   move.l #$00000100,a0      ; point to memory to address
               S06:0000114E:  30 7C 01 00
F00:1314                   move.b #$FF,(a0)+         ; populate test data
               S06:00001152:  10 FC 00 FF
F00:1315                   move.b #$FF,(a0)+         ; populate test data
               S06:00001156:  10 FC 00 FF
F00:1316                   move.b #$FF,(a0)+         ; populate test data
               S06:0000115A:  10 FC 00 FF
F00:1317                   move.l #$00000103,a0      ; point to memory to address 
               S06:0000115E:  30 7C 01 03
F00:1318                   move.l #$00000100,a0      ; point to memory to address
               S06:00001162:  30 7C 01 00
F00:1319                   move.l #$00000000,a1      ; point to memory to address
               S06:00001166:  93 C9
F00:1320                   move.l #$00000001,a2      ; point to memory to address
               S06:00001168:  34 7C 00 01
F00:1321                   move.l #$00000000,d0      ; point to memory to address
               S06:0000116C:  70 00
F00:1322                   move.l #$00000001,d1      ; point to memory to address
               S06:0000116E:  72 01
F00:1323                   bclr.b d5,0(a0,d0.w)            
               S06:00001170:  0B B0 00 00
F00:1324                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001174:  67 00 00 C2
F00:1325                   bclr.b d6,0(a0,d1.w)      ; 
               S06:00001178:  0D B0 10 00
F00:1326                   beq BCLR_FAIL;               ; branch if Z set
               S06:0000117C:  67 00 00 BA
F00:1327                   bclr.b d7,1(a0,d1.w)      ; 
               S06:00001180:  0F B0 10 01
F00:1328                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001184:  67 00 00 B2
F00:1329                   ; EA = n(An,R.L)  - BYTE only
F00:1330                   bclr.b d5,0(a0,d0.l)  
               S06:00001188:  0B B0 08 00
F00:1331                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000118C:  66 00 00 AA
F00:1332                   bclr.b d6,0(a0,d1.l)      ; 
               S06:00001190:  0D B0 18 00
F00:1333                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001194:  66 00 00 A2
F00:1334                   bclr.b d7,1(a0,d1.l)      ; 
               S06:00001198:  0F B0 18 01
F00:1335                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:0000119C:  66 00 00 9A
F00:1336                   ; EA = n(An,A.W)  - BYTE only
F00:1337                   bclr.b d5,0(a0,a1.w)            
               S06:000011A0:  0B B0 90 00
F00:1338                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011A4:  66 00 00 92
F00:1339                   bclr.b d6,0(a0,a2.w)      ; 
               S06:000011A8:  0D B0 A0 00
F00:1340                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011AC:  66 00 00 8A
F00:1341                   bclr.b d7,1(a0,a2.w)      ; 
               S06:000011B0:  0F B0 A0 01
F00:1342                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011B4:  66 00 00 82
F00:1343                   ; EA = n(An,A.L)  - BYTE only
F00:1344                   bclr.b d5,0(a0,a1.l)  
               S06:000011B8:  0B B0 98 00
F00:1345                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011BC:  66 7A
F00:1346                   bclr.b d6,0(a0,a2.l)      ; 
               S06:000011BE:  0D B0 A8 00
F00:1347                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011C2:  66 74
F00:1348                   bclr.b d7,1(a0,a2.l)      ; 
               S06:000011C4:  0F B0 A8 01
F00:1349                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011C8:  66 6E
F00:1350                   move.l #$00000100,a0      ; point to memory to address 
               S06:000011CA:  30 7C 01 00
F00:1351                   cmpi.b #$FE,(a0)
               S06:000011CE:  0C 10 00 FE
F00:1352                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011D2:  66 64
F00:1353                   
F00:1354                   ; EA = x.W  - BYTE only
F00:1355                   move.l #$00000100,a0      ; point to memory to address
               S06:000011D4:  30 7C 01 00
F00:1356                   move.b #$FF,(a0)+         ; populate test data
               S06:000011D8:  10 FC 00 FF
F00:1357                   move.b #$FF,(a0)+         ; populate test data
               S06:000011DC:  10 FC 00 FF
F00:1358                   move.b #$FF,(a0)+         ; populate test data
               S06:000011E0:  10 FC 00 FF
F00:1359                   bclr.b d5,$0100            
               S06:000011E4:  0B B8 01 00
F00:1360                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011E8:  67 4E
F00:1361                   bclr.b d6,$0101           ; 
               S06:000011EA:  0D B8 01 01
F00:1362                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011EE:  67 48
F00:1363                   bclr.b d7,$0102           ; 
               S06:000011F0:  0F B8 01 02
F00:1364                   beq BCLR_FAIL;               ; branch if Z set
               S06:000011F4:  67 42
F00:1365                   move.l #$00000100,a0      ; point to memory to address
               S06:000011F6:  30 7C 01 00
F00:1366                   cmpi.b #$FE,(a0)+
               S06:000011FA:  0C 18 00 FE
F00:1367                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:000011FE:  66 38
F00:1368                           
F00:1369                   ; EA = x.L  - BYTE only
F00:1370                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001200:  20 7C 00 0F 01 00
F00:1371                   move.b #$01,(a0)+         ; populate test data
               S06:00001206:  10 FC 00 01
F00:1372                   move.b #$FC,(a0)+         ; populate test data
               S06:0000120A:  10 FC 00 FC
F00:1373                   move.b #$80,(a0)+         ; populate test data
               S06:0000120E:  10 FC 00 80
F00:1374                   bclr.b d5,$000F0100 
               S06:00001212:  0B B9 00 0F 01 00
F00:1375                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001218:  67 1E
F00:1376                   bclr.b d6,$000F0101       ; 
               S06:0000121A:  0D B9 00 0F 01 01
F00:1377                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001220:  66 16
F00:1378                   bclr.b d7,$000F0102       ; 
               S06:00001222:  0F B9 00 0F 01 02
F00:1379                   beq BCLR_FAIL;               ; branch if Z set
               S06:00001228:  67 0E
F00:1380                   move.l #$000F0101,a0      ; point to memory to address 0x100 
               S06:0000122A:  20 7C 00 0F 01 01
F00:1381                   cmpi.b #$FC,(a0)
               S06:00001230:  0C 10 00 FC
F00:1382                   bne BCLR_FAIL;               ; branch if Z clear  
               S06:00001234:  66 02
F00:1383                           
F00:1384       
F00:1385       
F00:1386           rts
               S06:00001236:  4E 75
F00:1387           
F00:1388       BCLR_FAIL: bra BCLR_FAIL;
               S06:00001238:  60 FE
F00:1389       
F00:1390       
F00:1391       
F00:1392       
F00:1393         
F00:1394       ;-----------------------------------------------------------
F00:1395       ;-----------------------------------------------------------
F00:1396       ; OPCODE : BSET
F00:1397       ;-----------------------------------------------------------
F00:1398       ;-----------------------------------------------------------
F00:1399       op_BSET: 
F00:1400       
F00:1401       
F00:1402       ;  Bit Number Static 
F00:1403           
F00:1404                   ; EA = Dn  - LONG only
F00:1405                   move.l #$00000000,d0      ; populate test data
               S06:0000123A:  70 00
F00:1406                   bset.l #0,d0              
               S06:0000123C:  08 C0 00 00
F00:1407                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001240:  66 00 04 38
F00:1408                   bset.l #1,d0              ; 
               S06:00001244:  08 C0 00 01
F00:1409                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001248:  66 00 04 30
F00:1410                   bset.l #15,d0             ; 
               S06:0000124C:  08 C0 00 0F
F00:1411                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001250:  66 00 04 28
F00:1412                   bset.l #31,d0             ; 
               S06:00001254:  08 C0 00 1F
F00:1413                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001258:  66 00 04 20
F00:1414                   cmpi.l #$80008003,d0
               S06:0000125C:  0C 80 80 00 80 03
F00:1415                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001262:  66 00 04 16
F00:1416       
F00:1417                   
F00:1418                   ; EA = (An)  - BYTE only
F00:1419                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001266:  30 7C 01 00
F00:1420                   move.b #$00,(a0)          ; populate test data
               S06:0000126A:  10 BC 00 00
F00:1421                   bset.b #0,(a0)            
               S06:0000126E:  08 D0 00 00
F00:1422                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001272:  66 00 04 06
F00:1423                   bset.b #7,(a0)            ; 
               S06:00001276:  08 D0 00 07
F00:1424                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000127A:  66 00 03 FE
F00:1425                   cmpi.b #$81,(a0)
               S06:0000127E:  0C 10 00 81
F00:1426                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001282:  66 00 03 F6
F00:1427                   
F00:1428                   ; EA = (An)+  - BYTE only
F00:1429                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001286:  30 7C 01 00
F00:1430                   move.b #$00,(a0)+         ; populate test data
               S06:0000128A:  10 FC 00 00
F00:1431                   move.b #$00,(a0)+         ; populate test data
               S06:0000128E:  10 FC 00 00
F00:1432                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001292:  30 7C 01 00
F00:1433                   bset.b #0,(a0)+            
               S06:00001296:  08 D8 00 00
F00:1434                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000129A:  66 00 03 DE
F00:1435                   bset.b #1,(a0)+           ; 
               S06:0000129E:  08 D8 00 01
F00:1436                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012A2:  66 00 03 D6
F00:1437                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000012A6:  30 7C 01 00
F00:1438                   cmpi.b #$01,(a0)+
               S06:000012AA:  0C 18 00 01
F00:1439                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012AE:  66 00 03 CA
F00:1440                   cmpi.b #$02,(a0)+
               S06:000012B2:  0C 18 00 02
F00:1441                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012B6:  66 00 03 C2
F00:1442        
F00:1443               
F00:1444                   ; EA = -(An)  - BYTE only
F00:1445                   move.l #$00000100,a0      ; point to memory to address
               S06:000012BA:  30 7C 01 00
F00:1446                   move.b #$00,(a0)+         ; populate test data
               S06:000012BE:  10 FC 00 00
F00:1447                   move.b #$00,(a0)+         ; populate test data
               S06:000012C2:  10 FC 00 00
F00:1448                   bset.b #7,-(a0)            
               S06:000012C6:  08 E0 00 07
F00:1449                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012CA:  66 00 03 AE
F00:1450                   bset.b #0,-(a0)           ; 
               S06:000012CE:  08 E0 00 00
F00:1451                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012D2:  66 00 03 A6
F00:1452                   move.l #$00000102,a0      ; point to memory to address 0x100 
               S06:000012D6:  30 7C 01 02
F00:1453                   cmpi.b #$80,-(a0)
               S06:000012DA:  0C 20 00 80
F00:1454                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012DE:  66 00 03 9A
F00:1455                   cmpi.b #$01,-(a0)
               S06:000012E2:  0C 20 00 01
F00:1456                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012E6:  66 00 03 92
F00:1457       
F00:1458               
F00:1459                   ; EA = n(An)  - BYTE only
F00:1460                   move.l #$00000100,a0      ; point to memory to address
               S06:000012EA:  30 7C 01 00
F00:1461                   move.b #$00,(a0)+         ; populate test data
               S06:000012EE:  10 FC 00 00
F00:1462                   move.b #$00,(a0)+         ; populate test data
               S06:000012F2:  10 FC 00 00
F00:1463                   move.l #$00000100,a0      ; point to memory to address
               S06:000012F6:  30 7C 01 00
F00:1464                   bset.b #0,0(a0)            
               S06:000012FA:  08 D0 00 00
F00:1465                   bne BSET_FAIL               ; branch if Z clear  
               S06:000012FE:  66 00 03 7A
F00:1466                   bset.b #4,1(a0)           ; 
               S06:00001302:  08 E8 00 04 00 01
F00:1467                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001308:  66 00 03 70
F00:1468                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000130C:  30 7C 01 00
F00:1469                   cmpi.b #$01,(a0)+
               S06:00001310:  0C 18 00 01
F00:1470                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001314:  66 00 03 64
F00:1471                   cmpi.b #$10,(a0)+
               S06:00001318:  0C 18 00 10
F00:1472                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000131C:  66 00 03 5C
F00:1473       
F00:1474                       
F00:1475                   ; EA = n(An,D.W)  - BYTE only
F00:1476                   move.l #$00000100,a0      ; point to memory to address
               S06:00001320:  30 7C 01 00
F00:1477                   move.l #$00000000,a1      ; point to memory to address
               S06:00001324:  93 C9
F00:1478                   move.l #$00000004,a2      ; point to memory to address
               S06:00001326:  34 7C 00 04
F00:1479                   move.l #$00000000,d0      ; point to memory to address
               S06:0000132A:  70 00
F00:1480                   move.l #$00000001,d1      ; point to memory to address
               S06:0000132C:  72 01
F00:1481                   move.b #$00,(a0)+         ; populate test data
               S06:0000132E:  10 FC 00 00
F00:1482                   move.b #$00,(a0)+         ; populate test data
               S06:00001332:  10 FC 00 00
F00:1483                   move.b #$00,(a0)+         ; populate test data
               S06:00001336:  10 FC 00 00
F00:1484                   move.b #$00,(a0)+         ; populate test data
               S06:0000133A:  10 FC 00 00
F00:1485                   move.b #$00,(a0)+         ; populate test data
               S06:0000133E:  10 FC 00 00
F00:1486                   move.b #$00,(a0)+         ; populate test data
               S06:00001342:  10 FC 00 00
F00:1487                   move.b #$00,(a0)+         ; populate test data
               S06:00001346:  10 FC 00 00
F00:1488                   move.b #$00,(a0)+         ; populate test data
               S06:0000134A:  10 FC 00 00
F00:1489                   move.b #$00,(a0)+         ; populate test data
               S06:0000134E:  10 FC 00 00
F00:1490                   move.b #$00,(a0)+         ; populate test data
               S06:00001352:  10 FC 00 00
F00:1491                   move.l #$00000100,a0      ; point to memory to address
               S06:00001356:  30 7C 01 00
F00:1492                   bset.b #0,0(a0,d0.w)            
               S06:0000135A:  08 F0 00 00 00 00
F00:1493                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001360:  66 00 03 18
F00:1494                   bset.b #1,0(a0,d1.w)      ; 
               S06:00001364:  08 F0 00 01 10 00
F00:1495                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000136A:  66 00 03 0E
F00:1496                   bset.b #2,1(a0,d1.w)      ; 
               S06:0000136E:  08 F0 00 02 10 01
F00:1497                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001374:  66 00 03 04
F00:1498                   ; EA = n(An,D.L)  - BYTE only
F00:1499                   bset.b #3,2(a0,d0.l)  
               S06:00001378:  08 F0 00 03 08 02
F00:1500                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000137E:  66 00 02 FA
F00:1501                   bset.b #4,0(a0,d1.l)      ; 
               S06:00001382:  08 F0 00 04 18 00
F00:1502                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001388:  66 00 02 F0
F00:1503                   bset.b #5,1(a0,d1.l)      ; 
               S06:0000138C:  08 F0 00 05 18 01
F00:1504                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001392:  66 00 02 E6
F00:1505                   ; EA = n(An,A.W)  - BYTE only
F00:1506                   bset.b #6,0(a0,a1.w)            
               S06:00001396:  08 F0 00 06 90 00
F00:1507                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000139C:  66 00 02 DC
F00:1508                   bset.b #1,0(a0,a2.w)      ; 
               S06:000013A0:  08 F0 00 01 A0 00
F00:1509                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013A6:  66 00 02 D2
F00:1510                   bset.b #7,1(a0,a2.w)      ; 
               S06:000013AA:  08 F0 00 07 A0 01
F00:1511                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013B0:  66 00 02 C8
F00:1512                   ; EA = n(An,A.L)  - BYTE only
F00:1513                   bset.b #0,2(a0,a2.l)  
               S06:000013B4:  08 F0 00 00 A8 02
F00:1514                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013BA:  66 00 02 BE
F00:1515                   bset.b #0,3(a0,a2.l)      ; 
               S06:000013BE:  08 F0 00 00 A8 03
F00:1516                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013C4:  66 00 02 B4
F00:1517                   bset.b #1,4(a0,a2.l)      ; 
               S06:000013C8:  08 F0 00 01 A8 04
F00:1518                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013CE:  66 00 02 AA
F00:1519                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000013D2:  30 7C 01 00
F00:1520                   cmpi.l #$41122C00,(a0)+
               S06:000013D6:  0C 98 41 12 2C 00
F00:1521                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013DC:  66 00 02 9C
F00:1522                   cmpi.l #$02800101,(a0)+
               S06:000013E0:  0C 98 02 80 01 01
F00:1523                   bne BSET_FAIL;
               S06:000013E6:  66 00 02 92
F00:1524        
F00:1525       
F00:1526               
F00:1527                   ; EA = x.W  - BYTE only
F00:1528                   move.l #$00000100,a0      ; point to memory to address
               S06:000013EA:  30 7C 01 00
F00:1529                   move.b #$00,(a0)+         ; populate test data
               S06:000013EE:  10 FC 00 00
F00:1530                   bset.b #0,$0100            
               S06:000013F2:  08 F8 00 00 01 00
F00:1531                   bne BSET_FAIL               ; branch if Z clear  
               S06:000013F8:  66 00 02 80
F00:1532                   bset.b #1,$0100           ; 
               S06:000013FC:  08 F8 00 01 01 00
F00:1533                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001402:  66 00 02 76
F00:1534                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001406:  30 7C 01 00
F00:1535                   cmpi.b #$03,(a0)+
               S06:0000140A:  0C 18 00 03
F00:1536                   bne BSET_FAIL;
               S06:0000140E:  66 00 02 6A
F00:1537       
F00:1538                   
F00:1539                   ; EA = x.L  - BYTE only
F00:1540                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001412:  20 7C 00 0F 01 00
F00:1541                   move.b #$00,(a0)          ; populate test data
               S06:00001418:  10 BC 00 00
F00:1542                   bset.b #0,$000F0100 
               S06:0000141C:  08 F9 00 00 00 0F 01 00
F00:1543                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001424:  66 00 02 54
F00:1544                   bset.b #1,$000F0100       ; 
               S06:00001428:  08 F9 00 01 00 0F 01 00
F00:1545                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001430:  66 00 02 48
F00:1546                   bset.b #2,$000F0100       ; 
               S06:00001434:  08 F9 00 02 00 0F 01 00
F00:1547                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000143C:  66 00 02 3C
F00:1548                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001440:  20 7C 00 0F 01 00
F00:1549                   cmpi.b #$07,(a0)+
               S06:00001446:  0C 18 00 07
F00:1550                   bne BSET_FAIL;
               S06:0000144A:  66 00 02 2E
F00:1551       
F00:1552       
F00:1553       ; Bit Number Dynamic
F00:1554           
F00:1555                   ; EA = Dn  - LONG only
F00:1556                   move.l #$00000000,d0      ; populate test data
               S06:0000144E:  70 00
F00:1557                   move.l #0,d5              ; populate bit number to test
               S06:00001450:  7A 00
F00:1558                   move.l #1,d6              ; populate bit number to test
               S06:00001452:  7C 01
F00:1559                   move.l #31,d7              ; populate bit number to test
               S06:00001454:  7E 1F
F00:1560                   
F00:1561                   bset.l d5,d0              
               S06:00001456:  0B C0
F00:1562                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001458:  66 00 02 20
F00:1563                   bset.l d6,d0              ; 
               S06:0000145C:  0D C0
F00:1564                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000145E:  66 00 02 1A
F00:1565                   bset.l d7,d0             ; 
               S06:00001462:  0F C0
F00:1566                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001464:  66 00 02 14
F00:1567                   cmpi.l #$80000003,d0
               S06:00001468:  0C 80 80 00 00 03
F00:1568                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000146E:  66 00 02 0A
F00:1569       
F00:1570                   
F00:1571                   ; EA = (An)  - BYTE only
F00:1572                   move.l #0,d5              ; populate bit number to test
               S06:00001472:  7A 00
F00:1573                   move.l #1,d6              ; populate bit number to test
               S06:00001474:  7C 01
F00:1574                   move.l #7,d7              ; populate bit number to test           
               S06:00001476:  7E 07
F00:1575                   move.l #$00000100,a0      ; point to memory to address 0x100
               S06:00001478:  30 7C 01 00
F00:1576                   move.b #$00,(a0)          ; populate test data
               S06:0000147C:  10 BC 00 00
F00:1577                   bset.b d5,(a0)            
               S06:00001480:  0B D0
F00:1578                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001482:  66 00 01 F6
F00:1579                   bset.b d6,(a0)            ; 
               S06:00001486:  0D D0
F00:1580                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001488:  66 00 01 F0
F00:1581                   bset.b d7,(a0)            ; 
               S06:0000148C:  0F D0
F00:1582                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000148E:  66 00 01 EA
F00:1583                   cmpi.b #$83,(a0)
               S06:00001492:  0C 10 00 83
F00:1584                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001496:  66 00 01 E2
F00:1585                   
F00:1586           
F00:1587                   ; EA = (An)+  - BYTE only
F00:1588                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:0000149A:  30 7C 01 00
F00:1589                   move.b #$00,(a0)+         ; populate test data
               S06:0000149E:  10 FC 00 00
F00:1590                   move.b #$00,(a0)+         ; populate test data
               S06:000014A2:  10 FC 00 00
F00:1591                   move.b #$00,(a0)+         ; populate test data
               S06:000014A6:  10 FC 00 00
F00:1592                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000014AA:  30 7C 01 00
F00:1593                   bset.b d5,(a0)+            
               S06:000014AE:  0B D8
F00:1594                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014B0:  66 00 01 C8
F00:1595                   bset.b d6,(a0)+           ; 
               S06:000014B4:  0D D8
F00:1596                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014B6:  66 00 01 C2
F00:1597                   bset.b d7,(a0)+           ; 
               S06:000014BA:  0F D8
F00:1598                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014BC:  66 00 01 BC
F00:1599                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:000014C0:  30 7C 01 00
F00:1600                   cmpi.b #$01,(a0)+
               S06:000014C4:  0C 18 00 01
F00:1601                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014C8:  66 00 01 B0
F00:1602                   cmpi.b #$02,(a0)+
               S06:000014CC:  0C 18 00 02
F00:1603                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014D0:  66 00 01 A8
F00:1604                   cmpi.b #$80,(a0)+
               S06:000014D4:  0C 18 00 80
F00:1605                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014D8:  66 00 01 A0
F00:1606                       
F00:1607                   ; EA = -(An)  - BYTE only
F00:1608                   move.l #$00000100,a0      ; point to memory to address
               S06:000014DC:  30 7C 01 00
F00:1609                   move.b #$00,(a0)+         ; populate test data
               S06:000014E0:  10 FC 00 00
F00:1610                   move.b #$00,(a0)+         ; populate test data
               S06:000014E4:  10 FC 00 00
F00:1611                   move.b #$00,(a0)+         ; populate test data
               S06:000014E8:  10 FC 00 00
F00:1612                   move.l #$00000103,a0      ; point to memory to address 
               S06:000014EC:  30 7C 01 03
F00:1613                   bset.b d5,-(a0)            
               S06:000014F0:  0B E0
F00:1614                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014F2:  66 00 01 86
F00:1615                   bset.b d6,-(a0)           ; 
               S06:000014F6:  0D E0
F00:1616                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014F8:  66 00 01 80
F00:1617                   bset.b d7,-(a0)           ; 
               S06:000014FC:  0F E0
F00:1618                   bne BSET_FAIL               ; branch if Z clear  
               S06:000014FE:  66 00 01 7A
F00:1619                   move.l #$00000103,a0      ; point to memory to address 0x100 
               S06:00001502:  30 7C 01 03
F00:1620                   cmpi.b #$01,-(a0)
               S06:00001506:  0C 20 00 01
F00:1621                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000150A:  66 00 01 6E
F00:1622                   cmpi.b #$02,-(a0)
               S06:0000150E:  0C 20 00 02
F00:1623                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001512:  66 00 01 66
F00:1624                   cmpi.b #$80,-(a0)
               S06:00001516:  0C 20 00 80
F00:1625                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000151A:  66 00 01 5E
F00:1626                       
F00:1627                   ; EA = n(An)  - BYTE only
F00:1628                   move.l #$00000100,a0      ; point to memory to address
               S06:0000151E:  30 7C 01 00
F00:1629                   move.b #$00,(a0)+         ; populate test data
               S06:00001522:  10 FC 00 00
F00:1630                   move.b #$00,(a0)+         ; populate test data
               S06:00001526:  10 FC 00 00
F00:1631                   move.b #$00,(a0)+         ; populate test data
               S06:0000152A:  10 FC 00 00
F00:1632                   move.l #$00000100,a0      ; point to memory to address
               S06:0000152E:  30 7C 01 00
F00:1633                   bset.b d5,0(a0)            
               S06:00001532:  0B D0
F00:1634                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001534:  66 00 01 44
F00:1635                   bset.b d6,1(a0)           ; 
               S06:00001538:  0D E8 00 01
F00:1636                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000153C:  66 00 01 3C
F00:1637                   bset.b d7,2(a0)           ; 
               S06:00001540:  0F E8 00 02
F00:1638                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001544:  66 00 01 34
F00:1639                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001548:  30 7C 01 00
F00:1640                   cmpi.b #$01,(a0)+
               S06:0000154C:  0C 18 00 01
F00:1641                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001550:  66 00 01 28
F00:1642                   cmpi.b #$02,(a0)+
               S06:00001554:  0C 18 00 02
F00:1643                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001558:  66 00 01 20
F00:1644                   cmpi.b #$80,(a0)+
               S06:0000155C:  0C 18 00 80
F00:1645                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001560:  66 00 01 18
F00:1646                       
F00:1647                   ; EA = n(An,R.W)  - BYTE only
F00:1648                   move.l #$00000100,a0      ; point to memory to address
               S06:00001564:  30 7C 01 00
F00:1649                   move.b #$00,(a0)+         ; populate test data
               S06:00001568:  10 FC 00 00
F00:1650                   move.b #$00,(a0)+         ; populate test data
               S06:0000156C:  10 FC 00 00
F00:1651                   move.b #$00,(a0)+         ; populate test data
               S06:00001570:  10 FC 00 00
F00:1652                   move.b #$00,(a0)+         ; populate test data
               S06:00001574:  10 FC 00 00
F00:1653                   move.b #$00,(a0)+         ; populate test data
               S06:00001578:  10 FC 00 00
F00:1654                   move.b #$00,(a0)+         ; populate test data
               S06:0000157C:  10 FC 00 00
F00:1655                   move.b #$00,(a0)+         ; populate test data
               S06:00001580:  10 FC 00 00
F00:1656                   move.b #$00,(a0)+         ; populate test data
               S06:00001584:  10 FC 00 00
F00:1657                   move.b #$00,(a0)+         ; populate test data
               S06:00001588:  10 FC 00 00
F00:1658                   move.b #$00,(a0)+         ; populate test data
               S06:0000158C:  10 FC 00 00
F00:1659                   move.b #$00,(a0)+         ; populate test data
               S06:00001590:  10 FC 00 00
F00:1660                   move.b #$00,(a0)+         ; populate test data
               S06:00001594:  10 FC 00 00
F00:1661                   move.l #$00000100,a0      ; point to memory to address
               S06:00001598:  30 7C 01 00
F00:1662                   move.l #$00000000,a1      ; point to memory to address
               S06:0000159C:  93 C9
F00:1663                   move.l #$00000001,a2      ; point to memory to address
               S06:0000159E:  34 7C 00 01
F00:1664                   move.l #$00000000,d0      ; point to memory to address
               S06:000015A2:  70 00
F00:1665                   move.l #$00000001,d1      ; point to memory to address
               S06:000015A4:  72 01
F00:1666                   bset.b d5,0(a0,d0.w)            
               S06:000015A6:  0B F0 00 00
F00:1667                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015AA:  66 00 00 CE
F00:1668                   bset.b d6,0(a0,d1.w)      ; 
               S06:000015AE:  0D F0 10 00
F00:1669                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015B2:  66 00 00 C6
F00:1670                   bset.b d7,1(a0,d1.w)      ; 
               S06:000015B6:  0F F0 10 01
F00:1671                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015BA:  66 00 00 BE
F00:1672                   ; EA = n(An,R.L)  - BYTE only
F00:1673                   bset.b d5,2(a0,d0.l)  
               S06:000015BE:  0B F0 08 02
F00:1674                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015C2:  66 00 00 B6
F00:1675                   bset.b d6,3(a0,d1.l)      ; 
               S06:000015C6:  0D F0 18 03
F00:1676                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015CA:  66 00 00 AE
F00:1677                   bset.b d7,4(a0,d1.l)      ; 
               S06:000015CE:  0F F0 18 04
F00:1678                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015D2:  66 00 00 A6
F00:1679                   ; EA = n(An,A.W)  - BYTE only
F00:1680                   bset.b d5,5(a0,a1.w)            
               S06:000015D6:  0B F0 90 05
F00:1681                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015DA:  66 00 00 9E
F00:1682                   bset.b d6,6(a0,a2.w)      ; 
               S06:000015DE:  0D F0 A0 06
F00:1683                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015E2:  66 00 00 96
F00:1684                   bset.b d7,7(a0,a2.w)      ; 
               S06:000015E6:  0F F0 A0 07
F00:1685                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015EA:  66 00 00 8E
F00:1686                   ; EA = n(An,A.L)  - BYTE only
F00:1687                   bset.b d5,8(a0,a1.l)  
               S06:000015EE:  0B F0 98 08
F00:1688                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015F2:  66 00 00 86
F00:1689                   bset.b d6,9(a0,a2.l)      ; 
               S06:000015F6:  0D F0 A8 09
F00:1690                   bne BSET_FAIL               ; branch if Z clear  
               S06:000015FA:  66 7E
F00:1691                   bset.b d7,10(a0,a2.l)      ; 
               S06:000015FC:  0F F0 A8 0A
F00:1692                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001600:  66 78
F00:1693                   move.l #$00000100,a0      ; point to memory to address 0x100 
               S06:00001602:  30 7C 01 00
F00:1694                   cmpi.l #$01028100,(a0)+
               S06:00001606:  0C 98 01 02 81 00
F00:1695                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000160C:  66 6C
F00:1696                   cmpi.l #$02810002,(a0)+
               S06:0000160E:  0C 98 02 81 00 02
F00:1697                   bne BSET_FAIL;
               S06:00001614:  66 64
F00:1698        
F00:1699                   
F00:1700                   ; EA = x.W  - BYTE only
F00:1701                   move.l #$00000100,a0      ; point to memory to address
               S06:00001616:  30 7C 01 00
F00:1702                   move.b #$00,(a0)+         ; populate test data
               S06:0000161A:  10 FC 00 00
F00:1703                   move.b #$00,(a0)+         ; populate test data
               S06:0000161E:  10 FC 00 00
F00:1704                   move.b #$00,(a0)+         ; populate test data
               S06:00001622:  10 FC 00 00
F00:1705                   bset.b d5,$0100            
               S06:00001626:  0B F8 01 00
F00:1706                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000162A:  66 4E
F00:1707                   bset.b d6,$0100           ; 
               S06:0000162C:  0D F8 01 00
F00:1708                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001630:  66 48
F00:1709                   bset.b d7,$0100           ; 
               S06:00001632:  0F F8 01 00
F00:1710                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001636:  66 42
F00:1711                   move.l #$00000100,a0      ; point to memory to address
               S06:00001638:  30 7C 01 00
F00:1712                   cmpi.b #$83,(a0)+
               S06:0000163C:  0C 18 00 83
F00:1713                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001640:  66 38
F00:1714                           
F00:1715                   ; EA = x.L  - BYTE only
F00:1716                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:00001642:  20 7C 00 0F 01 00
F00:1717                   move.b #$00,(a0)+         ; populate test data
               S06:00001648:  10 FC 00 00
F00:1718                   move.b #$00,(a0)+         ; populate test data
               S06:0000164C:  10 FC 00 00
F00:1719                   move.b #$00,(a0)+         ; populate test data
               S06:00001650:  10 FC 00 00
F00:1720                   bset.b d5,$000F0100 
               S06:00001654:  0B F9 00 0F 01 00
F00:1721                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000165A:  66 1E
F00:1722                   bset.b d6,$000F0100       ; 
               S06:0000165C:  0D F9 00 0F 01 00
F00:1723                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001662:  66 16
F00:1724                   bset.b d7,$000F0100       ; 
               S06:00001664:  0F F9 00 0F 01 00
F00:1725                   bne BSET_FAIL               ; branch if Z clear  
               S06:0000166A:  66 0E
F00:1726                   move.l #$000F0100,a0      ; point to memory to address 0x100 
               S06:0000166C:  20 7C 00 0F 01 00
F00:1727                   cmpi.b #$83,(a0)
               S06:00001672:  0C 10 00 83
F00:1728                   bne BSET_FAIL               ; branch if Z clear  
               S06:00001676:  66 02
F00:1729                           
F00:1730       
F00:1731           rts
               S06:00001678:  4E 75
F00:1732           
F00:1733       BSET_FAIL: bra BSET_FAIL
               S06:0000167A:  60 FE
F00:1734       
F00:1735       
F00:1736       ;-----------------------------------------------------------
F00:1737       ;-----------------------------------------------------------
F00:1738       ; OPCODE : MOVEP
F00:1739       ;-----------------------------------------------------------
F00:1740       ;-----------------------------------------------------------
F00:1741       op_MOVEP: 
F00:1742       
F00:1743       ; Dn --> x(An)
F00:1744                   move.l #$00000100,a0  
               S06:0000167C:  30 7C 01 00
F00:1745                   move.l #$12345678,d0  
               S06:00001680:  20 3C 12 34 56 78
F00:1746                   move.l #$AABBCCDD,d1  
               S06:00001686:  22 3C AA BB CC DD
F00:1747                   move.l #0,(a0)
               S06:0000168C:  20 BC 00 00 00 00
F00:1748                   move.l #0,4(a0)
               S06:00001692:  21 7C 00 00 00 00 00 04
F00:1749                   
F00:1750                   movep.w d0,0(a0)      ; even offset   
               S06:0000169A:  01 88 00 00
F00:1751                   movep.w d1,1(a0)      ; odd offset
               S06:0000169E:  03 88 00 01
F00:1752                   
F00:1753                   movep.l d0,4(a0)      ; even offset   
               S06:000016A2:  01 C8 00 04
F00:1754                   movep.l d1,5(a0)      ; odd offset
               S06:000016A6:  03 C8 00 05
F00:1755                   
F00:1756                   cmpi.l #$56CC78DD,(a0)
               S06:000016AA:  0C 90 56 CC 78 DD
F00:1757                   bne MOVEP_FAIL;
               S06:000016B0:  66 5E
F00:1758                   cmpi.l #$12AA34BB,4(a0)
               S06:000016B2:  0C A8 12 AA 34 BB 00 04
F00:1759                   bne MOVEP_FAIL;
               S06:000016BA:  66 54
F00:1760                   cmpi.l #$56CC78DD,8(a0)
               S06:000016BC:  0C A8 56 CC 78 DD 00 08
F00:1761                   bne MOVEP_FAIL;
               S06:000016C4:  66 4A
F00:1762                   
F00:1763                   
F00:1764       ; x(An)--> Dn
F00:1765                   move.l #$5a5a5a5a,d0  
               S06:000016C6:  20 3C 5A 5A 5A 5A
F00:1766                   move.l #$5a5a5a5a,d1  
               S06:000016CC:  22 3C 5A 5A 5A 5A
F00:1767                   move.l #$5a5a5a5a,d2  
               S06:000016D2:  24 3C 5A 5A 5A 5A
F00:1768                   move.l #$5a5a5a5a,d3  
               S06:000016D8:  26 3C 5A 5A 5A 5A
F00:1769                   
F00:1770                   movep.w 0(a0),d0      ; even offset   
               S06:000016DE:  01 08 00 00
F00:1771                   movep.w 1(a0),d1      ; odd offset
               S06:000016E2:  03 08 00 01
F00:1772                   
F00:1773                   movep.l 4(a0),d2      ; even offset   
               S06:000016E6:  05 48 00 04
F00:1774                   movep.l 5(a0),d3      ; odd offset
               S06:000016EA:  07 48 00 05
F00:1775                   
F00:1776                   cmpi.l #$5a5a5678,d0
               S06:000016EE:  0C 80 5A 5A 56 78
F00:1777                   bne MOVEP_FAIL;
               S06:000016F4:  66 1A
F00:1778                   cmpi.l #$5a5aCCDD,d1
               S06:000016F6:  0C 81 5A 5A CC DD
F00:1779                   bne MOVEP_FAIL;
               S06:000016FC:  66 12
F00:1780                   cmpi.l #$12345678,d2
               S06:000016FE:  0C 82 12 34 56 78
F00:1781                   bne MOVEP_FAIL;
               S06:00001704:  66 0A
F00:1782                   cmpi.l #$AABBCCDD,d3
               S06:00001706:  0C 83 AA BB CC DD
F00:1783                   bne MOVEP_FAIL;
               S06:0000170C:  66 02
F00:1784           
F00:1785                   rts
               S06:0000170E:  4E 75
F00:1786       
F00:1787       MOVEP_FAIL: bra MOVEP_FAIL
               S06:00001710:  60 FE
F00:1788       
F00:1789       ;-----------------------------------------------------------
F00:1790       ;-----------------------------------------------------------
F00:1791       ; OPCODE : BOOL_I
F00:1792       ;-----------------------------------------------------------
F00:1793       ;-----------------------------------------------------------
F00:1794       op_BOOL_I: 
F00:1795               
F00:1796           ; Dn -- BYTE
F00:1797                   move.l #$12345678,d0  
               S06:00001712:  20 3C 12 34 56 78
F00:1798                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001718:  44 FC 00 0F
F00:1799                   ori.b  #$FF,d0
               S06:0000171C:  00 00 00 FF
F00:1800                   eori.b #$5A,d0
               S06:00001720:  0A 00 00 5A
F00:1801                   and.b  #$F0,d0
               S06:00001724:  C0 3C 00 F0
F00:1802                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001728:  69 00 01 F6
F00:1803                   bcs BOOL_I_FAIL;
               S06:0000172C:  65 00 01 F2
F00:1804                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001730:  6A 00 01 EE
F00:1805                   and.b  #$00,d0
               S06:00001734:  C0 3C 00 00
F00:1806                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001738:  6B 00 01 E6
F00:1807                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000173C:  66 00 01 E2
F00:1808       
F00:1809           ; Dn -- WORD
F00:1810                   move.l #$12345678,d1  
               S06:00001740:  22 3C 12 34 56 78
F00:1811                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001746:  44 FC 00 0F
F00:1812                   ori.w  #$FFFF,d1
               S06:0000174A:  00 41 FF FF
F00:1813                   eori.w #$5A5A,d1
               S06:0000174E:  0A 41 5A 5A
F00:1814                   and.w  #$F0F0,d1
               S06:00001752:  C2 7C F0 F0
F00:1815                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:00001756:  69 00 01 C8
F00:1816                   bcs BOOL_I_FAIL;
               S06:0000175A:  65 00 01 C4
F00:1817                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000175E:  6A 00 01 C0
F00:1818                   and.w  #$0000,d1
               S06:00001762:  C2 7C 00 00
F00:1819                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001766:  6B 00 01 B8
F00:1820                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000176A:  66 00 01 B4
F00:1821       
F00:1822           ; Dn -- LONG
F00:1823                   move.l #$12345678,d2  
               S06:0000176E:  24 3C 12 34 56 78
F00:1824                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001774:  44 FC 00 0F
F00:1825                   ori.l  #$FFFFFFFF,d2
               S06:00001778:  00 82 FF FF FF FF
F00:1826                   eori.l #$5A5A5A5A,d2
               S06:0000177E:  0A 82 5A 5A 5A 5A
F00:1827                   and.l  #$F0F0F0F0,d2
               S06:00001784:  C4 BC F0 F0 F0 F0
F00:1828                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:0000178A:  69 00 01 94
F00:1829                   bcs BOOL_I_FAIL;
               S06:0000178E:  65 00 01 90
F00:1830                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001792:  6A 00 01 8C
F00:1831                   and.l  #$00000000,d2
               S06:00001796:  C4 BC 00 00 00 00
F00:1832                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:0000179C:  6B 00 01 82
F00:1833                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000017A0:  66 00 01 7E
F00:1834       
F00:1835           
F00:1836           ; (An) -- BYTE
F00:1837                   move.l #$00000100,a0  
               S06:000017A4:  30 7C 01 00
F00:1838                   move.l #$12345678,(a0)  
               S06:000017A8:  20 BC 12 34 56 78
F00:1839                   move.w #$000F,CCR          ; pre-set Flags
               S06:000017AE:  44 FC 00 0F
F00:1840                   ori.b  #$FF,(a0)
               S06:000017B2:  00 10 00 FF
F00:1841                   eori.b #$5A,(a0)
               S06:000017B6:  0A 10 00 5A
F00:1842                   and.b  #$F0,(a0)
               S06:000017BA:  02 10 00 F0
F00:1843                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:000017BE:  69 00 01 60
F00:1844                   bcs BOOL_I_FAIL;
               S06:000017C2:  65 00 01 5C
F00:1845                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000017C6:  6A 00 01 58
F00:1846                   and.b  #$00,(a0)
               S06:000017CA:  02 10 00 00
F00:1847                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000017CE:  6B 00 01 50
F00:1848                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000017D2:  66 00 01 4C
F00:1849                   cmpi.b #$00,(a0)
               S06:000017D6:  4A 10
F00:1850                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000017D8:  66 00 01 46
F00:1851                   
F00:1852           ; (An) -- WORD
F00:1853                   move.l #$12345678,(a0)  
               S06:000017DC:  20 BC 12 34 56 78
F00:1854                   move.w #$000F,CCR          ; pre-set Flags
               S06:000017E2:  44 FC 00 0F
F00:1855                   ori.w  #$FFFF,(a0)
               S06:000017E6:  00 50 FF FF
F00:1856                   eori.w #$5A5A,(a0)
               S06:000017EA:  0A 50 5A 5A
F00:1857                   and.w  #$F0F0,(a0)
               S06:000017EE:  02 50 F0 F0
F00:1858                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:000017F2:  69 00 01 2C
F00:1859                   bcs BOOL_I_FAIL;
               S06:000017F6:  65 00 01 28
F00:1860                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000017FA:  6A 00 01 24
F00:1861                   and.w  #$0000,(a0)
               S06:000017FE:  02 50 00 00
F00:1862                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001802:  6B 00 01 1C
F00:1863                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001806:  66 00 01 18
F00:1864                   cmpi.w #$00,(a0)
               S06:0000180A:  4A 50
F00:1865                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000180C:  66 00 01 12
F00:1866                   
F00:1867           ; (An) -- LONG
F00:1868                   move.l #$12345678,(a0)  
               S06:00001810:  20 BC 12 34 56 78
F00:1869                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001816:  44 FC 00 0F
F00:1870                   ori.l  #$FFFFFFFF,(a0)
               S06:0000181A:  00 90 FF FF FF FF
F00:1871                   eori.l #$5A5A5A5A,(a0)
               S06:00001820:  0A 90 5A 5A 5A 5A
F00:1872                   and.l  #$F0F0F0F0,(a0)
               S06:00001826:  02 90 F0 F0 F0 F0
F00:1873                   bvs BOOL_I_FAIL;                       ; Check V,C are cleared
               S06:0000182C:  69 00 00 F2
F00:1874                   bcs BOOL_I_FAIL;
               S06:00001830:  65 00 00 EE
F00:1875                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001834:  6A 00 00 EA
F00:1876                   and.l  #$00000000,(a0)
               S06:00001838:  02 90 00 00 00 00
F00:1877                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:0000183E:  6B 00 00 E0
F00:1878                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001842:  66 00 00 DC
F00:1879                   cmpi.l #$00,(a0)
               S06:00001846:  4A 90
F00:1880                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001848:  66 00 00 D6
F00:1881                   
F00:1882       
F00:1883       
F00:1884           ; (An)+ -- BYTE
F00:1885                   move.l #$00000100,a0  
               S06:0000184C:  30 7C 01 00
F00:1886                   move.l #$00A5FF88,(a0)  
               S06:00001850:  20 BC 00 A5 FF 88
F00:1887                   move.w #$000F,CCR          ; pre-set Flags
               S06:00001856:  44 FC 00 0F
F00:1888                   
F00:1889                   ori.b  #$F5,(a0)+
               S06:0000185A:  00 18 00 F5
F00:1890                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:0000185E:  6A 00 00 C0
F00:1891                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001862:  67 00 00 BC
F00:1892                   
F00:1893                   eori.b #$FF,(a0)+
               S06:00001866:  46 18
F00:1894                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:00001868:  6B 00 00 B6
F00:1895                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:0000186C:  67 00 00 B2
F00:1896                   
F00:1897                   and.b  #$AA,(a0)+
               S06:00001870:  02 18 00 AA
F00:1898                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001874:  6A 00 00 AA
F00:1899                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001878:  67 00 00 A6
F00:1900                   
F00:1901                   move.l #$00000100,a0  
               S06:0000187C:  30 7C 01 00
F00:1902                   cmpi.l #$F55AAA88,(a0)
               S06:00001880:  0C 90 F5 5A AA 88
F00:1903                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:00001886:  66 00 00 98
F00:1904                   
F00:1905                   
F00:1906           ; (An)+ -- WORD
F00:1907                   move.l #$00000100,a0  
               S06:0000188A:  30 7C 01 00
F00:1908                   move.l #$00000104,a1  
               S06:0000188E:  32 7C 01 04
F00:1909                   move.l #$00005a5a,(a0)  
               S06:00001892:  20 BC 00 00 5A 5A
F00:1910                   move.l #$12345678,(a1)  
               S06:00001898:  22 BC 12 34 56 78
F00:1911                   move.w #$000F,CCR          ; pre-set Flags
               S06:0000189E:  44 FC 00 0F
F00:1912                   
F00:1913                   ori.w  #$5678,(a0)+
               S06:000018A2:  00 58 56 78
F00:1914                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000018A6:  6B 78
F00:1915                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000018A8:  67 76
F00:1916                   
F00:1917                   eori.w #$FFFF,(a0)+
               S06:000018AA:  46 58
F00:1918                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000018AC:  6A 72
F00:1919                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000018AE:  67 70
F00:1920                   
F00:1921                   and.w  #$A55A,(a0)+
               S06:000018B0:  02 58 A5 5A
F00:1922                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000018B4:  6B 6A
F00:1923                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000018B6:  67 68
F00:1924                   
F00:1925                   move.l #$00000100,a0  
               S06:000018B8:  30 7C 01 00
F00:1926                   cmpi.l #$5678a5a5,(a0)
               S06:000018BC:  0C 90 56 78 A5 A5
F00:1927                   move.l #$00000104,a0  
               S06:000018C2:  30 7C 01 04
F00:1928                   cmpi.l #$00105678,(a0)
               S06:000018C6:  0C 90 00 10 56 78
F00:1929                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:000018CC:  66 52
F00:1930                   
F00:1931           ; (An)+ -- LONG
F00:1932                   move.l #$00000100,a0  
               S06:000018CE:  30 7C 01 00
F00:1933                   move.l #$00000000,(a0)+  
               S06:000018D2:  20 FC 00 00 00 00
F00:1934                   move.l #$5a5a5a5a,(a0)+  
               S06:000018D8:  20 FC 5A 5A 5A 5A
F00:1935                   move.l #$FFFFFFFF,(a0)+  
               S06:000018DE:  20 FC FF FF FF FF
F00:1936                   move.l #$00000100,a0  
               S06:000018E4:  30 7C 01 00
F00:1937                   move.w #$000F,CCR          ; pre-set Flags
               S06:000018E8:  44 FC 00 0F
F00:1938                   
F00:1939                   ori.l  #$12345678,(a0)+
               S06:000018EC:  00 98 12 34 56 78
F00:1940                   bmi BOOL_I_FAIL;                       ; Verify if N flag is cleared
               S06:000018F2:  6B 2C
F00:1941                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000018F4:  67 2A
F00:1942                   
F00:1943                   eori.l #$FFFFFFFF,(a0)+
               S06:000018F6:  46 98
F00:1944                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:000018F8:  6A 26
F00:1945                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:000018FA:  67 24
F00:1946                   
F00:1947                   and.l  #$A5A5A55A,(a0)+
               S06:000018FC:  02 98 A5 A5 A5 5A
F00:1948                   bpl BOOL_I_FAIL;                       ; Verify if N flag is set
               S06:00001902:  6A 1C
F00:1949                   beq BOOL_I_FAIL;                       ; Verify if Z flag is cleared
               S06:00001904:  67 1A
F00:1950                   
F00:1951                   move.l #$00000100,a0  
               S06:00001906:  30 7C 01 00
F00:1952                   cmpi.l #$12345678,(a0)+
               S06:0000190A:  0C 98 12 34 56 78
F00:1953                   cmpi.l #$a5a5a5a5,(a0)+
               S06:00001910:  0C 98 A5 A5 A5 A5
F00:1954                   cmpi.l #$a5a5a55a,(a0)+
               S06:00001916:  0C 98 A5 A5 A5 5A
F00:1955                   bne BOOL_I_FAIL;                       ; Verify if Z flag is set
               S06:0000191C:  66 02
F00:1956                   
F00:1957                   rts
               S06:0000191E:  4E 75
F00:1958       
F00:1959       BOOL_I_FAIL: bra BOOL_I_FAIL
               S06:00001920:  60 FE
F00:1960       
F00:1961       ;-----------------------------------------------------------
F00:1962       ;-----------------------------------------------------------
F00:1963       ; OPCODE : BSR
F00:1964       ;-----------------------------------------------------------
F00:1965       ;-----------------------------------------------------------
F00:1966       
F00:1967            
F00:1968       BSR_CLOSE1:     move.l #$11111111,d1
               S06:00001922:  22 3C 11 11 11 11
F00:1969                       rts
               S06:00001928:  4E 75
F00:1970        
F00:1971       
F00:1972       
F00:1973       op_BSR:         bsr.s BSR_CLOSE1        ; Negative 8-bit displacement
               S06:0000192A:  61 F6
F00:1974                       bsr.s BSR_CLOSE2        ; Positive 8-bit displacement
               S06:0000192C:  61 2A
F00:1975                       bsr.w BSR_FAR1          ; Negative 16-bit displacement
               S06:0000192E:  61 00 EB CE
F00:1976                       bsr.w BSR_FAR2          ; Positive 16-bit displacement
               S06:00001932:  61 00 18 C2
F00:1977                       
F00:1978                       cmpi.l #$11111111,d1
               S06:00001936:  0C 81 11 11 11 11
F00:1979                       bne BSR_FAIL;
               S06:0000193C:  66 22
F00:1980                       cmpi.l #$22222222,d2
               S06:0000193E:  0C 82 22 22 22 22
F00:1981                       bne BSR_FAIL;
               S06:00001944:  66 1A
F00:1982                       cmpi.l #$33333333,d3
               S06:00001946:  0C 83 33 33 33 33
F00:1983                       bne BSR_FAIL;
               S06:0000194C:  66 12
F00:1984                       cmpi.l #$44444444,d4
               S06:0000194E:  0C 84 44 44 44 44
F00:1985                       bne BSR_FAIL;
               S06:00001954:  66 0A
F00:1986                          
F00:1987                       rts   
               S06:00001956:  4E 75
F00:1988                       
F00:1989                       
F00:1990       BSR_CLOSE2:     move.l #$22222222,d2
               S06:00001958:  24 3C 22 22 22 22
F00:1991                       rts
               S06:0000195E:  4E 75
F00:1992       
F00:1993       BSR_FAIL: bra BSR_FAIL
               S06:00001960:  60 FE
F00:1994       
F00:1995       ;-----------------------------------------------------------
F00:1996       ;-----------------------------------------------------------
F00:1997       ; OPCODE : op_CMP_I
F00:1998       ;-----------------------------------------------------------
F00:1999       ;-----------------------------------------------------------
F00:2000       op_CMP_I: 
F00:2001       
F00:2002                   move.l #$00000100,a0 
               S06:00001962:  30 7C 01 00
F00:2003                   move.l #$00000100,(a0) 
               S06:00001966:  20 BC 00 00 01 00
F00:2004        
F00:2005           ; REGISTER - BYTE
F00:2006                   move.l #$FFFFFF80,d0  
               S06:0000196C:  70 80
F00:2007                   cmpi.b #$80,d0
               S06:0000196E:  0C 00 00 80
F00:2008                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001972:  66 00 02 6A
F00:2009                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001976:  6B 00 02 66
F00:2010                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:0000197A:  65 00 02 62
F00:2011                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:0000197E:  69 00 02 5E
F00:2012                   
F00:2013                   move.l #$FFFFF000,d1  
               S06:00001982:  22 3C FF FF F0 00
F00:2014                   cmpi.b #$00,d1
               S06:00001988:  4A 01
F00:2015                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000198A:  66 00 02 52
F00:2016                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000198E:  6B 00 02 4E
F00:2017                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001992:  65 00 02 4A
F00:2018                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001996:  69 00 02 46
F00:2019                   
F00:2020                   move.l #$FFFFFF02,d2  
               S06:0000199A:  74 81 D4 42
F00:2021                   cmpi.b #$FF,d2
               S06:0000199E:  0C 02 00 FF
F00:2022                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000019A2:  67 00 02 3A
F00:2023                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000019A6:  6B 00 02 36
F00:2024                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000019AA:  64 00 02 32
F00:2025                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000019AE:  69 00 02 2E
F00:2026                       
F00:2027                   move.l #$FFFFFF7F,d3  
               S06:000019B2:  26 3C FF FF FF 7F
F00:2028                   cmpi.b #$FF,d3
               S06:000019B8:  0C 03 00 FF
F00:2029                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000019BC:  67 00 02 20
F00:2030                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl  #FIXME
               S06:000019C0:  6A 00 02 1C
F00:2031                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000019C4:  64 00 02 18
F00:2032                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000019C8:  68 00 02 14
F00:2033                
F00:2034                
F00:2035           ; REGISTER - WORD
F00:2036                   move.l #$FFFF8000,d0  
               S06:000019CC:  20 3C FF FF 80 00
F00:2037                   cmpi.w #$8000,d0
               S06:000019D2:  0C 40 80 00
F00:2038                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000019D6:  66 00 02 06
F00:2039                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000019DA:  6B 00 02 02
F00:2040                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000019DE:  65 00 01 FE
F00:2041                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000019E2:  69 00 01 FA
F00:2042                   
F00:2043                   move.l #$FFF00000,d1  
               S06:000019E6:  22 3C FF F0 00 00
F00:2044                   cmpi.w #$0000,d1
               S06:000019EC:  4A 41
F00:2045                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:000019EE:  66 00 01 EE
F00:2046                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000019F2:  6B 00 01 EA
F00:2047                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:000019F6:  65 00 01 E6
F00:2048                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:000019FA:  69 00 01 E2
F00:2049                   
F00:2050                   move.l #$FFFF0002,d2  
               S06:000019FE:  24 3C FF FF 00 02
F00:2051                   cmpi.w #$FFFF,d2
               S06:00001A04:  0C 42 FF FF
F00:2052                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A08:  67 00 01 D4
F00:2053                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A0C:  6B 00 01 D0
F00:2054                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A10:  64 00 01 CC
F00:2055                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A14:  69 00 01 C8
F00:2056                       
F00:2057                   move.l #$FFFF7FFF,d3  
               S06:00001A18:  26 3C FF FF 7F FF
F00:2058                   cmpi.w #$FFFF,d3
               S06:00001A1E:  0C 43 FF FF
F00:2059                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A22:  67 00 01 BA
F00:2060                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A26:  6A 00 01 B6
F00:2061                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A2A:  64 00 01 B2
F00:2062                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A2E:  68 00 01 AE
F00:2063                   
F00:2064           ; REGISTER - LONG
F00:2065                   move.l #$80000000,d0  
               S06:00001A32:  20 3C 80 00 00 00
F00:2066                   cmpi.l #$80000000,d0
               S06:00001A38:  0C 80 80 00 00 00
F00:2067                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A3E:  66 00 01 9E
F00:2068                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A42:  6B 00 01 9A
F00:2069                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A46:  65 00 01 96
F00:2070                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A4A:  69 00 01 92
F00:2071                   
F00:2072                   move.l #$00000000,d1  
               S06:00001A4E:  72 00
F00:2073                   cmpi.l #$00000000,d1
               S06:00001A50:  4A 81
F00:2074                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A52:  66 00 01 8A
F00:2075                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A56:  6B 00 01 86
F00:2076                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A5A:  65 00 01 82
F00:2077                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A5E:  69 00 01 7E
F00:2078                   
F00:2079                   move.l #$00000002,d2  
               S06:00001A62:  74 02
F00:2080                   cmpi.l #$FFFFFFFF,d2
               S06:00001A64:  0C 82 FF FF FF FF
F00:2081                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A6A:  67 00 01 72
F00:2082                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A6E:  6B 00 01 6E
F00:2083                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A72:  64 00 01 6A
F00:2084                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A76:  69 00 01 66
F00:2085                       
F00:2086                   move.l #$7FFFFFFF,d3  
               S06:00001A7A:  26 3C 7F FF FF FF
F00:2087                   cmpi.l #$FFFFFFFF,d3
               S06:00001A80:  0C 83 FF FF FF FF
F00:2088                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001A86:  67 00 01 56
F00:2089                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001A8A:  6A 00 01 52
F00:2090                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001A8E:  64 00 01 4E
F00:2091                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001A92:  68 00 01 4A
F00:2092                   
F00:2093                   
F00:2094                   
F00:2095       
F00:2096           ; EA=x(An,Dn) - BYTE
F00:2097                   move.l #$00000100,a0  
               S06:00001A96:  30 7C 01 00
F00:2098                   move.l #$00000004,d7  
               S06:00001A9A:  7E 04
F00:2099                   
F00:2100                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001A9C:  21 BC FF FF FF 80 70 0C
F00:2101                   move.l #$FFFFFF80,12(a0,d7)
               S06:00001AA4:  21 BC FF FF FF 80 70 0C
F00:2102                   cmpi.b #$80,15(a0,d7)
               S06:00001AAC:  0C 30 00 80 70 0F
F00:2103                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001AB2:  66 00 01 2A
F00:2104                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AB6:  6B 00 01 26
F00:2105                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001ABA:  65 00 01 22
F00:2106                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001ABE:  69 00 01 1E
F00:2107                   
F00:2108                   move.l #$FFFFF000,12(a0,d7)
               S06:00001AC2:  21 BC FF FF F0 00 70 0C
F00:2109                   cmpi.b #$00,15(a0,d7)
               S06:00001ACA:  4A 30 70 0F
F00:2110                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001ACE:  66 00 01 0E
F00:2111                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AD2:  6B 00 01 0A
F00:2112                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001AD6:  65 00 01 06
F00:2113                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001ADA:  69 00 01 02
F00:2114                   
F00:2115                   move.l #$FFFFFF02,12(a0,d7)
               S06:00001ADE:  21 BC FF FF FF 02 70 0C
F00:2116                   cmpi.b #$FF,15(a0,d7)
               S06:00001AE6:  0C 30 00 FF 70 0F
F00:2117                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001AEC:  67 00 00 F0
F00:2118                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001AF0:  6B 00 00 EC
F00:2119                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001AF4:  64 00 00 E8
F00:2120                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001AF8:  69 00 00 E4
F00:2121                       
F00:2122                   move.l #$FFFFFF7F,12(a0,d7)
               S06:00001AFC:  21 BC FF FF FF 7F 70 0C
F00:2123                   cmpi.b #$FF,15(a0,d7)
               S06:00001B04:  0C 30 00 FF 70 0F
F00:2124                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B0A:  67 00 00 D2
F00:2125                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B0E:  6A 00 00 CE
F00:2126                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B12:  64 00 00 CA
F00:2127                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B16:  68 00 00 C6
F00:2128                
F00:2129                
F00:2130           ; EA=x(An,Dn) - WORD
F00:2131                   move.l #$FFFF8000,12(a0,d7)
               S06:00001B1A:  21 BC FF FF 80 00 70 0C
F00:2132                   cmpi.w #$8000,14(a0,d7)
               S06:00001B22:  0C 70 80 00 70 0E
F00:2133                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B28:  66 00 00 B4
F00:2134                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B2C:  6B 00 00 B0
F00:2135                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B30:  65 00 00 AC
F00:2136                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B34:  69 00 00 A8
F00:2137                   
F00:2138                   move.l #$FFF00000,12(a0,d7)
               S06:00001B38:  21 BC FF F0 00 00 70 0C
F00:2139                   cmpi.w #$0000,14(a0,d7)
               S06:00001B40:  4A 70 70 0E
F00:2140                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B44:  66 00 00 98
F00:2141                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B48:  6B 00 00 94
F00:2142                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B4C:  65 00 00 90
F00:2143                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B50:  69 00 00 8C
F00:2144                   
F00:2145                   move.l #$FFFF0002,12(a0,d7)
               S06:00001B54:  21 BC FF FF 00 02 70 0C
F00:2146                   cmpi.w #$FFFF,14(a0,d7)
               S06:00001B5C:  0C 70 FF FF 70 0E
F00:2147                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B62:  67 7A
F00:2148                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B64:  6B 78
F00:2149                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B66:  64 76
F00:2150                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B68:  69 74
F00:2151                       
F00:2152                   move.l #$FFFF7FFF,12(a0,d7)
               S06:00001B6A:  21 BC FF FF 7F FF 70 0C
F00:2153                   cmpi.w #$FFFF,14(a0,d7)
               S06:00001B72:  0C 70 FF FF 70 0E
F00:2154                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B78:  67 64
F00:2155                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B7A:  6A 62
F00:2156                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B7C:  64 60
F00:2157                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B7E:  68 5E
F00:2158                   
F00:2159           ; EA=x(An,Dn) - LONG
F00:2160                   move.l #$80000000,12(a0,d7)
               S06:00001B80:  21 BC 80 00 00 00 70 0C
F00:2161                   cmpi.l #$80000000,12(a0,d7)
               S06:00001B88:  0C B0 80 00 00 00 70 0C
F00:2162                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001B90:  66 4C
F00:2163                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001B92:  6B 4A
F00:2164                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001B94:  65 48
F00:2165                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001B96:  69 46
F00:2166                   
F00:2167                   move.l #$00000000,12(a0,d7)
               S06:00001B98:  21 BC 00 00 00 00 70 0C
F00:2168                   cmpi.l #$00000000,12(a0,d7)
               S06:00001BA0:  4A B0 70 0C
F00:2169                   bne CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BA4:  66 38
F00:2170                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BA6:  6B 36
F00:2171                   bcs CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BA8:  65 34
F00:2172                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BAA:  69 32
F00:2173                   
F00:2174                   move.l #$00000002,12(a0,d7)
               S06:00001BAC:  21 BC 00 00 00 02 70 0C
F00:2175                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:00001BB4:  0C B0 FF FF FF FF 70 0C
F00:2176                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BBC:  67 20
F00:2177                   bmi CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BBE:  6B 1E
F00:2178                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BC0:  64 1C
F00:2179                   bvs CMP_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BC2:  69 1A
F00:2180                       
F00:2181                   move.l #$7FFFFFFF,12(a0,d7)
               S06:00001BC4:  21 BC 7F FF FF FF 70 0C
F00:2182                   cmpi.l #$FFFFFFFF,12(a0,d7)
               S06:00001BCC:  0C B0 FF FF FF FF 70 0C
F00:2183                   beq CMP_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BD4:  67 08
F00:2184                   bpl CMP_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BD6:  6A 06
F00:2185                   bcc CMP_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BD8:  64 04
F00:2186                   bvc CMP_I_FAIL;                       ; Check V Flag  bvc/bvs     
               S06:00001BDA:  68 02
F00:2187                   
F00:2188                   rts
               S06:00001BDC:  4E 75
F00:2189                   
F00:2190       CMP_I_FAIL: bra CMP_I_FAIL
               S06:00001BDE:  60 FE
F00:2191         
F00:2192       ;-----------------------------------------------------------
F00:2193       ;-----------------------------------------------------------
F00:2194       ; OPCODE : ADD_I
F00:2195       ;-----------------------------------------------------------
F00:2196       ;-----------------------------------------------------------
F00:2197       op_ADD_I: 
F00:2198           
F00:2199           ; EA = Dn  - Byte
F00:2200                   move.l #$12345678,d0      ; populate test data
               S06:00001BE0:  20 3C 12 34 56 78
F00:2201                   addi.b #0,d0                          
               S06:00001BE6:  06 00 00 00
F00:2202                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BEA:  67 00 01 EC
F00:2203                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001BEE:  6B 00 01 E8
F00:2204                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001BF2:  65 00 01 E4
F00:2205                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001BF6:  69 00 01 E0
F00:2206                   addi.b #$10,d0                            
               S06:00001BFA:  06 00 00 10
F00:2207                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001BFE:  67 00 01 D8
F00:2208                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C02:  6A 00 01 D4
F00:2209                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C06:  65 00 01 D0
F00:2210                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C0A:  68 00 01 CC
F00:2211                   addi.b #$A5,d0                            
               S06:00001C0E:  06 00 00 A5
F00:2212                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C12:  67 00 01 C4
F00:2213                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C16:  6B 00 01 C0
F00:2214                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C1A:  64 00 01 BC
F00:2215                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C1E:  68 00 01 B8
F00:2216                   cmpi.b #$2D,d0                            
               S06:00001C22:  0C 00 00 2D
F00:2217                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C26:  66 00 01 B0
F00:2218                   
F00:2219           ; EA = Dn  - WORD
F00:2220                   move.l #$12345678,d0      ; populate test data
               S06:00001C2A:  20 3C 12 34 56 78
F00:2221                   addi.w #0,d0                          
               S06:00001C30:  06 40 00 00
F00:2222                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C34:  67 00 01 A2
F00:2223                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C38:  6B 00 01 9E
F00:2224                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C3C:  65 00 01 9A
F00:2225                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C40:  69 00 01 96
F00:2226                   addi.w #$7000,d0                          
               S06:00001C44:  06 40 70 00
F00:2227                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C48:  67 00 01 8E
F00:2228                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C4C:  6A 00 01 8A
F00:2229                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C50:  65 00 01 86
F00:2230                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C54:  68 00 01 82
F00:2231                   addi.w #$A55A,d0                          
               S06:00001C58:  06 40 A5 5A
F00:2232                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C5C:  67 00 01 7A
F00:2233                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C60:  6B 00 01 76
F00:2234                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C64:  64 00 01 72
F00:2235                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C68:  68 00 01 6E
F00:2236                   cmpi.w #$6BD2,d0                          
               S06:00001C6C:  0C 40 6B D2
F00:2237                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C70:  66 00 01 66
F00:2238           
F00:2239           ; EA = Dn  - LONG
F00:2240                   move.l #$12345678,d0      ; populate test data
               S06:00001C74:  20 3C 12 34 56 78
F00:2241                   addi.l #0,d0                          
               S06:00001C7A:  06 80 00 00 00 00
F00:2242                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C80:  67 00 01 56
F00:2243                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C84:  6B 00 01 52
F00:2244                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C88:  65 00 01 4E
F00:2245                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001C8C:  69 00 01 4A
F00:2246                   addi.l #$F0000000,d0                          
               S06:00001C90:  06 80 F0 00 00 00
F00:2247                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001C96:  67 00 01 40
F00:2248                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001C9A:  6B 00 01 3C
F00:2249                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001C9E:  64 00 01 38
F00:2250                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CA2:  69 00 01 34
F00:2251                   addi.l #$855AA55A,d0                          
               S06:00001CA6:  06 80 85 5A A5 5A
F00:2252                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CAC:  67 00 01 2A
F00:2253                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001CB0:  6A 00 01 26
F00:2254                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CB4:  65 00 01 22
F00:2255                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CB8:  69 00 01 1E
F00:2256                   addi.l #$A0000000,d0                          
               S06:00001CBC:  06 80 A0 00 00 00
F00:2257                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CC2:  68 00 01 14
F00:2258                   cmpi.l #$278EFBD2,d0                          
               S06:00001CC6:  0C 80 27 8E FB D2
F00:2259                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CCC:  66 00 01 0A
F00:2260           
F00:2261           
F00:2262       
F00:2263           ; EA = x.L  - Byte
F00:2264                   move.l #$000F0100,a0      ; populate test data
               S06:00001CD0:  20 7C 00 0F 01 00
F00:2265                   move.l #$12345678,(a0)     ; populate test data
               S06:00001CD6:  20 BC 12 34 56 78
F00:2266                   addi.b #0,$000F0103                           
               S06:00001CDC:  06 39 00 00 00 0F 01 03
F00:2267                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CE4:  67 00 00 F2
F00:2268                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001CE8:  6B 00 00 EE
F00:2269                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001CEC:  65 00 00 EA
F00:2270                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001CF0:  69 00 00 E6
F00:2271                   addi.b #$10,$000F0103                         
               S06:00001CF4:  06 39 00 10 00 0F 01 03
F00:2272                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001CFC:  67 00 00 DA
F00:2273                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D00:  6A 00 00 D6
F00:2274                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D04:  65 00 00 D2
F00:2275                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D08:  68 00 00 CE
F00:2276                   addi.b #$A5,$000F0103                         
               S06:00001D0C:  06 39 00 A5 00 0F 01 03
F00:2277                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D14:  67 00 00 C2
F00:2278                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D18:  6B 00 00 BE
F00:2279                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D1C:  64 00 00 BA
F00:2280                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D20:  68 00 00 B6
F00:2281                   cmpi.b #$2D,$000F0103                         
               S06:00001D24:  0C 39 00 2D 00 0F 01 03
F00:2282                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D2C:  66 00 00 AA
F00:2283                   
F00:2284           ; EA = x.L- WORD
F00:2285                   move.l #$000F0100,a0      ; populate test data
               S06:00001D30:  20 7C 00 0F 01 00
F00:2286                   move.l #$12345678,(a0)     ; populate test data
               S06:00001D36:  20 BC 12 34 56 78
F00:2287                   addi.w #0,$000F0100                           
               S06:00001D3C:  06 79 00 00 00 0F 01 00
F00:2288                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D44:  67 00 00 92
F00:2289                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D48:  6B 00 00 8E
F00:2290                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D4C:  65 00 00 8A
F00:2291                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D50:  69 00 00 86
F00:2292                   addi.w #$7000,$000F0100                           
               S06:00001D54:  06 79 70 00 00 0F 01 00
F00:2293                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D5C:  67 7A
F00:2294                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D5E:  6A 78
F00:2295                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D60:  65 76
F00:2296                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D62:  68 74
F00:2297                   addi.w #$A55A,$000F0100                           
               S06:00001D64:  06 79 A5 5A 00 0F 01 00
F00:2298                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D6C:  67 6A
F00:2299                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D6E:  6B 68
F00:2300                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D70:  64 66
F00:2301                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D72:  68 64
F00:2302                   cmpi.w #$278E,$000F0100                           
               S06:00001D74:  0C 79 27 8E 00 0F 01 00
F00:2303                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D7C:  66 5A
F00:2304           
F00:2305           ; EA = x.L- LONG
F00:2306                   move.l #$12345678,$000F0100  ; populate test data
               S06:00001D7E:  23 FC 12 34 56 78 00 0F 01 00
F00:2307                   addi.l #0,$000F0100                           
               S06:00001D88:  06 B9 00 00 00 00 00 0F 01 00
F00:2308                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001D92:  67 44
F00:2309                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001D94:  6B 42
F00:2310                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001D96:  65 40
F00:2311                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001D98:  69 3E
F00:2312                   addi.l #$F0000000,$000F0100                           
               S06:00001D9A:  06 B9 F0 00 00 00 00 0F 01 00
F00:2313                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DA4:  67 32
F00:2314                   bmi ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DA6:  6B 30
F00:2315                   bcc ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DA8:  64 2E
F00:2316                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DAA:  69 2C
F00:2317                   addi.l #$855AA55A,$000F0100                           
               S06:00001DAC:  06 B9 85 5A A5 5A 00 0F 01 00
F00:2318                   beq ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DB6:  67 20
F00:2319                   bpl ADD_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DB8:  6A 1E
F00:2320                   bcs ADD_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DBA:  65 1C
F00:2321                   bvs ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DBC:  69 1A
F00:2322                   addi.l #$A0000000,$000F0100                           
               S06:00001DBE:  06 B9 A0 00 00 00 00 0F 01 00
F00:2323                   bvc ADD_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DC8:  68 0E
F00:2324                   cmpi.l #$278EFBD2,$000F0100                           
               S06:00001DCA:  0C B9 27 8E FB D2 00 0F 01 00
F00:2325                   bne ADD_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DD4:  66 02
F00:2326           
F00:2327                   rts
               S06:00001DD6:  4E 75
F00:2328       
F00:2329       ADD_I_FAIL: bra ADD_I_FAIL
               S06:00001DD8:  60 FE
F00:2330       
F00:2331       ;-----------------------------------------------------------
F00:2332       ;-----------------------------------------------------------
F00:2333       ; OPCODE : SUB_I
F00:2334       ;-----------------------------------------------------------
F00:2335       ;-----------------------------------------------------------
F00:2336       op_SUB_I: 
F00:2337           
F00:2338           ; EA = Dn  - Byte
F00:2339                   move.l #$12345678,d0      ; populate test data
               S06:00001DDA:  20 3C 12 34 56 78
F00:2340                   subi.b #0,d0                          
               S06:00001DE0:  04 00 00 00
F00:2341                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DE4:  67 00 01 EC
F00:2342                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DE8:  6B 00 01 E8
F00:2343                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001DEC:  65 00 01 E4
F00:2344                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001DF0:  69 00 01 E0
F00:2345                   subi.b #$10,d0                            
               S06:00001DF4:  04 00 00 10
F00:2346                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001DF8:  67 00 01 D8
F00:2347                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001DFC:  6B 00 01 D4
F00:2348                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E00:  65 00 01 D0
F00:2349                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E04:  69 00 01 CC
F00:2350                   subi.b #$A5,d0                            
               S06:00001E08:  04 00 00 A5
F00:2351                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E0C:  67 00 01 C4
F00:2352                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E10:  6A 00 01 C0
F00:2353                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E14:  64 00 01 BC
F00:2354                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E18:  68 00 01 B8
F00:2355                   cmpi.b #$C3,d0                            
               S06:00001E1C:  0C 00 00 C3
F00:2356                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E20:  66 00 01 B0
F00:2357                   
F00:2358           ; EA = Dn  - WORD
F00:2359                   move.l #$12345678,d0      ; populate test data
               S06:00001E24:  20 3C 12 34 56 78
F00:2360                   subi.w #0,d0                          
               S06:00001E2A:  04 40 00 00
F00:2361                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E2E:  67 00 01 A2
F00:2362                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E32:  6B 00 01 9E
F00:2363                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E36:  65 00 01 9A
F00:2364                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E3A:  69 00 01 96
F00:2365                   subi.w #$7000,d0                          
               S06:00001E3E:  04 40 70 00
F00:2366                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E42:  67 00 01 8E
F00:2367                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E46:  6A 00 01 8A
F00:2368                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E4A:  64 00 01 86
F00:2369                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E4E:  69 00 01 82
F00:2370                   subi.w #$A55A,d0                          
               S06:00001E52:  04 40 A5 5A
F00:2371                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E56:  67 00 01 7A
F00:2372                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E5A:  6B 00 01 76
F00:2373                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E5E:  65 00 01 72
F00:2374                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E62:  69 00 01 6E
F00:2375                   cmpi.w #$411E,d0                          
               S06:00001E66:  0C 40 41 1E
F00:2376                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E6A:  66 00 01 66
F00:2377           
F00:2378           ; EA = Dn  - LONG
F00:2379                   move.l #$12345678,d0      ; populate test data
               S06:00001E6E:  20 3C 12 34 56 78
F00:2380                   subi.l #0,d0                          
               S06:00001E74:  04 80 00 00 00 00
F00:2381                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E7A:  67 00 01 56
F00:2382                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E7E:  6B 00 01 52
F00:2383                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E82:  65 00 01 4E
F00:2384                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E86:  69 00 01 4A
F00:2385                   subi.l #$F0000000,d0                          
               S06:00001E8A:  04 80 F0 00 00 00
F00:2386                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001E90:  67 00 01 40
F00:2387                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001E94:  6B 00 01 3C
F00:2388                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001E98:  64 00 01 38
F00:2389                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001E9C:  69 00 01 34
F00:2390                   subi.l #$855AA55A,d0                          
               S06:00001EA0:  04 80 85 5A A5 5A
F00:2391                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EA6:  67 00 01 2A
F00:2392                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EAA:  6A 00 01 26
F00:2393                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EAE:  64 00 01 22
F00:2394                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EB2:  68 00 01 1E
F00:2395                   subi.l #$A0000000,d0                          
               S06:00001EB6:  04 80 A0 00 00 00
F00:2396                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EBC:  69 00 01 14
F00:2397                   cmpi.l #$FCD9B11E,d0                          
               S06:00001EC0:  0C 80 FC D9 B1 1E
F00:2398                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EC6:  66 00 01 0A
F00:2399           
F00:2400           
F00:2401       
F00:2402           ; EA = x.L  - Byte
F00:2403                   move.l #$000F0100,a0      ; populate test data
               S06:00001ECA:  20 7C 00 0F 01 00
F00:2404                   move.l #$12345678,(a0)     ; populate test data
               S06:00001ED0:  20 BC 12 34 56 78
F00:2405                   subi.b #0,$000F0103                           
               S06:00001ED6:  04 39 00 00 00 0F 01 03
F00:2406                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EDE:  67 00 00 F2
F00:2407                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EE2:  6B 00 00 EE
F00:2408                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EE6:  65 00 00 EA
F00:2409                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001EEA:  69 00 00 E6
F00:2410                   subi.b #$10,$000F0103                         
               S06:00001EEE:  04 39 00 10 00 0F 01 03
F00:2411                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001EF6:  67 00 00 DA
F00:2412                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001EFA:  6B 00 00 D6
F00:2413                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001EFE:  65 00 00 D2
F00:2414                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F02:  69 00 00 CE
F00:2415                   subi.b #$A5,$000F0103                         
               S06:00001F06:  04 39 00 A5 00 0F 01 03
F00:2416                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F0E:  67 00 00 C2
F00:2417                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F12:  6A 00 00 BE
F00:2418                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F16:  64 00 00 BA
F00:2419                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F1A:  68 00 00 B6
F00:2420                   cmpi.b #$C3,$000F0103                         
               S06:00001F1E:  0C 39 00 C3 00 0F 01 03
F00:2421                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F26:  66 00 00 AA
F00:2422                   
F00:2423           ; EA = x.L- WORD
F00:2424                   move.l #$000F0100,a0      ; populate test data
               S06:00001F2A:  20 7C 00 0F 01 00
F00:2425                   move.l #$12345678,(a0)     ; populate test data
               S06:00001F30:  20 BC 12 34 56 78
F00:2426                   subi.w #0,$000F0100                           
               S06:00001F36:  04 79 00 00 00 0F 01 00
F00:2427                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F3E:  67 00 00 92
F00:2428                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F42:  6B 00 00 8E
F00:2429                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F46:  65 00 00 8A
F00:2430                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F4A:  69 00 00 86
F00:2431                   subi.w #$7000,$000F0100                           
               S06:00001F4E:  04 79 70 00 00 0F 01 00
F00:2432                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F56:  67 7A
F00:2433                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F58:  6A 78
F00:2434                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F5A:  64 76
F00:2435                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F5C:  69 74
F00:2436                   subi.w #$A55A,$000F0100                           
               S06:00001F5E:  04 79 A5 5A 00 0F 01 00
F00:2437                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F66:  67 6A
F00:2438                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F68:  6A 68
F00:2439                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F6A:  64 66
F00:2440                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F6C:  69 64
F00:2441                   cmpi.w #$FCDA,$000F0100                           
               S06:00001F6E:  0C 79 FC DA 00 0F 01 00
F00:2442                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F76:  66 5A
F00:2443           
F00:2444           ; EA = x.L- LONG
F00:2445                   move.l #$12345678,$000F0100  ; populate test data
               S06:00001F78:  23 FC 12 34 56 78 00 0F 01 00
F00:2446                   subi.l #0,$000F0100                           
               S06:00001F82:  04 B9 00 00 00 00 00 0F 01 00
F00:2447                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F8C:  67 44
F00:2448                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001F8E:  6B 42
F00:2449                   bcs SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001F90:  65 40
F00:2450                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001F92:  69 3E
F00:2451                   subi.l #$F0000000,$000F0100                           
               S06:00001F94:  04 B9 F0 00 00 00 00 0F 01 00
F00:2452                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001F9E:  67 32
F00:2453                   bmi SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FA0:  6B 30
F00:2454                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FA2:  64 2E
F00:2455                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FA4:  69 2C
F00:2456                   subi.l #$855AA55A,$000F0100                           
               S06:00001FA6:  04 B9 85 5A A5 5A 00 0F 01 00
F00:2457                   beq SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FB0:  67 20
F00:2458                   bpl SUB_I_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00001FB2:  6A 1E
F00:2459                   bcc SUB_I_FAIL;                       ; Check C Flag  bcc/bcs
               S06:00001FB4:  64 1C
F00:2460                   bvc SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FB6:  68 1A
F00:2461                   subi.l #$A0000000,$000F0100                           
               S06:00001FB8:  04 B9 A0 00 00 00 00 0F 01 00
F00:2462                   bvs SUB_I_FAIL;                       ; Check V Flag  bvc/bvs
               S06:00001FC2:  69 0E
F00:2463                   cmpi.l #$FCD9B11E,$000F0100                           
               S06:00001FC4:  0C B9 FC D9 B1 1E 00 0F 01 00
F00:2464                   bne SUB_I_FAIL;                       ; Check Z Flag  beq/bne
               S06:00001FCE:  66 02
F00:2465                   
F00:2466                   rts
               S06:00001FD0:  4E 75
F00:2467           
F00:2468       SUB_I_FAIL: bra SUB_I_FAIL  
               S06:00001FD2:  60 FE
F00:2469       
F00:2470       ;-----------------------------------------------------------
F00:2471       ;-----------------------------------------------------------
F00:2472       ; OPCODE : MOVE
F00:2473       ;-----------------------------------------------------------
F00:2474       ;-----------------------------------------------------------
F00:2475       op_MOVE: 
F00:2476                   move.l #$11223344,d0
               S06:00001FD4:  20 3C 11 22 33 44
F00:2477                   move.l #$55667788,d1
               S06:00001FDA:  22 3C 55 66 77 88
F00:2478                   move.l #$8899aabb,d2
               S06:00001FE0:  24 3C 88 99 AA BB
F00:2479                   move.l #$ccddeeff,d3
               S06:00001FE6:  26 3C CC DD EE FF
F00:2480                   move.l #$00000000,d4
               S06:00001FEC:  78 00
F00:2481                   move.l #$00000000,d5
               S06:00001FEE:  7A 00
F00:2482                   move.l #$00000000,d6
               S06:00001FF0:  7C 00
F00:2483                   move.l #$00000000,d7         
               S06:00001FF2:  7E 00
F00:2484                   move.l #$44332211,a0
               S06:00001FF4:  20 7C 44 33 22 11
F00:2485                   move.l #$88776655,a1
               S06:00001FFA:  22 7C 88 77 66 55
F00:2486                   move.l #$bbaa9988,a2
               S06:00002000:  24 7C BB AA 99 88
F00:2487                   move.l #$ffeeddcc,a3
               S06:00002006:  26 7C FF EE DD CC
F00:2488                   
F00:2489                   move.b d0,d4              ; BYTE - DATA REGISTER
               S06:0000200C:  18 00
F00:2490                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000200E:  67 00 02 1C
F00:2491                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002012:  6B 00 02 18
F00:2492                   cmpi.l #$00000044,d4                          
               S06:00002016:  0C 84 00 00 00 44
F00:2493                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000201C:  66 00 02 0E
F00:2494               
F00:2495                   move.w d1,d5              ; WORD - DATA REGISTER
               S06:00002020:  3A 01
F00:2496                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002022:  67 00 02 08
F00:2497                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002026:  6B 00 02 04
F00:2498                   cmpi.l #$00007788,d5                          
               S06:0000202A:  0C 85 00 00 77 88
F00:2499                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002030:  66 00 01 FA
F00:2500               
F00:2501                   move.l d2,d6              ; LONG - DATA REGISTER
               S06:00002034:  2C 02
F00:2502                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002036:  67 00 01 F4
F00:2503                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000203A:  6A 00 01 F0
F00:2504                   cmpi.l #$8899aabb,d6                          
               S06:0000203E:  0C 86 88 99 AA BB
F00:2505                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002044:  66 00 01 E6
F00:2506       
F00:2507                   move.w a1,d5              ; WORD - ADDRESS REGISTER
               S06:00002048:  3A 09
F00:2508                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000204A:  67 00 01 E0
F00:2509                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000204E:  6B 00 01 DC
F00:2510                   cmpi.l #$00006655,d5                          
               S06:00002052:  0C 85 00 00 66 55
F00:2511                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002058:  66 00 01 D2
F00:2512               
F00:2513                   move.l a2,d6              ; LONG - ADDRESS REGISTER
               S06:0000205C:  2C 0A
F00:2514                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000205E:  67 00 01 CC
F00:2515                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002062:  6A 00 01 C8
F00:2516                   cmpi.l #$bbaa9988,d6                         
               S06:00002066:  0C 86 BB AA 99 88
F00:2517                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000206C:  66 00 01 BE
F00:2518                   
F00:2519           
F00:2520                   movea.w d2,a4             ; WORD - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:00002070:  38 42
F00:2521                   cmpa.l d2,a4                          
               S06:00002072:  B9 C2
F00:2522                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
               S06:00002074:  67 00 01 B6
F00:2523               
F00:2524                   movea.l d1,a5             ; LONG - ADDRESS REGISTER as SOURCE ## MOVEA
               S06:00002078:  2A 41
F00:2525                   cmpa.l d1,a5                         
               S06:0000207A:  BB C1
F00:2526                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000207C:  66 00 01 AE
F00:2527               
F00:2528       
F00:2529       
F00:2530         ; Too mamy EA combinations to test,so we focus on a few of the more complicted EA's 
F00:2531         
F00:2532                   move.l #$11223344,d0
               S06:00002080:  20 3C 11 22 33 44
F00:2533                   move.l #$00010100,d1
               S06:00002086:  22 3C 00 01 01 00
F00:2534                   move.l #$8899aabb,d2
               S06:0000208C:  24 3C 88 99 AA BB
F00:2535                   move.l #$00000001,d3
               S06:00002092:  76 01
F00:2536                   move.l #$00000000,d4
               S06:00002094:  78 00
F00:2537                   move.l #$00000000,d5
               S06:00002096:  7A 00
F00:2538                   move.l #$00000000,d6
               S06:00002098:  7C 00
F00:2539                   move.l #$00000000,d7         
               S06:0000209A:  7E 00
F00:2540                   move.l #$00000000,a0
               S06:0000209C:  91 C8
F00:2541                   move.l #$00010100,a1
               S06:0000209E:  22 7C 00 01 01 00
F00:2542       
F00:2543           ; x(An,AL) --> x.L
F00:2544                   move.b #$5A,4(a0,a1.l)    ; BYTE 
               S06:000020A4:  11 BC 00 5A 98 04
F00:2545                   lea 4(a0,a1.l),a3    
               S06:000020AA:  47 F0 98 04
F00:2546                   move.b 4(a0,a1.l),$00010105    
               S06:000020AE:  13 F0 98 04 00 01 01 05
F00:2547                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020B6:  67 00 01 74
F00:2548                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020BA:  6B 00 01 70
F00:2549                   cmpi.b #$5A,5(a0,a1.l)                            
               S06:000020BE:  0C 30 00 5A 98 05
F00:2550                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020C4:  66 00 01 66
F00:2551                       
F00:2552           ; x.L --> n(An,Dw)
F00:2553       MOVE2:      move.b  $00010105,7(a0,d1.w)    ; BYTE  
               S06:000020C8:  11 B9 00 01 01 05 10 07
F00:2554                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020D0:  67 00 01 5A
F00:2555                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020D4:  6B 00 01 56
F00:2556                   cmpi.b #$5A,7(a0,d1.w)                            
               S06:000020D8:  0C 30 00 5A 10 07
F00:2557                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020DE:  66 00 01 4C
F00:2558                       
F00:2559           ; x(PC,Ds) --> x.w
F00:2560                   move.b  MOVE1(pc,d3),$0100 ; BYTE  
               S06:000020E2:  11 FB 30 76 01 00
F00:2561                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020E8:  67 00 01 42
F00:2562                   bpl MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000020EC:  6A 00 01 3E
F00:2563                   cmpi.b #$B9,1+MOVE2                            
               S06:000020F0:  0C 38 00 B9 20 C9
F00:2564                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000020F6:  66 00 01 34
F00:2565                           
F00:2566           ; #x -->    n(An,AL)
F00:2567                   move.b  #$78,7(a0,d1.w)    ; BYTE  
               S06:000020FA:  11 BC 00 78 10 07
F00:2568                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002100:  67 00 01 2A
F00:2569                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002104:  6B 00 01 26
F00:2570                   cmpi.b #$78,7(a0,d1.w)                         
               S06:00002108:  0C 30 00 78 10 07
F00:2571                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000210E:  66 00 01 1C
F00:2572               
F00:2573                   move.l #$11223344,d0
               S06:00002112:  20 3C 11 22 33 44
F00:2574                   move.l #$00010100,d1
               S06:00002118:  22 3C 00 01 01 00
F00:2575                   move.l #$8899aabb,d2
               S06:0000211E:  24 3C 88 99 AA BB
F00:2576                   move.l #$00000002,d3
               S06:00002124:  76 02
F00:2577                   move.l #$00000000,d4
               S06:00002126:  78 00
F00:2578                   move.l #$00000000,d5
               S06:00002128:  7A 00
F00:2579                   move.l #$00000000,d6
               S06:0000212A:  7C 00
F00:2580                   move.l #$00000000,d7         
               S06:0000212C:  7E 00
F00:2581                   move.l #$00000000,a0
               S06:0000212E:  91 C8
F00:2582                   move.l #$00010100,a1
               S06:00002130:  22 7C 00 01 01 00
F00:2583                   
F00:2584           ; x(An,AL) --> x.L
F00:2585                   move.w #$5A5A,4(a0,a1.l)    ; WORD  
               S06:00002136:  31 BC 5A 5A 98 04
F00:2586                   lea 4(a0,a1.l),a4    
               S06:0000213C:  49 F0 98 04
F00:2587                   move.w 4(a0,a1.l),$00010104    
               S06:00002140:  33 F0 98 04 00 01 01 04
F00:2588                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002148:  67 00 00 E2
F00:2589                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000214C:  6B 00 00 DE
F00:2590                   cmpi.w #$5A5A,4(a0,a1.l)                          
               S06:00002150:  0C 70 5A 5A 98 04
F00:2591                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002156:  66 00 00 D4
F00:2592                       
F00:2593           ; x.L --> n(An,Dw)
F00:2594       MOVE1:      move.w  $00010104,6(a0,d1.w)    ; WORD  
               S06:0000215A:  31 B9 00 01 01 04 10 06
F00:2595                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002162:  67 00 00 C8
F00:2596                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002166:  6B 00 00 C4
F00:2597                   cmpi.w #$5A5A,6(a0,d1.w)                          
               S06:0000216A:  0C 70 5A 5A 10 06
F00:2598                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002170:  66 00 00 BA
F00:2599                       
F00:2600           ; x(PC,Ds) --> x.w
F00:2601                   move.w  MOVE1(pc,d3),$0100 ; WORD  
               S06:00002174:  31 FB 30 E4 01 00
F00:2602                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000217A:  67 00 00 B0
F00:2603                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000217E:  6B 00 00 AC
F00:2604                   cmpi.w #$6700,8+MOVE1                          ; Wrong opcode?!? FIXME
               S06:00002182:  0C 78 67 00 21 62
F00:2605                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002188:  66 00 00 A2
F00:2606                           
F00:2607           ; #x -->    n(An,AL)
F00:2608                   move.w  #$7878,6(a0,d1.w)    ; WORD  
               S06:0000218C:  31 BC 78 78 10 06
F00:2609                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002192:  67 00 00 98
F00:2610                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002196:  6B 00 00 94
F00:2611                   cmpi.w #$7878,6(a0,d1.w)                           
               S06:0000219A:  0C 70 78 78 10 06
F00:2612                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021A0:  66 00 00 8A
F00:2613               
F00:2614       ; ---
F00:2615               
F00:2616                   move.l #$11223344,d0
               S06:000021A4:  20 3C 11 22 33 44
F00:2617                   move.l #$00010100,d1
               S06:000021AA:  22 3C 00 01 01 00
F00:2618                   move.l #$8899aabb,d2
               S06:000021B0:  24 3C 88 99 AA BB
F00:2619                   move.l #$00000002,d3
               S06:000021B6:  76 02
F00:2620                   move.l #$00000000,d4
               S06:000021B8:  78 00
F00:2621                   move.l #$00000000,d5
               S06:000021BA:  7A 00
F00:2622                   move.l #$00000000,d6
               S06:000021BC:  7C 00
F00:2623                   move.l #$00000000,d7         
               S06:000021BE:  7E 00
F00:2624                   move.l #$00000000,a0
               S06:000021C0:  91 C8
F00:2625                   move.l #$00010100,a1
               S06:000021C2:  22 7C 00 01 01 00
F00:2626                   
F00:2627           ; x(An,AL) --> x.L
F00:2628                   move.l #$5A5A1234,4(a0,a1.l)    ; LONG  
               S06:000021C8:  21 BC 5A 5A 12 34 98 04
F00:2629                   lea 4(a0,a1.l),a4    
               S06:000021D0:  49 F0 98 04
F00:2630                   move.l 4(a0,a1.l),$00010104    
               S06:000021D4:  23 F0 98 04 00 01 01 04
F00:2631                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021DC:  67 4E
F00:2632                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021DE:  6B 4C
F00:2633                   cmpi.l #$5A5A1234,4(a0,a1.l)                          
               S06:000021E0:  0C B0 5A 5A 12 34 98 04
F00:2634                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021E8:  66 42
F00:2635                       
F00:2636           ; x.L --> n(An,Dw)
F00:2637       MOVE3:      move.l  $00010104,6(a0,d1.w)    ; LONG  
               S06:000021EA:  21 B9 00 01 01 04 10 06
F00:2638                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021F2:  67 38
F00:2639                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:000021F4:  6B 36
F00:2640                   cmpi.l #$5A5A1234,6(a0,d1.w)                          
               S06:000021F6:  0C B0 5A 5A 12 34 10 06
F00:2641                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:000021FE:  66 2C
F00:2642                       
F00:2643           ; x(PC,Ds) --> x.w
F00:2644                   move.l  MOVE3(pc,d3),$0100 ; LONG  
               S06:00002200:  21 FB 30 E8 01 00
F00:2645                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002206:  67 24
F00:2646                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:00002208:  6B 22
F00:2647                   cmpi.l #$67FE6BFE,8+MOVE3                          
               S06:0000220A:  0C B8 67 FE 6B FE 21 F2
F00:2648                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002212:  66 18
F00:2649                           
F00:2650           ; #x -->    n(An,AL)
F00:2651                   move.l  #$78782323,6(a0,d1.w)    ; LONG  
               S06:00002214:  21 BC 78 78 23 23 10 06
F00:2652                   beq MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000221C:  67 0E
F00:2653                   bmi MOVE_FAIL;                       ; Check N Flag  bmi/bpl
               S06:0000221E:  6B 0C
F00:2654                   cmpi.l #$78782323,6(a0,d1.w)                           
               S06:00002220:  0C B0 78 78 23 23 10 06
F00:2655                   bne MOVE_FAIL;                       ; Check Z Flag  beq/bne
               S06:00002228:  66 02
F00:2656               
F00:2657               
F00:2658                rts
               S06:0000222A:  4E 75
F00:2659       
F00:2660       MOVE_FAIL: bra MOVE_FAIL
               S06:0000222C:  60 FE
F00:2661       
F00:2662       ;-----------------------------------------------------------
F00:2663       ;-----------------------------------------------------------
F00:2664       ; OPCODE : MOVE_xxx_FLAGS
F00:2665       ;-----------------------------------------------------------
F00:2666       ;-----------------------------------------------------------
F00:2667       op_MOVE_xxx_FLAGS: 
F00:2668       
F00:2669           ; Move_To_SR
F00:2670           
F00:2671           ; Dn
F00:2672           
F00:2673                   move.w #$2FFF,d0
               S06:0000222E:  30 3C 2F FF
F00:2674                   move d0,SR 
               S06:00002232:  46 C0
F00:2675                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002234:  6A 00 02 98
F00:2676                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002238:  66 00 02 94
F00:2677                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000223C:  68 00 02 90
F00:2678                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002240:  64 00 02 8C
F00:2679                   move.w #$2F00,d0
               S06:00002244:  30 3C 2F 00
F00:2680                   move d0,CCR 
               S06:00002248:  44 C0
F00:2681                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:0000224A:  67 00 02 82
F00:2682                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000224E:  6B 00 02 7E
F00:2683                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002252:  69 00 02 7A
F00:2684                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002256:  65 00 02 76
F00:2685           
F00:2686                   move.w #$2000,d0
               S06:0000225A:  30 3C 20 00
F00:2687                   move d0,SR 
               S06:0000225E:  46 C0
F00:2688                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002260:  67 00 02 6C
F00:2689                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002264:  6B 00 02 68
F00:2690                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002268:  69 00 02 64
F00:2691                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000226C:  65 00 02 60
F00:2692              
F00:2693           ; (An)
F00:2694                   move.l #$00000100,a0
               S06:00002270:  30 7C 01 00
F00:2695                   move.w #$2FFF,(a0)
               S06:00002274:  30 BC 2F FF
F00:2696                   move (a0),SR 
               S06:00002278:  46 D0
F00:2697                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000227A:  6A 00 02 52
F00:2698                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:0000227E:  66 00 02 4E
F00:2699                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002282:  68 00 02 4A
F00:2700                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002286:  64 00 02 46
F00:2701           
F00:2702                   move.w #$2000,(a0)
               S06:0000228A:  30 BC 20 00
F00:2703                   move (a0),SR 
               S06:0000228E:  46 D0
F00:2704                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002290:  67 00 02 3C
F00:2705                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002294:  6B 00 02 38
F00:2706                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002298:  69 00 02 34
F00:2707                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000229C:  65 00 02 30
F00:2708                   
F00:2709           ; (An)+
F00:2710                   move.l #$00000100,a0
               S06:000022A0:  30 7C 01 00
F00:2711                   move.w #$2FFF,(a0)
               S06:000022A4:  30 BC 2F FF
F00:2712                   move (a0)+,SR 
               S06:000022A8:  46 D8
F00:2713                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000022AA:  6A 00 02 22
F00:2714                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000022AE:  66 00 02 1E
F00:2715                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000022B2:  68 00 02 1A
F00:2716                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000022B6:  64 00 02 16
F00:2717           
F00:2718                   move.w #$2000,(a0)
               S06:000022BA:  30 BC 20 00
F00:2719                   move (a0)+,SR 
               S06:000022BE:  46 D8
F00:2720                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000022C0:  67 00 02 0C
F00:2721                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000022C4:  6B 00 02 08
F00:2722                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000022C8:  69 00 02 04
F00:2723                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000022CC:  65 00 02 00
F00:2724                        
F00:2725           ; -(An)
F00:2726                   move.l #$00000102,a0
               S06:000022D0:  30 7C 01 02
F00:2727                   move.w #$2FFF,(a0)
               S06:000022D4:  30 BC 2F FF
F00:2728                   move (a0)+,SR 
               S06:000022D8:  46 D8
F00:2729                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000022DA:  6A 00 01 F2
F00:2730                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000022DE:  66 00 01 EE
F00:2731                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000022E2:  68 00 01 EA
F00:2732                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000022E6:  64 00 01 E6
F00:2733           
F00:2734                   move.w #$2000,(a0)
               S06:000022EA:  30 BC 20 00
F00:2735                   move (a0)+,SR 
               S06:000022EE:  46 D8
F00:2736                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000022F0:  67 00 01 DC
F00:2737                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000022F4:  6B 00 01 D8
F00:2738                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000022F8:  69 00 01 D4
F00:2739                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000022FC:  65 00 01 D0
F00:2740                                   
F00:2741           ; n(An)
F00:2742                   move.l #$00000102,a0
               S06:00002300:  30 7C 01 02
F00:2743                   move.w #$2FFF,2(a0)
               S06:00002304:  31 7C 2F FF 00 02
F00:2744                   move 2(a0),SR 
               S06:0000230A:  46 E8 00 02
F00:2745                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000230E:  6A 00 01 BE
F00:2746                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002312:  66 00 01 BA
F00:2747                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002316:  68 00 01 B6
F00:2748                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:0000231A:  64 00 01 B2
F00:2749           
F00:2750                   move.w #$2000,2(a0)
               S06:0000231E:  31 7C 20 00 00 02
F00:2751                   move 2(a0),SR 
               S06:00002324:  46 E8 00 02
F00:2752                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002328:  67 00 01 A4
F00:2753                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000232C:  6B 00 01 A0
F00:2754                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002330:  69 00 01 9C
F00:2755                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:00002334:  65 00 01 98
F00:2756                                           
F00:2757           ; n(An,Rn.l)
F00:2758                   move.l #$00000100,a0
               S06:00002338:  30 7C 01 00
F00:2759                   move.l #$00000002,d0
               S06:0000233C:  70 02
F00:2760                   move.w #$2FFF,2(a0,d0.l)
               S06:0000233E:  31 BC 2F FF 08 02
F00:2761                   move 2(a0,d0.l),SR 
               S06:00002344:  46 F0 08 02
F00:2762                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002348:  6A 00 01 84
F00:2763                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:0000234C:  66 00 01 80
F00:2764                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002350:  68 00 01 7C
F00:2765                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002354:  64 00 01 78
F00:2766           
F00:2767                   move.w #$2000,2(a0,d0.l)
               S06:00002358:  31 BC 20 00 08 02
F00:2768                   move 2(a0,d0.l),SR 
               S06:0000235E:  46 F0 08 02
F00:2769                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002362:  67 00 01 6A
F00:2770                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002366:  6B 00 01 66
F00:2771                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:0000236A:  69 00 01 62
F00:2772                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:0000236E:  65 00 01 5E
F00:2773                                                      
F00:2774           ; x.W
F00:2775                   move.w #$2FFF,$0100
               S06:00002372:  31 FC 2F FF 01 00
F00:2776                   move $0100,SR 
               S06:00002378:  46 F8 01 00
F00:2777                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:0000237C:  6A 00 01 50
F00:2778                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002380:  66 00 01 4C
F00:2779                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:00002384:  68 00 01 48
F00:2780                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002388:  64 00 01 44
F00:2781           
F00:2782                   move.w #$2000,$0100
               S06:0000238C:  31 FC 20 00 01 00
F00:2783                   move $0100,SR 
               S06:00002392:  46 F8 01 00
F00:2784                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002396:  67 00 01 36
F00:2785                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:0000239A:  6B 00 01 32
F00:2786                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:0000239E:  69 00 01 2E
F00:2787                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000023A2:  65 00 01 2A
F00:2788                                                                
F00:2789           ; x.L
F00:2790                   move.w #$2FFF,$00010100
               S06:000023A6:  33 FC 2F FF 00 01 01 00
F00:2791                   move $00010100,SR 
               S06:000023AE:  46 F9 00 01 01 00
F00:2792                   bpl MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:000023B4:  6A 00 01 18
F00:2793                   bne MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:000023B8:  66 00 01 14
F00:2794                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:000023BC:  68 00 01 10
F00:2795                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:000023C0:  64 00 01 0C
F00:2796           
F00:2797       MOVE4:      move.w #$2000,$00010100
               S06:000023C4:  33 FC 20 00 00 01 01 00
F00:2798                   move $00010100,SR 
               S06:000023CC:  46 F9 00 01 01 00
F00:2799                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023D2:  67 00 00 FA
F00:2800                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000023D6:  6B 00 00 F6
F00:2801                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000023DA:  69 00 00 F2
F00:2802                   bcs MOVE_FLAGS_FAIL;           ; branch if C set  
               S06:000023DE:  65 00 00 EE
F00:2803                                                                          
F00:2804           ; x(PC)
F00:2805                   move MOVE4+2(pc),SR 
               S06:000023E2:  46 FA FF E2
F00:2806                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023E6:  67 00 00 E6
F00:2807                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:000023EA:  6B 00 00 E2
F00:2808                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:000023EE:  69 00 00 DE
F00:2809                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:000023F2:  65 00 00 DA
F00:2810                                                                          
F00:2811           ; x(PC,d0.l)
F00:2812                   move.l #$00000000,d0
               S06:000023F6:  70 00
F00:2813                   move MOVE4+2(pc,d0.l),SR 
               S06:000023F8:  46 FB 08 CC
F00:2814                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:000023FC:  67 00 00 D0
F00:2815                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002400:  6B 00 00 CC
F00:2816                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002404:  69 00 00 C8
F00:2817                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:00002408:  65 00 00 C4
F00:2818                   move MOVE4+2(pc,d0.l),CCR 
               S06:0000240C:  44 FB 08 B8
F00:2819                   beq MOVE_FLAGS_FAIL;           ; branch if Z set  
               S06:00002410:  67 00 00 BC
F00:2820                   bmi MOVE_FLAGS_FAIL;           ; branch if N set  
               S06:00002414:  6B 00 00 B8
F00:2821                   bvs MOVE_FLAGS_FAIL;           ; branch if V set  
               S06:00002418:  69 00 00 B4
F00:2822                   bcs MOVE_FLAGS_FAIL;           ; branch if C set 
               S06:0000241C:  65 00 00 B0
F00:2823                                                                          
F00:2824           ; #x
F00:2825                   move #$2FFF,SR 
               S06:00002420:  46 FC 2F FF
F00:2826                   bne MOVE_FLAGS_FAIL;           ; branch if Z clear  
               S06:00002424:  66 00 00 A8
F00:2827                   bpl MOVE_FLAGS_FAIL;           ; branch if N clear
               S06:00002428:  6A 00 00 A4
F00:2828                   bvc MOVE_FLAGS_FAIL;           ; branch if V clear 
               S06:0000242C:  68 00 00 A0
F00:2829                   bcc MOVE_FLAGS_FAIL;           ; branch if C clear 
               S06:00002430:  64 00 00 9C
F00:2830                   
F00:2831                   
F00:2832                   
F00:2833        ; MOVE_From_SR
F00:2834       
F00:2835                   
F00:2836                   
F00:2837           ; Dn
F00:2838                   move #$275A,SR        ; Initial value
               S06:00002434:  46 FC 27 5A
F00:2839                   move SR,d0
               S06:00002438:  40 C0
F00:2840                   cmpi.w #$275A,d0
               S06:0000243A:  0C 40 27 5A
F00:2841                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:0000243E:  66 00 00 8E
F00:2842                        
F00:2843           ; (An)
F00:2844                   move.l #$00000100,a0
               S06:00002442:  30 7C 01 00
F00:2845                   move #$275A,SR        ; Initial value
               S06:00002446:  46 FC 27 5A
F00:2846                   move SR,(a0)
               S06:0000244A:  40 D0
F00:2847                   cmpi.w #$275A,(a0)
               S06:0000244C:  0C 50 27 5A
F00:2848                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002450:  66 7C
F00:2849                              
F00:2850           ; (An)+
F00:2851                   move.l #$00000100,a0
               S06:00002452:  30 7C 01 00
F00:2852                   move #$257A,SR        ; Initial value
               S06:00002456:  46 FC 25 7A
F00:2853                   move SR,(a0)+
               S06:0000245A:  40 D8
F00:2854                   move.l #$00000100,a0
               S06:0000245C:  30 7C 01 00
F00:2855                   cmpi.w #$257A,(a0)+
               S06:00002460:  0C 58 25 7A
F00:2856                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002464:  66 68
F00:2857                                          
F00:2858           ; -(An)
F00:2859                   move.l #$00000102,a0
               S06:00002466:  30 7C 01 02
F00:2860                   move #$2766,SR        ; Initial value
               S06:0000246A:  46 FC 27 66
F00:2861                   move SR,-(a0)
               S06:0000246E:  40 E0
F00:2862                   move.l #$00000100,a0
               S06:00002470:  30 7C 01 00
F00:2863                   cmpi.w #$2766,(a0)
               S06:00002474:  0C 50 27 66
F00:2864                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:00002478:  66 54
F00:2865                                                
F00:2866           ; x(An)
F00:2867                   move.l #$00000102,a0
               S06:0000247A:  30 7C 01 02
F00:2868                   move #$2733,SR        ; Initial value
               S06:0000247E:  46 FC 27 33
F00:2869                   move SR,4(a0)
               S06:00002482:  40 E8 00 04
F00:2870                   cmpi.w #$2733,4(a0)
               S06:00002486:  0C 68 27 33 00 04
F00:2871                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:0000248C:  66 40
F00:2872                                                    
F00:2873           ; x(An,rn)
F00:2874                   move.l #$00000102,a0
               S06:0000248E:  30 7C 01 02
F00:2875                   move.l #$00000004,d0
               S06:00002492:  70 04
F00:2876                   move #$275a,SR        ; Initial value
               S06:00002494:  46 FC 27 5A
F00:2877                   move SR,4(a0,d0.l)
               S06:00002498:  40 F0 08 04
F00:2878                   cmpi.w #$275a,4(a0,d0.l)
               S06:0000249C:  0C 70 27 5A 08 04
F00:2879                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000024A2:  66 2A
F00:2880                                                               
F00:2881           ; x.W
F00:2882                   move #$2777,SR        ; Initial value
               S06:000024A4:  46 FC 27 77
F00:2883                   move SR,$0102
               S06:000024A8:  40 F8 01 02
F00:2884                   cmpi.w #$2777,$0102
               S06:000024AC:  0C 78 27 77 01 02
F00:2885                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000024B2:  66 1A
F00:2886                                                                    
F00:2887           ; x.L
F00:2888                   move #$2777,SR        ; Initial value
               S06:000024B4:  46 FC 27 77
F00:2889                   move SR,$10102
               S06:000024B8:  40 F9 00 01 01 02
F00:2890                   cmpi.w #$2777,$10102
               S06:000024BE:  0C 79 27 77 00 01 01 02
F00:2891                   bne MOVE_FLAGS_FAIL;                   ; branch if Z set  
               S06:000024C6:  66 06
F00:2892                   
F00:2893                   
F00:2894                   
F00:2895                   move #$2700,SR        ; Put flags back to initial value
               S06:000024C8:  46 FC 27 00
F00:2896       
F00:2897                   rts
               S06:000024CC:  4E 75
F00:2898       
F00:2899       MOVE_FLAGS_FAIL: bra MOVE_FLAGS_FAIL
               S06:000024CE:  60 FE
F00:2900       
F00:2901       ;-----------------------------------------------------------
F00:2902       ;-----------------------------------------------------------
F00:2903       ; OPCODE : EXT
F00:2904       ;-----------------------------------------------------------
F00:2905       ;-----------------------------------------------------------
F00:2906       op_EXT: 
F00:2907       
F00:2908                   move.l #$0000007F,d0
               S06:000024D0:  70 7F
F00:2909                   move.l #$00008FFF,d1
               S06:000024D2:  22 3C 00 00 8F FF
F00:2910                   move.l #$00000000,d2
               S06:000024D8:  74 00
F00:2911                   
F00:2912                   ext.w d0
               S06:000024DA:  48 80
F00:2913                   bmi EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000024DC:  6B 1A
F00:2914                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:000024DE:  67 18
F00:2915                   cmpi.l #$0000007F,d0
               S06:000024E0:  0C 80 00 00 00 7F
F00:2916                   bne EXT_FAIL;                   ; branch if Z set  
               S06:000024E6:  66 10
F00:2917                   
F00:2918                   ext.l d1
               S06:000024E8:  48 C1
F00:2919                   bpl EXT_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000024EA:  6A 0C
F00:2920                   beq EXT_FAIL;                   ; Check Z Flag  beq/bne
               S06:000024EC:  67 0A
F00:2921                   cmpi.l #$FFFF8FFF,d1
               S06:000024EE:  0C 81 FF FF 8F FF
F00:2922                   bne EXT_FAIL;                   ; branch if Z set  
               S06:000024F4:  66 02
F00:2923                   
F00:2924                   ext.l d2
               S06:000024F6:  48 C2
F00:2925                   bne EXT_FAIL;                   ; Check Z Flag  beq/bne
F00:2926       
F00:2927       EXT_FAIL: bra EXT_FAIL
               S06:000024F8:  60 FE
F00:2928                    
F00:2929       ;-----------------------------------------------------------
F00:2930       ;-----------------------------------------------------------
F00:2931       ; OPCODE : SWAP
F00:2932       ;-----------------------------------------------------------
F00:2933       ;-----------------------------------------------------------
F00:2934       op_SWAP: 
F00:2935       
F00:2936                   move.l #$12345678,d0
               S06:000024FA:  20 3C 12 34 56 78
F00:2937                   
F00:2938                   swap d0
               S06:00002500:  48 40
F00:2939                   bmi SWAP_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002502:  6B 0C
F00:2940                   beq SWAP_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002504:  67 0A
F00:2941                   cmpi.l #$56781234,d0
               S06:00002506:  0C 80 56 78 12 34
F00:2942                   bne SWAP_FAIL;                   ; branch if Z set  
               S06:0000250C:  66 02
F00:2943       
F00:2944                   rts
               S06:0000250E:  4E 75
F00:2945       
F00:2946       SWAP_FAIL: bra SWAP_FAIL       
               S06:00002510:  60 FE
F00:2947                    
F00:2948       ;-----------------------------------------------------------
F00:2949       ;-----------------------------------------------------------
F00:2950       ; OPCODE : LEA_PEA
F00:2951       ;-----------------------------------------------------------
F00:2952       ;-----------------------------------------------------------
F00:2953       op_LEAPEA: 
F00:2954       
F00:2955                   move.l #$00345678,a0
               S06:00002512:  20 7C 00 34 56 78
F00:2956                   move.l #$00000000,d4
               S06:00002518:  78 00
F00:2957                   
F00:2958           ; (An)      
F00:2959                   lea (a0),a6
               S06:0000251A:  4D D0
F00:2960                   move.l a6,d0
               S06:0000251C:  20 0E
F00:2961                   cmpi.l #$00345678,d0
               S06:0000251E:  0C 80 00 34 56 78
F00:2962                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002524:  66 00 00 9C
F00:2963                   pea (a0)
               S06:00002528:  48 50
F00:2964                   cmpi.l #$00345678,(a7)
               S06:0000252A:  0C 97 00 34 56 78
F00:2965                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002530:  66 00 00 90
F00:2966                   addq #4,a7            ; Restore Stack Pointer
               S06:00002534:  58 4F
F00:2967                   
F00:2968           ; x(An)     
F00:2969                   lea 4(a0),a6
               S06:00002536:  4D E8 00 04
F00:2970                   move.l a6,d0
               S06:0000253A:  20 0E
F00:2971                   cmpi.l #$0034567C,d0
               S06:0000253C:  0C 80 00 34 56 7C
F00:2972                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002542:  66 7E
F00:2973                   pea 4(a0)
               S06:00002544:  48 68 00 04
F00:2974                   cmpi.l #$0034567C,(a7)
               S06:00002548:  0C 97 00 34 56 7C
F00:2975                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000254E:  66 72
F00:2976                   addq #4,a7            ; Restore Stack Pointer         
               S06:00002550:  58 4F
F00:2977       
F00:2978           ; x(An,Dn.l)        
F00:2979                   lea 4(a0,d4),a6
               S06:00002552:  4D F0 40 04
F00:2980                   move.l a6,d0
               S06:00002556:  20 0E
F00:2981                   cmpi.l #$0034567C,d0
               S06:00002558:  0C 80 00 34 56 7C
F00:2982                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000255E:  66 62
F00:2983                   pea 4(a0,d4.l)
               S06:00002560:  48 70 48 04
F00:2984                   cmpi.l #$0034567C,(a7)
               S06:00002564:  0C 97 00 34 56 7C
F00:2985                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:0000256A:  66 56
F00:2986                   addq #4,a7            ; Restore Stack Pointer
               S06:0000256C:  58 4F
F00:2987                   
F00:2988           ; x.W       
F00:2989                   lea $1234,a6
               S06:0000256E:  4D F8 12 34
F00:2990                   move.l a6,d0
               S06:00002572:  20 0E
F00:2991                   cmpi.w #$1234,d0
               S06:00002574:  0C 40 12 34
F00:2992                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002578:  66 48
F00:2993                   pea $1234
               S06:0000257A:  48 78 12 34
F00:2994                   cmpi.l #$00001234,(a7)
               S06:0000257E:  0C 97 00 00 12 34
F00:2995                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002584:  66 3C
F00:2996                   addq #4,a7            ; Restore Stack Pointer
               S06:00002586:  58 4F
F00:2997                  
F00:2998           ; x.L       
F00:2999                   lea $00345678,a6
               S06:00002588:  4D F9 00 34 56 78
F00:3000                   move.l a6,d0
               S06:0000258E:  20 0E
F00:3001                   cmp.l a6,d0
               S06:00002590:  B0 8E
F00:3002                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:00002592:  66 2E
F00:3003                   pea $00345678
               S06:00002594:  48 79 00 34 56 78
F00:3004                   cmpi.l #$00345678,(a7)
               S06:0000259A:  0C 97 00 34 56 78
F00:3005                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000025A0:  66 20
F00:3006                   addq #4,a7            ; Restore Stack Pointer
               S06:000025A2:  58 4F
F00:3007                  
F00:3008           ; x(PC)     
F00:3009                   lea LEA1(pc),a6
               S06:000025A4:  4D FA 00 08
F00:3010                   move.l a6,d0
               S06:000025A8:  20 0E
F00:3011                   cmp.l a6,d0
               S06:000025AA:  B0 8E
F00:3012                   bne LEAPEA_FAIL;                   ; branch if Z set  
               S06:000025AC:  66 14
F00:3013       LEA1:       pea LEA1(pc)
               S06:000025AE:  48 7A FF FE
F00:3014                   cmpi.l #$0000241E,(a7)
               S06:000025B2:  0C 97 00 00 24 1E
F00:3015                   beq LEAPEA_FAIL;                   ; branch if Z clear  
               S06:000025B8:  67 08
F00:3016                   addq #4,a7            ; Restore Stack Pointer
               S06:000025BA:  58 4F
F00:3017       
F00:3018       
F00:3019       
F00:3020                 
F00:3021                   move #$2700,SR        ; Put flags back to initial value
               S06:000025BC:  46 FC 27 00
F00:3022       
F00:3023                   rts
               S06:000025C0:  4E 75
F00:3024           
F00:3025       LEAPEA_FAIL: bra LEAPEA_FAIL
               S06:000025C2:  60 FE
F00:3026                    
F00:3027       ;-----------------------------------------------------------
F00:3028       ;-----------------------------------------------------------
F00:3029       ; OPCODE : LEA_TAS
F00:3030       ;-----------------------------------------------------------
F00:3031       ;-----------------------------------------------------------
F00:3032       op_TAS: 
F00:3033       
F00:3034           ; Test just one addressing mode
F00:3035       
F00:3036                   move.l #$00000100,a0
               S06:000025C4:  30 7C 01 00
F00:3037                   
F00:3038           ; (An)      
F00:3039                   move.b #$00,(a0)
               S06:000025C8:  10 BC 00 00
F00:3040                   bmi TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000025CC:  6B 1E
F00:3041                   bne TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000025CE:  66 1C
F00:3042                   tas (a0)
               S06:000025D0:  4A D0
F00:3043                   cmpi.b #$80,(a0)
               S06:000025D2:  0C 10 00 80
F00:3044                   bne TAS_FAIL;                   ; branch if Z set  
               S06:000025D6:  66 14
F00:3045                   move.b #$F5,(a0)
               S06:000025D8:  10 BC 00 F5
F00:3046                   tas (a0)
               S06:000025DC:  4A D0
F00:3047                   bpl TAS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000025DE:  6A 0C
F00:3048                   beq TAS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000025E0:  67 0A
F00:3049                   tas (a0)
               S06:000025E2:  4A D0
F00:3050                   cmpi.b #$F5,(a0)
               S06:000025E4:  0C 10 00 F5
F00:3051                   bne TAS_FAIL                   ; branch if Z set  
               S06:000025E8:  66 02
F00:3052       
F00:3053                   rts
               S06:000025EA:  4E 75
F00:3054                   
F00:3055       TAS_FAIL: bra TAS_FAIL
               S06:000025EC:  60 FE
F00:3056       
F00:3057       ;-----------------------------------------------------------
F00:3058       ;-----------------------------------------------------------
F00:3059       ; OPCODE : LEA_TST
F00:3060       ;-----------------------------------------------------------
F00:3061       ;-----------------------------------------------------------
F00:3062       op_TST: 
F00:3063       
F00:3064           ; Test just one addressing mode
F00:3065       
F00:3066                   move.l #$00000100,a0
               S06:000025EE:  30 7C 01 00
F00:3067                   
F00:3068           ; (An) - BYTE       
F00:3069                   move.b #$00,(a0)
               S06:000025F2:  10 BC 00 00
F00:3070                   tst.b (a0)
               S06:000025F6:  4A 10
F00:3071                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000025F8:  6B 3A
F00:3072                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:000025FA:  66 38
F00:3073                   move.b #$F5,(a0)
               S06:000025FC:  10 BC 00 F5
F00:3074                   tst.b (a0)
               S06:00002600:  4A 10
F00:3075                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002602:  6A 30
F00:3076                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002604:  67 2E
F00:3077                   
F00:3078           ; (An) - WORD       
F00:3079                   move.w #$0000,(a0)
               S06:00002606:  30 BC 00 00
F00:3080                   tst.w (a0)
               S06:0000260A:  4A 50
F00:3081                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000260C:  6B 26
F00:3082                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000260E:  66 24
F00:3083                   move.w #$F567,(a0)
               S06:00002610:  30 BC F5 67
F00:3084                   tst.w (a0)
               S06:00002614:  4A 50
F00:3085                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002616:  6A 1C
F00:3086                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002618:  67 1A
F00:3087                   
F00:3088           ; (An) - LONG       
F00:3089                   move.l #$00000000,(a0)
               S06:0000261A:  20 BC 00 00 00 00
F00:3090                   tst.l (a0)
               S06:00002620:  4A 90
F00:3091                   bmi TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002622:  6B 10
F00:3092                   bne TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002624:  66 0E
F00:3093                   move.l #$F56789ab,(a0)
               S06:00002626:  20 BC F5 67 89 AB
F00:3094                   tst.l (a0)
               S06:0000262C:  4A 90
F00:3095                   bpl TST_FAIL;                   ; Check N Flag  bmi/bpl
               S06:0000262E:  6A 04
F00:3096                   beq TST_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002630:  67 02
F00:3097       
F00:3098                   rts
               S06:00002632:  4E 75
F00:3099       
F00:3100       TST_FAIL: bra TST_FAIL    
               S06:00002634:  60 FE
F00:3101            
F00:3102       ;-----------------------------------------------------------
F00:3103       ;-----------------------------------------------------------
F00:3104       ; OPCODE : LINKS
F00:3105       ;-----------------------------------------------------------
F00:3106       ;-----------------------------------------------------------
F00:3107       op_LINKS: 
F00:3108       
F00:3109                   move.l #$11223344,a0
               S06:00002636:  20 7C 11 22 33 44
F00:3110                   move.l #$11223344,d0
               S06:0000263C:  20 3C 11 22 33 44
F00:3111                   link a0,#$0
               S06:00002642:  4E 50 00 00
F00:3112                   cmpi.l #$11223344,(a7)
               S06:00002646:  0C 97 11 22 33 44
F00:3113                   
F00:3114                   unlk a0
               S06:0000264C:  4E 58
F00:3115                   cmp.l d0,a0
               S06:0000264E:  B1 C0
F00:3116                   bne LINK_FAIL;                   ; branch if Z set  
               S06:00002650:  66 02
F00:3117       
F00:3118                   rts
               S06:00002652:  4E 75
F00:3119       
F00:3120       LINK_FAIL: bra LINK_FAIL
               S06:00002654:  60 FE
F00:3121       
F00:3122       ;-----------------------------------------------------------
F00:3123       ;-----------------------------------------------------------
F00:3124       ; OPCODE : MOVE_USP
F00:3125       ;-----------------------------------------------------------
F00:3126       ;-----------------------------------------------------------
F00:3127       op_MOVE_USP: 
F00:3128       
F00:3129                   move.l #$11223344,a0
               S06:00002656:  20 7C 11 22 33 44
F00:3130                   move a0,USP
               S06:0000265C:  4E 60
F00:3131                   move USP,a1
               S06:0000265E:  4E 69
F00:3132                   cmp.l a0,a1
               S06:00002660:  B3 C8
F00:3133                   bne MOVE_USP_FAIL;                   ; branch if Z set  
F00:3134       
F00:3135       MOVE_USP_FAIL: bra MOVE_USP_FAIL
               S06:00002662:  60 FE
F00:3136       
F00:3137       ;-----------------------------------------------------------
F00:3138       ;-----------------------------------------------------------
F00:3139       ; OPCODE : CHK
F00:3140       ;-----------------------------------------------------------
F00:3141       ;-----------------------------------------------------------
F00:3142       op_CHK: 
F00:3143                   move.w #$1122,d0
               S06:00002664:  30 3C 11 22
F00:3144                   move.w #$1122,d1
               S06:00002668:  32 3C 11 22
F00:3145                   chk d0,d1 
               S06:0000266C:  43 80
F00:3146                   
F00:3147                   nop
               S06:0000266E:  4E 71
F00:3148                   nop
               S06:00002670:  4E 71
F00:3149                   
F00:3150                   move.w #$1122,d1
               S06:00002672:  32 3C 11 22
F00:3151                   chk #$1122,d1 
               S06:00002676:  43 BC 11 22
F00:3152                           
F00:3153           ; Comment out when using Easy68K
F00:3154                   move.w #$1122,d1
               S06:0000267A:  32 3C 11 22
F00:3155                   chk #00122,d1 
               S06:0000267E:  43 BC 00 7A
F00:3156                   cmp.l #$EEEE0006,d6
               S06:00002682:  BC BC EE EE 00 06
F00:3157                   bne CHK_FAIL;                   ; branch if Z set  
               S06:00002688:  66 14
F00:3158       
F00:3159                   move.w #$1122,d0      
               S06:0000268A:  30 3C 11 22
F00:3160                   move.w #$8000,d1
               S06:0000268E:  32 3C 80 00
F00:3161                   chk d0,d1 
               S06:00002692:  43 80
F00:3162                   cmp.l #$EEEE0006,d6
               S06:00002694:  BC BC EE EE 00 06
F00:3163                   bne CHK_FAIL;                   ; branch if Z set  
               S06:0000269A:  66 02
F00:3164       
F00:3165                   rts
               S06:0000269C:  4E 75
F00:3166             
F00:3167       CHK_FAIL: bra CHK_FAIL
               S06:0000269E:  60 FE
F00:3168       
F00:3169       ;-----------------------------------------------------------
F00:3170       ;-----------------------------------------------------------
F00:3171       ; OPCODE : NEGS
F00:3172       ;-----------------------------------------------------------
F00:3173       ;-----------------------------------------------------------
F00:3174       op_NEGS: 
F00:3175       
F00:3176           ; NOT - BYTE
F00:3177                   move.l #$00000100,a0
               S06:000026A0:  30 7C 01 00
F00:3178                   move.l #$00000000,d0
               S06:000026A4:  70 00
F00:3179                   not.b d0
               S06:000026A6:  46 00
F00:3180                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026A8:  6A 00 04 94
F00:3181                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026AC:  67 00 04 90
F00:3182                   not.b d0
               S06:000026B0:  46 00
F00:3183                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026B2:  6B 00 04 8A
F00:3184                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026B6:  66 00 04 86
F00:3185                   cmpi.b #$00,d0
               S06:000026BA:  4A 00
F00:3186                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026BC:  66 00 04 80
F00:3187                   move.b #$80,(a0)
               S06:000026C0:  10 BC 00 80
F00:3188                   not.b (a0)
               S06:000026C4:  46 10
F00:3189                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026C6:  6B 00 04 76
F00:3190                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026CA:  67 00 04 72
F00:3191                   not.b (a0)
               S06:000026CE:  46 10
F00:3192                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026D0:  6A 00 04 6C
F00:3193                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026D4:  67 00 04 68
F00:3194                   cmpi.b #$80,(a0)
               S06:000026D8:  0C 10 00 80
F00:3195                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026DC:  66 00 04 60
F00:3196       
F00:3197           ; NOT - WORD
F00:3198                   move.l #$00000100,a0
               S06:000026E0:  30 7C 01 00
F00:3199                   move.l #$00000000,d0
               S06:000026E4:  70 00
F00:3200                   not.w d0
               S06:000026E6:  46 40
F00:3201                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026E8:  6A 00 04 54
F00:3202                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026EC:  67 00 04 50
F00:3203                   not.w d0
               S06:000026F0:  46 40
F00:3204                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:000026F2:  6B 00 04 4A
F00:3205                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026F6:  66 00 04 46
F00:3206                   cmpi.w #$0000,d0
               S06:000026FA:  4A 40
F00:3207                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000026FC:  66 00 04 40
F00:3208                   move.w #$5a5a,(a0)
               S06:00002700:  30 BC 5A 5A
F00:3209                   not.w (a0)
               S06:00002704:  46 50
F00:3210                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002706:  6A 00 04 36
F00:3211                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000270A:  67 00 04 32
F00:3212                   not.w (a0)
               S06:0000270E:  46 50
F00:3213                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002710:  6B 00 04 2C
F00:3214                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002714:  67 00 04 28
F00:3215                   cmpi.w #$5a5a,(a0)
               S06:00002718:  0C 50 5A 5A
F00:3216                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000271C:  66 00 04 20
F00:3217       
F00:3218           ; NOT - LONG
F00:3219                   move.l #$00000100,a0
               S06:00002720:  30 7C 01 00
F00:3220                   move.l #$00000000,d0
               S06:00002724:  70 00
F00:3221                   not.l d0
               S06:00002726:  46 80
F00:3222                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002728:  6A 00 04 14
F00:3223                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000272C:  67 00 04 10
F00:3224                   not.l d0
               S06:00002730:  46 80
F00:3225                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002732:  6B 00 04 0A
F00:3226                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002736:  66 00 04 06
F00:3227                   cmpi.l #$00000000,d0
               S06:0000273A:  4A 80
F00:3228                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000273C:  66 00 04 00
F00:3229                   move.l #$5a5a1234,(a0)
               S06:00002740:  20 BC 5A 5A 12 34
F00:3230                   not.l (a0)
               S06:00002746:  46 90
F00:3231                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002748:  6A 00 03 F4
F00:3232                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000274C:  67 00 03 F0
F00:3233                   not.l (a0)
               S06:00002750:  46 90
F00:3234                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl
               S06:00002752:  6B 00 03 EA
F00:3235                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002756:  67 00 03 E6
F00:3236                   cmpi.l #$5a5a1234,(a0)
               S06:0000275A:  0C 90 5A 5A 12 34
F00:3237                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002760:  66 00 03 DC
F00:3238       
F00:3239       ; ----- 
F00:3240       
F00:3241           ; NEG - BYTE
F00:3242                   move.l #$00000100,a0
               S06:00002764:  30 7C 01 00
F00:3243                   move.l #$00000000,d0
               S06:00002768:  70 00
F00:3244                   move.l #$00000080,d1
               S06:0000276A:  72 40 D2 41
F00:3245                   neg.b d0
               S06:0000276E:  44 00
F00:3246                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002770:  6B 00 03 CC
F00:3247                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002774:  66 00 03 C8
F00:3248                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002778:  65 00 03 C4
F00:3249                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:0000277C:  69 00 03 C0
F00:3250                   neg.b d1
               S06:00002780:  44 01
F00:3251                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002782:  6A 00 03 BA
F00:3252                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002786:  67 00 03 B6
F00:3253                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000278A:  64 00 03 B2
F00:3254                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:0000278E:  68 00 03 AE
F00:3255                   cmpi.b #$80,d1
               S06:00002792:  0C 01 00 80
F00:3256                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002796:  66 00 03 A6
F00:3257                   move.b #$7F,(a0)
               S06:0000279A:  10 BC 00 7F
F00:3258                   neg.b (a0)
               S06:0000279E:  44 10
F00:3259                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000027A0:  6A 00 03 9C
F00:3260                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000027A4:  67 00 03 98
F00:3261                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000027A8:  64 00 03 94
F00:3262                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:000027AC:  69 00 03 90
F00:3263                   move.b #$F5,(a0)
               S06:000027B0:  10 BC 00 F5
F00:3264                   neg.b (a0)
               S06:000027B4:  44 10
F00:3265                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000027B6:  6B 00 03 86
F00:3266                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000027BA:  67 00 03 82
F00:3267                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000027BE:  64 00 03 7E
F00:3268                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:000027C2:  69 00 03 7A
F00:3269                   cmpi.b #$0B,(a0)
               S06:000027C6:  0C 10 00 0B
F00:3270                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000027CA:  66 00 03 72
F00:3271       
F00:3272       ; -----         
F00:3273       
F00:3274           ; NEG - WORD
F00:3275                   move.l #$00000100,a0
               S06:000027CE:  30 7C 01 00
F00:3276                   move.l #$00000000,d0
               S06:000027D2:  70 00
F00:3277                   move.l #$00008000,d1
               S06:000027D4:  22 3C 00 00 80 00
F00:3278                   neg.w d0
               S06:000027DA:  44 40
F00:3279                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000027DC:  6B 00 03 60
F00:3280                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000027E0:  66 00 03 5C
F00:3281                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000027E4:  65 00 03 58
F00:3282                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000027E8:  69 00 03 54
F00:3283                   neg.w d1
               S06:000027EC:  44 41
F00:3284                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000027EE:  6A 00 03 4E
F00:3285                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000027F2:  67 00 03 4A
F00:3286                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000027F6:  64 00 03 46
F00:3287                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000027FA:  68 00 03 42
F00:3288                   cmpi.w #$8000,d1
               S06:000027FE:  0C 41 80 00
F00:3289                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002802:  66 00 03 3A
F00:3290                   move.w #$7FFF,(a0)
               S06:00002806:  30 BC 7F FF
F00:3291                   neg.w (a0)
               S06:0000280A:  44 50
F00:3292                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:0000280C:  6A 00 03 30
F00:3293                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002810:  67 00 03 2C
F00:3294                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002814:  64 00 03 28
F00:3295                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002818:  69 00 03 24
F00:3296                   move.w #$F578,(a0)
               S06:0000281C:  30 BC F5 78
F00:3297                   neg.w (a0)
               S06:00002820:  44 50
F00:3298                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002822:  6B 00 03 1A
F00:3299                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002826:  67 00 03 16
F00:3300                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000282A:  64 00 03 12
F00:3301                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:0000282E:  69 00 03 0E
F00:3302                   cmpi.w #$0A88,(a0)
               S06:00002832:  0C 50 0A 88
F00:3303                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002836:  66 00 03 06
F00:3304       
F00:3305       ; -----         
F00:3306       
F00:3307           ; NEG - LONG
F00:3308                   move.l #$00000100,a0
               S06:0000283A:  30 7C 01 00
F00:3309                   move.l #$00000000,d0
               S06:0000283E:  70 00
F00:3310                   move.l #$80000000,d1
               S06:00002840:  22 3C 80 00 00 00
F00:3311                   neg.l d0
               S06:00002846:  44 80
F00:3312                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002848:  6B 00 02 F4
F00:3313                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:0000284C:  66 00 02 F0
F00:3314                   bcs NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002850:  65 00 02 EC
F00:3315                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002854:  69 00 02 E8
F00:3316                   neg.l d1
               S06:00002858:  44 81
F00:3317                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:0000285A:  6A 00 02 E2
F00:3318                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000285E:  67 00 02 DE
F00:3319                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002862:  64 00 02 DA
F00:3320                   bvc NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002866:  68 00 02 D6
F00:3321                   cmpi.l #$80000000,d1
               S06:0000286A:  0C 81 80 00 00 00
F00:3322                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002870:  66 00 02 CC
F00:3323                   move.l #$7FFFFFFF,(a0)
               S06:00002874:  20 BC 7F FF FF FF
F00:3324                   neg.l (a0)
               S06:0000287A:  44 90
F00:3325                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:0000287C:  6A 00 02 C0
F00:3326                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002880:  67 00 02 BC
F00:3327                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002884:  64 00 02 B8
F00:3328                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002888:  69 00 02 B4
F00:3329                   move.l #$F5781234,(a0)
               S06:0000288C:  20 BC F5 78 12 34
F00:3330                   neg.l (a0)
               S06:00002892:  44 90
F00:3331                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002894:  6B 00 02 A8
F00:3332                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002898:  67 00 02 A4
F00:3333                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000289C:  64 00 02 A0
F00:3334                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:000028A0:  69 00 02 9C
F00:3335                   cmpi.l #$0A87EDCC,(a0)
               S06:000028A4:  0C 90 0A 87 ED CC
F00:3336                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:000028AA:  66 00 02 92
F00:3337       
F00:3338       
F00:3339       ; -----         
F00:3340       
F00:3341           ; NEGX - BYTE
F00:3342                   move.l #$00000100,a0
               S06:000028AE:  30 7C 01 00
F00:3343                   move.l #$00000000,d0
               S06:000028B2:  70 00
F00:3344                   move.l #$00000080,d1
               S06:000028B4:  72 40 D2 41
F00:3345                   ori.b #$10,CCR        ; Set X Flag
               S06:000028B8:  00 3C 00 10
F00:3346                   negx.b d0
               S06:000028BC:  40 00
F00:3347                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000028BE:  6A 00 02 7E
F00:3348                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000028C2:  67 00 02 7A
F00:3349                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000028C6:  64 00 02 76
F00:3350                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:000028CA:  69 00 02 72
F00:3351                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000028CE:  02 3C 00 EF
F00:3352                   negx.b d0
               S06:000028D2:  40 00
F00:3353                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000028D4:  6B 00 02 68
F00:3354                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000028D8:  67 00 02 64
F00:3355                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000028DC:  64 00 02 60
F00:3356                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000028E0:  69 00 02 5C
F00:3357                   ori.b #$10,CCR        ; Set X Flag
               S06:000028E4:  00 3C 00 10
F00:3358                   negx.b d1
               S06:000028E8:  40 01
F00:3359                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000028EA:  6B 00 02 52
F00:3360                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000028EE:  67 00 02 4E
F00:3361                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000028F2:  64 00 02 4A
F00:3362                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000028F6:  69 00 02 46
F00:3363                   cmpi.b #$7F,d1
               S06:000028FA:  0C 01 00 7F
F00:3364                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:000028FE:  66 00 02 3E
F00:3365                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002902:  02 3C 00 EF
F00:3366                   negx.b d1
               S06:00002906:  40 01
F00:3367                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002908:  6A 00 02 34
F00:3368                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000290C:  67 00 02 30
F00:3369                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002910:  64 00 02 2C
F00:3370                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002914:  69 00 02 28
F00:3371                   cmpi.b #$81,d1
               S06:00002918:  0C 01 00 81
F00:3372                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:0000291C:  66 00 02 20
F00:3373                   move.b #$7F,(a0)
               S06:00002920:  10 BC 00 7F
F00:3374                   ori.b #$10,CCR        ; Set X Flag
               S06:00002924:  00 3C 00 10
F00:3375                   negx.b (a0)
               S06:00002928:  40 10
F00:3376                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:0000292A:  6A 00 02 12
F00:3377                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:0000292E:  67 00 02 0E
F00:3378                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002932:  64 00 02 0A
F00:3379                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002936:  69 00 02 06
F00:3380                   move.b #$7F,(a0)
               S06:0000293A:  10 BC 00 7F
F00:3381                   andi.b #$EF,CCR       ; Clear X Flag
               S06:0000293E:  02 3C 00 EF
F00:3382                   negx.b (a0)
               S06:00002942:  40 10
F00:3383                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002944:  6A 00 01 F8
F00:3384                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002948:  67 00 01 F4
F00:3385                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:0000294C:  64 00 01 F0
F00:3386                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002950:  69 00 01 EC
F00:3387                   move.b #$F5,(a0)
               S06:00002954:  10 BC 00 F5
F00:3388                   ori.b #$10,CCR        ; Set X Flag
               S06:00002958:  00 3C 00 10
F00:3389                   negx.b (a0)
               S06:0000295C:  40 10
F00:3390                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000295E:  6B 00 01 DE
F00:3391                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002962:  67 00 01 DA
F00:3392                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002966:  64 00 01 D6
F00:3393                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:0000296A:  69 00 01 D2
F00:3394                   cmpi.b #$0A,(a0)
               S06:0000296E:  0C 10 00 0A
F00:3395                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002972:  66 00 01 CA
F00:3396                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002976:  02 3C 00 EF
F00:3397                   negx.b (a0)
               S06:0000297A:  40 10
F00:3398                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:0000297C:  6A 00 01 C0
F00:3399                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002980:  67 00 01 BC
F00:3400                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002984:  64 00 01 B8
F00:3401                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002988:  69 00 01 B4
F00:3402                   cmpi.b #$F6,(a0)
               S06:0000298C:  0C 10 00 F6
F00:3403                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002990:  66 00 01 AC
F00:3404       
F00:3405           
F00:3406       
F00:3407       ; -----         
F00:3408       
F00:3409           ; NEGX - WORD
F00:3410                   move.l #$00000100,a0
               S06:00002994:  30 7C 01 00
F00:3411                   move.l #$00000000,d0
               S06:00002998:  70 00
F00:3412                   move.l #$00008000,d1
               S06:0000299A:  22 3C 00 00 80 00
F00:3413                   ori.b #$10,CCR        ; Set X Flag
               S06:000029A0:  00 3C 00 10
F00:3414                   negx.w d0
               S06:000029A4:  40 40
F00:3415                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000029A6:  6A 00 01 96
F00:3416                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000029AA:  67 00 01 92
F00:3417                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000029AE:  64 00 01 8E
F00:3418                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:000029B2:  69 00 01 8A
F00:3419                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000029B6:  02 3C 00 EF
F00:3420                   negx.w d0
               S06:000029BA:  40 40
F00:3421                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:000029BC:  6B 00 01 80
F00:3422                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:000029C0:  67 00 01 7C
F00:3423                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:000029C4:  64 00 01 78
F00:3424                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:000029C8:  69 00 01 74
F00:3425                   ori.b #$10,CCR        ; Set X Flag
               S06:000029CC:  00 3C 00 10
F00:3426                   negx.w d1
               S06:000029D0:  40 41
F00:3427                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000029D2:  6B 00 01 6A
F00:3428                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000029D6:  67 00 01 66
F00:3429                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000029DA:  64 00 01 62
F00:3430                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000029DE:  69 00 01 5E
F00:3431                   cmpi.w #$7FFF,d1
               S06:000029E2:  0C 41 7F FF
F00:3432                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:000029E6:  66 00 01 56
F00:3433                   andi.b #$EF,CCR       ; Clear X Flag
               S06:000029EA:  02 3C 00 EF
F00:3434                   negx.w d1
               S06:000029EE:  40 41
F00:3435                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:000029F0:  6A 00 01 4C
F00:3436                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:000029F4:  67 00 01 48
F00:3437                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:000029F8:  64 00 01 44
F00:3438                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:000029FC:  69 00 01 40
F00:3439                   cmpi.w #$8001,d1
               S06:00002A00:  0C 41 80 01
F00:3440                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A04:  66 00 01 38
F00:3441                   move.w #$7FFF,(a0)
               S06:00002A08:  30 BC 7F FF
F00:3442                   ori.b #$10,CCR        ; Set X Flag
               S06:00002A0C:  00 3C 00 10
F00:3443                   negx.w (a0)
               S06:00002A10:  40 50
F00:3444                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002A12:  6A 00 01 2A
F00:3445                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A16:  67 00 01 26
F00:3446                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A1A:  64 00 01 22
F00:3447                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002A1E:  69 00 01 1E
F00:3448                   move.w #$F567,(a0)            
               S06:00002A22:  30 BC F5 67
F00:3449                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002A26:  02 3C 00 EF
F00:3450                   negx.w (a0)
               S06:00002A2A:  40 50
F00:3451                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002A2C:  6B 00 01 10
F00:3452                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A30:  67 00 01 0C
F00:3453                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A34:  64 00 01 08
F00:3454                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002A38:  69 00 01 04
F00:3455                   move.w #$F567,(a0)
               S06:00002A3C:  30 BC F5 67
F00:3456                   ori.b #$10,CCR        ; Set X Flag
               S06:00002A40:  00 3C 00 10
F00:3457                   negx.w (a0)
               S06:00002A44:  40 50
F00:3458                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A46:  6B 00 00 F6
F00:3459                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A4A:  67 00 00 F2
F00:3460                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A4E:  64 00 00 EE
F00:3461                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002A52:  69 00 00 EA
F00:3462                   cmpi.w #$0A98,(a0)
               S06:00002A56:  0C 50 0A 98
F00:3463                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A5A:  66 00 00 E2
F00:3464                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002A5E:  02 3C 00 EF
F00:3465                   negx.w (a0)
               S06:00002A62:  40 50
F00:3466                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A64:  6A 00 00 D8
F00:3467                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002A68:  67 00 00 D4
F00:3468                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002A6C:  64 00 00 D0
F00:3469                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002A70:  69 00 00 CC
F00:3470                   cmpi.w #$F568,(a0)
               S06:00002A74:  0C 50 F5 68
F00:3471                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002A78:  66 00 00 C4
F00:3472       
F00:3473                   
F00:3474       ; -----         
F00:3475           ; NEGX - LONG
F00:3476                   move.l #$00000100,a0
               S06:00002A7C:  30 7C 01 00
F00:3477                   move.l #$00000000,d0
               S06:00002A80:  70 00
F00:3478                   move.l #$80000000,d1
               S06:00002A82:  22 3C 80 00 00 00
F00:3479                   ori.b #$10,CCR        ; Set X Flag
               S06:00002A88:  00 3C 00 10
F00:3480                   negx.l d0
               S06:00002A8C:  40 80
F00:3481                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002A8E:  6A 00 00 AE
F00:3482                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002A92:  67 00 00 AA
F00:3483                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002A96:  64 00 00 A6
F00:3484                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1           
               S06:00002A9A:  69 00 00 A2
F00:3485                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002A9E:  02 3C 00 EF
F00:3486                   negx.l d0
               S06:00002AA2:  40 80
F00:3487                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002AA4:  6B 00 00 98
F00:3488                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 1
               S06:00002AA8:  67 00 00 94
F00:3489                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 1
               S06:00002AAC:  64 00 00 90
F00:3490                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1
               S06:00002AB0:  69 00 00 8C
F00:3491                   ori.b #$10,CCR        ; Set X Flag
               S06:00002AB4:  00 3C 00 10
F00:3492                   negx.l d1
               S06:00002AB8:  40 81
F00:3493                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002ABA:  6B 00 00 82
F00:3494                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002ABE:  67 7E
F00:3495                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002AC0:  64 7C
F00:3496                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002AC2:  69 7A
F00:3497                   cmpi.l #$7FFFFFFF,d1
               S06:00002AC4:  0C 81 7F FF FF FF
F00:3498                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne         
               S06:00002ACA:  66 72
F00:3499                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002ACC:  02 3C 00 EF
F00:3500                   negx.l d1
               S06:00002AD0:  40 81
F00:3501                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002AD2:  6A 6A
F00:3502                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002AD4:  67 68
F00:3503                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002AD6:  64 66
F00:3504                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 0       
               S06:00002AD8:  69 64
F00:3505                   cmpi.l #$80000001,d1
               S06:00002ADA:  0C 81 80 00 00 01
F00:3506                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002AE0:  66 5C
F00:3507                   move.l #$7FFF,(a0)
               S06:00002AE2:  20 BC 00 00 7F FF
F00:3508                   ori.b #$10,CCR        ; Set X Flag
               S06:00002AE8:  00 3C 00 10
F00:3509                   negx.l (a0)
               S06:00002AEC:  40 90
F00:3510                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002AEE:  6A 4E
F00:3511                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002AF0:  67 4C
F00:3512                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002AF2:  64 4A
F00:3513                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002AF4:  69 48
F00:3514                   move.l #$F5671234,(a0)            
               S06:00002AF6:  20 BC F5 67 12 34
F00:3515                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002AFC:  02 3C 00 EF
F00:3516                   negx.l (a0)
               S06:00002B00:  40 90
F00:3517                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 1
               S06:00002B02:  6B 3A
F00:3518                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B04:  67 38
F00:3519                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B06:  64 36
F00:3520                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1          
               S06:00002B08:  69 34
F00:3521                   move.l #$F5675678,(a0)
               S06:00002B0A:  20 BC F5 67 56 78
F00:3522                   ori.b #$10,CCR        ; Set X Flag
               S06:00002B10:  00 3C 00 10
F00:3523                   negx.l (a0)
               S06:00002B14:  40 90
F00:3524                   bmi NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B16:  6B 26
F00:3525                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B18:  67 24
F00:3526                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B1A:  64 22
F00:3527                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002B1C:  69 20
F00:3528                   cmpi.l #$0A98A987,(a0)
               S06:00002B1E:  0C 90 0A 98 A9 87
F00:3529                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002B24:  66 18
F00:3530                   andi.b #$EF,CCR       ; Clear X Flag
               S06:00002B26:  02 3C 00 EF
F00:3531                   negx.l (a0)
               S06:00002B2A:  40 90
F00:3532                   bpl NEGS_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B2C:  6A 10
F00:3533                   beq NEGS_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B2E:  67 0E
F00:3534                   bcc NEGS_FAIL;                   ; Check C Flag  bcc/bcs 0
               S06:00002B30:  64 0C
F00:3535                   bvs NEGS_FAIL;                   ; Check V Flag  bvc/bvs 1       
               S06:00002B32:  69 0A
F00:3536                   cmpi.l #$F5675679,(a0)
               S06:00002B34:  0C 90 F5 67 56 79
F00:3537                   bne NEGS_FAIL;                   ; Check Z Flag  beq/bne
               S06:00002B3A:  66 02
F00:3538       
F00:3539               rts
               S06:00002B3C:  4E 75
F00:3540       
F00:3541               NEGS_FAIL: bra NEGS_FAIL
               S06:00002B3E:  60 FE
F00:3542       
F00:3543              
F00:3544       ; -----         
F00:3545       
F00:3546       op_CLR:
F00:3547           ; CLR - BYTE
F00:3548                   move.l #$00000100,a0
               S06:00002B40:  30 7C 01 00
F00:3549                   move.l #$12345678,d0
               S06:00002B44:  20 3C 12 34 56 78
F00:3550                   move.l #$12345678,d1                   
               S06:00002B4A:  22 3C 12 34 56 78
F00:3551                   move.l #$12345678,d2                   
               S06:00002B50:  24 3C 12 34 56 78
F00:3552                   move.l #$12345600,d4                   
               S06:00002B56:  28 3C 12 34 56 00
F00:3553                   move.l #$12340000,d5                   
               S06:00002B5C:  2A 3C 12 34 00 00
F00:3554                   move.l #$00000000,d6                   
               S06:00002B62:  7C 00
F00:3555                   
F00:3556                   clr.b d0
               S06:00002B64:  42 00
F00:3557                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B66:  66 1C
F00:3558                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B68:  6B 1A
F00:3559                   cmp.l d0,d4
               S06:00002B6A:  B8 80
F00:3560                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B6C:  66 16
F00:3561                   
F00:3562                   clr.w d1
               S06:00002B6E:  42 41
F00:3563                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B70:  66 12
F00:3564                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B72:  6B 10
F00:3565                   cmp.l d1,d5
               S06:00002B74:  BA 81
F00:3566                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B76:  66 0C
F00:3567                   
F00:3568                   clr.l d2
               S06:00002B78:  74 00
F00:3569                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B7A:  66 08
F00:3570                   bmi CLR_FAIL;                   ; Check N Flag  bmi/bpl 0
               S06:00002B7C:  6B 06
F00:3571                   cmp.l d2,d6
               S06:00002B7E:  BC 82
F00:3572                   bne CLR_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002B80:  66 02
F00:3573       
F00:3574                   rts      
               S06:00002B82:  4E 75
F00:3575                   
F00:3576       CLR_FAIL: bra CLR_FAIL
               S06:00002B84:  60 FE
F00:3577                                 
F00:3578       ;-----------------------------------------------------------
F00:3579       ;-----------------------------------------------------------
F00:3580       ; OPCODE : MOVEM
F00:3581       ;-----------------------------------------------------------
F00:3582       ;-----------------------------------------------------------
F00:3583       op_MOVEM: 
F00:3584       
F00:3585           ; WORD  Registers --> Memory
F00:3586                   move.l #$0000d0d0,d0
               S06:00002B86:  20 3C 00 00 D0 D0
F00:3587                   move.l #$0000d1d1,d1
               S06:00002B8C:  22 3C 00 00 D1 D1
F00:3588                   move.l #$0000d2d2,d2
               S06:00002B92:  24 3C 00 00 D2 D2
F00:3589                   move.l #$0000d3d3,d3
               S06:00002B98:  26 3C 00 00 D3 D3
F00:3590                   move.l #$0000d4d4,d4
               S06:00002B9E:  28 3C 00 00 D4 D4
F00:3591                   move.l #$0000d5d5,d5
               S06:00002BA4:  2A 3C 00 00 D5 D5
F00:3592                   move.l #$0000d6d6,d6
               S06:00002BAA:  2C 3C 00 00 D6 D6
F00:3593                   move.l #$0000d7d7,d7
               S06:00002BB0:  2E 3C 00 00 D7 D7
F00:3594                   move.l #$00000a0a,a0
               S06:00002BB6:  30 7C 0A 0A
F00:3595                   move.l #$00001a1a,a1
               S06:00002BBA:  32 7C 1A 1A
F00:3596                   move.l #$00002a2a,a2
               S06:00002BBE:  34 7C 2A 2A
F00:3597                   move.l #$00003a3a,a3
               S06:00002BC2:  36 7C 3A 3A
F00:3598                   move.l #$00004a4a,a4
               S06:00002BC6:  38 7C 4A 4A
F00:3599                   move.l #$00005a5a,a5
               S06:00002BCA:  3A 7C 5A 5A
F00:3600                   move.l #$00006a6a,a6
               S06:00002BCE:  3C 7C 6A 6A
F00:3601                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3602                   
F00:3603                   movem.w D0-D7/A0-A7,$00000100  
               S06:00002BD2:  48 B8 FF FF 01 00
F00:3604                   
F00:3605                   move.l #$00000100,a0
               S06:00002BD8:  30 7C 01 00
F00:3606                   
F00:3607                   cmp.w (a0)+,d0            
               S06:00002BDC:  B0 58
F00:3608                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BDE:  66 00 03 3C
F00:3609                   cmp.w (a0)+,d1            
               S06:00002BE2:  B2 58
F00:3610                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BE4:  66 00 03 36
F00:3611                   cmp.w (a0)+,d2            
               S06:00002BE8:  B4 58
F00:3612                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BEA:  66 00 03 30
F00:3613                   cmp.w (a0)+,d3            
               S06:00002BEE:  B6 58
F00:3614                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BF0:  66 00 03 2A
F00:3615                   cmp.w (a0)+,d4            
               S06:00002BF4:  B8 58
F00:3616                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BF6:  66 00 03 24
F00:3617                   cmp.w (a0)+,d5            
               S06:00002BFA:  BA 58
F00:3618                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002BFC:  66 00 03 1E
F00:3619                   cmp.w (a0)+,d6            
               S06:00002C00:  BC 58
F00:3620                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C02:  66 00 03 18
F00:3621                   cmp.w (a0)+,d7            
               S06:00002C06:  BE 58
F00:3622                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C08:  66 00 03 12
F00:3623       
F00:3624                   cmp.w #$0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:00002C0C:  0C 58 0A 0A
F00:3625                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C10:  66 00 03 0A
F00:3626        
F00:3627                   cmp.w (a0)+,a1
               S06:00002C14:  B2 D8
F00:3628                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C16:  66 00 03 04
F00:3629                   cmp.w (a0)+,a2
               S06:00002C1A:  B4 D8
F00:3630                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C1C:  66 00 02 FE
F00:3631                   cmp.w (a0)+,a3
               S06:00002C20:  B6 D8
F00:3632                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C22:  66 00 02 F8
F00:3633                   cmp.w (a0)+,a4
               S06:00002C26:  B8 D8
F00:3634                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C28:  66 00 02 F2
F00:3635                   cmp.w (a0)+,a5
               S06:00002C2C:  BA D8
F00:3636                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C2E:  66 00 02 EC
F00:3637                   cmp.w (a0)+,a6
               S06:00002C32:  BC D8
F00:3638                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C34:  66 00 02 E6
F00:3639                 
F00:3640       
F00:3641       
F00:3642       
F00:3643           ; LONG  Registers --> Memory
F00:3644                   move.l #$d0d0d0d0,d0
               S06:00002C38:  20 3C D0 D0 D0 D0
F00:3645                   move.l #$d1d1d1d1,d1
               S06:00002C3E:  22 3C D1 D1 D1 D1
F00:3646                   move.l #$d2d2d2d2,d2
               S06:00002C44:  24 3C D2 D2 D2 D2
F00:3647                   move.l #$d3d3d3d3,d3
               S06:00002C4A:  26 3C D3 D3 D3 D3
F00:3648                   move.l #$d4d4d4d4,d4
               S06:00002C50:  28 3C D4 D4 D4 D4
F00:3649                   move.l #$d5d5d5d5,d5
               S06:00002C56:  2A 3C D5 D5 D5 D5
F00:3650                   move.l #$d6d6d6d6,d6
               S06:00002C5C:  2C 3C D6 D6 D6 D6
F00:3651                   move.l #$d7d7d7d7,d7
               S06:00002C62:  2E 3C D7 D7 D7 D7
F00:3652                   move.l #$0a0a0a0a,a0
               S06:00002C68:  20 7C 0A 0A 0A 0A
F00:3653                   move.l #$1a1a1a1a,a1
               S06:00002C6E:  22 7C 1A 1A 1A 1A
F00:3654                   move.l #$2a2a2a2a,a2
               S06:00002C74:  24 7C 2A 2A 2A 2A
F00:3655                   move.l #$3a3a3a3a,a3
               S06:00002C7A:  26 7C 3A 3A 3A 3A
F00:3656                   move.l #$4a4a4a4a,a4
               S06:00002C80:  28 7C 4A 4A 4A 4A
F00:3657                   move.l #$5a5a5a5a,a5
               S06:00002C86:  2A 7C 5A 5A 5A 5A
F00:3658                   move.l #$6a6a6a6a,a6
               S06:00002C8C:  2C 7C 6A 6A 6A 6A
F00:3659                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3660                   
F00:3661                   
F00:3662                   movem.l D0-D7/A0-A7,$00000120  
               S06:00002C92:  48 F8 FF FF 01 20
F00:3663                   
F00:3664                   move.l #$00000120,a0
               S06:00002C98:  30 7C 01 20
F00:3665                   
F00:3666                   cmp.l (a0)+,d0            
               S06:00002C9C:  B0 98
F00:3667                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002C9E:  66 00 02 7C
F00:3668                   cmp.l (a0)+,d1            
               S06:00002CA2:  B2 98
F00:3669                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CA4:  66 00 02 76
F00:3670                   cmp.l (a0)+,d2            
               S06:00002CA8:  B4 98
F00:3671                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CAA:  66 00 02 70
F00:3672                   cmp.l (a0)+,d3            
               S06:00002CAE:  B6 98
F00:3673                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CB0:  66 00 02 6A
F00:3674                   cmp.l (a0)+,d4            
               S06:00002CB4:  B8 98
F00:3675                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CB6:  66 00 02 64
F00:3676                   cmp.l (a0)+,d5            
               S06:00002CBA:  BA 98
F00:3677                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CBC:  66 00 02 5E
F00:3678                   cmp.l (a0)+,d6            
               S06:00002CC0:  BC 98
F00:3679                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CC2:  66 00 02 58
F00:3680                   cmp.l (a0)+,d7            
               S06:00002CC6:  BE 98
F00:3681                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CC8:  66 00 02 52
F00:3682       
F00:3683                   cmp.l #$0A0A0A0A,(a0)+    ; Because we are using a0 as a pointer
               S06:00002CCC:  0C 98 0A 0A 0A 0A
F00:3684                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CD2:  66 00 02 48
F00:3685        
F00:3686                   cmp.l (a0)+,a1
               S06:00002CD6:  B3 D8
F00:3687                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CD8:  66 00 02 42
F00:3688                   cmp.l (a0)+,a2
               S06:00002CDC:  B5 D8
F00:3689                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CDE:  66 00 02 3C
F00:3690                   cmp.l (a0)+,a3
               S06:00002CE2:  B7 D8
F00:3691                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CE4:  66 00 02 36
F00:3692                   cmp.l (a0)+,a4
               S06:00002CE8:  B9 D8
F00:3693                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CEA:  66 00 02 30
F00:3694                   cmp.l (a0)+,a5
               S06:00002CEE:  BB D8
F00:3695                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CF0:  66 00 02 2A
F00:3696                   cmp.l (a0)+,a6
               S06:00002CF4:  BD D8
F00:3697                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002CF6:  66 00 02 24
F00:3698            ; ----
F00:3699       
F00:3700       
F00:3701           ; WORD  Registers --> Memory  -(An) EA Mode
F00:3702                   move.l #$0000d0d0,d0
               S06:00002CFA:  20 3C 00 00 D0 D0
F00:3703                   move.l #$0000d1d1,d1
               S06:00002D00:  22 3C 00 00 D1 D1
F00:3704                   move.l #$0000d2d2,d2
               S06:00002D06:  24 3C 00 00 D2 D2
F00:3705                   move.l #$0000d3d3,d3
               S06:00002D0C:  26 3C 00 00 D3 D3
F00:3706                   move.l #$0000d4d4,d4
               S06:00002D12:  28 3C 00 00 D4 D4
F00:3707                   move.l #$0000d5d5,d5
               S06:00002D18:  2A 3C 00 00 D5 D5
F00:3708                   move.l #$0000d6d6,d6
               S06:00002D1E:  2C 3C 00 00 D6 D6
F00:3709                   move.l #$0000d7d7,d7
               S06:00002D24:  2E 3C 00 00 D7 D7
F00:3710                   move.l #$00000a0a,a0
               S06:00002D2A:  30 7C 0A 0A
F00:3711                   move.l #$00001a1a,a1
               S06:00002D2E:  32 7C 1A 1A
F00:3712                   move.l #$00002a2a,a2
               S06:00002D32:  34 7C 2A 2A
F00:3713                   move.l #$00003a3a,a3
               S06:00002D36:  36 7C 3A 3A
F00:3714                   move.l #$00004a4a,a4
               S06:00002D3A:  38 7C 4A 4A
F00:3715                   move.l #$00005a5a,a5
               S06:00002D3E:  3A 7C 5A 5A
F00:3716                   move.l #$00006a6a,a6
               S06:00002D42:  3C 7C 6A 6A
F00:3717                  ;move.l #$00007a7a,a7  ; Dont change the Stack Pointer
F00:3718                  
F00:3719                   move.l #$000001A0,a0
               S06:00002D46:  30 7C 01 A0
F00:3720                   movem.w D0-D7/A0-A7,-(a0)  
               S06:00002D4A:  48 A0 FF FF
F00:3721                   
F00:3722                   move.l #$0000019E,a0
               S06:00002D4E:  30 7C 01 9E
F00:3723                   
F00:3724                   cmp.w -(a0),a6            
               S06:00002D52:  BC E0
F00:3725                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D54:  66 00 01 C6
F00:3726                   cmp.w -(a0),a5            
               S06:00002D58:  BA E0
F00:3727                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D5A:  66 00 01 C0
F00:3728                   cmp.w -(a0),a4            
               S06:00002D5E:  B8 E0
F00:3729                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D60:  66 00 01 BA
F00:3730                   cmp.w -(a0),a3            
               S06:00002D64:  B6 E0
F00:3731                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D66:  66 00 01 B4
F00:3732                   cmp.w -(a0),a2            
               S06:00002D6A:  B4 E0
F00:3733                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D6C:  66 00 01 AE
F00:3734                   cmp.w -(a0),a1            
               S06:00002D70:  B2 E0
F00:3735                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D72:  66 00 01 A8
F00:3736                   cmp.w -(a0),a0            
               S06:00002D76:  B0 E0
F00:3737                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3738                   cmp.w -(a0),d7            
               S06:00002D78:  BE 60
F00:3739                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D7A:  66 00 01 A0
F00:3740                   cmp.w -(a0),d6
               S06:00002D7E:  BC 60
F00:3741                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D80:  66 00 01 9A
F00:3742                   cmp.w -(a0),d5
               S06:00002D84:  BA 60
F00:3743                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D86:  66 00 01 94
F00:3744                   cmp.w -(a0),d4
               S06:00002D8A:  B8 60
F00:3745                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D8C:  66 00 01 8E
F00:3746                   cmp.w -(a0),d3
               S06:00002D90:  B6 60
F00:3747                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D92:  66 00 01 88
F00:3748                   cmp.w -(a0),d2
               S06:00002D96:  B4 60
F00:3749                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D98:  66 00 01 82
F00:3750                   cmp.w -(a0),d1
               S06:00002D9C:  B2 60
F00:3751                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002D9E:  66 00 01 7C
F00:3752                   cmp.w -(a0),d0
               S06:00002DA2:  B0 60
F00:3753                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002DA4:  66 00 01 76
F00:3754                 
F00:3755       
F00:3756       
F00:3757       
F00:3758           ; LONG  Registers --> Memory   -(An) EA Mode
F00:3759                   move.l #$d0d0d0d0,d0
               S06:00002DA8:  20 3C D0 D0 D0 D0
F00:3760                   move.l #$d1d1d1d1,d1
               S06:00002DAE:  22 3C D1 D1 D1 D1
F00:3761                   move.l #$d2d2d2d2,d2
               S06:00002DB4:  24 3C D2 D2 D2 D2
F00:3762                   move.l #$d3d3d3d3,d3
               S06:00002DBA:  26 3C D3 D3 D3 D3
F00:3763                   move.l #$d4d4d4d4,d4
               S06:00002DC0:  28 3C D4 D4 D4 D4
F00:3764                   move.l #$d5d5d5d5,d5
               S06:00002DC6:  2A 3C D5 D5 D5 D5
F00:3765                   move.l #$d6d6d6d6,d6
               S06:00002DCC:  2C 3C D6 D6 D6 D6
F00:3766                   move.l #$d7d7d7d7,d7
               S06:00002DD2:  2E 3C D7 D7 D7 D7
F00:3767                   move.l #$0a0a0a0a,a0
               S06:00002DD8:  20 7C 0A 0A 0A 0A
F00:3768                   move.l #$1a1a1a1a,a1
               S06:00002DDE:  22 7C 1A 1A 1A 1A
F00:3769                   move.l #$2a2a2a2a,a2
               S06:00002DE4:  24 7C 2A 2A 2A 2A
F00:3770                   move.l #$3a3a3a3a,a3
               S06:00002DEA:  26 7C 3A 3A 3A 3A
F00:3771                   move.l #$4a4a4a4a,a4
               S06:00002DF0:  28 7C 4A 4A 4A 4A
F00:3772                   move.l #$5a5a5a5a,a5
               S06:00002DF6:  2A 7C 5A 5A 5A 5A
F00:3773                   move.l #$6a6a6a6a,a6
               S06:00002DFC:  2C 7C 6A 6A 6A 6A
F00:3774                  ;move.l #$7a7a7a7a,a7  ; Dont change the Stack Pointer
F00:3775                   
F00:3776                
F00:3777                   move.l #$000001A0,a0
               S06:00002E02:  30 7C 01 A0
F00:3778                   movem.l D0-D7/A0-A7,-(a0)  
               S06:00002E06:  48 E0 FF FF
F00:3779                   
F00:3780                   move.l #$0000019C,a0
               S06:00002E0A:  30 7C 01 9C
F00:3781                   
F00:3782                   cmp.l -(a0),a6            
               S06:00002E0E:  BD E0
F00:3783                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E10:  66 00 01 0A
F00:3784                   cmp.l -(a0),a5            
               S06:00002E14:  BB E0
F00:3785                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E16:  66 00 01 04
F00:3786                   cmp.l -(a0),a4            
               S06:00002E1A:  B9 E0
F00:3787                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E1C:  66 00 00 FE
F00:3788                   cmp.l -(a0),a3            
               S06:00002E20:  B7 E0
F00:3789                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E22:  66 00 00 F8
F00:3790                   cmp.l -(a0),a2            
               S06:00002E26:  B5 E0
F00:3791                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E28:  66 00 00 F2
F00:3792                   cmp.l -(a0),a1            
               S06:00002E2C:  B3 E0
F00:3793                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E2E:  66 00 00 EC
F00:3794                   cmp.l -(a0),a0            
               S06:00002E32:  B1 E0
F00:3795                  ; bne ;                   ; Check Z Flag  beq/bne 0
F00:3796                   cmp.l -(a0),d7            
               S06:00002E34:  BE A0
F00:3797                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E36:  66 00 00 E4
F00:3798                   cmp.l -(a0),d6
               S06:00002E3A:  BC A0
F00:3799                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E3C:  66 00 00 DE
F00:3800                   cmp.l -(a0),d5
               S06:00002E40:  BA A0
F00:3801                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E42:  66 00 00 D8
F00:3802                   cmp.l -(a0),d4
               S06:00002E46:  B8 A0
F00:3803                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E48:  66 00 00 D2
F00:3804                   cmp.l -(a0),d3
               S06:00002E4C:  B6 A0
F00:3805                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E4E:  66 00 00 CC
F00:3806                   cmp.l -(a0),d2
               S06:00002E52:  B4 A0
F00:3807                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E54:  66 00 00 C6
F00:3808                   cmp.l -(a0),d1
               S06:00002E58:  B2 A0
F00:3809                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E5A:  66 00 00 C0
F00:3810                   cmp.l -(a0),d0
               S06:00002E5E:  B0 A0
F00:3811                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E60:  66 00 00 BA
F00:3812                 
F00:3813       
F00:3814       
F00:3815            ;----     
F00:3816                 
F00:3817           ; WORD - Memory --> Registers
F00:3818                   move.l #$00000000,d0
               S06:00002E64:  70 00
F00:3819                   move.l #$00000000,d1
               S06:00002E66:  72 00
F00:3820                   move.l #$00000000,d2
               S06:00002E68:  74 00
F00:3821                   move.l #$00000000,d3
               S06:00002E6A:  76 00
F00:3822                   move.l #$00000000,d4
               S06:00002E6C:  78 00
F00:3823                   move.l #$00000000,d5
               S06:00002E6E:  7A 00
F00:3824                   move.l #$00000000,d6
               S06:00002E70:  7C 00
F00:3825                   move.l #$00000000,d7
               S06:00002E72:  7E 00
F00:3826                   move.l #$00000000,a0
               S06:00002E74:  91 C8
F00:3827                   move.l #$00000000,a1
               S06:00002E76:  93 C9
F00:3828                   move.l #$00000000,a2
               S06:00002E78:  95 CA
F00:3829                   move.l #$00000000,a3
               S06:00002E7A:  97 CB
F00:3830                   move.l #$00000000,a4
               S06:00002E7C:  99 CC
F00:3831                   move.l #$00000000,a5
               S06:00002E7E:  9B CD
F00:3832                   move.l #$00000000,a6
               S06:00002E80:  9D CE
F00:3833                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:3834                   
F00:3835                   movem.w $00000100,D0/D2/D4/D6/A1/A3/A5   
               S06:00002E82:  4C B8 2A 55 01 00
F00:3836                   
F00:3837                   cmp.l #$FFFFD0D0,d0           
               S06:00002E88:  B0 BC FF FF D0 D0
F00:3838                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002E8E:  66 00 00 8C
F00:3839                   cmp.l #$FFFFD1D1,d2           
               S06:00002E92:  B4 BC FF FF D1 D1
F00:3840                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:00002E98:  66 00 00 82
F00:3841                   cmp.l #$FFFFD2D2,d4           
               S06:00002E9C:  B8 BC FF FF D2 D2
F00:3842                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EA2:  66 78
F00:3843                   cmp.l #$FFFFD3D3,d6           
               S06:00002EA4:  BC BC FF FF D3 D3
F00:3844                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EAA:  66 70
F00:3845                   cmp.l #$FFFFD4D4,a1           
               S06:00002EAC:  B2 FC D4 D4
F00:3846                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EB0:  66 6A
F00:3847                   cmp.l #$FFFFD5D5,a3           
               S06:00002EB2:  B6 FC D5 D5
F00:3848                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EB6:  66 64
F00:3849                   cmp.l #$FFFFD6D6,a5           
               S06:00002EB8:  BA FC D6 D6
F00:3850                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EBC:  66 5E
F00:3851                   
F00:3852        
F00:3853           ; LONG - Memory --> Registers
F00:3854                   move.l #$00000000,d0
               S06:00002EBE:  70 00
F00:3855                   move.l #$00000000,d1
               S06:00002EC0:  72 00
F00:3856                   move.l #$00000000,d2
               S06:00002EC2:  74 00
F00:3857                   move.l #$00000000,d3
               S06:00002EC4:  76 00
F00:3858                   move.l #$00000000,d4
               S06:00002EC6:  78 00
F00:3859                   move.l #$00000000,d5
               S06:00002EC8:  7A 00
F00:3860                   move.l #$00000000,d6
               S06:00002ECA:  7C 00
F00:3861                   move.l #$00000000,d7
               S06:00002ECC:  7E 00
F00:3862                   move.l #$00000000,a0
               S06:00002ECE:  91 C8
F00:3863                   move.l #$00000000,a1
               S06:00002ED0:  93 C9
F00:3864                   move.l #$00000000,a2
               S06:00002ED2:  95 CA
F00:3865                   move.l #$00000000,a3
               S06:00002ED4:  97 CB
F00:3866                   move.l #$00000000,a4
               S06:00002ED6:  99 CC
F00:3867                   move.l #$00000000,a5
               S06:00002ED8:  9B CD
F00:3868                   move.l #$00000000,a6
               S06:00002EDA:  9D CE
F00:3869                  ;move.l #$00000000,a7  ; Dont change the Stack Pointer
F00:3870                   
F00:3871                   movem.l $00000120,D0/D2/D4/D6/A1/A3/A5   
               S06:00002EDC:  4C F8 2A 55 01 20
F00:3872                   
F00:3873                   cmp.l #$D0D0D0D0,d0           
               S06:00002EE2:  B0 BC D0 D0 D0 D0
F00:3874                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EE8:  66 32
F00:3875                   cmp.l #$D1D1D1D1,d2           
               S06:00002EEA:  B4 BC D1 D1 D1 D1
F00:3876                   bne MOVEM_FAIL;                  ; Check Z Flag  beq/bne 0
               S06:00002EF0:  66 2A
F00:3877                   cmp.l #$D2D2D2D2,d4           
               S06:00002EF2:  B8 BC D2 D2 D2 D2
F00:3878                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002EF8:  66 22
F00:3879                   cmp.l #$D3D3D3D3,d6           
               S06:00002EFA:  BC BC D3 D3 D3 D3
F00:3880                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F00:  66 1A
F00:3881                   cmp.l #$D4D4D4D4,a1           
               S06:00002F02:  B3 FC D4 D4 D4 D4
F00:3882                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F08:  66 12
F00:3883                   cmp.l #$D5D5D5D5,a3           
               S06:00002F0A:  B7 FC D5 D5 D5 D5
F00:3884                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F10:  66 0A
F00:3885                   cmp.l #$D6D6D6D6,a5           
               S06:00002F12:  BB FC D6 D6 D6 D6
F00:3886                   bne MOVEM_FAIL;                   ; Check Z Flag  beq/bne 0
               S06:00002F18:  66 02
F00:3887                   
F00:3888                   rts     
               S06:00002F1A:  4E 75
F00:3889       
F00:3890       MOVEM_FAIL: bra MOVEM_FAIL
               S06:00002F1C:  60 FE
F00:3891       
F00:3892       ;-----------------------------------------------------------
F00:3893       ;-----------------------------------------------------------
F00:3894       ; OPCODE : ABCD
F00:3895       ;-----------------------------------------------------------
F00:3896       ;-----------------------------------------------------------
F00:3897       op_ABCD: 
F00:3898           
F00:3899           ; Test with X Flag CLEARED
F00:3900                       move.l #$00000110,a0 ; Address pointer-X
               S06:00002F1E:  30 7C 01 10
F00:3901                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00002F22:  32 7C 01 20
F00:3902                       move.l #$00000000,d0 ; BCD byte-X
               S06:00002F26:  70 00
F00:3903                       move.l #$00000000,d1 ; BCD byte-Y
               S06:00002F28:  72 00
F00:3904                       move.l #$00000000,d2
               S06:00002F2A:  74 00
F00:3905                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00002F2C:  76 00
F00:3906                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00002F2E:  78 00
F00:3907                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00002F30:  7A 00
F00:3908                       move.l #$00000099,d6 ; Inner loop counter
               S06:00002F32:  2C 3C 00 00 00 99
F00:3909                       move.l #$00000099,d7 ; Outer loop counter
               S06:00002F38:  2E 3C 00 00 00 99
F00:3910       
F00:3911       ABCD_OUTER1:    move.l d7,d0
               S06:00002F3E:  20 07
F00:3912       ABCD_INNER1:    move.l d6,d1
               S06:00002F40:  22 06
F00:3913                       andi.b #$EF,CCR     ; Clear X Flag
               S06:00002F42:  02 3C 00 EF
F00:3914                       move.l #$00000110,a0 ; Address pointer-X
               S06:00002F46:  30 7C 01 10
F00:3915                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00002F4A:  32 7C 01 20
F00:3916                       move.b d0,-1(a0)
               S06:00002F4E:  11 40 FF FF
F00:3917                       move.b d1,-1(a1)
               S06:00002F52:  13 41 FF FF
F00:3918                       
F00:3919                       abcd d0,d1
               S06:00002F56:  C3 00
F00:3920                       bcc ABCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:00002F58:  64 02
F00:3921                       add.l #1,d4
               S06:00002F5A:  52 84
F00:3922       ABCD_NO_C1:     add.l d1,d5
               S06:00002F5C:  DA 81
F00:3923                       
F00:3924                       abcd -(a0),-(a1)
               S06:00002F5E:  C3 08
F00:3925                       bcc ABCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:00002F60:  64 02
F00:3926                       add.l #1,d4
               S06:00002F62:  52 84
F00:3927       ABCD_NO_C2:     add.b (a1),d3
               S06:00002F64:  D6 11
F00:3928       
F00:3929       
F00:3930                       dbf d6,ABCD_INNER1
               S06:00002F66:  51 CE FF D8
F00:3931                       move.l #$00000099,d6
               S06:00002F6A:  2C 3C 00 00 00 99
F00:3932                       dbf d7,ABCD_OUTER1
               S06:00002F70:  51 CF FF CC
F00:3933                       cmpi.l #$00005AFC,d4  ; Check the cumulative results
               S06:00002F74:  0C 84 00 00 5A FC
F00:3934                       bne ABCD_FAIL;                 
               S06:00002F7A:  66 00 00 A6
F00:3935                       cmpi.l #$001C9A34,d5
               S06:00002F7E:  0C 85 00 1C 9A 34
F00:3936                       bne ABCD_FAIL;                
               S06:00002F84:  66 00 00 9C
F00:3937                       cmpi.l #$00000034,d3
               S06:00002F88:  0C 83 00 00 00 34
F00:3938                       bne ABCD_FAIL;                
               S06:00002F8E:  66 00 00 92
F00:3939       
F00:3940           ; Test with X Flag SET
F00:3941                       move.l #$00000110,a0 ; Address pointer-X
               S06:00002F92:  30 7C 01 10
F00:3942                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00002F96:  32 7C 01 20
F00:3943                       move.l #$00000000,d0 ; BCD byte-X
               S06:00002F9A:  70 00
F00:3944                       move.l #$00000000,d1 ; BCD byte-Y
               S06:00002F9C:  72 00
F00:3945                       move.l #$00000000,d2
               S06:00002F9E:  74 00
F00:3946                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00002FA0:  76 00
F00:3947                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00002FA2:  78 00
F00:3948                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00002FA4:  7A 00
F00:3949                       move.l #$00000099,d6 ; Inner loop counter
               S06:00002FA6:  2C 3C 00 00 00 99
F00:3950                       move.l #$00000099,d7 ; Outer loop counter
               S06:00002FAC:  2E 3C 00 00 00 99
F00:3951       
F00:3952       ABCD_OUTER2:    move.l d7,d0
               S06:00002FB2:  20 07
F00:3953       ABCD_INNER2:    move.l d6,d1
               S06:00002FB4:  22 06
F00:3954                       ori.b #$10,CCR      ; Set X Flag
               S06:00002FB6:  00 3C 00 10
F00:3955                       move.l #$00000110,a0 ; Address pointer-X
               S06:00002FBA:  30 7C 01 10
F00:3956                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00002FBE:  32 7C 01 20
F00:3957                       move.b d0,-1(a0)
               S06:00002FC2:  11 40 FF FF
F00:3958                       move.b d1,-1(a1)
               S06:00002FC6:  13 41 FF FF
F00:3959                       
F00:3960                       abcd d0,d1
               S06:00002FCA:  C3 00
F00:3961                       bcc ABCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:00002FCC:  64 02
F00:3962                       add.l #1,d4
               S06:00002FCE:  52 84
F00:3963       ABCD_NO_C3:     add.l d1,d5
               S06:00002FD0:  DA 81
F00:3964                       
F00:3965                       abcd -(a0),-(a1)
               S06:00002FD2:  C3 08
F00:3966                       bcc ABCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:00002FD4:  64 02
F00:3967                       add.l #1,d4
               S06:00002FD6:  52 84
F00:3968       ABCD_NO_C4:     add.b (a1),d3
               S06:00002FD8:  D6 11
F00:3969       
F00:3970       
F00:3971                       dbf d6,ABCD_INNER2
               S06:00002FDA:  51 CE FF D8
F00:3972                       move.l #$00000099,d6
               S06:00002FDE:  2C 3C 00 00 00 99
F00:3973                       dbf d7,ABCD_OUTER2
               S06:00002FE4:  51 CF FF CC
F00:3974                       cmpi.l #$00005B60,d4  ; Check the cumulative results
               S06:00002FE8:  0C 84 00 00 5B 60
F00:3975                       bne ABCD_FAIL;                 
               S06:00002FEE:  66 32
F00:3976                       cmpi.l #$001CCFC8,d5
               S06:00002FF0:  0C 85 00 1C CF C8
F00:3977                       bne ABCD_FAIL;                
               S06:00002FF6:  66 2A
F00:3978                       cmpi.l #$00000034,d3
               S06:00002FF8:  0C 83 00 00 00 34
F00:3979                       bne ABCD_FAIL;                
               S06:00002FFE:  66 22
F00:3980       
F00:3981                   ; Quick check of Z Flag
F00:3982                       move.b #$00,d0 
               S06:00003000:  10 3C 00 00
F00:3983                       move.b #$00,d1 
               S06:00003004:  12 3C 00 00
F00:3984                       move #$00,CCR              ; Set Z flag to 0
               S06:00003008:  44 FC 00 00
F00:3985                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:0000300C:  C1 01
F00:3986                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000300E:  67 12
F00:3987                       
F00:3988                       move.b #$01,d0 
               S06:00003010:  10 3C 00 01
F00:3989                       move.b #$00,d1 
               S06:00003014:  12 3C 00 00
F00:3990                       move #$04,CCR              ; Set Z flag to 0
               S06:00003018:  44 FC 00 04
F00:3991                       abcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:0000301C:  C1 01
F00:3992                       beq ABCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:0000301E:  67 02
F00:3993                       
F00:3994                       rts   
               S06:00003020:  4E 75
F00:3995       
F00:3996       ABCD_FAIL: bra ABCD_FAIL
               S06:00003022:  60 FE
F00:3997       
F00:3998       ;-----------------------------------------------------------
F00:3999       ;-----------------------------------------------------------
F00:4000       ; OPCODE : SBCD
F00:4001       ;-----------------------------------------------------------
F00:4002       ;-----------------------------------------------------------
F00:4003       op_SBCD: 
F00:4004       
F00:4005           ; Test with X Flag CLEARED
F00:4006                       move.l #$00000110,a0 ; Address pointer-X
               S06:00003024:  30 7C 01 10
F00:4007                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003028:  32 7C 01 20
F00:4008                       move.l #$00000000,d0 ; BCD byte-X
               S06:0000302C:  70 00
F00:4009                       move.l #$00000000,d1 ; BCD byte-Y
               S06:0000302E:  72 00
F00:4010                       move.l #$00000000,d2
               S06:00003030:  74 00
F00:4011                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:00003032:  76 00
F00:4012                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00003034:  78 00
F00:4013                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:00003036:  7A 00
F00:4014                       move.l #$00000099,d6 ; Inner loop counter
               S06:00003038:  2C 3C 00 00 00 99
F00:4015                       move.l #$00000099,d7 ; Outer loop counter
               S06:0000303E:  2E 3C 00 00 00 99
F00:4016       
F00:4017       SBCD_OUTER1:    move.l d7,d0
               S06:00003044:  20 07
F00:4018       SBCD_INNER1:    move.l d6,d1
               S06:00003046:  22 06
F00:4019                       andi.b #$EF,CCR     ; Clear X Flag
               S06:00003048:  02 3C 00 EF
F00:4020                       move.l #$00000110,a0 ; Address pointer-X
               S06:0000304C:  30 7C 01 10
F00:4021                       move.l #$00000120,a1 ; Address pointer-Y
               S06:00003050:  32 7C 01 20
F00:4022                       move.b d0,-1(a0)
               S06:00003054:  11 40 FF FF
F00:4023                       move.b d1,-1(a1)
               S06:00003058:  13 41 FF FF
F00:4024                       
F00:4025                       sbcd d0,d1
               S06:0000305C:  83 00
F00:4026                       bcc SBCD_NO_C1          ; Check C Flag  bcc/bcs 0
               S06:0000305E:  64 02
F00:4027                       add.l #1,d4
               S06:00003060:  52 84
F00:4028       SBCD_NO_C1:     add.l d1,d5
               S06:00003062:  DA 81
F00:4029                       
F00:4030                       sbcd -(a0),-(a1)
               S06:00003064:  83 08
F00:4031                       bcc SBCD_NO_C2          ; Check C Flag  bcc/bcs 0
               S06:00003066:  64 02
F00:4032                       add.l #1,d4
               S06:00003068:  52 84
F00:4033       SBCD_NO_C2:     add.b (a1),d3
               S06:0000306A:  D6 11
F00:4034       
F00:4035       
F00:4036                       dbf d6,SBCD_INNER1
               S06:0000306C:  51 CE FF D8
F00:4037                       move.l #$00000099,d6
               S06:00003070:  2C 3C 00 00 00 99
F00:4038                       dbf d7,SBCD_OUTER1
               S06:00003076:  51 CF FF CC
F00:4039                       cmpi.l #$00005C0A,d4  ; Check the cumulative results
               S06:0000307A:  0C 84 00 00 5C 0A
F00:4040                       bne SBCD_FAIL;                 
               S06:00003080:  66 00 00 A6
F00:4041                       cmpi.l #$001C459E,d5
               S06:00003084:  0C 85 00 1C 45 9E
F00:4042                       bne SBCD_FAIL;                
               S06:0000308A:  66 00 00 9C
F00:4043                       cmpi.l #$0000009E,d3
               S06:0000308E:  0C 83 00 00 00 9E
F00:4044                       bne SBCD_FAIL;                
               S06:00003094:  66 00 00 92
F00:4045       
F00:4046           ; Test with X Flag SET
F00:4047                       move.l #$00000110,a0 ; Address pointer-X
               S06:00003098:  30 7C 01 10
F00:4048                       move.l #$00000120,a1 ; Address pointer-Y
               S06:0000309C:  32 7C 01 20
F00:4049                       move.l #$00000000,d0 ; BCD byte-X
               S06:000030A0:  70 00
F00:4050                       move.l #$00000000,d1 ; BCD byte-Y
               S06:000030A2:  72 00
F00:4051                       move.l #$00000000,d2
               S06:000030A4:  74 00
F00:4052                       move.l #$00000000,d3 ; Cumulative -(An) BCD results
               S06:000030A6:  76 00
F00:4053                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:000030A8:  78 00
F00:4054                       move.l #$00000000,d5 ; Cumulative Register BCD results
               S06:000030AA:  7A 00
F00:4055                       move.l #$00000099,d6 ; Inner loop counter
               S06:000030AC:  2C 3C 00 00 00 99
F00:4056                       move.l #$00000099,d7 ; Outer loop counter
               S06:000030B2:  2E 3C 00 00 00 99
F00:4057       
F00:4058       SBCD_OUTER2:    move.l d7,d0
               S06:000030B8:  20 07
F00:4059       SBCD_INNER2:    move.l d6,d1
               S06:000030BA:  22 06
F00:4060                       ori.b #$10,CCR      ; Set X Flag
               S06:000030BC:  00 3C 00 10
F00:4061                       move.l #$00000110,a0 ; Address pointer-X
               S06:000030C0:  30 7C 01 10
F00:4062                       move.l #$00000120,a1 ; Address pointer-Y
               S06:000030C4:  32 7C 01 20
F00:4063                       move.b d0,-1(a0)
               S06:000030C8:  11 40 FF FF
F00:4064                       move.b d1,-1(a1)
               S06:000030CC:  13 41 FF FF
F00:4065                       
F00:4066                       sbcd d0,d1
               S06:000030D0:  83 00
F00:4067                       bcc SBCD_NO_C3          ; Check C Flag  bcc/bcs 0
               S06:000030D2:  64 02
F00:4068                       add.l #1,d4
               S06:000030D4:  52 84
F00:4069       SBCD_NO_C3:     add.l d1,d5
               S06:000030D6:  DA 81
F00:4070                       
F00:4071                       sbcd -(a0),-(a1)
               S06:000030D8:  83 08
F00:4072                       bcc SBCD_NO_C4          ; Check C Flag  bcc/bcs 0
               S06:000030DA:  64 02
F00:4073                       add.l #1,d4
               S06:000030DC:  52 84
F00:4074       SBCD_NO_C4:     add.b (a1),d3
               S06:000030DE:  D6 11
F00:4075       
F00:4076                       dbf d6,SBCD_INNER2
               S06:000030E0:  51 CE FF D8
F00:4077                       move.l #$00000099,d6
               S06:000030E4:  2C 3C 00 00 00 99
F00:4078                       dbf d7,SBCD_OUTER2
               S06:000030EA:  51 CF FF CC
F00:4079                       cmpi.l #$00005CA4,d4  ; Check the cumulative results
               S06:000030EE:  0C 84 00 00 5C A4
F00:4080                       bne SBCD_FAIL;                 
               S06:000030F4:  66 32
F00:4081                       cmpi.l #$001C5C66,d5
               S06:000030F6:  0C 85 00 1C 5C 66
F00:4082                       bne SBCD_FAIL;                
               S06:000030FC:  66 2A
F00:4083                       cmpi.l #$0000009E,d3
               S06:000030FE:  0C 83 00 00 00 9E
F00:4084                       bne SBCD_FAIL;                
               S06:00003104:  66 22
F00:4085       
F00:4086       
F00:4087                   ; Quick check of Z Flag
F00:4088                       move.b #$00,d0 
               S06:00003106:  10 3C 00 00
F00:4089                       move.b #$00,d1 
               S06:0000310A:  12 3C 00 00
F00:4090                       move #$00,CCR              ; Set Z flag to 0
               S06:0000310E:  44 FC 00 00
F00:4091                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00003112:  81 01
F00:4092                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:00003114:  67 12
F00:4093       
F00:4094                       move.b #$01,d0 
               S06:00003116:  10 3C 00 01
F00:4095                       move.b #$00,d1 
               S06:0000311A:  12 3C 00 00
F00:4096                       move #$04,CCR              ; Set Z flag to 0
               S06:0000311E:  44 FC 00 04
F00:4097                       sbcd d1,d0                  ; Should NOT set Z Flag to 1
               S06:00003122:  81 01
F00:4098                       beq SBCD_FAIL;                       ; Check Z Flag  beq/bne
               S06:00003124:  67 02
F00:4099       
F00:4100                       rts   
               S06:00003126:  4E 75
F00:4101       
F00:4102       SBCD_FAIL: bra SBCD_FAIL           
               S06:00003128:  60 FE
F00:4103       ;-----------------------------------------------------------
F00:4104       ;-----------------------------------------------------------
F00:4105       ; OPCODE : NBCD
F00:4106       ;-----------------------------------------------------------
F00:4107       ;-----------------------------------------------------------
F00:4108       op_NBCD: 
F00:4109           
F00:4110              ; NBCD to a  Register
F00:4111              
F00:4112                       move.l #$00000000,d0 ; BCD byte
               S06:0000312A:  70 00
F00:4113                       move.l #$00000000,d1 
               S06:0000312C:  72 00
F00:4114                       move.l #$00000000,d2
               S06:0000312E:  74 00
F00:4115                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:00003130:  76 00
F00:4116                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00003132:  78 00
F00:4117                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:00003134:  7A 00
F00:4118                       move.l #$00000099,d6
               S06:00003136:  2C 3C 00 00 00 99
F00:4119                       move.l #$00000099,d7 ; Loop counter
               S06:0000313C:  2E 3C 00 00 00 99
F00:4120       
F00:4121       NBCD_LOOP:      move.l d7,d0
               S06:00003142:  20 07
F00:4122                       move #$04,CCR        ; Set Z flag to 0
               S06:00003144:  44 FC 00 04
F00:4123       
F00:4124                       nbcd d0
               S06:00003148:  48 00
F00:4125                       
F00:4126                       bcc NBCD_NO_C         ; Check C Flag 
               S06:0000314A:  64 02
F00:4127                       add.l #1,d4
               S06:0000314C:  52 84
F00:4128       NBCD_NO_C:      bne NBCD_NO_Z         ; Check Z Flag 
               S06:0000314E:  66 02
F00:4129                       add.l #1,d3
               S06:00003150:  52 83
F00:4130       NBCD_NO_Z:      add.l d0,d5         ; Add results into d5
               S06:00003152:  DA 80
F00:4131       
F00:4132                       dbf d7,NBCD_LOOP
               S06:00003154:  51 CF FF EC
F00:4133                       
F00:4134                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:00003158:  0C 83 00 00 00 01
F00:4135                       bne NBCD_FAIL;                 
               S06:0000315E:  66 5C
F00:4136                       cmpi.l #$00000099,d4
               S06:00003160:  0C 84 00 00 00 99
F00:4137                       bne NBCD_FAIL;                
               S06:00003166:  66 54
F00:4138                       cmpi.l #$00002E3B,d5
               S06:00003168:  0C 85 00 00 2E 3B
F00:4139                       bne NBCD_FAIL;     
               S06:0000316E:  66 4C
F00:4140                  
F00:4141       
F00:4142              ; NBCD to a memory location
F00:4143              
F00:4144                       move.l #$00000000,d0 ; BCD byte
               S06:00003170:  70 00
F00:4145                       move.l #$00000000,d1 
               S06:00003172:  72 00
F00:4146                       move.l #$00000000,d2
               S06:00003174:  74 00
F00:4147                       move.l #$00000000,d3 ; Cumulative number of times Z was set
               S06:00003176:  76 00
F00:4148                       move.l #$00000000,d4 ; Cumulative number of times C was set
               S06:00003178:  78 00
F00:4149                       move.l #$00000000,d5 ; Cumulative BCD results
               S06:0000317A:  7A 00
F00:4150                       move.l #$00000099,d6
               S06:0000317C:  2C 3C 00 00 00 99
F00:4151                       move.l #$00000099,d7 ; Loop counter
               S06:00003182:  2E 3C 00 00 00 99
F00:4152       
F00:4153       NBCD_LOOP1:     move.b d7,$00000100
               S06:00003188:  11 C7 01 00
F00:4154                       move #$04,CCR        ; Set Z flag to 0
               S06:0000318C:  44 FC 00 04
F00:4155       
F00:4156                       nbcd $00000100
               S06:00003190:  48 38 01 00
F00:4157                       move.b $00000100,d0
               S06:00003194:  10 38 01 00
F00:4158                       
F00:4159                       bcc NBCD_NO_C1        ; Check C Flag 
               S06:00003198:  64 02
F00:4160                       add.l #1,d4
               S06:0000319A:  52 84
F00:4161       NBCD_NO_C1:     bne NBCD_NO_Z1        ; Check Z Flag 
               S06:0000319C:  66 02
F00:4162                       add.l #1,d3
               S06:0000319E:  52 83
F00:4163       NBCD_NO_Z1:     add.l d0,d5         ; Add results into d5
               S06:000031A0:  DA 80
F00:4164       
F00:4165                       dbf d7,NBCD_LOOP1
               S06:000031A2:  51 CF FF E4
F00:4166                       
F00:4167                       cmpi.l #$00000001,d3  ; Check the cumulative results
               S06:000031A6:  0C 83 00 00 00 01
F00:4168                       bne NBCD_FAIL;                 
               S06:000031AC:  66 0E
F00:4169                       cmpi.l #$00000000,d4
               S06:000031AE:  4A 84
F00:4170                       bne NBCD_FAIL;                
               S06:000031B0:  66 0A
F00:4171                       cmpi.l #$00002E3B,d5
               S06:000031B2:  0C 85 00 00 2E 3B
F00:4172                       bne NBCD_FAIL;     
               S06:000031B8:  66 02
F00:4173                  
F00:4174       
F00:4175                       rts   
               S06:000031BA:  4E 75
F00:4176       
F00:4177       NBCD_FAIL: bra NBCD_FAIL
               S06:000031BC:  60 FE
F00:4178                      
F00:4179       ;-----------------------------------------------------------
F00:4180       ;-----------------------------------------------------------
F00:4181       ; OPCODE : TRAPV
F00:4182       ;-----------------------------------------------------------
F00:4183       ;-----------------------------------------------------------
F00:4184       op_TRAPV: 
F00:4185       
F00:4186           ; TRAPV will set d0 to 12345678 if V flag is set
F00:4187           
F00:4188                       move.l #$00000000,d0 ; Clear d0
               S06:000031BE:  70 00
F00:4189                       
F00:4190                       move #$00,CCR        ; Clear V flag
               S06:000031C0:  44 FC 00 00
F00:4191                       trapv
               S06:000031C4:  4E 76
F00:4192                       cmpi.l #$00000000,d0  ; Check of d0 was updated (should not be_)
               S06:000031C6:  4A 80
F00:4193                       bne TRAPV_FAIL;       
               S06:000031C8:  66 10
F00:4194       
F00:4195                      move #$02,CCR        ; Set V flag
               S06:000031CA:  44 FC 00 02
F00:4196                      trapv
               S06:000031CE:  4E 76
F00:4197                      cmpi.l #$12345678,d0  ; Check of d0 was updated (should not be_)
               S06:000031D0:  0C 80 12 34 56 78
F00:4198                      bne TRAPV_FAIL;       
               S06:000031D6:  66 02
F00:4199       
F00:4200       
F00:4201                       rts   
               S06:000031D8:  4E 75
F00:4202       
F00:4203       TRAPV_FAIL: bra TRAPV_FAIL
               S06:000031DA:  60 FE
F00:4204                      
F00:4205       ;-----------------------------------------------------------
F00:4206       ;-----------------------------------------------------------
F00:4207       ; OPCODE : RTR
F00:4208       ;-----------------------------------------------------------
F00:4209       ;-----------------------------------------------------------
F00:4210       
F00:4211       op_RTR: 
F00:4212           
F00:4213                       lea RTR_DONE,a0
               S06:000031DC:  41 F8 31 E8
F00:4214                       move.l a0,-(a7)     ; push destination PC to the stack
               S06:000031E0:  2F 08
F00:4215                       move.w #$FF15,-(a7)       ; push flags=0xFFFF to the stack
               S06:000031E2:  3F 3C FF 15
F00:4216                       rtr
               S06:000031E6:  4E 77
F00:4217       
F00:4218       RTR_DONE:       move SR,d0
               S06:000031E8:  40 C0
F00:4219                       andi #$1F,d0
               S06:000031EA:  02 40 00 1F
F00:4220                       cmpi #$15,d0
               S06:000031EE:  0C 40 00 15
F00:4221                       bne RTR_FAIL;
               S06:000031F2:  66 0A
F00:4222                       
F00:4223                       rts   
               S06:000031F4:  4E 75
F00:4224       
F00:4225          
F00:4226       BSR_FAR2:       move.l #$44444444,d4
               S06:000031F6:  28 3C 44 44 44 44
F00:4227                       rts
               S06:000031FC:  4E 75
F00:4228       
F00:4229       RTR_FAIL: bra RTR_FAIL
               S06:000031FE:  60 FE
F00:4230       
F00:4231       ;-----------------------------------------------------------
F00:4232       ;-----------------------------------------------------------
F00:4233       ; OPCODE : BCC
F00:4234       ;-----------------------------------------------------------
F00:4235       ;-----------------------------------------------------------
F00:4236       
F00:4237       op_BCC:         move #$00,CCR
               S06:00003200:  44 FC 00 00
F00:4238                       bhi.s BCC1            ; Higher Than         C=0 AND Z=0
               S06:00003204:  62 02
F00:4239                       bra BCC_FAIL;
               S06:00003206:  60 78
F00:4240                       
F00:4241       BCC1:           move #$01,CCR
               S06:00003208:  44 FC 00 01
F00:4242                       bls.w BCC2            ; Lower or Same       C=1 OR Z=1
               S06:0000320C:  63 00 00 04
F00:4243                       bra BCC_FAIL;
               S06:00003210:  60 6E
F00:4244                        
F00:4245       BCC2:           move #$00,CCR
               S06:00003212:  44 FC 00 00
F00:4246                       bcc.s BCC3            ; Carry Clear         C=0
               S06:00003216:  64 02
F00:4247                       bra BCC_FAIL;
               S06:00003218:  60 66
F00:4248                          
F00:4249       BCC3:           move #$01,CCR
               S06:0000321A:  44 FC 00 01
F00:4250                       bcs.w BCC4            ; Carry Set           C=1
               S06:0000321E:  65 00 00 04
F00:4251                       bra BCC_FAIL;
               S06:00003222:  60 5C
F00:4252                          
F00:4253       BCC4:           move #$00,CCR
               S06:00003224:  44 FC 00 00
F00:4254                       bne.s BCC5            ; Not Equal           Z=0
               S06:00003228:  66 02
F00:4255                       bra BCC_FAIL;
               S06:0000322A:  60 54
F00:4256                            
F00:4257       BCC5:           move #$04,CCR
               S06:0000322C:  44 FC 00 04
F00:4258                       beq.w BCC6            ; Equal               Z=1
               S06:00003230:  67 00 00 04
F00:4259                       bra BCC_FAIL;
               S06:00003234:  60 4A
F00:4260                              
F00:4261       BCC6:           move #$00,CCR
               S06:00003236:  44 FC 00 00
F00:4262                       bvc.s BCC7            ; V Clear             V=0
               S06:0000323A:  68 02
F00:4263                       bra BCC_FAIL;
               S06:0000323C:  60 42
F00:4264                                
F00:4265       BCC7:           move #$02,CCR
               S06:0000323E:  44 FC 00 02
F00:4266                       bvs.w BCC8            ; V Set               V=1
               S06:00003242:  69 00 00 04
F00:4267                       bra BCC_FAIL;
               S06:00003246:  60 38
F00:4268                                 
F00:4269       BCC8:           move #$00,CCR
               S06:00003248:  44 FC 00 00
F00:4270                       bpl.s BCC9            ; Plus                N=0
               S06:0000324C:  6A 02
F00:4271                       bra BCC_FAIL;
               S06:0000324E:  60 30
F00:4272                                  
F00:4273       BCC9:           move #$08,CCR
               S06:00003250:  44 FC 00 08
F00:4274                       bmi.w BCC10           ; Minus               N=1
               S06:00003254:  6B 00 00 04
F00:4275                       bra BCC_FAIL;
               S06:00003258:  60 26
F00:4276                                   
F00:4277       BCC10:          move #$00,CCR
               S06:0000325A:  44 FC 00 00
F00:4278                       bge.s BCC11           ; Greater or Equal    N=V
               S06:0000325E:  6C 02
F00:4279                       bra BCC_FAIL;
               S06:00003260:  60 1E
F00:4280                                    
F00:4281       BCC11:          move #$02,CCR
               S06:00003262:  44 FC 00 02
F00:4282                       blt.w BCC12           ; Less Than           N!=V
               S06:00003266:  6D 00 00 04
F00:4283                       bra BCC_FAIL;
               S06:0000326A:  60 14
F00:4284                                      
F00:4285       BCC12:          move #$0A,CCR
               S06:0000326C:  44 FC 00 0A
F00:4286                       bgt.s BCC13           ; Greater Than        N=V  AND Z=0
               S06:00003270:  6E 02
F00:4287                       bra BCC_FAIL;
               S06:00003272:  60 0C
F00:4288                                       
F00:4289       BCC13:          move #$06,CCR
               S06:00003274:  44 FC 00 06
F00:4290                       ble.w BCC14           ; Less Than or Equal  N!=V AND Z=1
               S06:00003278:  6F 00 00 04
F00:4291                       bra BCC_FAIL;
               S06:0000327C:  60 02
F00:4292                      
F00:4293       
F00:4294       BCC14:          rts
               S06:0000327E:  4E 75
F00:4295         
F00:4296       
F00:4297       BCC_FAIL: bra BCC_FAIL
               S06:00003280:  60 FE
F00:4298       
F00:4299       ;-----------------------------------------------------------
F00:4300       ;-----------------------------------------------------------
F00:4301       ; OPCODE : DBCC
F00:4302       ;-----------------------------------------------------------
F00:4303       ;-----------------------------------------------------------
F00:4304       
F00:4305       op_DBCC:        move.l #$00000003,d0    ; Loop counter
               S06:00003282:  70 03
F00:4306                       move.l #$00000000,d1    ; Accumulator
               S06:00003284:  72 00
F00:4307                       move #$00,CCR
               S06:00003286:  44 FC 00 00
F00:4308                       
F00:4309       DBCC_LOOP1:     addi.b #$1,d1
               S06:0000328A:  52 01
F00:4310                       dbf d0,DBCC_LOOP1
               S06:0000328C:  51 C8 FF FC
F00:4311                       
F00:4312                       cmpi.l #$00000004,d1  ; Check Accumulator results
               S06:00003290:  0C 81 00 00 00 04
F00:4313                       bne DBCC_FAIL;       
               S06:00003296:  66 10
F00:4314                         
F00:4315       DBCC_LOOP2:     addi.b #$1,d1
               S06:00003298:  52 01
F00:4316                       dbcc d0,DBCC_LOOP2    ; Dont loop
               S06:0000329A:  54 C8 FF FC
F00:4317                       
F00:4318                       cmpi.l #$00000005,d1  ; Check Accumulator results
               S06:0000329E:  0C 81 00 00 00 05
F00:4319                       bne DBCC_FAIL;       
               S06:000032A4:  66 02
F00:4320                   
F00:4321                       rts
               S06:000032A6:  4E 75
F00:4322                       
F00:4323       DBCC_FAIL: bra DBCC_FAIL
               S06:000032A8:  60 FE
F00:4324       
F00:4325       ;-----------------------------------------------------------
F00:4326       ;-----------------------------------------------------------
F00:4327       ; OPCODE : SCC
F00:4328       ;-----------------------------------------------------------
F00:4329       ;-----------------------------------------------------------
F00:4330       
F00:4331       op_SCC:         move #$01,CCR             
               S06:000032AA:  44 FC 00 01
F00:4332                       scc $00010000                   ; Clear the EA byte
               S06:000032AE:  54 F9 00 01 00 00
F00:4333                       cmpi.b #$00,$00010000
               S06:000032B4:  4A 39 00 01 00 00
F00:4334                       bne SCC_FAIL;       
               S06:000032BA:  66 16
F00:4335       
F00:4336                       move #$00,CCR
               S06:000032BC:  44 FC 00 00
F00:4337                       scc $00010000                   ; Set the EA byte to 0xFF
               S06:000032C0:  54 F9 00 01 00 00
F00:4338                       cmpi.b #$FF,$00010000
               S06:000032C6:  0C 39 00 FF 00 01 00 00
F00:4339                       bne SCC_FAIL;       
               S06:000032CE:  66 02
F00:4340       
F00:4341                       rts
               S06:000032D0:  4E 75
F00:4342                       
F00:4343       SCC_FAIL: bra SCC_FAIL
               S06:000032D2:  60 FE
F00:4344       
F00:4345       ;-----------------------------------------------------------
F00:4346       ;-----------------------------------------------------------
F00:4347       ; OPCODE : ADDQ
F00:4348       ;-----------------------------------------------------------
F00:4349       ;-----------------------------------------------------------
F00:4350       
F00:4351       op_ADDQ:       
F00:4352       
F00:4353           ; BYTE
F00:4354                       move.l #$000000FF,d0    ; Loop counter
               S06:000032D4:  20 3C 00 00 00 FF
F00:4355                       move.l #$00000000,d1    ; Flag results accumulator
               S06:000032DA:  72 00
F00:4356                       move.l #$00000000,d2    ; Data results accumulator
               S06:000032DC:  74 00
F00:4357                       move.l #$00000000,d3   
               S06:000032DE:  76 00
F00:4358                       move.l #$00000000,d4    
               S06:000032E0:  78 00
F00:4359                       move.l #$00000000,d5    
               S06:000032E2:  7A 00
F00:4360                       move.l #$00000000,d6    
               S06:000032E4:  7C 00
F00:4361                       move.l #$00000000,d7    
               S06:000032E6:  7E 00
F00:4362       
F00:4363       ADDQ_LOOP1:     addq.b #3,d5          
               S06:000032E8:  56 05
F00:4364                       move SR,d6      
               S06:000032EA:  40 C6
F00:4365                       andi.l #$1F,d6        ; Isolate flags
               S06:000032EC:  02 86 00 00 00 1F
F00:4366                       add.l d6,d1           ; Copy flag results into accumulator
               S06:000032F2:  D2 86
F00:4367                       add.l d5,d2           ; Copy data results into data accumulator
               S06:000032F4:  D4 85
F00:4368                       dbf d0,ADDQ_LOOP1
               S06:000032F6:  51 C8 FF F0
F00:4369                       
F00:4370                       cmpi.l #$0000043D,d1
               S06:000032FA:  0C 81 00 00 04 3D
F00:4371                       bne ADDQ_FAIL;       
               S06:00003300:  66 00 00 90
F00:4372                       cmpi.l #$00007F80,d2
               S06:00003304:  0C 82 00 00 7F 80
F00:4373                       bne ADDQ_FAIL;       
               S06:0000330A:  66 00 00 86
F00:4374       
F00:4375       
F00:4376           ; WORD
F00:4377                       move.l #$000000FF,d0    ; Loop counter
               S06:0000330E:  20 3C 00 00 00 FF
F00:4378                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003314:  72 00
F00:4379                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003316:  74 00
F00:4380                       move.l #$00000000,d3   
               S06:00003318:  76 00
F00:4381                       move.l #$00000000,d4    
               S06:0000331A:  78 00
F00:4382                       move.l #$0000FFF0,d5    
               S06:0000331C:  2A 3C 00 00 FF F0
F00:4383                       move.l #$00000000,d6    
               S06:00003322:  7C 00
F00:4384                       move.l #$00000000,d7   
               S06:00003324:  7E 00
F00:4385                       move.l #$00000100,a0   
               S06:00003326:  30 7C 01 00
F00:4386       
F00:4387       ADDQ_LOOP2:     addq.w #5,d5   
               S06:0000332A:  5A 45
F00:4388                       move SR,d6      
               S06:0000332C:  40 C6
F00:4389                       andi.l #$1F,d6        ; Isolate flags
               S06:0000332E:  02 86 00 00 00 1F
F00:4390                       add.l d6,d1           ; Copy flag results into accumulator
               S06:00003334:  D2 86
F00:4391                       add.l d5,d2           ; Copy data results into data accumulator
               S06:00003336:  D4 85
F00:4392                       dbf d0,ADDQ_LOOP2
               S06:00003338:  51 C8 FF F0
F00:4393       
F00:4394                       cmpi.l #$00000029,d1
               S06:0000333C:  0C 81 00 00 00 29
F00:4395                       bne ADDQ_FAIL;       
               S06:00003342:  66 4E
F00:4396                       cmpi.l #$00057280,d2
               S06:00003344:  0C 82 00 05 72 80
F00:4397                       bne ADDQ_FAIL;       
               S06:0000334A:  66 46
F00:4398       
F00:4399       
F00:4400           ; LONG
F00:4401                       move.l #$000000FF,d0    ; Loop counter
               S06:0000334C:  20 3C 00 00 00 FF
F00:4402                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003352:  72 00
F00:4403                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003354:  74 00
F00:4404                       move.l #$00000000,d3   
               S06:00003356:  76 00
F00:4405                       move.l #$00000000,d4    
               S06:00003358:  78 00
F00:4406                       move.l #$FFFFFFF0,d5    
               S06:0000335A:  7A F0
F00:4407                       move.l #$00000000,d6    
               S06:0000335C:  7C 00
F00:4408                       move.l #$00000000,d7   
               S06:0000335E:  7E 00
F00:4409       
F00:4410       ADDQ_LOOP3:     addq.l #1,d5          
               S06:00003360:  52 85
F00:4411                       move SR,d6      
               S06:00003362:  40 C6
F00:4412                       andi.l #$1F,d6        ; Isolate flags
               S06:00003364:  02 86 00 00 00 1F
F00:4413                       add.l d6,d1           ; Copy flag results into accumulator
               S06:0000336A:  D2 86
F00:4414                       add.l d5,d2           ; Copy data results into data accumulator
               S06:0000336C:  D4 85
F00:4415                       dbf d0,ADDQ_LOOP3
               S06:0000336E:  51 C8 FF F0
F00:4416       
F00:4417                       cmpi.l #$0000008D,d1
               S06:00003372:  0C 81 00 00 00 8D
F00:4418                       bne ADDQ_FAIL;       
               S06:00003378:  66 18
F00:4419                       cmpi.l #$00007080,d2
               S06:0000337A:  0C 82 00 00 70 80
F00:4420                       bne ADDQ_FAIL;      
               S06:00003380:  66 10
F00:4421       
F00:4422           ; Check that Flags are not updated for Address registers
F00:4423                       move.l #$0000FFFF,a0   
               S06:00003382:  20 7C 00 00 FF FF
F00:4424                       move #$00,CCR         ; Clear flags
               S06:00003388:  44 FC 00 00
F00:4425                       addq.w #$7,a0         
               S06:0000338C:  5E 48
F00:4426                       bcs ADDQ_FAIL;
               S06:0000338E:  65 02
F00:4427       
F00:4428                       rts
               S06:00003390:  4E 75
F00:4429               
F00:4430       ADDQ_FAIL: bra ADDQ_FAIL
               S06:00003392:  60 FE
F00:4431       
F00:4432       ;-----------------------------------------------------------
F00:4433       ;-----------------------------------------------------------
F00:4434       ; OPCODE : SUBQ
F00:4435       ;-----------------------------------------------------------
F00:4436       ;-----------------------------------------------------------
F00:4437       
F00:4438       op_SUBQ:       
F00:4439       
F00:4440           ; BYTE
F00:4441                       move.l #$000000FF,d0    ; Loop counter
               S06:00003394:  20 3C 00 00 00 FF
F00:4442                       move.l #$00000000,d1    ; Flag results accumulator
               S06:0000339A:  72 00
F00:4443                       move.l #$00001234,d2    ; Data results accumulator
               S06:0000339C:  24 3C 00 00 12 34
F00:4444                       move.l #$00000000,d3   
               S06:000033A2:  76 00
F00:4445                       move.l #$00000000,d4    
               S06:000033A4:  78 00
F00:4446                       move.l #$00000012,d5    
               S06:000033A6:  7A 12
F00:4447                       move.l #$00000000,d6    
               S06:000033A8:  7C 00
F00:4448                       move.l #$00000000,d7    
               S06:000033AA:  7E 00
F00:4449       
F00:4450       SUBQ_LOOP1:     subq.b #1,d5          
               S06:000033AC:  53 05
F00:4451                       move SR,d6      
               S06:000033AE:  40 C6
F00:4452                       andi.l #$1F,d6        ; Isolate flags
               S06:000033B0:  02 86 00 00 00 1F
F00:4453                       add.l d6,d1           ; Copy flag results into accumulator
               S06:000033B6:  D2 86
F00:4454                       add.l d5,d2           ; Copy data results into data accumulator
               S06:000033B8:  D4 85
F00:4455                       dbf d0,SUBQ_LOOP1
               S06:000033BA:  51 C8 FF F0
F00:4456                       
F00:4457                       cmpi.l #$00000417,d1
               S06:000033BE:  0C 81 00 00 04 17
F00:4458                       bne SUBQ_FAIL;       
               S06:000033C4:  66 00 00 8C
F00:4459                       cmpi.l #$000091B4,d2
               S06:000033C8:  0C 82 00 00 91 B4
F00:4460                       bne SUBQ_FAIL;       
               S06:000033CE:  66 00 00 82
F00:4461       
F00:4462       
F00:4463           ; WORD
F00:4464                       move.l #$000000FF,d0    ; Loop counter
               S06:000033D2:  20 3C 00 00 00 FF
F00:4465                       move.l #$00000000,d1    ; Flag results accumulator
               S06:000033D8:  72 00
F00:4466                       move.l #$00000000,d2    ; Data results accumulator
               S06:000033DA:  74 00
F00:4467                       move.l #$00000000,d3   
               S06:000033DC:  76 00
F00:4468                       move.l #$00000000,d4    
               S06:000033DE:  78 00
F00:4469                       move.l #$00000002,d5    
               S06:000033E0:  7A 02
F00:4470                       move.l #$00000000,d6    
               S06:000033E2:  7C 00
F00:4471                       move.l #$00000000,d7   
               S06:000033E4:  7E 00
F00:4472                       move.l #$00000100,a0   
               S06:000033E6:  30 7C 01 00
F00:4473       
F00:4474       SUBQ_LOOP2:     subq.w #5,d5   
               S06:000033EA:  5B 45
F00:4475                       move SR,d6      
               S06:000033EC:  40 C6
F00:4476                       andi.l #$1F,d6        ; Isolate flags
               S06:000033EE:  02 86 00 00 00 1F
F00:4477                       add.l d6,d1           ; Copy flag results into accumulator
               S06:000033F4:  D2 86
F00:4478                       add.l d5,d2           ; Copy data results into data accumulator
               S06:000033F6:  D4 85
F00:4479                       dbf d0,SUBQ_LOOP2
               S06:000033F8:  51 C8 FF F0
F00:4480       
F00:4481                       cmpi.l #$00000811,d1
               S06:000033FC:  0C 81 00 00 08 11
F00:4482                       bne SUBQ_FAIL;       
               S06:00003402:  66 4E
F00:4483                       cmpi.l #$00FD7F80,d2
               S06:00003404:  0C 82 00 FD 7F 80
F00:4484                       bne SUBQ_FAIL;       
               S06:0000340A:  66 46
F00:4485       
F00:4486       
F00:4487           ; LONG
F00:4488                       move.l #$000000FF,d0    ; Loop counter
               S06:0000340C:  20 3C 00 00 00 FF
F00:4489                       move.l #$00000000,d1    ; Flag results accumulator
               S06:00003412:  72 00
F00:4490                       move.l #$00000000,d2    ; Data results accumulator
               S06:00003414:  74 00
F00:4491                       move.l #$00000000,d3   
               S06:00003416:  76 00
F00:4492                       move.l #$00000000,d4    
               S06:00003418:  78 00
F00:4493                       move.l #$00000007,d5    
               S06:0000341A:  7A 07
F00:4494                       move.l #$00000000,d6    
               S06:0000341C:  7C 00
F00:4495                       move.l #$00000000,d7   
               S06:0000341E:  7E 00
F00:4496       
F00:4497       SUBQ_LOOP3:     subq.l #1,d5          
               S06:00003420:  53 85
F00:4498                       move SR,d6      
               S06:00003422:  40 C6
F00:4499                       andi.l #$1F,d6        ; Isolate flags
               S06:00003424:  02 86 00 00 00 1F
F00:4500                       add.l d6,d1           ; Copy flag results into accumulator
               S06:0000342A:  D2 86
F00:4501                       add.l d5,d2           ; Copy data results into data accumulator
               S06:0000342C:  D4 85
F00:4502                       dbf d0,SUBQ_LOOP3
               S06:0000342E:  51 C8 FF F0
F00:4503       
F00:4504                       cmpi.l #$000007DD,d1
               S06:00003432:  0C 81 00 00 07 DD
F00:4505                       bne SUBQ_FAIL;       
               S06:00003438:  66 18
F00:4506                       cmpi.l #$FFFF8680,d2
               S06:0000343A:  0C 82 FF FF 86 80
F00:4507                       bne SUBQ_FAIL;      
               S06:00003440:  66 10
F00:4508       
F00:4509           ; Check that Flags are not updated for Address registers
F00:4510                       move.l #$0001FFFF,a0   
               S06:00003442:  20 7C 00 01 FF FF
F00:4511                       move #$00,CCR         ; Clear flags
               S06:00003448:  44 FC 00 00
F00:4512                       subq.w #$7,a0         
               S06:0000344C:  5F 48
F00:4513                       bcs SUBQ_FAIL;
               S06:0000344E:  65 02
F00:4514       
F00:4515                       rts
               S06:00003450:  4E 75
F00:4516       
F00:4517       SUBQ_FAIL: bra SUBQ_FAIL     
               S06:00003452:  60 FE
F00:4518               
F00:4519       ;-----------------------------------------------------------
F00:4520       ;-----------------------------------------------------------
F00:4521       ; OPCODE : MOVEQ
F00:4522       ;-----------------------------------------------------------
F00:4523       ;-----------------------------------------------------------
F00:4524       
F00:4525       op_MOVEQ:     
F00:4526                       move.l #$00000000,d0  
               S06:00003454:  70 00
F00:4527                       moveq #$0,d0
               S06:00003456:  70 00
F00:4528                       bne MOVEQ_FAIL;
               S06:00003458:  66 16
F00:4529                       cmpi.l #$00000000,d0
               S06:0000345A:  4A 80
F00:4530                       bne MOVEQ_FAIL;
               S06:0000345C:  66 12
F00:4531       
F00:4532                       move.l #$00000000,d0  
               S06:0000345E:  70 00
F00:4533 E2028                 moveq #$80,d0
               S06:00003460:  70 80
F00:4534                       beq MOVEQ_FAIL;
               S06:00003462:  67 0C
F00:4535                       bpl MOVEQ_FAIL;
               S06:00003464:  6A 0A
F00:4536                       cmpi.l #$FFFFFF80,d0
               S06:00003466:  0C 80 FF FF FF 80
F00:4537                       bne MOVEQ_FAIL;
               S06:0000346C:  66 02
F00:4538       
F00:4539       
F00:4540                       rts
               S06:0000346E:  4E 75
F00:4541       
F00:4542       MOVEQ_FAIL: bra MOVEQ_FAIL  
               S06:00003470:  60 FE
F00:4543          
F00:4544       ;-----------------------------------------------------------
F00:4545       ;-----------------------------------------------------------
F00:4546       ; OPCODE : DIVU
F00:4547       ;-----------------------------------------------------------
F00:4548       ;-----------------------------------------------------------
F00:4549       
F00:4550       op_DIVU:     
F00:4551       
F00:4552                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:00003472:  20 3C A5 A5 A5 A5
F00:4553                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:00003478:  22 3C 00 00 5A 5A
F00:4554                       move.l #$a5a5a5a5,d2
               S06:0000347E:  24 3C A5 A5 A5 A5
F00:4555                       move.l #$00000000,d3
               S06:00003484:  76 00
F00:4556                       move.l #$00000000,d4        ; Cumulative data results
               S06:00003486:  78 00
F00:4557                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003488:  7A 00
F00:4558                       move.l #$0000000E,d6       ; Inner loop counter
               S06:0000348A:  7C 0E
F00:4559                       move.l #$0000001E,d7       ; Outer loop counter
               S06:0000348C:  7E 1E
F00:4560       
F00:4561       
F00:4562       DIVU_OUTER1:    divu d1,d0               ; !! Easy68K C not always cleared
               S06:0000348E:  80 C1
F00:4563                       move SR,d3      
               S06:00003490:  40 C3
F00:4564                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003492:  02 83 00 00 00 0C
F00:4565                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003498:  DA 83
F00:4566                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:0000349A:  D8 80
F00:4567                       lsr.l #$1,d1
               S06:0000349C:  E2 89
F00:4568       
F00:4569                       dbf d6,DIVU_OUTER1
               S06:0000349E:  51 CE FF EE
F00:4570                       lsr.l #$1,d2
               S06:000034A2:  E2 8A
F00:4571                       move.l d2,d0
               S06:000034A4:  20 02
F00:4572                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:000034A6:  22 3C 00 00 5A 5A
F00:4573                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000034AC:  7C 0E
F00:4574                       dbf d7,DIVU_OUTER1
               S06:000034AE:  51 CF FF DE
F00:4575                       
F00:4576                       cmpi.l #$92FEDB89,d4      ; Check the data results
               S06:000034B2:  0C 84 92 FE DB 89
F00:4577                       bne DIVU_FAIL;                
               S06:000034B8:  66 0A
F00:4578                            
F00:4579                       cmpi.l #$00000110,d5      ; Check the Flag results
               S06:000034BA:  0C 85 00 00 01 10
F00:4580                       bne DIVU_FAIL;                 
               S06:000034C0:  66 02
F00:4581                 
F00:4582       
F00:4583                       rts
               S06:000034C2:  4E 75
F00:4584                       
F00:4585       DIVU_FAIL: bra DIVU_FAIL 
               S06:000034C4:  60 FE
F00:4586          
F00:4587       ;-----------------------------------------------------------
F00:4588       ;-----------------------------------------------------------
F00:4589       ; OPCODE : DIVS
F00:4590       ;-----------------------------------------------------------
F00:4591       ;-----------------------------------------------------------
F00:4592       
F00:4593       op_DIVS:     
F00:4594       
F00:4595                       move.l #$a5a5a5a5,d0        ; Initial Numerator
               S06:000034C6:  20 3C A5 A5 A5 A5
F00:4596                       move.l #$00005a5a,d1        ; Initial Divisor
               S06:000034CC:  22 3C 00 00 5A 5A
F00:4597                       move.l #$a5a5a5a5,d2
               S06:000034D2:  24 3C A5 A5 A5 A5
F00:4598                       move.l #$00000000,d3
               S06:000034D8:  76 00
F00:4599                       move.l #$00000000,d4        ; Cumulative data results
               S06:000034DA:  78 00
F00:4600                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000034DC:  7A 00
F00:4601                       move.l #$0000000E,d6       ; Inner loop counter
               S06:000034DE:  7C 0E
F00:4602                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000034E0:  7E 1E
F00:4603       
F00:4604       
F00:4605       DIVS_OUTER1:    divs d1,d0               ; !! Easy68K C not always cleared
               S06:000034E2:  81 C1
F00:4606                       move SR,d3      
               S06:000034E4:  40 C3
F00:4607                       andi.l #$0C,d3            ; Isolate flags 
               S06:000034E6:  02 83 00 00 00 0C
F00:4608                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000034EC:  DA 83
F00:4609                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000034EE:  D8 80
F00:4610                       lsr.l #$1,d1
               S06:000034F0:  E2 89
F00:4611       
F00:4612                       dbf d6,DIVS_OUTER1
               S06:000034F2:  51 CE FF EE
F00:4613                       lsr.l #$1,d2
               S06:000034F6:  E2 8A
F00:4614                       move.l d2,d0
               S06:000034F8:  20 02
F00:4615                       move.l #$00005a5a,d1       ; Initial Divisor
               S06:000034FA:  22 3C 00 00 5A 5A
F00:4616                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003500:  7C 0E
F00:4617                       dbf d7,DIVS_OUTER1
               S06:00003502:  51 CF FF DE
F00:4618                       
F00:4619                       cmpi.l #$4EC5D057,d4      ; Check the data results
               S06:00003506:  0C 84 4E C5 D0 57
F00:4620                       bne DIVS_FAIL;                
               S06:0000350C:  66 0A
F00:4621       
F00:4622                       cmpi.l #$00000038,d5      ; Check the Flag results
               S06:0000350E:  0C 85 00 00 00 38
F00:4623                       bne DIVS_FAIL;                 
               S06:00003514:  66 02
F00:4624                 
F00:4625       
F00:4626                       rts
               S06:00003516:  4E 75
F00:4627              
F00:4628       DIVS_FAIL: bra DIVS_FAIL
               S06:00003518:  60 FE
F00:4629          
F00:4630       ;-----------------------------------------------------------
F00:4631       ;-----------------------------------------------------------
F00:4632       ; OPCODE : OR
F00:4633       ;-----------------------------------------------------------
F00:4634       ;-----------------------------------------------------------
F00:4635       
F00:4636       op_OR:   
F00:4637       
F00:4638         ;; <EA> to Register
F00:4639       
F00:4640                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:0000351A:  20 3C A5 A5 A5 A5
F00:4641                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003520:  22 3C 81 67 E1 23
F00:4642                       move.l #$a5a5a5a5,d2
               S06:00003526:  24 3C A5 A5 A5 A5
F00:4643                       move.l #$00000000,d3
               S06:0000352C:  76 00
F00:4644                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000352E:  78 00
F00:4645                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003530:  7A 00
F00:4646                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003532:  7C 1E
F00:4647                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003534:  7E 1E
F00:4648                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003536:  30 7C 01 00
F00:4649       
F00:4650       
F00:4651       OR_OUTER1:    
F00:4652        
F00:4653           ; BYTE     
F00:4654                       move.l d1,(a0)
               S06:0000353A:  20 81
F00:4655                       or.b (a0),d0             
               S06:0000353C:  80 10
F00:4656                       move SR,d3      
               S06:0000353E:  40 C3
F00:4657                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003540:  02 83 00 00 00 0C
F00:4658                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003546:  DA 83
F00:4659                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003548:  D8 80
F00:4660        
F00:4661           ; WORD      
F00:4662                       move.l d1,(a0)
               S06:0000354A:  20 81
F00:4663                       or.w (a0),d0             
               S06:0000354C:  80 50
F00:4664                       move SR,d3      
               S06:0000354E:  40 C3
F00:4665                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003550:  02 83 00 00 00 0C
F00:4666                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003556:  DA 83
F00:4667                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003558:  D8 80
F00:4668        
F00:4669           ; LONG      
F00:4670                       move.l d1,(a0)
               S06:0000355A:  20 81
F00:4671                       or.l (a0),d0             
               S06:0000355C:  80 90
F00:4672                       move SR,d3      
               S06:0000355E:  40 C3
F00:4673                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003560:  02 83 00 00 00 0F
F00:4674                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003566:  DA 83
F00:4675                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003568:  D8 80
F00:4676                       
F00:4677                       
F00:4678                       lsr.l #$1,d1
               S06:0000356A:  E2 89
F00:4679                       dbf d6,OR_OUTER1
               S06:0000356C:  51 CE FF CC
F00:4680                       lsr.l #$1,d2
               S06:00003570:  E2 8A
F00:4681                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003572:  22 3C 81 67 E1 23
F00:4682                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003578:  7C 1E
F00:4683                       dbf d7,OR_OUTER1
               S06:0000357A:  51 CF FF BE
F00:4684                       
F00:4685                       cmpi.l #$76EAC803,d4      ; Check the data results
               S06:0000357E:  0C 84 76 EA C8 03
F00:4686                       bne OR_FAIL;                
               S06:00003584:  66 7E
F00:4687                       cmpi.l #$00005A18,d5      ; Check the Flag results
               S06:00003586:  0C 85 00 00 5A 18
F00:4688                       bne OR_FAIL;                
               S06:0000358C:  66 76
F00:4689                          
F00:4690                          
F00:4691         ;; Register to <EA>
F00:4692       
F00:4693                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:0000358E:  20 3C 86 73 83 74
F00:4694                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003594:  22 3C FC 55 F2 FE
F00:4695                       move.l #$86738374,d2
               S06:0000359A:  24 3C 86 73 83 74
F00:4696                       move.l #$00000000,d3
               S06:000035A0:  76 00
F00:4697                       move.l #$00000000,d4       ; Cumulative data results
               S06:000035A2:  78 00
F00:4698                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000035A4:  7A 00
F00:4699                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000035A6:  7C 1E
F00:4700                       move.l #$0000001D,d7       ; Outer loop counter
               S06:000035A8:  7E 1D
F00:4701                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000035AA:  30 7C 01 00
F00:4702       
F00:4703       
F00:4704       OR_OUTER2:    
F00:4705        
F00:4706           ; BYTE     
F00:4707                       move.l d0,(a0)
               S06:000035AE:  20 80
F00:4708                       or.b d1,(a0)             
               S06:000035B0:  83 10
F00:4709                       move SR,d3      
               S06:000035B2:  40 C3
F00:4710                       andi.l #$0C,d3            ; Isolate flags 
               S06:000035B4:  02 83 00 00 00 0C
F00:4711                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000035BA:  DA 83
F00:4712                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000035BC:  D8 90
F00:4713        
F00:4714           ; WORD      
F00:4715                       move.l d0,(a0)
               S06:000035BE:  20 80
F00:4716                       or.w d1,(a0)  
               S06:000035C0:  83 50
F00:4717                       move SR,d3      
               S06:000035C2:  40 C3
F00:4718                       andi.l #$0C,d3            ; Isolate flags 
               S06:000035C4:  02 83 00 00 00 0C
F00:4719                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000035CA:  DA 83
F00:4720                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000035CC:  D8 90
F00:4721        
F00:4722           ; LONG      
F00:4723                       move.l d0,(a0)
               S06:000035CE:  20 80
F00:4724                       or.l d1,(a0)  
               S06:000035D0:  83 90
F00:4725                       move SR,d3      
               S06:000035D2:  40 C3
F00:4726                       andi.l #$0F,d3            ; Isolate flags 
               S06:000035D4:  02 83 00 00 00 0F
F00:4727                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000035DA:  DA 83
F00:4728                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000035DC:  D8 90
F00:4729                       
F00:4730                       
F00:4731                       lsr.l #$1,d1
               S06:000035DE:  E2 89
F00:4732                       dbf d6,OR_OUTER2
               S06:000035E0:  51 CE FF CC
F00:4733                       lsr.l #$1,d2
               S06:000035E4:  E2 8A
F00:4734                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000035E6:  22 3C 81 67 E1 23
F00:4735                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000035EC:  7C 1E
F00:4736                       dbf d7,OR_OUTER2
               S06:000035EE:  51 CF FF BE
F00:4737                       
F00:4738                       cmpi.l #$FA82B9E4,d4      ; Check the data results
               S06:000035F2:  0C 84 FA 82 B9 E4
F00:4739                       bne OR_FAIL;                
               S06:000035F8:  66 0A
F00:4740                       cmpi.l #$00005730,d5      ; Check the Flag results
               S06:000035FA:  0C 85 00 00 57 30
F00:4741                       bne OR_FAIL;                 
               S06:00003600:  66 02
F00:4742                          
F00:4743                          
F00:4744                       rts
               S06:00003602:  4E 75
F00:4745                       
F00:4746       OR_FAIL: bra OR_FAIL              
               S06:00003604:  60 FE
F00:4747       
F00:4748       ;-----------------------------------------------------------
F00:4749       ;-----------------------------------------------------------
F00:4750       ; OPCODE : AND
F00:4751       ;-----------------------------------------------------------
F00:4752       ;-----------------------------------------------------------
F00:4753       
F00:4754       op_AND:   
F00:4755       
F00:4756         ;; <EA> to Register
F00:4757       
F00:4758                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003606:  20 3C A5 A5 A5 A5
F00:4759                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:0000360C:  22 3C 81 67 E1 23
F00:4760                       move.l #$a5a5a5a5,d2
               S06:00003612:  24 3C A5 A5 A5 A5
F00:4761                       move.l #$00000000,d3
               S06:00003618:  76 00
F00:4762                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000361A:  78 00
F00:4763                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000361C:  7A 00
F00:4764                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000361E:  7C 1E
F00:4765                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003620:  7E 1E
F00:4766                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003622:  30 7C 01 00
F00:4767       
F00:4768       
F00:4769       AND_OUTER1:    
F00:4770        
F00:4771           ; BYTE     
F00:4772                       move.l d1,(a0)
               S06:00003626:  20 81
F00:4773                       and.b (a0),d0             
               S06:00003628:  C0 10
F00:4774                       move SR,d3      
               S06:0000362A:  40 C3
F00:4775                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000362C:  02 83 00 00 00 0C
F00:4776                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003632:  DA 83
F00:4777                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003634:  D8 80
F00:4778        
F00:4779           ; WORD      
F00:4780                       move.l d1,(a0)
               S06:00003636:  20 81
F00:4781                       and.w (a0),d0             
               S06:00003638:  C0 50
F00:4782                       move SR,d3      
               S06:0000363A:  40 C3
F00:4783                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000363C:  02 83 00 00 00 0C
F00:4784                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003642:  DA 83
F00:4785                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003644:  D8 80
F00:4786        
F00:4787           ; LONG      
F00:4788                       move.l d1,(a0)
               S06:00003646:  20 81
F00:4789                       and.l (a0),d0             
               S06:00003648:  C0 90
F00:4790                       move SR,d3      
               S06:0000364A:  40 C3
F00:4791                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000364C:  02 83 00 00 00 0F
F00:4792                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003652:  DA 83
F00:4793                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003654:  D8 80
F00:4794                       
F00:4795                       
F00:4796                       lsr.l #$1,d1
               S06:00003656:  E2 89
F00:4797                       dbf d6,AND_OUTER1
               S06:00003658:  51 CE FF CC
F00:4798                       lsr.l #$1,d2
               S06:0000365C:  E2 8A
F00:4799                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000365E:  22 3C 81 67 E1 23
F00:4800                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003664:  7C 1E
F00:4801                       dbf d7,AND_OUTER1
               S06:00003666:  51 CF FF BE
F00:4802                       
F00:4803                       cmpi.l #$CF212883,d4      ; Check the data results
               S06:0000366A:  0C 84 CF 21 28 83
F00:4804                       bne AND_FAIL;                
               S06:00003670:  66 7E
F00:4805                       cmpi.l #$00002D10,d5      ; Check the Flag results
               S06:00003672:  0C 85 00 00 2D 10
F00:4806                       bne AND_FAIL;                
               S06:00003678:  66 76
F00:4807                          
F00:4808                          
F00:4809         ;; Register to <EA>
F00:4810       
F00:4811                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:0000367A:  20 3C 86 73 83 74
F00:4812                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003680:  22 3C FC 55 F2 FE
F00:4813                       move.l #$86738374,d2
               S06:00003686:  24 3C 86 73 83 74
F00:4814                       move.l #$00000000,d3
               S06:0000368C:  76 00
F00:4815                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000368E:  78 00
F00:4816                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003690:  7A 00
F00:4817                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003692:  7C 1E
F00:4818                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003694:  7E 1D
F00:4819                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003696:  30 7C 01 00
F00:4820       
F00:4821       
F00:4822       AND_OUTER2:    
F00:4823        
F00:4824           ; BYTE     
F00:4825                       move.l d0,(a0)
               S06:0000369A:  20 80
F00:4826                       and.b d1,(a0)             
               S06:0000369C:  C3 10
F00:4827                       move SR,d3      
               S06:0000369E:  40 C3
F00:4828                       andi.l #$0C,d3            ; Isolate flags 
               S06:000036A0:  02 83 00 00 00 0C
F00:4829                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000036A6:  DA 83
F00:4830                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000036A8:  D8 90
F00:4831        
F00:4832           ; WORD      
F00:4833                       move.l d0,(a0)
               S06:000036AA:  20 80
F00:4834                       and.w d1,(a0)  
               S06:000036AC:  C3 50
F00:4835                       move SR,d3      
               S06:000036AE:  40 C3
F00:4836                       andi.l #$0C,d3            ; Isolate flags 
               S06:000036B0:  02 83 00 00 00 0C
F00:4837                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000036B6:  DA 83
F00:4838                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000036B8:  D8 90
F00:4839        
F00:4840           ; LONG      
F00:4841                       move.l d0,(a0)
               S06:000036BA:  20 80
F00:4842                       and.l d1,(a0)  
               S06:000036BC:  C3 90
F00:4843                       move SR,d3      
               S06:000036BE:  40 C3
F00:4844                       andi.l #$0F,d3            ; Isolate flags 
               S06:000036C0:  02 83 00 00 00 0F
F00:4845                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000036C6:  DA 83
F00:4846                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000036C8:  D8 90
F00:4847                       
F00:4848                       
F00:4849                       lsr.l #$1,d1
               S06:000036CA:  E2 89
F00:4850                       dbf d6,AND_OUTER2
               S06:000036CC:  51 CE FF CC
F00:4851                       lsr.l #$1,d2
               S06:000036D0:  E2 8A
F00:4852                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000036D2:  22 3C 81 67 E1 23
F00:4853                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000036D8:  7C 1E
F00:4854                       dbf d7,AND_OUTER2
               S06:000036DA:  51 CF FF BE
F00:4855                       
F00:4856                       cmpi.l #$4A3DE544,d4      ; Check the data results
               S06:000036DE:  0C 84 4A 3D E5 44
F00:4857                       bne AND_FAIL;                
               S06:000036E4:  66 0A
F00:4858                       cmpi.l #$000018E8,d5      ; Check the Flag results
               S06:000036E6:  0C 85 00 00 18 E8
F00:4859                       bne AND_FAIL;                 
               S06:000036EC:  66 02
F00:4860                          
F00:4861                          
F00:4862                       rts
               S06:000036EE:  4E 75
F00:4863                       
F00:4864       AND_FAIL: bra AND_FAIL              
               S06:000036F0:  60 FE
F00:4865       
F00:4866       ;-----------------------------------------------------------
F00:4867       ;-----------------------------------------------------------
F00:4868       ; OPCODE : EOR
F00:4869       ;-----------------------------------------------------------
F00:4870       ;-----------------------------------------------------------
F00:4871       
F00:4872       op_EOR:   
F00:4873        
F00:4874         ;; Register to <EA>
F00:4875       
F00:4876                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:000036F2:  20 3C 86 73 83 74
F00:4877                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:000036F8:  22 3C FC 55 F2 FE
F00:4878                       move.l #$86738374,d2
               S06:000036FE:  24 3C 86 73 83 74
F00:4879                       move.l #$00000000,d3
               S06:00003704:  76 00
F00:4880                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003706:  78 00
F00:4881                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003708:  7A 00
F00:4882                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000370A:  7C 1E
F00:4883                       move.l #$0000001D,d7       ; Outer loop counter
               S06:0000370C:  7E 1D
F00:4884                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:0000370E:  30 7C 01 00
F00:4885       
F00:4886       
F00:4887       EOR_OUTER2:    
F00:4888        
F00:4889           ; BYTE     
F00:4890                       move.l d0,(a0)
               S06:00003712:  20 80
F00:4891                       eor.b d1,(a0)             
               S06:00003714:  B3 10
F00:4892                       move SR,d3      
               S06:00003716:  40 C3
F00:4893                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003718:  02 83 00 00 00 0C
F00:4894                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000371E:  DA 83
F00:4895                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003720:  D8 90
F00:4896        
F00:4897           ; WORD      
F00:4898                       move.l d0,(a0)
               S06:00003722:  20 80
F00:4899                       eor.w d1,(a0)  
               S06:00003724:  B3 50
F00:4900                       move SR,d3      
               S06:00003726:  40 C3
F00:4901                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003728:  02 83 00 00 00 0C
F00:4902                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000372E:  DA 83
F00:4903                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003730:  D8 90
F00:4904        
F00:4905           ; LONG      
F00:4906                       move.l d0,(a0)
               S06:00003732:  20 80
F00:4907                       eor.l d1,(a0)  
               S06:00003734:  B3 90
F00:4908                       move SR,d3      
               S06:00003736:  40 C3
F00:4909                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003738:  02 83 00 00 00 0F
F00:4910                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000373E:  DA 83
F00:4911                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003740:  D8 90
F00:4912                       
F00:4913                       
F00:4914                       lsr.l #$1,d1
               S06:00003742:  E2 89
F00:4915                       dbf d6,EOR_OUTER2
               S06:00003744:  51 CE FF CC
F00:4916                       lsr.l #$1,d2
               S06:00003748:  E2 8A
F00:4917                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000374A:  22 3C 81 67 E1 23
F00:4918                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003750:  7C 1E
F00:4919                       dbf d7,EOR_OUTER2
               S06:00003752:  51 CF FF BE
F00:4920                       
F00:4921                       cmpi.l #$55C5EB70,d4      ; Check the data results
               S06:00003756:  0C 84 55 C5 EB 70
F00:4922                       bne EOR_FAIL;                
               S06:0000375C:  66 0A
F00:4923                       cmpi.l #$00004430,d5      ; Check the Flag results
               S06:0000375E:  0C 85 00 00 44 30
F00:4924                       bne EOR_FAIL;                 
               S06:00003764:  66 02
F00:4925                          
F00:4926                          
F00:4927                       rts
               S06:00003766:  4E 75
F00:4928                       
F00:4929       EOR_FAIL: bra EOR_FAIL
               S06:00003768:  60 FE
F00:4930       
F00:4931       ;-----------------------------------------------------------
F00:4932       ;-----------------------------------------------------------
F00:4933       ; OPCODE : CMP
F00:4934       ;-----------------------------------------------------------
F00:4935       ;-----------------------------------------------------------
F00:4936       
F00:4937       op_CMP:   
F00:4938       
F00:4939       
F00:4940         ;; <EA> to Register
F00:4941       
F00:4942                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:0000376A:  20 3C A5 A5 A5 A5
F00:4943                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003770:  22 3C 81 67 E1 23
F00:4944                       move.l #$a5a5a5a5,d2
               S06:00003776:  24 3C A5 A5 A5 A5
F00:4945                       move.l #$00000000,d3
               S06:0000377C:  76 00
F00:4946                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000377E:  78 00
F00:4947                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003780:  7A 00
F00:4948                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003782:  7C 1E
F00:4949                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003784:  7E 1E
F00:4950                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003786:  30 7C 01 00
F00:4951       
F00:4952       
F00:4953       CMP_OUTER1:    
F00:4954        
F00:4955           ; BYTE     
F00:4956                       move.l d1,(a0)
               S06:0000378A:  20 81
F00:4957                       cmp.b (a0),d0             
               S06:0000378C:  B0 10
F00:4958                       move SR,d3      
               S06:0000378E:  40 C3
F00:4959                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003790:  02 83 00 00 00 0F
F00:4960                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003796:  DA 83
F00:4961                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003798:  D8 80
F00:4962        
F00:4963           ; WORD      
F00:4964                       move.l d1,(a0)
               S06:0000379A:  20 81
F00:4965                       cmp.w (a0),d0             
               S06:0000379C:  B0 50
F00:4966                       move SR,d3      
               S06:0000379E:  40 C3
F00:4967                       andi.l #$0F,d3            ; Isolate flags 
               S06:000037A0:  02 83 00 00 00 0F
F00:4968                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000037A6:  DA 83
F00:4969                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000037A8:  D8 80
F00:4970        
F00:4971           ; LONG      
F00:4972                       move.l d1,(a0)
               S06:000037AA:  20 81
F00:4973                       cmp.l (a0),d0             
               S06:000037AC:  B0 90
F00:4974                       move SR,d3      
               S06:000037AE:  40 C3
F00:4975                       andi.l #$0F,d3            ; Isolate flags 
               S06:000037B0:  02 83 00 00 00 0F
F00:4976                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000037B6:  DA 83
F00:4977                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:000037B8:  D8 80
F00:4978                       
F00:4979                       
F00:4980                       lsr.l #$1,d1
               S06:000037BA:  E2 89
F00:4981                       dbf d6,CMP_OUTER1
               S06:000037BC:  51 CE FF CC
F00:4982                       lsr.l #$1,d2
               S06:000037C0:  E2 8A
F00:4983                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000037C2:  22 3C 81 67 E1 23
F00:4984                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000037C8:  7C 1E
F00:4985                       dbf d7,CMP_OUTER1
               S06:000037CA:  51 CF FF BE
F00:4986                       
F00:4987                       cmpi.l #$7878712F,d4      ; Check the data results
               S06:000037CE:  0C 84 78 78 71 2F
F00:4988                       bne CMP_FAIL;                
               S06:000037D4:  66 0A
F00:4989                       cmpi.l #$00005502,d5      ; Check the Flag results
               S06:000037D6:  0C 85 00 00 55 02
F00:4990                       bne CMP_FAIL;                
               S06:000037DC:  66 02
F00:4991                          
F00:4992                          
F00:4993       
F00:4994                       rts
               S06:000037DE:  4E 75
F00:4995       
F00:4996       CMP_FAIL: bra CMP_FAIL
               S06:000037E0:  60 FE
F00:4997       
F00:4998       ;-----------------------------------------------------------
F00:4999       ;-----------------------------------------------------------
F00:5000       ; OPCODE : CMPA
F00:5001       ;-----------------------------------------------------------
F00:5002       ;-----------------------------------------------------------
F00:5003       
F00:5004       op_CMPA:   
F00:5005       
F00:5006       
F00:5007         ;; <EA> to Register
F00:5008       
F00:5009                       move.l #$a5a5a5a5,a0       ; Initial Data-X  Inner loop
               S06:000037E2:  20 7C A5 A5 A5 A5
F00:5010                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000037E8:  22 3C 81 67 E1 23
F00:5011                       move.l #$a5a5a5a5,d2
               S06:000037EE:  24 3C A5 A5 A5 A5
F00:5012                       move.l #$00000000,d3
               S06:000037F4:  76 00
F00:5013                       move.l #$00000000,d4       ; Cumulative data results
               S06:000037F6:  78 00
F00:5014                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000037F8:  7A 00
F00:5015                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000037FA:  7C 1E
F00:5016                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000037FC:  7E 1E
F00:5017                       move.l #$00000100,a1       ; Address for memory EA operations
               S06:000037FE:  32 7C 01 00
F00:5018       
F00:5019       
F00:5020       CMPA_OUTER1:    
F00:5021         
F00:5022        
F00:5023           ; WORD      
F00:5024                       move.l d1,(a1)
               S06:00003802:  22 81
F00:5025                       cmpa.w (a1),a0             
               S06:00003804:  B0 D1
F00:5026                       move SR,d3      
               S06:00003806:  40 C3
F00:5027                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003808:  02 83 00 00 00 0F
F00:5028                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000380E:  DA 83
F00:5029                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:00003810:  D8 88
F00:5030        
F00:5031           ; LONG      
F00:5032                       move.l d1,(a1)
               S06:00003812:  22 81
F00:5033                       cmpa.l (a1),a0             
               S06:00003814:  B1 D1
F00:5034                       move SR,d3      
               S06:00003816:  40 C3
F00:5035                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003818:  02 83 00 00 00 0F
F00:5036                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000381E:  DA 83
F00:5037                       add.l a0,d4               ; Copy data results into data accumulator   
               S06:00003820:  D8 88
F00:5038                       
F00:5039                       
F00:5040                       lsr.l #$1,d1
               S06:00003822:  E2 89
F00:5041                       dbf d6,CMPA_OUTER1
               S06:00003824:  51 CE FF DC
F00:5042                       lsr.l #$1,d2
               S06:00003828:  E2 8A
F00:5043                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000382A:  22 3C 81 67 E1 23
F00:5044                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003830:  7C 1E
F00:5045                       dbf d7,CMPA_OUTER1
               S06:00003832:  51 CF FF CE
F00:5046                       
F00:5047                       cmpi.l #$a5a5a0ca,d4      ; Check the data results
               S06:00003836:  0C 84 A5 A5 A0 CA
F00:5048                       bne CMPA_FAIL;                
               S06:0000383C:  66 0A
F00:5049                       cmpi.l #$00003A7D,d5      ; Check the Flag results
               S06:0000383E:  0C 85 00 00 3A 7D
F00:5050                       bne CMPA_FAIL;                
               S06:00003844:  66 02
F00:5051                              
F00:5052       
F00:5053                       rts
               S06:00003846:  4E 75
F00:5054       
F00:5055       CMPA_FAIL: bra CMPA_FAIL
               S06:00003848:  60 FE
F00:5056       
F00:5057       ;-----------------------------------------------------------
F00:5058       ;-----------------------------------------------------------
F00:5059       ; OPCODE : CMPM
F00:5060       ;-----------------------------------------------------------
F00:5061       ;-----------------------------------------------------------
F00:5062       
F00:5063       op_CMPM: 
F00:5064       
F00:5065                       move.l #$00000100,a0       ; Address for Data-X
               S06:0000384A:  30 7C 01 00
F00:5066                       move.l #$00000200,a1       ; Address for Data-Y
               S06:0000384E:  32 7C 02 00
F00:5067                       move.l #$00000000,d0       
               S06:00003852:  70 00
F00:5068                       move.l #$00000000,d1       
               S06:00003854:  72 00
F00:5069                       move.l #$00000000,d2       
               S06:00003856:  74 00
F00:5070                       
F00:5071                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00003858:  20 FC 11 FF 55 80
F00:5072                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:0000385E:  20 FC 11 11 FF FF
F00:5073                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00003864:  20 FC 33 33 33 33
F00:5074                       move.l #$44444444,(a0)+   ; Populate test data
               S06:0000386A:  20 FC 44 44 44 44
F00:5075                       
F00:5076                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00003870:  22 FC 80 FF 33 7F
F00:5077                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00003876:  22 FC FF FF 11 11
F00:5078                       move.l #$33333333,(a1)+   ; Populate test data
               S06:0000387C:  22 FC 33 33 33 33
F00:5079                       move.l #$44444444,(a1)+   ; Populate test data
               S06:00003882:  22 FC 44 44 44 44
F00:5080                       
F00:5081                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003888:  30 7C 01 00
F00:5082                       move.l #$00000200,a1       ; Address for Data-Y
               S06:0000388C:  32 7C 02 00
F00:5083                       move.l #$0000000F,d6       ; Loop counter
               S06:00003890:  7C 0F
F00:5084                       
F00:5085       CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
               S06:00003892:  B3 08
F00:5086                       move SR,d3      
               S06:00003894:  40 C3
F00:5087                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003896:  02 83 00 00 00 0F
F00:5088                       add.l d3,d0               ; Copy flag results into accumulator                
               S06:0000389C:  D0 83
F00:5089                       dbf d6,CMPM_LOOP1
               S06:0000389E:  51 CE FF F2
F00:5090       
F00:5091       
F00:5092                       move.l #$00000100,a0       ; Address for Data-X
               S06:000038A2:  30 7C 01 00
F00:5093                       move.l #$00000200,a1       ; Address for Data-Y
               S06:000038A6:  32 7C 02 00
F00:5094                       move.l #$00000007,d6       ; Loop counter
               S06:000038AA:  7C 07
F00:5095                       
F00:5096       CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
               S06:000038AC:  B3 48
F00:5097                       move SR,d3      
               S06:000038AE:  40 C3
F00:5098                       andi.l #$0F,d3            ; Isolate flags 
               S06:000038B0:  02 83 00 00 00 0F
F00:5099                       add.l d3,d1               ; Copy flag results into accumulator                
               S06:000038B6:  D2 83
F00:5100                       dbf d6,CMPM_LOOP2
               S06:000038B8:  51 CE FF F2
F00:5101       
F00:5102       
F00:5103                       move.l #$00000100,a0       ; Address for Data-X
               S06:000038BC:  30 7C 01 00
F00:5104                       move.l #$00000200,a1       ; Address for Data-Y
               S06:000038C0:  32 7C 02 00
F00:5105                       move.l #$00000003,d6       ; Loop counter
               S06:000038C4:  7C 03
F00:5106                       
F00:5107       CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
               S06:000038C6:  B3 88
F00:5108                       move SR,d3      
               S06:000038C8:  40 C3
F00:5109                       andi.l #$0F,d3            ; Isolate flags 
               S06:000038CA:  02 83 00 00 00 0F
F00:5110                       add.l d3,d2               ; Copy flag results into accumulator                
               S06:000038D0:  D4 83
F00:5111                       dbf d6,CMPM_LOOP3
               S06:000038D2:  51 CE FF F2
F00:5112       
F00:5113       
F00:5114                       cmpi.l #$0000004C,d0      ; Check the data results
               S06:000038D6:  0C 80 00 00 00 4C
F00:5115                       bne CMPM_FAIL;                
               S06:000038DC:  66 12
F00:5116                       cmpi.l #$00000024,d1      
               S06:000038DE:  0C 81 00 00 00 24
F00:5117                       bne CMPM_FAIL;                
               S06:000038E4:  66 0A
F00:5118                       cmpi.l #$00000012,d2      
               S06:000038E6:  0C 82 00 00 00 12
F00:5119                       bne CMPM_FAIL;                
               S06:000038EC:  66 02
F00:5120               
F00:5121                       rts
               S06:000038EE:  4E 75
F00:5122       
F00:5123       CMPM_FAIL: bra CMPM_FAIL
               S06:000038F0:  60 FE
F00:5124       
F00:5125       ;-----------------------------------------------------------
F00:5126       ;-----------------------------------------------------------
F00:5127       ; OPCODE : ADD
F00:5128       ;-----------------------------------------------------------
F00:5129       ;-----------------------------------------------------------
F00:5130       
F00:5131       op_ADD: 
F00:5132       
F00:5133       
F00:5134         ;; <EA> to Register
F00:5135                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:000038F2:  20 3C A5 A5 A5 A5
F00:5136                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000038F8:  22 3C 81 67 E1 23
F00:5137                       move.l #$a5a5a5a5,d2
               S06:000038FE:  24 3C A5 A5 A5 A5
F00:5138                       move.l #$00000000,d3
               S06:00003904:  76 00
F00:5139                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003906:  78 00
F00:5140                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003908:  7A 00
F00:5141                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000390A:  7C 1E
F00:5142                       move.l #$0000001E,d7       ; Outer loop counter
               S06:0000390C:  7E 1E
F00:5143                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:0000390E:  30 7C 01 00
F00:5144       
F00:5145       
F00:5146       ADD_OUTER1:    
F00:5147        
F00:5148           ; BYTE     
F00:5149                       move.l d1,(a0)
               S06:00003912:  20 81
F00:5150                       add.b (a0),d0             
               S06:00003914:  D0 10
F00:5151                       move SR,d3      
               S06:00003916:  40 C3
F00:5152                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003918:  02 83 00 00 00 1F
F00:5153                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000391E:  DA 83
F00:5154                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003920:  D8 80
F00:5155        
F00:5156           ; WORD      
F00:5157                       move.l d1,(a0)
               S06:00003922:  20 81
F00:5158                       add.w (a0),d0             
               S06:00003924:  D0 50
F00:5159                       move SR,d3      
               S06:00003926:  40 C3
F00:5160                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003928:  02 83 00 00 00 0C
F00:5161                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000392E:  DA 83
F00:5162                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003930:  D8 80
F00:5163        
F00:5164           ; LONG      
F00:5165                       move.l d1,(a0)
               S06:00003932:  20 81
F00:5166                       add.l (a0),d0             
               S06:00003934:  D0 90
F00:5167                       move SR,d3      
               S06:00003936:  40 C3
F00:5168                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003938:  02 83 00 00 00 0F
F00:5169                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000393E:  DA 83
F00:5170                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003940:  D8 80
F00:5171                       
F00:5172                       
F00:5173                       ror.l #$1,d1
               S06:00003942:  E2 99
F00:5174                       dbf d6,ADD_OUTER1
               S06:00003944:  51 CE FF CC
F00:5175                       ror.l #$1,d2
               S06:00003948:  E2 9A
F00:5176                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:0000394A:  22 3C 81 67 E1 23
F00:5177                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003950:  7C 1E
F00:5178                       dbf d7,ADD_OUTER1
               S06:00003952:  51 CF FF BE
F00:5179                       
F00:5180                       cmpi.l #$23ED428F,d4      ; Check the data results
               S06:00003956:  0C 84 23 ED 42 8F
F00:5181                       bne ADD_FAIL;                
               S06:0000395C:  66 7E
F00:5182                       cmpi.l #$00004C96,d5      ; Check the Flag results
               S06:0000395E:  0C 85 00 00 4C 96
F00:5183                       bne ADD_FAIL;                
               S06:00003964:  66 76
F00:5184                          
F00:5185                          
F00:5186         ;; Register to <EA>
F00:5187                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003966:  20 3C 86 73 83 74
F00:5188                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:0000396C:  22 3C FC 55 F2 FE
F00:5189                       move.l #$86738374,d2
               S06:00003972:  24 3C 86 73 83 74
F00:5190                       move.l #$00000000,d3
               S06:00003978:  76 00
F00:5191                       move.l #$00000000,d4       ; Cumulative data results
               S06:0000397A:  78 00
F00:5192                       move.l #$00000000,d5       ; Cumulative flag results
               S06:0000397C:  7A 00
F00:5193                       move.l #$0000001E,d6       ; Inner loop counter
               S06:0000397E:  7C 1E
F00:5194                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003980:  7E 1D
F00:5195                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003982:  30 7C 01 00
F00:5196       
F00:5197       
F00:5198       ADD_OUTER2:    
F00:5199        
F00:5200           ; BYTE     
F00:5201                       move.l d0,(a0)
               S06:00003986:  20 80
F00:5202                       add.b d1,(a0)             
               S06:00003988:  D3 10
F00:5203                       move SR,d3      
               S06:0000398A:  40 C3
F00:5204                       andi.l #$0C,d3            ; Isolate flags 
               S06:0000398C:  02 83 00 00 00 0C
F00:5205                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003992:  DA 83
F00:5206                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003994:  D8 90
F00:5207        
F00:5208           ; WORD      
F00:5209                       move.l d0,(a0)
               S06:00003996:  20 80
F00:5210                       add.w d1,(a0)  
               S06:00003998:  D3 50
F00:5211                       move SR,d3      
               S06:0000399A:  40 C3
F00:5212                       andi.l #$1F,d3            ; Isolate flags 
               S06:0000399C:  02 83 00 00 00 1F
F00:5213                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000039A2:  DA 83
F00:5214                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000039A4:  D8 90
F00:5215        
F00:5216           ; LONG      
F00:5217                       move.l d0,(a0)
               S06:000039A6:  20 80
F00:5218                       add.l d1,(a0)  
               S06:000039A8:  D3 90
F00:5219                       move SR,d3      
               S06:000039AA:  40 C3
F00:5220                       andi.l #$0F,d3            ; Isolate flags 
               S06:000039AC:  02 83 00 00 00 0F
F00:5221                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000039B2:  DA 83
F00:5222                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:000039B4:  D8 90
F00:5223                       
F00:5224                       
F00:5225                       ror.l #$1,d1
               S06:000039B6:  E2 99
F00:5226                       dbf d6,ADD_OUTER2
               S06:000039B8:  51 CE FF CC
F00:5227                       ror.l #$1,d2
               S06:000039BC:  E2 9A
F00:5228                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:000039BE:  22 3C 81 67 E1 23
F00:5229                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000039C4:  7C 1E
F00:5230                       dbf d7,ADD_OUTER2
               S06:000039C6:  51 CF FF BE
F00:5231                       
F00:5232                       cmpi.l #$6701B884,d4      ; Check the data results
               S06:000039CA:  0C 84 67 01 B8 84
F00:5233                       bne ADD_FAIL;                
               S06:000039D0:  66 0A
F00:5234                       cmpi.l #$00005467,d5      ; Check the Flag results
               S06:000039D2:  0C 85 00 00 54 67
F00:5235                       bne ADD_FAIL;                 
               S06:000039D8:  66 02
F00:5236                          
F00:5237                       rts
               S06:000039DA:  4E 75
F00:5238       
F00:5239       ADD_FAIL: bra ADD_FAIL
               S06:000039DC:  60 FE
F00:5240       
F00:5241       ;-----------------------------------------------------------
F00:5242       ;-----------------------------------------------------------
F00:5243       ; OPCODE : SUB
F00:5244       ;-----------------------------------------------------------
F00:5245       ;-----------------------------------------------------------
F00:5246       
F00:5247       op_SUB: 
F00:5248       
F00:5249         ;; <EA> to Register
F00:5250                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:000039DE:  20 3C A5 A5 A5 A5
F00:5251                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:000039E4:  22 3C 81 67 E1 23
F00:5252                       move.l #$a5a5a5a5,d2
               S06:000039EA:  24 3C A5 A5 A5 A5
F00:5253                       move.l #$00000000,d3
               S06:000039F0:  76 00
F00:5254                       move.l #$00000000,d4       ; Cumulative data results
               S06:000039F2:  78 00
F00:5255                       move.l #$00000000,d5       ; Cumulative flag results
               S06:000039F4:  7A 00
F00:5256                       move.l #$0000001E,d6       ; Inner loop counter
               S06:000039F6:  7C 1E
F00:5257                       move.l #$0000001E,d7       ; Outer loop counter
               S06:000039F8:  7E 1E
F00:5258                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:000039FA:  30 7C 01 00
F00:5259       
F00:5260       
F00:5261       SUB_OUTER1:    
F00:5262        
F00:5263           ; BYTE     
F00:5264                       move.l d1,(a0)
               S06:000039FE:  20 81
F00:5265                       sub.b (a0),d0             
               S06:00003A00:  90 10
F00:5266                       move SR,d3      
               S06:00003A02:  40 C3
F00:5267                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003A04:  02 83 00 00 00 1F
F00:5268                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A0A:  DA 83
F00:5269                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003A0C:  D8 80
F00:5270        
F00:5271           ; WORD      
F00:5272                       move.l d1,(a0)
               S06:00003A0E:  20 81
F00:5273                       sub.w (a0),d0             
               S06:00003A10:  90 50
F00:5274                       move SR,d3      
               S06:00003A12:  40 C3
F00:5275                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003A14:  02 83 00 00 00 0C
F00:5276                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A1A:  DA 83
F00:5277                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003A1C:  D8 80
F00:5278        
F00:5279           ; LONG      
F00:5280                       move.l d1,(a0)
               S06:00003A1E:  20 81
F00:5281                       sub.l (a0),d0             
               S06:00003A20:  90 90
F00:5282                       move SR,d3      
               S06:00003A22:  40 C3
F00:5283                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003A24:  02 83 00 00 00 0F
F00:5284                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A2A:  DA 83
F00:5285                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003A2C:  D8 80
F00:5286                       
F00:5287                       
F00:5288                       ror.l #$1,d1
               S06:00003A2E:  E2 99
F00:5289                       dbf d6,SUB_OUTER1
               S06:00003A30:  51 CE FF CC
F00:5290                       ror.l #$1,d2
               S06:00003A34:  E2 9A
F00:5291                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003A36:  22 3C 81 67 E1 23
F00:5292                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003A3C:  7C 1E
F00:5293                       dbf d7,SUB_OUTER1
               S06:00003A3E:  51 CF FF BE
F00:5294                       
F00:5295                       cmpi.l #$1A8D14CF,d4      ; Check the data results
               S06:00003A42:  0C 84 1A 8D 14 CF
F00:5296                       bne SUB_FAIL;                
               S06:00003A48:  66 7E
F00:5297                       cmpi.l #$00004FC4,d5      ; Check the Flag results
               S06:00003A4A:  0C 85 00 00 4F C4
F00:5298                       bne SUB_FAIL;                
               S06:00003A50:  66 76
F00:5299                          
F00:5300                          
F00:5301         ;; Register to <EA>
F00:5302                       move.l #$86738374,d0       ; Initial Data-X  Inner loop
               S06:00003A52:  20 3C 86 73 83 74
F00:5303                       move.l #$FC55F2FE,d1       ; Initial Data-Y  Outer loop
               S06:00003A58:  22 3C FC 55 F2 FE
F00:5304                       move.l #$86738374,d2
               S06:00003A5E:  24 3C 86 73 83 74
F00:5305                       move.l #$00000000,d3
               S06:00003A64:  76 00
F00:5306                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003A66:  78 00
F00:5307                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003A68:  7A 00
F00:5308                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003A6A:  7C 1E
F00:5309                       move.l #$0000001D,d7       ; Outer loop counter
               S06:00003A6C:  7E 1D
F00:5310                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003A6E:  30 7C 01 00
F00:5311       
F00:5312       
F00:5313       SUB_OUTER2:    
F00:5314        
F00:5315           ; BYTE     
F00:5316                       move.l d0,(a0)
               S06:00003A72:  20 80
F00:5317                       sub.b d1,(a0)             
               S06:00003A74:  93 10
F00:5318                       move SR,d3      
               S06:00003A76:  40 C3
F00:5319                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003A78:  02 83 00 00 00 0C
F00:5320                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A7E:  DA 83
F00:5321                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003A80:  D8 90
F00:5322        
F00:5323           ; WORD      
F00:5324                       move.l d0,(a0)
               S06:00003A82:  20 80
F00:5325                       sub.w d1,(a0)  
               S06:00003A84:  93 50
F00:5326                       move SR,d3      
               S06:00003A86:  40 C3
F00:5327                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003A88:  02 83 00 00 00 1F
F00:5328                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A8E:  DA 83
F00:5329                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003A90:  D8 90
F00:5330        
F00:5331           ; LONG      
F00:5332                       move.l d0,(a0)
               S06:00003A92:  20 80
F00:5333                       sub.l d1,(a0)  
               S06:00003A94:  93 90
F00:5334                       move SR,d3      
               S06:00003A96:  40 C3
F00:5335                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003A98:  02 83 00 00 00 0F
F00:5336                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003A9E:  DA 83
F00:5337                       add.l (a0),d4             ; Copy data results into data accumulator   
               S06:00003AA0:  D8 90
F00:5338                       
F00:5339                       
F00:5340                       ror.l #$1,d1
               S06:00003AA2:  E2 99
F00:5341                       dbf d6,SUB_OUTER2
               S06:00003AA4:  51 CE FF CC
F00:5342                       ror.l #$1,d2
               S06:00003AA8:  E2 9A
F00:5343                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003AAA:  22 3C 81 67 E1 23
F00:5344                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003AB0:  7C 1E
F00:5345                       dbf d7,SUB_OUTER2
               S06:00003AB2:  51 CF FF BE
F00:5346                       
F00:5347                       cmpi.l #$36D38BEC,d4      ; Check the data results
               S06:00003AB6:  0C 84 36 D3 8B EC
F00:5348                       bne SUB_FAIL;                
               S06:00003ABC:  66 0A
F00:5349                       cmpi.l #$000045A5,d5      ; Check the Flag results
               S06:00003ABE:  0C 85 00 00 45 A5
F00:5350                       bne SUB_FAIL;                 
               S06:00003AC4:  66 02
F00:5351       
F00:5352                       rts
               S06:00003AC6:  4E 75
F00:5353       
F00:5354       SUB_FAIL: bra SUB_FAIL
               S06:00003AC8:  60 FE
F00:5355       
F00:5356       ;-----------------------------------------------------------
F00:5357       ;-----------------------------------------------------------
F00:5358       ; OPCODE : ADDA
F00:5359       ;-----------------------------------------------------------
F00:5360       ;-----------------------------------------------------------
F00:5361       
F00:5362       op_ADDA: 
F00:5363       
F00:5364         ;; <EA> to Register
F00:5365                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003ACA:  20 3C A5 A5 A5 A5
F00:5366                       move.l #$8167E123,d1       
               S06:00003AD0:  22 3C 81 67 E1 23
F00:5367                       move.l #$a5a5a5a5,d2
               S06:00003AD6:  24 3C A5 A5 A5 A5
F00:5368                       move.l #$00000000,d3
               S06:00003ADC:  76 00
F00:5369                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003ADE:  78 00
F00:5370                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003AE0:  7A 00
F00:5371                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003AE2:  7C 1E
F00:5372                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003AE4:  7E 1E
F00:5373                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003AE6:  30 7C 01 00
F00:5374                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:00003AEA:  22 7C 81 67 E1 23
F00:5375       
F00:5376       ADDA_OUTER1:    
F00:5377       
F00:5378           ; WORD      
F00:5379                       move.l d1,(a0)  
               S06:00003AF0:  20 81
F00:5380                       adda.w (a0),a1             
               S06:00003AF2:  D2 D0
F00:5381                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003AF4:  D8 89
F00:5382        
F00:5383           ; LONG      
F00:5384                       move.l d1,(a0)
               S06:00003AF6:  20 81
F00:5385                       adda.l (a0),a1             
               S06:00003AF8:  D3 D0
F00:5386                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003AFA:  D8 89
F00:5387                       
F00:5388                       ror.l #$1,d1
               S06:00003AFC:  E2 99
F00:5389                       dbf d6,ADDA_OUTER1
               S06:00003AFE:  51 CE FF F0
F00:5390                       ror.l #$1,d1
               S06:00003B02:  E2 99
F00:5391                       move.l d1,a1
               S06:00003B04:  22 41
F00:5392                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003B06:  22 3C 81 67 E1 23
F00:5393                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B0C:  7C 1E
F00:5394                       dbf d7,ADDA_OUTER1
               S06:00003B0E:  51 CF FF E0
F00:5395                       
F00:5396                       cmpi.l #$AC04DB4C,d4      ; Check the data results
               S06:00003B12:  0C 84 AC 04 DB 4C
F00:5397                       bne ADDA_FAIL;                
               S06:00003B18:  66 02
F00:5398                     
F00:5399                        
F00:5400                       rts
               S06:00003B1A:  4E 75
F00:5401       
F00:5402       ADDA_FAIL: bra ADDA_FAIL
               S06:00003B1C:  60 FE
F00:5403       
F00:5404       ;-----------------------------------------------------------
F00:5405       ;-----------------------------------------------------------
F00:5406       ; OPCODE : SUBA
F00:5407       ;-----------------------------------------------------------
F00:5408       ;-----------------------------------------------------------
F00:5409       
F00:5410       op_SUBA: 
F00:5411       
F00:5412         ;; <EA> to Register
F00:5413                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003B1E:  20 3C A5 A5 A5 A5
F00:5414                       move.l #$8167E123,d1       
               S06:00003B24:  22 3C 81 67 E1 23
F00:5415                       move.l #$a5a5a5a5,d2
               S06:00003B2A:  24 3C A5 A5 A5 A5
F00:5416                       move.l #$00000000,d3
               S06:00003B30:  76 00
F00:5417                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003B32:  78 00
F00:5418                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003B34:  7A 00
F00:5419                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B36:  7C 1E
F00:5420                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003B38:  7E 1E
F00:5421                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003B3A:  30 7C 01 00
F00:5422                       move.l #$8167E123,a1       ; Initial Data-Y  Outer loop
               S06:00003B3E:  22 7C 81 67 E1 23
F00:5423       
F00:5424       SUBA_OUTER1:    
F00:5425       
F00:5426           ; WORD      
F00:5427                       move.l d1,(a0)
               S06:00003B44:  20 81
F00:5428                       suba.w (a0),a1             
               S06:00003B46:  92 D0
F00:5429                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003B48:  D8 89
F00:5430        
F00:5431           ; LONG      
F00:5432                       move.l d1,(a0)
               S06:00003B4A:  20 81
F00:5433                       suba.l (a0),a1             
               S06:00003B4C:  93 D0
F00:5434                       add.l a1,d4               ; Copy data results into data accumulator   
               S06:00003B4E:  D8 89
F00:5435                       
F00:5436                       ror.l #$1,d1
               S06:00003B50:  E2 99
F00:5437                       dbf d6,SUBA_OUTER1
               S06:00003B52:  51 CE FF F0
F00:5438                       ror.l #$1,d1
               S06:00003B56:  E2 99
F00:5439                       move.l d1,a1
               S06:00003B58:  22 41
F00:5440                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003B5A:  22 3C 81 67 E1 23
F00:5441                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B60:  7C 1E
F00:5442                       dbf d7,SUBA_OUTER1
               S06:00003B62:  51 CF FF E0
F00:5443                       
F00:5444                       cmpi.l #$E1E36D7A,d4      ; Check the data results
               S06:00003B66:  0C 84 E1 E3 6D 7A
F00:5445                       bne SUBA_FAIL;                
               S06:00003B6C:  66 02
F00:5446                     
F00:5447                        
F00:5448                       rts
               S06:00003B6E:  4E 75
F00:5449       
F00:5450       SUBA_FAIL: bra SUBA_FAIL
               S06:00003B70:  60 FE
F00:5451       
F00:5452       ;-----------------------------------------------------------
F00:5453       ;-----------------------------------------------------------
F00:5454       ; OPCODE : ADDX
F00:5455       ;-----------------------------------------------------------
F00:5456       ;-----------------------------------------------------------
F00:5457       
F00:5458       op_ADDX: 
F00:5459       
F00:5460       
F00:5461         ;; Register to Register
F00:5462                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003B72:  20 3C A5 A5 A5 A5
F00:5463                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003B78:  22 3C 81 67 E1 23
F00:5464                       move.l #$a5a5a5a5,d2
               S06:00003B7E:  24 3C A5 A5 A5 A5
F00:5465                       move.l #$00000000,d3
               S06:00003B84:  76 00
F00:5466                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003B86:  78 00
F00:5467                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003B88:  7A 00
F00:5468                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003B8A:  7C 1E
F00:5469                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003B8C:  7E 1E
F00:5470                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003B8E:  30 7C 01 00
F00:5471       
F00:5472       
F00:5473       ADDX_OUTER1:    
F00:5474        
F00:5475           ; BYTE    
F00:5476                       move.l d2,d0
               S06:00003B92:  20 02
F00:5477                       addx.b d1,d0             
               S06:00003B94:  D1 01
F00:5478                       move SR,d3      
               S06:00003B96:  40 C3
F00:5479                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003B98:  02 83 00 00 00 1F
F00:5480                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003B9E:  DA 83
F00:5481                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003BA0:  D8 80
F00:5482        
F00:5483           ; WORD      
F00:5484                       move.l d2,d0
               S06:00003BA2:  20 02
F00:5485                       addx.w d1,d0             
               S06:00003BA4:  D1 41
F00:5486                       move SR,d3      
               S06:00003BA6:  40 C3
F00:5487                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003BA8:  02 83 00 00 00 1F
F00:5488                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003BAE:  DA 83
F00:5489                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003BB0:  D8 80
F00:5490        
F00:5491           ; LONG      
F00:5492                       move.l d2,d0
               S06:00003BB2:  20 02
F00:5493                       addx.l d1,d0             
               S06:00003BB4:  D1 81
F00:5494                       move SR,d3      
               S06:00003BB6:  40 C3
F00:5495                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003BB8:  02 83 00 00 00 1F
F00:5496                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003BBE:  DA 83
F00:5497                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003BC0:  D8 80
F00:5498                       
F00:5499                       ror.l #$1,d1
               S06:00003BC2:  E2 99
F00:5500                       dbf d6,ADDX_OUTER1
               S06:00003BC4:  51 CE FF CC
F00:5501                       ror.l #$1,d2
               S06:00003BC8:  E2 9A
F00:5502                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003BCA:  22 3C 81 67 E1 23
F00:5503                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003BD0:  7C 1E
F00:5504                       dbf d7,ADDX_OUTER1
               S06:00003BD2:  51 CF FF BE
F00:5505                       
F00:5506                       cmpi.l #$4E96A4D9,d4      ; Check the data results
               S06:00003BD6:  0C 84 4E 96 A4 D9
F00:5507                       bne ADDX_FAIL;                
               S06:00003BDC:  66 00 00 A8
F00:5508                       cmpi.l #$000085CD,d5      ; Check the Flag results
               S06:00003BE0:  0C 85 00 00 85 CD
F00:5509                       bne ADDX_FAIL;                
               S06:00003BE6:  66 00 00 9E
F00:5510                          
F00:5511           
F00:5512           
F00:5513           ; -(An),-(An)
F00:5514           
F00:5515                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:00003BEA:  70 00
F00:5516                       move.l #$00000000,d1        
               S06:00003BEC:  72 00
F00:5517                       move.l #$00000000,d2      
               S06:00003BEE:  74 00
F00:5518                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003BF0:  30 7C 01 00
F00:5519                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003BF4:  32 7C 02 00
F00:5520                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00003BF8:  20 FC 11 FF 55 80
F00:5521                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:00003BFE:  20 FC 11 11 FF FF
F00:5522                       move.l #$33333333,(a0)+   ; Populate test data
               S06:00003C04:  20 FC 33 33 33 33
F00:5523                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00003C0A:  20 FC 44 44 44 44
F00:5524                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00003C10:  22 FC 80 FF 33 7F
F00:5525                       move.l #$FFFF1111,(a1)+   ; Populate test data
               S06:00003C16:  22 FC FF FF 11 11
F00:5526                       move.l #$33333333,(a1)+   ; Populate test data
               S06:00003C1C:  22 FC 33 33 33 33
F00:5527                       move.l #$44444444,(a1)+   ; Populate test data
               S06:00003C22:  22 FC 44 44 44 44
F00:5528                       
F00:5529       
F00:5530                       move.l #$0000000F,d6       ; Loop counter
               S06:00003C28:  7C 0F
F00:5531                       
F00:5532       ADDX_LOOP3:     addx.b -(a0),-(a1)
               S06:00003C2A:  D3 08
F00:5533                       move SR,d3      
               S06:00003C2C:  40 C3
F00:5534                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003C2E:  02 83 00 00 00 0F
F00:5535                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003C34:  D0 83
F00:5536                       add.b (a1),d1     
               S06:00003C36:  D2 11
F00:5537                       dbf d6,ADDX_LOOP3
               S06:00003C38:  51 CE FF F0
F00:5538       
F00:5539       
F00:5540                       move.l #$00000110,a0       ; Address for Data-X
               S06:00003C3C:  30 7C 01 10
F00:5541                       move.l #$00000210,a1       ; Address for Data-Y
               S06:00003C40:  32 7C 02 10
F00:5542                       move.l #$00000007,d6       ; Loop counter
               S06:00003C44:  7C 07
F00:5543                       
F00:5544       ADDX_LOOP4:     addx.w -(a0),-(a1)
               S06:00003C46:  D3 48
F00:5545                       move SR,d3      
               S06:00003C48:  40 C3
F00:5546                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003C4A:  02 83 00 00 00 0F
F00:5547                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003C50:  D0 83
F00:5548                       add.w (a1),d1     
               S06:00003C52:  D2 51
F00:5549                       dbf d6,ADDX_LOOP4
               S06:00003C54:  51 CE FF F0
F00:5550       
F00:5551       
F00:5552                       move.l #$00000110,a0       ; Address for Data-X
               S06:00003C58:  30 7C 01 10
F00:5553                       move.l #$00000210,a1       ; Address for Data-Y
               S06:00003C5C:  32 7C 02 10
F00:5554                       move.l #$00000003,d6       ; Loop counter
               S06:00003C60:  7C 03
F00:5555                       
F00:5556       ADDX_LOOP5:     addx.l -(a0),-(a1)
               S06:00003C62:  D3 88
F00:5557                       move SR,d3      
               S06:00003C64:  40 C3
F00:5558                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003C66:  02 83 00 00 00 0F
F00:5559                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003C6C:  D0 83
F00:5560                       add.l (a1),d1     
               S06:00003C6E:  D2 91
F00:5561                       dbf d6,ADDX_LOOP5
               S06:00003C70:  51 CE FF F0
F00:5562       
F00:5563       
F00:5564                       cmpi.l #$00000095,d0      ; Check the flag results
               S06:00003C74:  0C 80 00 00 00 95
F00:5565                       bne ADDX_FAIL;                
               S06:00003C7A:  66 0A
F00:5566                       cmpi.l #$C812A682,d1      ; Check the data results 
               S06:00003C7C:  0C 81 C8 12 A6 82
F00:5567                       bne ADDX_FAIL;                
               S06:00003C82:  66 02
F00:5568        
F00:5569                       rts
               S06:00003C84:  4E 75
F00:5570       
F00:5571       ADDX_FAIL: bra ADDX_FAIL
               S06:00003C86:  60 FE
F00:5572       
F00:5573       ;-----------------------------------------------------------
F00:5574       ;-----------------------------------------------------------
F00:5575       ; OPCODE : SUBX
F00:5576       ;-----------------------------------------------------------
F00:5577       ;-----------------------------------------------------------
F00:5578       
F00:5579       op_SUBX: 
F00:5580       
F00:5581       
F00:5582         ;; Register to Register
F00:5583                       move.l #$a5a5a5a5,d0       ; Initial Data-X  Inner loop
               S06:00003C88:  20 3C A5 A5 A5 A5
F00:5584                       move.l #$8167E123,d1       ; Initial Data-Y  Outer loop
               S06:00003C8E:  22 3C 81 67 E1 23
F00:5585                       move.l #$a5a5a5a5,d2
               S06:00003C94:  24 3C A5 A5 A5 A5
F00:5586                       move.l #$00000000,d3
               S06:00003C9A:  76 00
F00:5587                       move.l #$00000000,d4       ; Cumulative data results
               S06:00003C9C:  78 00
F00:5588                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003C9E:  7A 00
F00:5589                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003CA0:  7C 1E
F00:5590                       move.l #$0000001E,d7       ; Outer loop counter
               S06:00003CA2:  7E 1E
F00:5591                       move.l #$00000100,a0       ; Address for memory EA operations
               S06:00003CA4:  30 7C 01 00
F00:5592       
F00:5593       
F00:5594       SUBX_OUTER1:    
F00:5595        
F00:5596           ; BYTE    
F00:5597                       move.l d2,d0
               S06:00003CA8:  20 02
F00:5598                       subx.b d1,d0             
               S06:00003CAA:  91 01
F00:5599                       move SR,d3      
               S06:00003CAC:  40 C3
F00:5600                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003CAE:  02 83 00 00 00 1F
F00:5601                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003CB4:  DA 83
F00:5602                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003CB6:  D8 80
F00:5603        
F00:5604           ; WORD      
F00:5605                       move.l d2,d0
               S06:00003CB8:  20 02
F00:5606                       subx.w d1,d0             
               S06:00003CBA:  91 41
F00:5607                       move SR,d3      
               S06:00003CBC:  40 C3
F00:5608                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003CBE:  02 83 00 00 00 1F
F00:5609                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003CC4:  DA 83
F00:5610                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003CC6:  D8 80
F00:5611        
F00:5612           ; LONG      
F00:5613                       move.l d2,d0
               S06:00003CC8:  20 02
F00:5614                       subx.l d1,d0             
               S06:00003CCA:  91 81
F00:5615                       move SR,d3      
               S06:00003CCC:  40 C3
F00:5616                       andi.l #$1F,d3            ; Isolate flags 
               S06:00003CCE:  02 83 00 00 00 1F
F00:5617                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003CD4:  DA 83
F00:5618                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003CD6:  D8 80
F00:5619                       
F00:5620                       ror.l #$1,d1
               S06:00003CD8:  E2 99
F00:5621                       dbf d6,SUBX_OUTER1
               S06:00003CDA:  51 CE FF CC
F00:5622                       ror.l #$1,d2
               S06:00003CDE:  E2 9A
F00:5623                       move.l #$8167E123,d1       ; Initial Data-Y
               S06:00003CE0:  22 3C 81 67 E1 23
F00:5624                       move.l #$0000001E,d6       ; Inner loop counter
               S06:00003CE6:  7C 1E
F00:5625                       dbf d7,SUBX_OUTER1
               S06:00003CE8:  51 CF FF BE
F00:5626                       
F00:5627                       cmpi.l #$FCAA913E,d4      ; Check the data results
               S06:00003CEC:  0C 84 FC AA 91 3E
F00:5628                       bne SUBX_FAIL;                
               S06:00003CF2:  66 00 00 A8
F00:5629                       cmpi.l #$00007E89,d5      ; Check the Flag results
               S06:00003CF6:  0C 85 00 00 7E 89
F00:5630                       bne SUBX_FAIL;                
               S06:00003CFC:  66 00 00 9E
F00:5631                          
F00:5632           
F00:5633           
F00:5634           ; -(An),-(An)
F00:5635           
F00:5636                       move.l #$00000000,d0       ; BYTE Flag Results Accumulator     
               S06:00003D00:  70 00
F00:5637                       move.l #$00000000,d1        
               S06:00003D02:  72 00
F00:5638                       move.l #$00000000,d2      
               S06:00003D04:  74 00
F00:5639                       move.l #$00000100,a0       ; Address for Data-X
               S06:00003D06:  30 7C 01 00
F00:5640                       move.l #$00000200,a1       ; Address for Data-Y
               S06:00003D0A:  32 7C 02 00
F00:5641                       move.l #$11FF5580,(a0)+   ; Populate test data
               S06:00003D0E:  20 FC 11 FF 55 80
F00:5642                       move.l #$1111FFFF,(a0)+   ; Populate test data
               S06:00003D14:  20 FC 11 11 FF FF
F00:5643                       move.l #$80FF337F,(a0)+   ; Populate test data
               S06:00003D1A:  20 FC 80 FF 33 7F
F00:5644                       move.l #$44444444,(a0)+   ; Populate test data
               S06:00003D20:  20 FC 44 44 44 44
F00:5645                       move.l #$80FF337F,(a1)+   ; Populate test data
               S06:00003D26:  22 FC 80 FF 33 7F
F00:5646                       move.l #$1111FFFF,(a1)+   ; Populate test data
               S06:00003D2C:  22 FC 11 11 FF FF
F00:5647                       move.l #$33333333,(a1)+   ; Populate test data
               S06:00003D32:  22 FC 33 33 33 33
F00:5648                       move.l #$5580EECC,(a1)+   ; Populate test data
               S06:00003D38:  22 FC 55 80 EE CC
F00:5649                       
F00:5650       
F00:5651                       move.l #$0000000F,d6       ; Loop counter
               S06:00003D3E:  7C 0F
F00:5652                       
F00:5653       SUBX_LOOP3:     subx.b -(a0),-(a1)
               S06:00003D40:  93 08
F00:5654                       move SR,d3      
               S06:00003D42:  40 C3
F00:5655                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003D44:  02 83 00 00 00 0F
F00:5656                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003D4A:  D0 83
F00:5657                       add.b (a1),d1     
               S06:00003D4C:  D2 11
F00:5658                       dbf d6,SUBX_LOOP3
               S06:00003D4E:  51 CE FF F0
F00:5659       
F00:5660       
F00:5661                       move.l #$00000110,a0       ; Address for Data-X
               S06:00003D52:  30 7C 01 10
F00:5662                       move.l #$00000210,a1       ; Address for Data-Y
               S06:00003D56:  32 7C 02 10
F00:5663                       move.l #$00000007,d6       ; Loop counter
               S06:00003D5A:  7C 07
F00:5664                       
F00:5665       SUBX_LOOP4:     subx.w -(a0),-(a1)
               S06:00003D5C:  93 48
F00:5666                       move SR,d3      
               S06:00003D5E:  40 C3
F00:5667                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003D60:  02 83 00 00 00 0F
F00:5668                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003D66:  D0 83
F00:5669                       add.w (a1),d1     
               S06:00003D68:  D2 51
F00:5670                       dbf d6,SUBX_LOOP4
               S06:00003D6A:  51 CE FF F0
F00:5671       
F00:5672       
F00:5673                       move.l #$00000110,a0       ; Address for Data-X
               S06:00003D6E:  30 7C 01 10
F00:5674                       move.l #$00000210,a1       ; Address for Data-Y
               S06:00003D72:  32 7C 02 10
F00:5675                       move.l #$00000003,d6       ; Loop counter
               S06:00003D76:  7C 03
F00:5676                       
F00:5677       SUBX_LOOP5:     subx.l -(a0),-(a1)
               S06:00003D78:  93 88
F00:5678                       move SR,d3      
               S06:00003D7A:  40 C3
F00:5679                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003D7C:  02 83 00 00 00 0F
F00:5680                       add.l d3,d0               ; Copy flag results into accumulator    
               S06:00003D82:  D0 83
F00:5681                       add.l (a1),d1     
               S06:00003D84:  D2 91
F00:5682                       dbf d6,SUBX_LOOP5
               S06:00003D86:  51 CE FF F0
F00:5683       
F00:5684       
F00:5685                       cmpi.l #$000000B1,d0      ; Check the flag results
               S06:00003D8A:  0C 80 00 00 00 B1
F00:5686                       bne SUBX_FAIL;                
               S06:00003D90:  66 0A
F00:5687                       cmpi.l #$62C6F417,d1      ; Check the data results 
               S06:00003D92:  0C 81 62 C6 F4 17
F00:5688                       bne SUBX_FAIL;                
               S06:00003D98:  66 02
F00:5689        
F00:5690                       rts
               S06:00003D9A:  4E 75
F00:5691       
F00:5692       SUBX_FAIL: bra SUBX_FAIL
               S06:00003D9C:  60 FE
F00:5693       
F00:5694       ;-----------------------------------------------------------
F00:5695       ;-----------------------------------------------------------
F00:5696       ; OPCODE : MULU
F00:5697       ;-----------------------------------------------------------
F00:5698       ;-----------------------------------------------------------
F00:5699       
F00:5700       op_MULU:     
F00:5701       
F00:5702                       move.l #$FE805501,d0        ; Initial 
               S06:00003D9E:  20 3C FE 80 55 01
F00:5703                       move.l #$5697EDB6,d1        ; Initial Y
               S06:00003DA4:  22 3C 56 97 ED B6
F00:5704                       move.l #$FE805501,d2
               S06:00003DAA:  24 3C FE 80 55 01
F00:5705                       move.l #$00000000,d3
               S06:00003DB0:  76 00
F00:5706                       move.l #$00000000,d4        ; Cumulative data results
               S06:00003DB2:  78 00
F00:5707                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003DB4:  7A 00
F00:5708                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003DB6:  7C 0E
F00:5709                       move.l #$0000000E,d7       ; Outer loop counter
               S06:00003DB8:  7E 0E
F00:5710       
F00:5711       
F00:5712       MULU_OUTER1:    mulu d1,d0             
               S06:00003DBA:  C0 C1
F00:5713                       move SR,d3      
               S06:00003DBC:  40 C3
F00:5714                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003DBE:  02 83 00 00 00 0C
F00:5715                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003DC4:  DA 83
F00:5716                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003DC6:  D8 80
F00:5717                       ror.l #$1,d1
               S06:00003DC8:  E2 99
F00:5718       
F00:5719                       dbf d6,MULU_OUTER1
               S06:00003DCA:  51 CE FF EE
F00:5720                       ror.l #$1,d2
               S06:00003DCE:  E2 9A
F00:5721                       move.l d2,d0
               S06:00003DD0:  20 02
F00:5722                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003DD2:  7C 0E
F00:5723                       dbf d7,MULU_OUTER1
               S06:00003DD4:  51 CF FF E4
F00:5724                       
F00:5725                       cmpi.l #$76FB988C,d4      ; Check the data results
               S06:00003DD8:  0C 84 76 FB 98 8C
F00:5726                       bne MULU_FAIL;                
               S06:00003DDE:  66 0A
F00:5727                            
F00:5728                       cmpi.l #$00000170,d5      ; Check the Flag results
               S06:00003DE0:  0C 85 00 00 01 70
F00:5729                       bne MULU_FAIL;                 
               S06:00003DE6:  66 02
F00:5730                 
F00:5731       
F00:5732                       rts
               S06:00003DE8:  4E 75
F00:5733       
F00:5734       MULU_FAIL: bra MULU_FAIL               
               S06:00003DEA:  60 FE
F00:5735                       
F00:5736       ;-----------------------------------------------------------
F00:5737       ;-----------------------------------------------------------
F00:5738       ; OPCODE : MULS
F00:5739       ;-----------------------------------------------------------
F00:5740       ;-----------------------------------------------------------
F00:5741       
F00:5742       op_MULS:     
F00:5743       
F00:5744                       move.l #$FE805501,d0        ; Initial 
               S06:00003DEC:  20 3C FE 80 55 01
F00:5745                       move.l #$5697EDB6,d1        ; Initial Y
               S06:00003DF2:  22 3C 56 97 ED B6
F00:5746                       move.l #$FE805501,d2
               S06:00003DF8:  24 3C FE 80 55 01
F00:5747                       move.l #$00000000,d3
               S06:00003DFE:  76 00
F00:5748                       move.l #$00000000,d4        ; Cumulative data results
               S06:00003E00:  78 00
F00:5749                       move.l #$00000000,d5       ; Cumulative flag results
               S06:00003E02:  7A 00
F00:5750                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003E04:  7C 0E
F00:5751                       move.l #$0000000E,d7       ; Outer loop counter
               S06:00003E06:  7E 0E
F00:5752       
F00:5753       
F00:5754       MULS_OUTER1:    muls d1,d0             
               S06:00003E08:  C1 C1
F00:5755                       move SR,d3      
               S06:00003E0A:  40 C3
F00:5756                       andi.l #$0C,d3            ; Isolate flags 
               S06:00003E0C:  02 83 00 00 00 0C
F00:5757                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003E12:  DA 83
F00:5758                       add.l d0,d4               ; Copy data results into data accumulator   
               S06:00003E14:  D8 80
F00:5759                       ror.l #$1,d1
               S06:00003E16:  E2 99
F00:5760       
F00:5761                       dbf d6,MULS_OUTER1
               S06:00003E18:  51 CE FF EE
F00:5762                       ror.l #$1,d2
               S06:00003E1C:  E2 9A
F00:5763                       move.l d2,d0
               S06:00003E1E:  20 02
F00:5764                       move.l #$0000000E,d6       ; Inner loop counter
               S06:00003E20:  7C 0E
F00:5765                       dbf d7,MULS_OUTER1
               S06:00003E22:  51 CF FF E4
F00:5766                       
F00:5767                       cmpi.l #$D4E2988C,d4      ; Check the data results
               S06:00003E26:  0C 84 D4 E2 98 8C
F00:5768                       bne MULS_FAIL;                
               S06:00003E2C:  66 0A
F00:5769                            
F00:5770                       cmpi.l #$000003E0,d5      ; Check the Flag results
               S06:00003E2E:  0C 85 00 00 03 E0
F00:5771                       bne MULS_FAIL;                 
               S06:00003E34:  66 02
F00:5772                 
F00:5773       
F00:5774                       rts
               S06:00003E36:  4E 75
F00:5775                       
F00:5776       MULS_FAIL: bra MULS_FAIL
               S06:00003E38:  60 FE
F00:5777                       
F00:5778       ;-----------------------------------------------------------
F00:5779       ;-----------------------------------------------------------
F00:5780       ; OPCODE : EXG
F00:5781       ;-----------------------------------------------------------
F00:5782       ;-----------------------------------------------------------
F00:5783       
F00:5784       op_EXG:     
F00:5785                       move.l #$d1d1d1d1,d1      
               S06:00003E3A:  22 3C D1 D1 D1 D1
F00:5786                       move.l #$d2d2d2d2,d2      
               S06:00003E40:  24 3C D2 D2 D2 D2
F00:5787                       move.l #$d3d3d3d3,d3      
               S06:00003E46:  26 3C D3 D3 D3 D3
F00:5788                       move.l #$a1a1a1a1,a1      
               S06:00003E4C:  22 7C A1 A1 A1 A1
F00:5789                       move.l #$a2a2a2a2,a2  
               S06:00003E52:  24 7C A2 A2 A2 A2
F00:5790                       move.l #$a3a3a3a3,a3  
               S06:00003E58:  26 7C A3 A3 A3 A3
F00:5791                       
F00:5792                       exg d1,d2    
               S06:00003E5E:  C3 42
F00:5793                       exg a1,a2    
               S06:00003E60:  C3 4A
F00:5794                       exg d3,a3  
               S06:00003E62:  C7 8B
F00:5795       
F00:5796                       cmpi.l #$d2d2d2d2,d1      ; Check the results
               S06:00003E64:  0C 81 D2 D2 D2 D2
F00:5797                       bne EXG_FAIL;                 
               S06:00003E6A:  66 30
F00:5798                       cmpi.l #$d1d1d1d1,d2    
               S06:00003E6C:  0C 82 D1 D1 D1 D1
F00:5799                       bne EXG_FAIL;                 
               S06:00003E72:  66 28
F00:5800                       cmpi.l #$a3a3a3a3,d3    
               S06:00003E74:  0C 83 A3 A3 A3 A3
F00:5801                       bne EXG_FAIL;                 
               S06:00003E7A:  66 20
F00:5802                       
F00:5803                       move.l a1,d1
               S06:00003E7C:  22 09
F00:5804                       move.l a2,d2
               S06:00003E7E:  24 0A
F00:5805                       move.l a3,d3
               S06:00003E80:  26 0B
F00:5806        
F00:5807                       cmpi.l #$a2a2a2a2,d1    
               S06:00003E82:  0C 81 A2 A2 A2 A2
F00:5808                       bne EXG_FAIL;                 
               S06:00003E88:  66 12
F00:5809                       cmpi.l #$a1a1a1a1,d2     
               S06:00003E8A:  0C 82 A1 A1 A1 A1
F00:5810                       bne EXG_FAIL;                 
               S06:00003E90:  66 0A
F00:5811                       cmpi.l #$d3d3d3d3,d3     
               S06:00003E92:  0C 83 D3 D3 D3 D3
F00:5812                       bne EXG_FAIL;                 
               S06:00003E98:  66 02
F00:5813        
F00:5814                       rts
               S06:00003E9A:  4E 75
F00:5815             
F00:5816       EXG_FAIL: bra EXG_FAIL
               S06:00003E9C:  60 FE
F00:5817       
F00:5818       ;-----------------------------------------------------------
F00:5819       ;-----------------------------------------------------------
F00:5820       ; OPCODE : ROx
F00:5821       ;-----------------------------------------------------------
F00:5822       ;-----------------------------------------------------------
F00:5823       
F00:5824           ; Subroutine to check and accumulate the flags 
F00:5825       ROx_FLAGS:      move SR,d3      
               S06:00003E9E:  40 C3
F00:5826                       andi.l #$0F,d3            ; Isolate flags 
               S06:00003EA0:  02 83 00 00 00 0F
F00:5827                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00003EA6:  DA 83
F00:5828                       rts
               S06:00003EA8:  4E 75
F00:5829           
F00:5830       op_ROx:   
F00:5831                  
F00:5832           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:5833           
F00:5834              ; BYTE LEFT
F00:5835                       move.l #$80018FF1,d0   
               S06:00003EAA:  20 3C 80 01 8F F1
F00:5836                       move.l #$00000000,d5  
               S06:00003EB0:  7A 00
F00:5837                       move.l #$00000011,d6  
               S06:00003EB2:  7C 11
F00:5838       ROx_LOOP1:
F00:5839                       rol.b d6,d0       
               S06:00003EB4:  ED 38
F00:5840                       jsr ROx_FLAGS
               S06:00003EB6:  4E B8 3E 9E
F00:5841                       dbf d6,ROx_LOOP1
               S06:00003EBA:  51 CE FF F8
F00:5842                       cmpi.l #$80018FE3,d0     
               S06:00003EBE:  0C 80 80 01 8F E3
F00:5843                       bne ROX_FAIL;                 
               S06:00003EC4:  66 00 02 42
F00:5844                       cmpi.l #$0000006B,d5     
               S06:00003EC8:  0C 85 00 00 00 6B
F00:5845                       bne ROX_FAIL;      
               S06:00003ECE:  66 00 02 38
F00:5846           
F00:5847              ; BYTE RIGHT
F00:5848                       move.l #$80018FF1,d0   
               S06:00003ED2:  20 3C 80 01 8F F1
F00:5849                       move.l #$00000012,d6  
               S06:00003ED8:  7C 12
F00:5850       ROx_LOOP2:
F00:5851                       ror.b d6,d0       
               S06:00003EDA:  EC 38
F00:5852                       jsr ROx_FLAGS
               S06:00003EDC:  4E B8 3E 9E
F00:5853                       dbf d6,ROx_LOOP2
               S06:00003EE0:  51 CE FF F8
F00:5854                       cmpi.l #$80018F3E,d0     
               S06:00003EE4:  0C 80 80 01 8F 3E
F00:5855                       bne ROX_FAIL;                 
               S06:00003EEA:  66 00 02 1C
F00:5856                       cmpi.l #$000000C5,d5     
               S06:00003EEE:  0C 85 00 00 00 C5
F00:5857                       bne ROX_FAIL;      
               S06:00003EF4:  66 00 02 12
F00:5858       
F00:5859           
F00:5860              ; WORD LEFT
F00:5861                       move.l #$80018FF1,d0   
               S06:00003EF8:  20 3C 80 01 8F F1
F00:5862                       move.l #$00000013,d6  
               S06:00003EFE:  7C 13
F00:5863       ROx_LOOP3:
F00:5864                       rol.w d6,d0       
               S06:00003F00:  ED 78
F00:5865                       jsr ROx_FLAGS
               S06:00003F02:  4E B8 3E 9E
F00:5866                       dbf d6,ROx_LOOP3
               S06:00003F06:  51 CE FF F8
F00:5867                       cmpi.l #$800163FC,d0     
               S06:00003F0A:  0C 80 80 01 63 FC
F00:5868                       bne ROX_FAIL;                 
               S06:00003F10:  66 00 01 F6
F00:5869                       cmpi.l #$00000131,d5     
               S06:00003F14:  0C 85 00 00 01 31
F00:5870                       bne ROX_FAIL;      
               S06:00003F1A:  66 00 01 EC
F00:5871           
F00:5872              ; WORD RIGHT
F00:5873                       move.l #$80018FF1,d0   
               S06:00003F1E:  20 3C 80 01 8F F1
F00:5874                       move.l #$0000001E,d6  
               S06:00003F24:  7C 1E
F00:5875       ROx_LOOP4:
F00:5876                       ror.w d6,d0       
               S06:00003F26:  EC 78
F00:5877                       jsr ROx_FLAGS
               S06:00003F28:  4E B8 3E 9E
F00:5878                       dbf d6,ROx_LOOP4
               S06:00003F2C:  51 CE FF F8
F00:5879                       cmpi.l #$8001C7F8,d0     
               S06:00003F30:  0C 80 80 01 C7 F8
F00:5880                       bne ROX_FAIL;                 
               S06:00003F36:  66 00 01 D0
F00:5881                       cmpi.l #$000001DB,d5     
               S06:00003F3A:  0C 85 00 00 01 DB
F00:5882                       bne ROX_FAIL;      
               S06:00003F40:  66 00 01 C6
F00:5883       
F00:5884           
F00:5885              ; LONG LEFT
F00:5886                       move.l #$80018FF1,d0   
               S06:00003F44:  20 3C 80 01 8F F1
F00:5887                       move.l #$00000015,d6  
               S06:00003F4A:  7C 15
F00:5888       ROx_LOOP5:
F00:5889                       rol.l d6,d0       
               S06:00003F4C:  ED B8
F00:5890                       jsr ROx_FLAGS
               S06:00003F4E:  4E B8 3E 9E
F00:5891                       dbf d6,ROx_LOOP5
               S06:00003F52:  51 CE FF F8
F00:5892                       cmpi.l #$00C7F8C0,d0     
               S06:00003F56:  0C 80 00 C7 F8 C0
F00:5893                       bne ROX_FAIL;                 
               S06:00003F5C:  66 00 01 AA
F00:5894                       cmpi.l #$0000021A,d5     
               S06:00003F60:  0C 85 00 00 02 1A
F00:5895                       bne ROX_FAIL;      
               S06:00003F66:  66 00 01 A0
F00:5896           
F00:5897              ; LONG RIGHT
F00:5898                       move.l #$80018FF1,d0   
               S06:00003F6A:  20 3C 80 01 8F F1
F00:5899                       move.l #$00000016,d6  
               S06:00003F70:  7C 16
F00:5900       ROx_LOOP6:
F00:5901                       ror.l d6,d0       
               S06:00003F72:  EC B8
F00:5902                       jsr ROx_FLAGS
               S06:00003F74:  4E B8 3E 9E
F00:5903                       dbf d6,ROx_LOOP6
               S06:00003F78:  51 CE FF F8
F00:5904                       cmpi.l #$000C7F8C,d0     
               S06:00003F7C:  0C 80 00 0C 7F 8C
F00:5905                       bne ROX_FAIL;                 
               S06:00003F82:  66 00 01 84
F00:5906                       cmpi.l #$00000250,d5     
               S06:00003F86:  0C 85 00 00 02 50
F00:5907                       bne ROX_FAIL;      
               S06:00003F8C:  66 00 01 7A
F00:5908       
F00:5909                   
F00:5910           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:5911           
F00:5912                       move.l #$80018FF1,d0   
               S06:00003F90:  20 3C 80 01 8F F1
F00:5913                       move.l #$00000000,d5   
               S06:00003F96:  7A 00
F00:5914       
F00:5915              ; BYTE LEFT
F00:5916                       rol.b #1,d0       
               S06:00003F98:  E3 18
F00:5917                       jsr ROx_FLAGS
               S06:00003F9A:  4E B8 3E 9E
F00:5918                       rol.b #5,d0      
               S06:00003F9E:  EB 18
F00:5919                       jsr ROx_FLAGS
               S06:00003FA0:  4E B8 3E 9E
F00:5920                       rol.b #7,d0   
               S06:00003FA4:  EF 18
F00:5921                       jsr ROx_FLAGS
               S06:00003FA6:  4E B8 3E 9E
F00:5922                       rol.b #8,d0   
               S06:00003FAA:  E1 18
F00:5923                       jsr ROx_FLAGS
               S06:00003FAC:  4E B8 3E 9E
F00:5924                       cmpi.l #$80018F3E,d0     
               S06:00003FB0:  0C 80 80 01 8F 3E
F00:5925                       bne ROX_FAIL;                 
               S06:00003FB6:  66 00 01 50
F00:5926                       cmpi.l #$00000009,d5     
               S06:00003FBA:  0C 85 00 00 00 09
F00:5927                       bne ROX_FAIL;                 
               S06:00003FC0:  66 00 01 46
F00:5928            
F00:5929              ; BYTE RIGHT
F00:5930                       ror.b #1,d0       
               S06:00003FC4:  E2 18
F00:5931                       jsr ROx_FLAGS
               S06:00003FC6:  4E B8 3E 9E
F00:5932                       ror.b #5,d0      
               S06:00003FCA:  EA 18
F00:5933                       jsr ROx_FLAGS
               S06:00003FCC:  4E B8 3E 9E
F00:5934                       ror.b #7,d0   
               S06:00003FD0:  EE 18
F00:5935                       jsr ROx_FLAGS
               S06:00003FD2:  4E B8 3E 9E
F00:5936                       ror.b #8,d0   
               S06:00003FD6:  E0 18
F00:5937                       jsr ROx_FLAGS
               S06:00003FD8:  4E B8 3E 9E
F00:5938                       cmpi.l #$80018FF1,d0     
               S06:00003FDC:  0C 80 80 01 8F F1
F00:5939                       bne ROX_FAIL;                 
               S06:00003FE2:  66 00 01 24
F00:5940                       cmpi.l #$00000024,d5     
               S06:00003FE6:  0C 85 00 00 00 24
F00:5941                       bne ROX_FAIL;                 
               S06:00003FEC:  66 00 01 1A
F00:5942            
F00:5943              ; WORD LEFT
F00:5944                       rol.w #1,d0       
               S06:00003FF0:  E3 58
F00:5945                       jsr ROx_FLAGS
               S06:00003FF2:  4E B8 3E 9E
F00:5946                       rol.w #5,d0      
               S06:00003FF6:  EB 58
F00:5947                       jsr ROx_FLAGS
               S06:00003FF8:  4E B8 3E 9E
F00:5948                       rol.w #7,d0   
               S06:00003FFC:  EF 58
F00:5949                       jsr ROx_FLAGS
               S06:00003FFE:  4E B8 3E 9E
F00:5950                       rol.w #8,d0   
               S06:00004002:  E1 58
F00:5951                       jsr ROx_FLAGS
               S06:00004004:  4E B8 3E 9E
F00:5952                       cmpi.l #$8001FE31,d0     
               S06:00004008:  0C 80 80 01 FE 31
F00:5953                       bne ROX_FAIL;                 
               S06:0000400E:  66 00 00 F8
F00:5954                       cmpi.l #$00000037,d5     
               S06:00004012:  0C 85 00 00 00 37
F00:5955                       bne ROX_FAIL;                 
               S06:00004018:  66 00 00 EE
F00:5956                         
F00:5957              ; WORD RIGHT
F00:5958                       ror.w #1,d0       
               S06:0000401C:  E2 58
F00:5959                       jsr ROx_FLAGS
               S06:0000401E:  4E B8 3E 9E
F00:5960                       ror.w #5,d0      
               S06:00004022:  EA 58
F00:5961                       jsr ROx_FLAGS
               S06:00004024:  4E B8 3E 9E
F00:5962                       ror.w #7,d0   
               S06:00004028:  EE 58
F00:5963                       jsr ROx_FLAGS
               S06:0000402A:  4E B8 3E 9E
F00:5964                       ror.w #8,d0   
               S06:0000402E:  E0 58
F00:5965                       jsr ROx_FLAGS
               S06:00004030:  4E B8 3E 9E
F00:5966                       cmpi.l #$80018FF1,d0     
               S06:00004034:  0C 80 80 01 8F F1
F00:5967                       bne ROX_FAIL;                 
               S06:0000403A:  66 00 00 CC
F00:5968                       cmpi.l #$0000005B,d5     
               S06:0000403E:  0C 85 00 00 00 5B
F00:5969                       bne ROX_FAIL;                 
               S06:00004044:  66 00 00 C2
F00:5970                      
F00:5971              ; LONG LEFT
F00:5972                       rol.l #1,d0       
               S06:00004048:  E3 98
F00:5973                       jsr ROx_FLAGS
               S06:0000404A:  4E B8 3E 9E
F00:5974                       rol.l #5,d0      
               S06:0000404E:  EB 98
F00:5975                       jsr ROx_FLAGS
               S06:00004050:  4E B8 3E 9E
F00:5976                       rol.l #7,d0   
               S06:00004054:  EF 98
F00:5977                       jsr ROx_FLAGS
               S06:00004056:  4E B8 3E 9E
F00:5978                       rol.l #8,d0   
               S06:0000405A:  E1 98
F00:5979                       jsr ROx_FLAGS
               S06:0000405C:  4E B8 3E 9E
F00:5980                       cmpi.l #$FE300031,d0     
               S06:00004060:  0C 80 FE 30 00 31
F00:5981                       bne ROX_FAIL;                 
               S06:00004066:  66 00 00 A0
F00:5982                       cmpi.l #$00000065,d5     
               S06:0000406A:  0C 85 00 00 00 65
F00:5983                       bne ROX_FAIL;                 
               S06:00004070:  66 00 00 96
F00:5984                                       
F00:5985              ; LONG RIGHT
F00:5986                       ror.l #1,d0       
               S06:00004074:  E2 98
F00:5987                       jsr ROx_FLAGS
               S06:00004076:  4E B8 3E 9E
F00:5988                       ror.l #5,d0      
               S06:0000407A:  EA 98
F00:5989                       jsr ROx_FLAGS
               S06:0000407C:  4E B8 3E 9E
F00:5990                       ror.l #7,d0   
               S06:00004080:  EE 98
F00:5991                       jsr ROx_FLAGS
               S06:00004082:  4E B8 3E 9E
F00:5992                       ror.l #8,d0   
               S06:00004086:  E0 98
F00:5993                       jsr ROx_FLAGS
               S06:00004088:  4E B8 3E 9E
F00:5994                       cmpi.l #$80018FF1,d0     
               S06:0000408C:  0C 80 80 01 8F F1
F00:5995                       bne ROX_FAIL;                 
               S06:00004092:  66 74
F00:5996                       cmpi.l #$00000080,d5     
               S06:00004094:  0C 85 00 00 00 80
F00:5997                       bne ROX_FAIL;                 
               S06:0000409A:  66 6C
F00:5998          
F00:5999                   
F00:6000           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6001           
F00:6002                       move.l #$00000000,d5   
               S06:0000409C:  7A 00
F00:6003                       move.l #$00000100,a0 
               S06:0000409E:  30 7C 01 00
F00:6004                       move.w #$8FF1,(a0)
               S06:000040A2:  30 BC 8F F1
F00:6005                       
F00:6006              ; WORD LEFT
F00:6007                       rol (a0)       
               S06:000040A6:  E7 D0
F00:6008                       jsr ROx_FLAGS
               S06:000040A8:  4E B8 3E 9E
F00:6009                       rol (a0)       
               S06:000040AC:  E7 D0
F00:6010                       jsr ROx_FLAGS
               S06:000040AE:  4E B8 3E 9E
F00:6011                       rol (a0)       
               S06:000040B2:  E7 D0
F00:6012                       jsr ROx_FLAGS
               S06:000040B4:  4E B8 3E 9E
F00:6013                       rol (a0)       
               S06:000040B8:  E7 D0
F00:6014                       jsr ROx_FLAGS
               S06:000040BA:  4E B8 3E 9E
F00:6015                       move.w (a0),d0
               S06:000040BE:  30 10
F00:6016                       cmpi.l #$8001FF18,d0     
               S06:000040C0:  0C 80 80 01 FF 18
F00:6017                       bne ROX_FAIL;                 
               S06:000040C6:  66 40
F00:6018                       cmpi.l #$00000009,d5     
               S06:000040C8:  0C 85 00 00 00 09
F00:6019                       bne ROX_FAIL;                 
               S06:000040CE:  66 38
F00:6020                         
F00:6021              ; WORD RIGHT
F00:6022                       ror (a0)       
               S06:000040D0:  E6 D0
F00:6023                       jsr ROx_FLAGS
               S06:000040D2:  4E B8 3E 9E
F00:6024                       ror (a0)       
               S06:000040D6:  E6 D0
F00:6025                       jsr ROx_FLAGS
               S06:000040D8:  4E B8 3E 9E
F00:6026                       ror (a0)       
               S06:000040DC:  E6 D0
F00:6027                       jsr ROx_FLAGS                
               S06:000040DE:  4E B8 3E 9E
F00:6028                       ror (a0)       
               S06:000040E2:  E6 D0
F00:6029                       jsr ROx_FLAGS               
               S06:000040E4:  4E B8 3E 9E
F00:6030                       ror (a0)       
               S06:000040E8:  E6 D0
F00:6031                       jsr ROx_FLAGS
               S06:000040EA:  4E B8 3E 9E
F00:6032                       ror (a0)       
               S06:000040EE:  E6 D0
F00:6033                       jsr ROx_FLAGS
               S06:000040F0:  4E B8 3E 9E
F00:6034                       move.w (a0),d0
               S06:000040F4:  30 10
F00:6035                       cmpi.l #$800163FC,d0     
               S06:000040F6:  0C 80 80 01 63 FC
F00:6036                       bne ROX_FAIL;                 
               S06:000040FC:  66 0A
F00:6037                       cmpi.l #$0000001B,d5     
               S06:000040FE:  0C 85 00 00 00 1B
F00:6038                       bne ROX_FAIL;                 
               S06:00004104:  66 02
F00:6039       
F00:6040                       rts
               S06:00004106:  4E 75
F00:6041             
F00:6042       ROX_FAIL: bra ROX_FAIL   
               S06:00004108:  60 FE
F00:6043                       
F00:6044       ;-----------------------------------------------------------
F00:6045       ;-----------------------------------------------------------
F00:6046       ; OPCODE : ROXx
F00:6047       ;-----------------------------------------------------------
F00:6048       ;-----------------------------------------------------------
F00:6049       
F00:6050           ; Subroutine to check and accumulate the flags 
F00:6051       ROXx_FLAGS:     move SR,d3      
               S06:0000410A:  40 C3
F00:6052                       andi.l #$0F,d3            ; Isolate flags 
               S06:0000410C:  02 83 00 00 00 0F
F00:6053                       add.l d3,d5               ; Copy flag results into accumulator
               S06:00004112:  DA 83
F00:6054                       rts
               S06:00004114:  4E 75
F00:6055           
F00:6056       op_ROXx:   
F00:6057                  
F00:6058           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6059           
F00:6060              ; BYTE LEFT
F00:6061                       move.l #$80018FF1,d0   
               S06:00004116:  20 3C 80 01 8F F1
F00:6062                       move.l #$00000000,d5  
               S06:0000411C:  7A 00
F00:6063                       move.l #$00000011,d6  
               S06:0000411E:  7C 11
F00:6064       ROXx_LOOP1:
F00:6065                       roxl.b d6,d0       
               S06:00004120:  ED 30
F00:6066                       jsr ROXx_FLAGS
               S06:00004122:  4E B8 41 0A
F00:6067                       dbf d6,ROXx_LOOP1
               S06:00004126:  51 CE FF F8
F00:6068                       cmpi.l #$80018FD0,d0     
               S06:0000412A:  0C 80 80 01 8F D0
F00:6069                       bne ROXX_FAIL;                 
               S06:00004130:  66 00 02 42
F00:6070                       cmpi.l #$00000042,d5     
               S06:00004134:  0C 85 00 00 00 42
F00:6071                       bne ROXX_FAIL;      
               S06:0000413A:  66 00 02 38
F00:6072           
F00:6073              ; BYTE RIGHT
F00:6074                       move.l #$80018FF1,d0   
               S06:0000413E:  20 3C 80 01 8F F1
F00:6075                       move.l #$00000012,d6  
               S06:00004144:  7C 12
F00:6076       ROXx_LOOP2:
F00:6077                       roxr.b d6,d0       
               S06:00004146:  EC 30
F00:6078                       jsr ROXx_FLAGS
               S06:00004148:  4E B8 41 0A
F00:6079                       dbf d6,ROXx_LOOP2
               S06:0000414C:  51 CE FF F8
F00:6080                       cmpi.l #$80018F51,d0     
               S06:00004150:  0C 80 80 01 8F 51
F00:6081                       bne ROXX_FAIL;                 
               S06:00004156:  66 00 02 1C
F00:6082                       cmpi.l #$0000009C,d5     
               S06:0000415A:  0C 85 00 00 00 9C
F00:6083                       bne ROXX_FAIL;      
               S06:00004160:  66 00 02 12
F00:6084       
F00:6085           
F00:6086              ; WORD LEFT
F00:6087                       move.l #$80018FF1,d0   
               S06:00004164:  20 3C 80 01 8F F1
F00:6088                       move.l #$00000013,d6  
               S06:0000416A:  7C 13
F00:6089       ROXx_LOOP3:
F00:6090                       roxl.w d6,d0       
               S06:0000416C:  ED 70
F00:6091                       jsr ROXx_FLAGS
               S06:0000416E:  4E B8 41 0A
F00:6092                       dbf d6,ROXx_LOOP3
               S06:00004172:  51 CE FF F8
F00:6093                       cmpi.l #$80013980,d0     
               S06:00004176:  0C 80 80 01 39 80
F00:6094                       bne ROXX_FAIL;                 
               S06:0000417C:  66 00 01 F6
F00:6095                       cmpi.l #$000000C9,d5     
               S06:00004180:  0C 85 00 00 00 C9
F00:6096                       bne ROXX_FAIL;      
               S06:00004186:  66 00 01 EC
F00:6097           
F00:6098              ; WORD RIGHT
F00:6099                       move.l #$80018FF1,d0   
               S06:0000418A:  20 3C 80 01 8F F1
F00:6100                       move.l #$0000001E,d6  
               S06:00004190:  7C 1E
F00:6101       ROXx_LOOP4:
F00:6102                       roxr.w d6,d0       
               S06:00004192:  EC 70
F00:6103                       jsr ROXx_FLAGS
               S06:00004194:  4E B8 41 0A
F00:6104                       dbf d6,ROXx_LOOP4
               S06:00004198:  51 CE FF F8
F00:6105                       cmpi.l #$80010A1D,d0     
               S06:0000419C:  0C 80 80 01 0A 1D
F00:6106                       bne ROXX_FAIL;                 
               S06:000041A2:  66 00 01 D0
F00:6107                       cmpi.l #$0000014D,d5     
               S06:000041A6:  0C 85 00 00 01 4D
F00:6108                       bne ROXX_FAIL;      
               S06:000041AC:  66 00 01 C6
F00:6109       
F00:6110           
F00:6111              ; LONG LEFT
F00:6112                       move.l #$80018FF1,d0   
               S06:000041B0:  20 3C 80 01 8F F1
F00:6113                       move.l #$00000015,d6  
               S06:000041B6:  7C 15
F00:6114       ROXx_LOOP5:
F00:6115                       roxl.l d6,d0       
               S06:000041B8:  ED B0
F00:6116                       jsr ROXx_FLAGS
               S06:000041BA:  4E B8 41 0A
F00:6117                       dbf d6,ROXx_LOOP5
               S06:000041BE:  51 CE FF F8
F00:6118                       cmpi.l #$800185D0,d0     
               S06:000041C2:  0C 80 80 01 85 D0
F00:6119                       bne ROXX_FAIL;                 
               S06:000041C8:  66 00 01 AA
F00:6120                       cmpi.l #$000001A1,d5     
               S06:000041CC:  0C 85 00 00 01 A1
F00:6121                       bne ROXX_FAIL;      
               S06:000041D2:  66 00 01 A0
F00:6122           
F00:6123              ; LONG RIGHT
F00:6124                       move.l #$80018FF1,d0   
               S06:000041D6:  20 3C 80 01 8F F1
F00:6125                       move.l #$00000016,d6  
               S06:000041DC:  7C 16
F00:6126       ROXx_LOOP6:
F00:6127                       roxr.l d6,d0       
               S06:000041DE:  EC B0
F00:6128                       jsr ROXx_FLAGS
               S06:000041E0:  4E B8 41 0A
F00:6129                       dbf d6,ROXx_LOOP6
               S06:000041E4:  51 CE FF F8
F00:6130                       cmpi.l #$082D8200,d0     
               S06:000041E8:  0C 80 08 2D 82 00
F00:6131                       bne ROXX_FAIL;                 
               S06:000041EE:  66 00 01 84
F00:6132                       cmpi.l #$000001DE,d5     
               S06:000041F2:  0C 85 00 00 01 DE
F00:6133                       bne ROXX_FAIL;      
               S06:000041F8:  66 00 01 7A
F00:6134       
F00:6135                   
F00:6136           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6137           
F00:6138                       move.l #$80018FF1,d0   
               S06:000041FC:  20 3C 80 01 8F F1
F00:6139                       move.l #$00000000,d5   
               S06:00004202:  7A 00
F00:6140       
F00:6141              ; BYTE LEFT
F00:6142                       roxl.b #1,d0       
               S06:00004204:  E3 10
F00:6143                       jsr ROXx_FLAGS
               S06:00004206:  4E B8 41 0A
F00:6144                       roxl.b #5,d0      
               S06:0000420A:  EB 10
F00:6145                       jsr ROXx_FLAGS
               S06:0000420C:  4E B8 41 0A
F00:6146                       roxl.b #7,d0   
               S06:00004210:  EF 10
F00:6147                       jsr ROXx_FLAGS
               S06:00004212:  4E B8 41 0A
F00:6148                       roxl.b #8,d0   
               S06:00004216:  E1 10
F00:6149                       jsr ROXx_FLAGS
               S06:00004218:  4E B8 41 0A
F00:6150                       cmpi.l #$80018F09,d0     
               S06:0000421C:  0C 80 80 01 8F 09
F00:6151                       bne ROXX_FAIL;                 
               S06:00004222:  66 00 01 50
F00:6152                       cmpi.l #$0000000B,d5     
               S06:00004226:  0C 85 00 00 00 0B
F00:6153                       bne ROXX_FAIL;                 
               S06:0000422C:  66 00 01 46
F00:6154            
F00:6155              ; BYTE RIGHT
F00:6156                       roxr.b #1,d0       
               S06:00004230:  E2 10
F00:6157                       jsr ROXx_FLAGS
               S06:00004232:  4E B8 41 0A
F00:6158                       roxr.b #5,d0      
               S06:00004236:  EA 10
F00:6159                       jsr ROXx_FLAGS
               S06:00004238:  4E B8 41 0A
F00:6160                       roxr.b #7,d0   
               S06:0000423C:  EE 10
F00:6161                       jsr ROXx_FLAGS
               S06:0000423E:  4E B8 41 0A
F00:6162                       roxr.b #8,d0   
               S06:00004242:  E0 10
F00:6163                       jsr ROXx_FLAGS
               S06:00004244:  4E B8 41 0A
F00:6164                       cmpi.l #$80018F00,d0     
               S06:00004248:  0C 80 80 01 8F 00
F00:6165                       bne ROXX_FAIL;                 
               S06:0000424E:  66 00 01 24
F00:6166                       cmpi.l #$00000015,d5     
               S06:00004252:  0C 85 00 00 00 15
F00:6167                       bne ROXX_FAIL;                 
               S06:00004258:  66 00 01 1A
F00:6168            
F00:6169              ; WORD LEFT
F00:6170                       roxl.w #1,d0       
               S06:0000425C:  E3 50
F00:6171                       jsr ROXx_FLAGS
               S06:0000425E:  4E B8 41 0A
F00:6172                       roxl.w #5,d0      
               S06:00004262:  EB 50
F00:6173                       jsr ROXx_FLAGS
               S06:00004264:  4E B8 41 0A
F00:6174                       roxl.w #7,d0   
               S06:00004268:  EF 50
F00:6175                       jsr ROXx_FLAGS
               S06:0000426A:  4E B8 41 0A
F00:6176                       roxl.w #8,d0   
               S06:0000426E:  E1 50
F00:6177                       jsr ROXx_FLAGS
               S06:00004270:  4E B8 41 0A
F00:6178                       cmpi.l #$8001B000,d0     
               S06:00004274:  0C 80 80 01 B0 00
F00:6179                       bne ROXX_FAIL;                 
               S06:0000427A:  66 00 00 F8
F00:6180                       cmpi.l #$00000027,d5     
               S06:0000427E:  0C 85 00 00 00 27
F00:6181                       bne ROXX_FAIL;                 
               S06:00004284:  66 00 00 EE
F00:6182                         
F00:6183              ; WORD RIGHT
F00:6184                       roxr.w #1,d0       
               S06:00004288:  E2 50
F00:6185                       jsr ROXx_FLAGS
               S06:0000428A:  4E B8 41 0A
F00:6186                       roxr.w #5,d0      
               S06:0000428E:  EA 50
F00:6187                       jsr ROXx_FLAGS
               S06:00004290:  4E B8 41 0A
F00:6188                       roxr.w #7,d0   
               S06:00004294:  EE 50
F00:6189                       jsr ROXx_FLAGS
               S06:00004296:  4E B8 41 0A
F00:6190                       roxr.w #8,d0   
               S06:0000429A:  E0 50
F00:6191                       jsr ROXx_FLAGS
               S06:0000429C:  4E B8 41 0A
F00:6192                       cmpi.l #$80010A00,d0     
               S06:000042A0:  0C 80 80 01 0A 00
F00:6193                       bne ROXX_FAIL;                 
               S06:000042A6:  66 00 00 CC
F00:6194                       cmpi.l #$00000028,d5     
               S06:000042AA:  0C 85 00 00 00 28
F00:6195                       bne ROXX_FAIL;                 
               S06:000042B0:  66 00 00 C2
F00:6196                      
F00:6197              ; LONG LEFT
F00:6198                       roxl.l #1,d0       
               S06:000042B4:  E3 90
F00:6199                       jsr ROXx_FLAGS
               S06:000042B6:  4E B8 41 0A
F00:6200                       roxl.l #5,d0      
               S06:000042BA:  EB 90
F00:6201                       jsr ROXx_FLAGS
               S06:000042BC:  4E B8 41 0A
F00:6202                       roxl.l #7,d0   
               S06:000042C0:  EF 90
F00:6203                       jsr ROXx_FLAGS
               S06:000042C2:  4E B8 41 0A
F00:6204                       roxl.l #8,d0   
               S06:000042C6:  E1 90
F00:6205                       jsr ROXx_FLAGS
               S06:000042C8:  4E B8 41 0A
F00:6206                       cmpi.l #$40000010,d0     
               S06:000042CC:  0C 80 40 00 00 10
F00:6207                       bne ROXX_FAIL;                 
               S06:000042D2:  66 00 00 A0
F00:6208                       cmpi.l #$0000002A,d5     
               S06:000042D6:  0C 85 00 00 00 2A
F00:6209                       bne ROXX_FAIL;                 
               S06:000042DC:  66 00 00 96
F00:6210                                       
F00:6211              ; LONG RIGHT
F00:6212                       roxr.l #1,d0       
               S06:000042E0:  E2 90
F00:6213                       jsr ROXx_FLAGS
               S06:000042E2:  4E B8 41 0A
F00:6214                       roxr.l #5,d0      
               S06:000042E6:  EA 90
F00:6215                       jsr ROXx_FLAGS
               S06:000042E8:  4E B8 41 0A
F00:6216                       roxr.l #7,d0   
               S06:000042EC:  EE 90
F00:6217                       jsr ROXx_FLAGS
               S06:000042EE:  4E B8 41 0A
F00:6218                       roxr.l #8,d0   
               S06:000042F2:  E0 90
F00:6219                       jsr ROXx_FLAGS
               S06:000042F4:  4E B8 41 0A
F00:6220                       cmpi.l #$00010200,d0     
               S06:000042F8:  0C 80 00 01 02 00
F00:6221                       bne ROXX_FAIL;                 
               S06:000042FE:  66 74
F00:6222                       cmpi.l #$00000032,d5     
               S06:00004300:  0C 85 00 00 00 32
F00:6223                       bne ROXX_FAIL;                 
               S06:00004306:  66 6C
F00:6224          
F00:6225                   
F00:6226           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6227           
F00:6228                       move.l #$00000000,d5   
               S06:00004308:  7A 00
F00:6229                       move.l #$00000100,a0 
               S06:0000430A:  30 7C 01 00
F00:6230                       move.w #$8FF1,(a0)
               S06:0000430E:  30 BC 8F F1
F00:6231                       
F00:6232              ; WORD LEFT
F00:6233                       roxl (a0)       
               S06:00004312:  E5 D0
F00:6234                       jsr ROXx_FLAGS
               S06:00004314:  4E B8 41 0A
F00:6235                       roxl (a0)       
               S06:00004318:  E5 D0
F00:6236                       jsr ROXx_FLAGS
               S06:0000431A:  4E B8 41 0A
F00:6237                       roxl (a0)       
               S06:0000431E:  E5 D0
F00:6238                       jsr ROXx_FLAGS
               S06:00004320:  4E B8 41 0A
F00:6239                       roxl (a0)       
               S06:00004324:  E5 D0
F00:6240                       jsr ROXx_FLAGS
               S06:00004326:  4E B8 41 0A
F00:6241                       move.w (a0),d0
               S06:0000432A:  30 10
F00:6242                       cmpi.l #$0001FF10,d0     
               S06:0000432C:  0C 80 00 01 FF 10
F00:6243                       bne ROXX_FAIL;                 
               S06:00004332:  66 40
F00:6244                       cmpi.l #$00000009,d5     
               S06:00004334:  0C 85 00 00 00 09
F00:6245                       bne ROXX_FAIL;                 
               S06:0000433A:  66 38
F00:6246                         
F00:6247              ; WORD RIGHT
F00:6248                       roxr (a0)       
               S06:0000433C:  E4 D0
F00:6249                       jsr ROXx_FLAGS
               S06:0000433E:  4E B8 41 0A
F00:6250                       roxr (a0)       
               S06:00004342:  E4 D0
F00:6251                       jsr ROXx_FLAGS
               S06:00004344:  4E B8 41 0A
F00:6252                       roxr (a0)       
               S06:00004348:  E4 D0
F00:6253                       jsr ROXx_FLAGS                
               S06:0000434A:  4E B8 41 0A
F00:6254                       roxr (a0)       
               S06:0000434E:  E4 D0
F00:6255                       jsr ROXx_FLAGS               
               S06:00004350:  4E B8 41 0A
F00:6256                       roxr (a0)       
               S06:00004354:  E4 D0
F00:6257                       jsr ROXx_FLAGS
               S06:00004356:  4E B8 41 0A
F00:6258                       roxr (a0)       
               S06:0000435A:  E4 D0
F00:6259                       jsr ROXx_FLAGS
               S06:0000435C:  4E B8 41 0A
F00:6260                       move.w (a0),d0
               S06:00004360:  30 10
F00:6261                       cmpi.l #$000103FC,d0     
               S06:00004362:  0C 80 00 01 03 FC
F00:6262                       bne ROXX_FAIL;                 
               S06:00004368:  66 0A
F00:6263                       cmpi.l #$0000000A,d5     
               S06:0000436A:  0C 85 00 00 00 0A
F00:6264                       bne ROXX_FAIL;                 
               S06:00004370:  66 02
F00:6265       
F00:6266                       rts        
               S06:00004372:  4E 75
F00:6267       
F00:6268       ROXX_FAIL: bra ROXX_FAIL
               S06:00004374:  60 FE
F00:6269        
F00:6270                       
F00:6271       ;-----------------------------------------------------------
F00:6272       ;-----------------------------------------------------------
F00:6273       ; OPCODE : SHIFTS
F00:6274       ;-----------------------------------------------------------
F00:6275       ;-----------------------------------------------------------
F00:6276       
F00:6277           ; Subroutine to check and accumulate the flags 
F00:6278       SHIFTS_FLAGS:   move SR,d3      
               S06:00004376:  40 C3
F00:6279                       andi.l #$0F,d3            ; Isolate flags 
               S06:00004378:  02 83 00 00 00 0F
F00:6280                       add.l d3,d5               ; Copy flag results into accumulator
               S06:0000437E:  DA 83
F00:6281                       rts
               S06:00004380:  4E 75
F00:6282           
F00:6283       op_SHIFTS:   
F00:6284                  
F00:6285           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6286           
F00:6287              ; BYTE LEFT
F00:6288                       move.l #$80018F81,d0   
               S06:00004382:  20 3C 80 01 8F 81
F00:6289                       move.l #$00000000,d5  
               S06:00004388:  7A 00
F00:6290                       move.l #$00000002,d6  
               S06:0000438A:  7C 02
F00:6291       SHIFTS_LOOP1:
F00:6292                       asl.b d6,d0       
               S06:0000438C:  ED 20
F00:6293                       jsr SHIFTS_FLAGS
               S06:0000438E:  4E B8 43 76
F00:6294                       dbf d6,SHIFTS_LOOP1
               S06:00004392:  51 CE FF F8
F00:6295                       cmpi.l #$80018F08,d0     
               S06:00004396:  0C 80 80 01 8F 08
F00:6296                       bne SHIFT_FAIL;                 
               S06:0000439C:  66 00 02 4E
F00:6297                       cmpi.l #$00000002,d5     
               S06:000043A0:  0C 85 00 00 00 02
F00:6298                       bne SHIFT_FAIL;      
               S06:000043A6:  66 00 02 44
F00:6299           
F00:6300              ; BYTE RIGHT
F00:6301                       move.l #$80018F81,d0   
               S06:000043AA:  20 3C 80 01 8F 81
F00:6302                       move.l #$00000002,d6  
               S06:000043B0:  7C 02
F00:6303       SHIFTS_LOOP2:
F00:6304                       asr.b d6,d0       
               S06:000043B2:  EC 20
F00:6305                       jsr SHIFTS_FLAGS
               S06:000043B4:  4E B8 43 76
F00:6306                       dbf d6,SHIFTS_LOOP2
               S06:000043B8:  51 CE FF F8
F00:6307                       cmpi.l #$80018FF0,d0     
               S06:000043BC:  0C 80 80 01 8F F0
F00:6308                       bne SHIFT_FAIL;                 
               S06:000043C2:  66 00 02 28
F00:6309                       cmpi.l #$0000001A,d5     
               S06:000043C6:  0C 85 00 00 00 1A
F00:6310                       bne SHIFT_FAIL;      
               S06:000043CC:  66 00 02 1E
F00:6311       
F00:6312           
F00:6313              ; WORD LEFT
F00:6314                       move.l #$80018FF1,d0   
               S06:000043D0:  20 3C 80 01 8F F1
F00:6315                       move.l #$00000002,d6  
               S06:000043D6:  7C 02
F00:6316       SHIFTS_LOOP3:
F00:6317                       asl.w d6,d0       
               S06:000043D8:  ED 60
F00:6318                       jsr SHIFTS_FLAGS
               S06:000043DA:  4E B8 43 76
F00:6319                       dbf d6,SHIFTS_LOOP3
               S06:000043DE:  51 CE FF F8
F00:6320                       cmpi.l #$80017F88,d0     
               S06:000043E2:  0C 80 80 01 7F 88
F00:6321                       bne SHIFT_FAIL;                 
               S06:000043E8:  66 00 02 02
F00:6322                       cmpi.l #$0000001C,d5     
               S06:000043EC:  0C 85 00 00 00 1C
F00:6323                       bne SHIFT_FAIL;      
               S06:000043F2:  66 00 01 F8
F00:6324           
F00:6325              ; WORD RIGHT
F00:6326                       move.l #$80018FF1,d0   
               S06:000043F6:  20 3C 80 01 8F F1
F00:6327                       move.l #$00000002,d6  
               S06:000043FC:  7C 02
F00:6328       SHIFTS_LOOP4:
F00:6329                       asr.w d6,d0       
               S06:000043FE:  EC 60
F00:6330                       jsr SHIFTS_FLAGS
               S06:00004400:  4E B8 43 76
F00:6331                       dbf d6,SHIFTS_LOOP4
               S06:00004404:  51 CE FF F8
F00:6332                       cmpi.l #$8001F1FE,d0     
               S06:00004408:  0C 80 80 01 F1 FE
F00:6333                       bne SHIFT_FAIL;                 
               S06:0000440E:  66 00 01 DC
F00:6334                       cmpi.l #$00000034,d5     
               S06:00004412:  0C 85 00 00 00 34
F00:6335                       bne SHIFT_FAIL;      
               S06:00004418:  66 00 01 D2
F00:6336       
F00:6337           
F00:6338              ; LONG LEFT
F00:6339                       move.l #$80018FF1,d0   
               S06:0000441C:  20 3C 80 01 8F F1
F00:6340                       move.l #$00000002,d6  
               S06:00004422:  7C 02
F00:6341       SHIFTS_LOOP5:
F00:6342                       asl.l d6,d0       
               S06:00004424:  ED A0
F00:6343                       jsr SHIFTS_FLAGS
               S06:00004426:  4E B8 43 76
F00:6344                       dbf d6,SHIFTS_LOOP5
               S06:0000442A:  51 CE FF F8
F00:6345                       cmpi.l #$000C7F88,d0     
               S06:0000442E:  0C 80 00 0C 7F 88
F00:6346                       bne SHIFT_FAIL;                 
               S06:00004434:  66 00 01 B6
F00:6347                       cmpi.l #$00000036,d5     
               S06:00004438:  0C 85 00 00 00 36
F00:6348                       bne SHIFT_FAIL;      
               S06:0000443E:  66 00 01 AC
F00:6349           
F00:6350              ; LONG RIGHT
F00:6351                       move.l #$80018FF1,d0   
               S06:00004442:  20 3C 80 01 8F F1
F00:6352                       move.l #$00000002,d6  
               S06:00004448:  7C 02
F00:6353       SHIFTS_LOOP6:
F00:6354                       asr.l d6,d0       
               S06:0000444A:  EC A0
F00:6355                       jsr SHIFTS_FLAGS
               S06:0000444C:  4E B8 43 76
F00:6356                       dbf d6,SHIFTS_LOOP6
               S06:00004450:  51 CE FF F8
F00:6357                       cmpi.l #$F00031FE,d0     
               S06:00004454:  0C 80 F0 00 31 FE
F00:6358                       bne SHIFT_FAIL;                 
               S06:0000445A:  66 00 01 90
F00:6359                       cmpi.l #$0000004E,d5     
               S06:0000445E:  0C 85 00 00 00 4E
F00:6360                       bne SHIFT_FAIL;      
               S06:00004464:  66 00 01 86
F00:6361       
F00:6362                   
F00:6363           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6364           
F00:6365                       move.l #$80018FF1,d0   
               S06:00004468:  20 3C 80 01 8F F1
F00:6366                       move.l #$00000000,d5   
               S06:0000446E:  7A 00
F00:6367       
F00:6368              ; BYTE LEFT
F00:6369                       asl.b #1,d0       
               S06:00004470:  D0 00
F00:6370                       jsr SHIFTS_FLAGS
               S06:00004472:  4E B8 43 76
F00:6371                       asl.b #2,d0      
               S06:00004476:  E5 00
F00:6372                       jsr SHIFTS_FLAGS
               S06:00004478:  4E B8 43 76
F00:6373                       asl.b #1,d0   
               S06:0000447C:  D0 00
F00:6374                       jsr SHIFTS_FLAGS
               S06:0000447E:  4E B8 43 76
F00:6375                       asl.b #3,d0   
               S06:00004482:  E7 00
F00:6376                       jsr SHIFTS_FLAGS
               S06:00004484:  4E B8 43 76
F00:6377                       cmpi.l #$80018F80,d0     
               S06:00004488:  0C 80 80 01 8F 80
F00:6378                       bne SHIFT_FAIL;                 
               S06:0000448E:  66 00 01 5C
F00:6379                       cmpi.l #$0000001F,d5     
               S06:00004492:  0C 85 00 00 00 1F
F00:6380                       bne SHIFT_FAIL;                 
               S06:00004498:  66 00 01 52
F00:6381            
F00:6382              ; BYTE RIGHT
F00:6383                       asr.b #1,d0       
               S06:0000449C:  E2 00
F00:6384                       jsr SHIFTS_FLAGS
               S06:0000449E:  4E B8 43 76
F00:6385                       asr.b #2,d0      
               S06:000044A2:  E4 00
F00:6386                       jsr SHIFTS_FLAGS
               S06:000044A4:  4E B8 43 76
F00:6387                       asr.b #3,d0   
               S06:000044A8:  E6 00
F00:6388                       jsr SHIFTS_FLAGS
               S06:000044AA:  4E B8 43 76
F00:6389                       asr.b #1,d0   
               S06:000044AE:  E2 00
F00:6390                       jsr SHIFTS_FLAGS
               S06:000044B0:  4E B8 43 76
F00:6391                       cmpi.l #$80018FFF,d0     
               S06:000044B4:  0C 80 80 01 8F FF
F00:6392                       bne SHIFT_FAIL;                 
               S06:000044BA:  66 00 01 30
F00:6393                       cmpi.l #$0000003F,d5     
               S06:000044BE:  0C 85 00 00 00 3F
F00:6394                       bne SHIFT_FAIL;                 
               S06:000044C4:  66 00 01 26
F00:6395            
F00:6396              ; WORD LEFT
F00:6397                       asl.w #1,d0       
               S06:000044C8:  D0 40
F00:6398                       jsr SHIFTS_FLAGS
               S06:000044CA:  4E B8 43 76
F00:6399                       asl.w #2,d0      
               S06:000044CE:  E5 40
F00:6400                       jsr SHIFTS_FLAGS
               S06:000044D0:  4E B8 43 76
F00:6401                       asl.w #3,d0   
               S06:000044D4:  E7 40
F00:6402                       jsr SHIFTS_FLAGS
               S06:000044D6:  4E B8 43 76
F00:6403                       asl.w #5,d0   
               S06:000044DA:  EB 40
F00:6404                       jsr SHIFTS_FLAGS
               S06:000044DC:  4E B8 43 76
F00:6405                       cmpi.l #$8001F800,d0     
               S06:000044E0:  0C 80 80 01 F8 00
F00:6406                       bne SHIFT_FAIL;                 
               S06:000044E6:  66 00 01 04
F00:6407                       cmpi.l #$00000056,d5     
               S06:000044EA:  0C 85 00 00 00 56
F00:6408                       bne SHIFT_FAIL;                 
               S06:000044F0:  66 00 00 FA
F00:6409                         
F00:6410              ; WORD RIGHT
F00:6411                       asr.w #5,d0       
               S06:000044F4:  EA 40
F00:6412                       jsr SHIFTS_FLAGS
               S06:000044F6:  4E B8 43 76
F00:6413                       asr.w #1,d0      
               S06:000044FA:  E2 40
F00:6414                       jsr SHIFTS_FLAGS
               S06:000044FC:  4E B8 43 76
F00:6415                       asr.w #2,d0   
               S06:00004500:  E4 40
F00:6416                       jsr SHIFTS_FLAGS
               S06:00004502:  4E B8 43 76
F00:6417                       asr.w #4,d0   
               S06:00004506:  E8 40
F00:6418                       jsr SHIFTS_FLAGS
               S06:00004508:  4E B8 43 76
F00:6419                       cmpi.l #$8001FFFF,d0     
               S06:0000450C:  0C 80 80 01 FF FF
F00:6420                       bne SHIFT_FAIL;                 
               S06:00004512:  66 00 00 D8
F00:6421                       cmpi.l #$00000077,d5     
               S06:00004516:  0C 85 00 00 00 77
F00:6422                       bne SHIFT_FAIL;                 
               S06:0000451C:  66 00 00 CE
F00:6423                      
F00:6424              ; LONG LEFT
F00:6425                       move.l #$80018FF1,d0   
               S06:00004520:  20 3C 80 01 8F F1
F00:6426                       asl.l #1,d0       
               S06:00004526:  D0 80
F00:6427                       jsr SHIFTS_FLAGS
               S06:00004528:  4E B8 43 76
F00:6428                       asl.l #2,d0      
               S06:0000452C:  E5 80
F00:6429                       jsr SHIFTS_FLAGS
               S06:0000452E:  4E B8 43 76
F00:6430                       asl.l #7,d0   
               S06:00004532:  EF 80
F00:6431                       jsr SHIFTS_FLAGS
               S06:00004534:  4E B8 43 76
F00:6432                       asl.l #4,d0   
               S06:00004538:  E9 80
F00:6433                       jsr SHIFTS_FLAGS
               S06:0000453A:  4E B8 43 76
F00:6434                       cmpi.l #$63FC4000,d0     
               S06:0000453E:  0C 80 63 FC 40 00
F00:6435                       bne SHIFT_FAIL;                 
               S06:00004544:  66 00 00 A6
F00:6436                       cmpi.l #$0000007A,d5     
               S06:00004548:  0C 85 00 00 00 7A
F00:6437                       bne SHIFT_FAIL;                 
               S06:0000454E:  66 00 00 9C
F00:6438                                       
F00:6439              ; LONG RIGHT
F00:6440                       move.l #$80018FF1,d0   
               S06:00004552:  20 3C 80 01 8F F1
F00:6441                       asr.l #1,d0       
               S06:00004558:  E2 80
F00:6442                       jsr SHIFTS_FLAGS
               S06:0000455A:  4E B8 43 76
F00:6443                       asr.l #5,d0      
               S06:0000455E:  EA 80
F00:6444                       jsr SHIFTS_FLAGS
               S06:00004560:  4E B8 43 76
F00:6445                       asr.l #7,d0   
               S06:00004564:  EE 80
F00:6446                       jsr SHIFTS_FLAGS
               S06:00004566:  4E B8 43 76
F00:6447                       asr.l #8,d0   
               S06:0000456A:  E0 80
F00:6448                       jsr SHIFTS_FLAGS
               S06:0000456C:  4E B8 43 76
F00:6449                       cmpi.l #$FFFFFC00,d0     
               S06:00004570:  0C 80 FF FF FC 00
F00:6450                       bne SHIFT_FAIL;                 
               S06:00004576:  66 74
F00:6451                       cmpi.l #$0000009C,d5     
               S06:00004578:  0C 85 00 00 00 9C
F00:6452                       bne SHIFT_FAIL;                 
               S06:0000457E:  66 6C
F00:6453          
F00:6454                   
F00:6455           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6456           
F00:6457                       move.l #$00000000,d5   
               S06:00004580:  7A 00
F00:6458                       move.l #$00000100,a0 
               S06:00004582:  30 7C 01 00
F00:6459                       move.w #$8FF1,(a0)
               S06:00004586:  30 BC 8F F1
F00:6460                       
F00:6461              ; WORD LEFT
F00:6462                       asl  (a0)       
               S06:0000458A:  E1 D0
F00:6463                       jsr SHIFTS_FLAGS
               S06:0000458C:  4E B8 43 76
F00:6464                       asl  (a0)       
               S06:00004590:  E1 D0
F00:6465                       jsr SHIFTS_FLAGS
               S06:00004592:  4E B8 43 76
F00:6466                       asl  (a0)       
               S06:00004596:  E1 D0
F00:6467                       jsr SHIFTS_FLAGS
               S06:00004598:  4E B8 43 76
F00:6468                       asl  (a0)       
               S06:0000459C:  E1 D0
F00:6469                       jsr SHIFTS_FLAGS
               S06:0000459E:  4E B8 43 76
F00:6470                       move.w (a0),d0
               S06:000045A2:  30 10
F00:6471                       cmpi.l #$FFFFFF10,d0     
               S06:000045A4:  0C 80 FF FF FF 10
F00:6472                       bne SHIFT_FAIL;                 
               S06:000045AA:  66 40
F00:6473                       cmpi.l #$0000000D,d5     
               S06:000045AC:  0C 85 00 00 00 0D
F00:6474                       bne SHIFT_FAIL;                 
               S06:000045B2:  66 38
F00:6475                         
F00:6476              ; WORD RIGHT
F00:6477                       asr (a0)       
               S06:000045B4:  E0 D0
F00:6478                       jsr SHIFTS_FLAGS
               S06:000045B6:  4E B8 43 76
F00:6479                       asr (a0)       
               S06:000045BA:  E0 D0
F00:6480                       jsr SHIFTS_FLAGS
               S06:000045BC:  4E B8 43 76
F00:6481                       asr (a0)       
               S06:000045C0:  E0 D0
F00:6482                       jsr SHIFTS_FLAGS                
               S06:000045C2:  4E B8 43 76
F00:6483                       asr (a0)       
               S06:000045C6:  E0 D0
F00:6484                       jsr SHIFTS_FLAGS               
               S06:000045C8:  4E B8 43 76
F00:6485                       asr (a0)       
               S06:000045CC:  E0 D0
F00:6486                       jsr SHIFTS_FLAGS
               S06:000045CE:  4E B8 43 76
F00:6487                       asr (a0)       
               S06:000045D2:  E0 D0
F00:6488                       jsr SHIFTS_FLAGS
               S06:000045D4:  4E B8 43 76
F00:6489                       move.w (a0),d0
               S06:000045D8:  30 10
F00:6490                       cmpi.l #$FFFFFFFC,d0     
               S06:000045DA:  0C 80 FF FF FF FC
F00:6491                       bne SHIFT_FAIL;                 
               S06:000045E0:  66 0A
F00:6492                       cmpi.l #$0000003E,d5     
               S06:000045E2:  0C 85 00 00 00 3E
F00:6493                       bne SHIFT_FAIL;                 
               S06:000045E8:  66 02
F00:6494       
F00:6495                       rts      
               S06:000045EA:  4E 75
F00:6496               
F00:6497       SHIFT_FAIL: bra SHIFT_FAIL
               S06:000045EC:  60 FE
F00:6498                       
F00:6499       ;-----------------------------------------------------------
F00:6500       ;-----------------------------------------------------------
F00:6501       ; OPCODE : SHIFTS2
F00:6502       ;-----------------------------------------------------------
F00:6503       ;-----------------------------------------------------------
F00:6504       
F00:6505           ; Subroutine to check and accumulate the flags 
F00:6506       SHIFTS2_FLAGS:  move SR,d3      
               S06:000045EE:  40 C3
F00:6507                       andi.l #$0F,d3            ; Isolate flags 
               S06:000045F0:  02 83 00 00 00 0F
F00:6508                       add.l d3,d5               ; Copy flag results into accumulator
               S06:000045F6:  DA 83
F00:6509                       rts
               S06:000045F8:  4E 75
F00:6510           
F00:6511       op_SHIFTS2:   
F00:6512                  
F00:6513           ; Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
F00:6514           
F00:6515              ; BYTE LEFT
F00:6516                       move.l #$80018F81,d0   
               S06:000045FA:  20 3C 80 01 8F 81
F00:6517                       move.l #$00000000,d5  
               S06:00004600:  7A 00
F00:6518                       move.l #$00000002,d6  
               S06:00004602:  7C 02
F00:6519       SHIFTS2_LOOP1:
F00:6520                       lsl.b d6,d0       
               S06:00004604:  ED 28
F00:6521                       jsr SHIFTS2_FLAGS
               S06:00004606:  4E B8 45 EE
F00:6522                       dbf d6,SHIFTS2_LOOP1
               S06:0000460A:  51 CE FF F8
F00:6523                       cmpi.l #$80018F08,d0     
               S06:0000460E:  0C 80 80 01 8F 08
F00:6524                       bne LSHIFT_FAIL;                 
               S06:00004614:  66 00 02 36
F00:6525                       cmpi.l #$00000000,d5     
               S06:00004618:  4A 85
F00:6526                       bne LSHIFT_FAIL;      
               S06:0000461A:  66 00 02 30
F00:6527           
F00:6528              ; BYTE RIGHT
F00:6529                       move.l #$80018F81,d0   
               S06:0000461E:  20 3C 80 01 8F 81
F00:6530                       move.l #$00000002,d6  
               S06:00004624:  7C 02
F00:6531       SHIFTS2_LOOP2:
F00:6532                       lsr.b d6,d0       
               S06:00004626:  EC 28
F00:6533                       jsr SHIFTS2_FLAGS
               S06:00004628:  4E B8 45 EE
F00:6534                       dbf d6,SHIFTS2_LOOP2
               S06:0000462C:  51 CE FF F8
F00:6535                       cmpi.l #$80018F10,d0     
               S06:00004630:  0C 80 80 01 8F 10
F00:6536                       bne LSHIFT_FAIL;                 
               S06:00004636:  66 00 02 14
F00:6537                       cmpi.l #$00000000,d5     
               S06:0000463A:  4A 85
F00:6538                       bne LSHIFT_FAIL;      
               S06:0000463C:  66 00 02 0E
F00:6539       
F00:6540           
F00:6541              ; WORD LEFT
F00:6542                       move.l #$80018FF1,d0   
               S06:00004640:  20 3C 80 01 8F F1
F00:6543                       move.l #$00000002,d6  
               S06:00004646:  7C 02
F00:6544       SHIFTS2_LOOP3:
F00:6545                       lsl.w d6,d0       
               S06:00004648:  ED 68
F00:6546                       jsr SHIFTS2_FLAGS
               S06:0000464A:  4E B8 45 EE
F00:6547                       dbf d6,SHIFTS2_LOOP3
               S06:0000464E:  51 CE FF F8
F00:6548                       cmpi.l #$80017F88,d0     
               S06:00004652:  0C 80 80 01 7F 88
F00:6549                       bne LSHIFT_FAIL;                 
               S06:00004658:  66 00 01 F2
F00:6550                       cmpi.l #$00000000,d5     
               S06:0000465C:  4A 85
F00:6551                       bne LSHIFT_FAIL;      
               S06:0000465E:  66 00 01 EC
F00:6552           
F00:6553              ; WORD RIGHT
F00:6554                       move.l #$80018FF1,d0   
               S06:00004662:  20 3C 80 01 8F F1
F00:6555                       move.l #$00000002,d6  
               S06:00004668:  7C 02
F00:6556       SHIFTS2_LOOP4:
F00:6557                       lsr.w d6,d0       
               S06:0000466A:  EC 68
F00:6558                       jsr SHIFTS2_FLAGS
               S06:0000466C:  4E B8 45 EE
F00:6559                       dbf d6,SHIFTS2_LOOP4
               S06:00004670:  51 CE FF F8
F00:6560                       cmpi.l #$800111FE,d0     
               S06:00004674:  0C 80 80 01 11 FE
F00:6561                       bne LSHIFT_FAIL;                 
               S06:0000467A:  66 00 01 D0
F00:6562                       cmpi.l #$00000000,d5     
               S06:0000467E:  4A 85
F00:6563                       bne LSHIFT_FAIL;      
               S06:00004680:  66 00 01 CA
F00:6564       
F00:6565           
F00:6566              ; LONG LEFT
F00:6567                       move.l #$80018FF1,d0   
               S06:00004684:  20 3C 80 01 8F F1
F00:6568                       move.l #$00000002,d6  
               S06:0000468A:  7C 02
F00:6569       SHIFTS2_LOOP5:
F00:6570                       lsl.l d6,d0       
               S06:0000468C:  ED A8
F00:6571                       jsr SHIFTS2_FLAGS
               S06:0000468E:  4E B8 45 EE
F00:6572                       dbf d6,SHIFTS2_LOOP5
               S06:00004692:  51 CE FF F8
F00:6573                       cmpi.l #$000C7F88,d0     
               S06:00004696:  0C 80 00 0C 7F 88
F00:6574                       bne LSHIFT_FAIL;                 
               S06:0000469C:  66 00 01 AE
F00:6575                       cmpi.l #$00000000,d5     
               S06:000046A0:  4A 85
F00:6576                       bne LSHIFT_FAIL;      
               S06:000046A2:  66 00 01 A8
F00:6577           
F00:6578              ; LONG RIGHT
F00:6579                       move.l #$80018FF1,d0   
               S06:000046A6:  20 3C 80 01 8F F1
F00:6580                       move.l #$00000002,d6  
               S06:000046AC:  7C 02
F00:6581       SHIFTS2_LOOP6:
F00:6582                       lsr.l d6,d0       
               S06:000046AE:  EC A8
F00:6583                       jsr SHIFTS2_FLAGS
               S06:000046B0:  4E B8 45 EE
F00:6584                       dbf d6,SHIFTS2_LOOP6
               S06:000046B4:  51 CE FF F8
F00:6585                       cmpi.l #$100031FE,d0     
               S06:000046B8:  0C 80 10 00 31 FE
F00:6586                       bne LSHIFT_FAIL;                 
               S06:000046BE:  66 00 01 8C
F00:6587                       cmpi.l #$00000000,d5     
               S06:000046C2:  4A 85
F00:6588                       bne LSHIFT_FAIL;      
               S06:000046C4:  66 00 01 86
F00:6589       
F00:6590                   
F00:6591           ; Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
F00:6592           
F00:6593                       move.l #$80018FF1,d0   
               S06:000046C8:  20 3C 80 01 8F F1
F00:6594                       move.l #$00000000,d5   
               S06:000046CE:  7A 00
F00:6595       
F00:6596              ; BYTE LEFT
F00:6597                       lsl.b #1,d0       
               S06:000046D0:  E3 08
F00:6598                       jsr SHIFTS2_FLAGS
               S06:000046D2:  4E B8 45 EE
F00:6599                       lsl.b #2,d0      
               S06:000046D6:  E5 08
F00:6600                       jsr SHIFTS2_FLAGS
               S06:000046D8:  4E B8 45 EE
F00:6601                       lsl.b #1,d0   
               S06:000046DC:  E3 08
F00:6602                       jsr SHIFTS2_FLAGS
               S06:000046DE:  4E B8 45 EE
F00:6603                       lsl.b #3,d0   
               S06:000046E2:  E7 08
F00:6604                       jsr SHIFTS2_FLAGS
               S06:000046E4:  4E B8 45 EE
F00:6605                       cmpi.l #$80018F80,d0     
               S06:000046E8:  0C 80 80 01 8F 80
F00:6606                       bne LSHIFT_FAIL;                 
               S06:000046EE:  66 00 01 5C
F00:6607                       cmpi.l #$0000001B,d5     
               S06:000046F2:  0C 85 00 00 00 1B
F00:6608                       bne LSHIFT_FAIL;                 
               S06:000046F8:  66 00 01 52
F00:6609            
F00:6610              ; BYTE RIGHT
F00:6611                       lsr.b #1,d0       
               S06:000046FC:  E2 08
F00:6612                       jsr SHIFTS2_FLAGS
               S06:000046FE:  4E B8 45 EE
F00:6613                       lsr.b #2,d0      
               S06:00004702:  E4 08
F00:6614                       jsr SHIFTS2_FLAGS
               S06:00004704:  4E B8 45 EE
F00:6615                       lsr.b #3,d0   
               S06:00004708:  E6 08
F00:6616                       jsr SHIFTS2_FLAGS
               S06:0000470A:  4E B8 45 EE
F00:6617                       lsr.b #1,d0   
               S06:0000470E:  E2 08
F00:6618                       jsr SHIFTS2_FLAGS
               S06:00004710:  4E B8 45 EE
F00:6619                       cmpi.l #$80018F01,d0     
               S06:00004714:  0C 80 80 01 8F 01
F00:6620                       bne LSHIFT_FAIL;                 
               S06:0000471A:  66 00 01 30
F00:6621                       cmpi.l #$0000001B,d5     
               S06:0000471E:  0C 85 00 00 00 1B
F00:6622                       bne LSHIFT_FAIL;                 
               S06:00004724:  66 00 01 26
F00:6623            
F00:6624              ; WORD LEFT
F00:6625                       lsl.w #1,d0       
               S06:00004728:  E3 48
F00:6626                       jsr SHIFTS2_FLAGS
               S06:0000472A:  4E B8 45 EE
F00:6627                       lsl.w #2,d0      
               S06:0000472E:  E5 48
F00:6628                       jsr SHIFTS2_FLAGS
               S06:00004730:  4E B8 45 EE
F00:6629                       lsl.w #3,d0   
               S06:00004734:  E7 48
F00:6630                       jsr SHIFTS2_FLAGS
               S06:00004736:  4E B8 45 EE
F00:6631                       lsl.w #5,d0   
               S06:0000473A:  EB 48
F00:6632                       jsr SHIFTS2_FLAGS
               S06:0000473C:  4E B8 45 EE
F00:6633                       cmpi.l #$80010800,d0     
               S06:00004740:  0C 80 80 01 08 00
F00:6634                       bne LSHIFT_FAIL;                 
               S06:00004746:  66 00 01 04
F00:6635                       cmpi.l #$00000025,d5     
               S06:0000474A:  0C 85 00 00 00 25
F00:6636                       bne LSHIFT_FAIL;                 
               S06:00004750:  66 00 00 FA
F00:6637                         
F00:6638              ; WORD RIGHT
F00:6639                       lsr.w #5,d0       
               S06:00004754:  EA 48
F00:6640                       jsr SHIFTS2_FLAGS
               S06:00004756:  4E B8 45 EE
F00:6641                       lsr.w #1,d0      
               S06:0000475A:  E2 48
F00:6642                       jsr SHIFTS2_FLAGS
               S06:0000475C:  4E B8 45 EE
F00:6643                       lsr.w #2,d0   
               S06:00004760:  E4 48
F00:6644                       jsr SHIFTS2_FLAGS
               S06:00004762:  4E B8 45 EE
F00:6645                       lsr.w #4,d0   
               S06:00004766:  E8 48
F00:6646                       jsr SHIFTS2_FLAGS
               S06:00004768:  4E B8 45 EE
F00:6647                       cmpi.l #$80010000,d0     
               S06:0000476C:  0C 80 80 01 00 00
F00:6648                       bne LSHIFT_FAIL;                 
               S06:00004772:  66 00 00 D8
F00:6649                       cmpi.l #$0000002A,d5     
               S06:00004776:  0C 85 00 00 00 2A
F00:6650                       bne LSHIFT_FAIL;                 
               S06:0000477C:  66 00 00 CE
F00:6651                      
F00:6652              ; LONG LEFT
F00:6653                       move.l #$80018FF1,d0   
               S06:00004780:  20 3C 80 01 8F F1
F00:6654                       lsl.l #1,d0       
               S06:00004786:  E3 88
F00:6655                       jsr SHIFTS2_FLAGS
               S06:00004788:  4E B8 45 EE
F00:6656                       lsl.l #2,d0      
               S06:0000478C:  E5 88
F00:6657                       jsr SHIFTS2_FLAGS
               S06:0000478E:  4E B8 45 EE
F00:6658                       lsl.l #7,d0   
               S06:00004792:  EF 88
F00:6659                       jsr SHIFTS2_FLAGS
               S06:00004794:  4E B8 45 EE
F00:6660                       lsl.l #4,d0   
               S06:00004798:  E9 88
F00:6661                       jsr SHIFTS2_FLAGS
               S06:0000479A:  4E B8 45 EE
F00:6662                       cmpi.l #$63FC4000,d0     
               S06:0000479E:  0C 80 63 FC 40 00
F00:6663                       bne LSHIFT_FAIL;                 
               S06:000047A4:  66 00 00 A6
F00:6664                       cmpi.l #$0000002B,d5     
               S06:000047A8:  0C 85 00 00 00 2B
F00:6665                       bne LSHIFT_FAIL;                 
               S06:000047AE:  66 00 00 9C
F00:6666                                       
F00:6667              ; LONG RIGHT
F00:6668                       move.l #$80018FF1,d0   
               S06:000047B2:  20 3C 80 01 8F F1
F00:6669                       lsr.l #1,d0       
               S06:000047B8:  E2 88
F00:6670                       jsr SHIFTS2_FLAGS
               S06:000047BA:  4E B8 45 EE
F00:6671                       lsr.l #5,d0      
               S06:000047BE:  EA 88
F00:6672                       jsr SHIFTS2_FLAGS
               S06:000047C0:  4E B8 45 EE
F00:6673                       lsr.l #7,d0   
               S06:000047C4:  EE 88
F00:6674                       jsr SHIFTS2_FLAGS
               S06:000047C6:  4E B8 45 EE
F00:6675                       lsr.l #8,d0   
               S06:000047CA:  E0 88
F00:6676                       jsr SHIFTS2_FLAGS
               S06:000047CC:  4E B8 45 EE
F00:6677                       cmpi.l #$00000400,d0     
               S06:000047D0:  0C 80 00 00 04 00
F00:6678                       bne LSHIFT_FAIL;                 
               S06:000047D6:  66 74
F00:6679                       cmpi.l #$0000002D,d5     
               S06:000047D8:  0C 85 00 00 00 2D
F00:6680                       bne LSHIFT_FAIL;                 
               S06:000047DE:  66 6C
F00:6681          
F00:6682                   
F00:6683           ; Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
F00:6684           
F00:6685                       move.l #$00000000,d5   
               S06:000047E0:  7A 00
F00:6686                       move.l #$00000100,a0 
               S06:000047E2:  30 7C 01 00
F00:6687                       move.w #$8FF1,(a0)
               S06:000047E6:  30 BC 8F F1
F00:6688                       
F00:6689              ; WORD LEFT
F00:6690                       lsl  (a0)       
               S06:000047EA:  E3 D0
F00:6691                       jsr SHIFTS2_FLAGS
               S06:000047EC:  4E B8 45 EE
F00:6692                       lsl  (a0)       
               S06:000047F0:  E3 D0
F00:6693                       jsr SHIFTS2_FLAGS
               S06:000047F2:  4E B8 45 EE
F00:6694                       lsl  (a0)       
               S06:000047F6:  E3 D0
F00:6695                       jsr SHIFTS2_FLAGS
               S06:000047F8:  4E B8 45 EE
F00:6696                       lsl  (a0)       
               S06:000047FC:  E3 D0
F00:6697                       jsr SHIFTS2_FLAGS
               S06:000047FE:  4E B8 45 EE
F00:6698                       move.w (a0),d0
               S06:00004802:  30 10
F00:6699                       cmpi.l #$0000FF10,d0     
               S06:00004804:  0C 80 00 00 FF 10
F00:6700                       bne LSHIFT_FAIL;                 
               S06:0000480A:  66 40
F00:6701                       cmpi.l #$00000009,d5     
               S06:0000480C:  0C 85 00 00 00 09
F00:6702                       bne LSHIFT_FAIL;                 
               S06:00004812:  66 38
F00:6703                         
F00:6704              ; WORD RIGHT
F00:6705                       lsr (a0)       
               S06:00004814:  E2 D0
F00:6706                       jsr SHIFTS2_FLAGS
               S06:00004816:  4E B8 45 EE
F00:6707                       lsr (a0)       
               S06:0000481A:  E2 D0
F00:6708                       jsr SHIFTS2_FLAGS
               S06:0000481C:  4E B8 45 EE
F00:6709                       lsr (a0)       
               S06:00004820:  E2 D0
F00:6710                       jsr SHIFTS2_FLAGS                
               S06:00004822:  4E B8 45 EE
F00:6711                       lsr (a0)       
               S06:00004826:  E2 D0
F00:6712                       jsr SHIFTS2_FLAGS               
               S06:00004828:  4E B8 45 EE
F00:6713                       lsr (a0)       
               S06:0000482C:  E2 D0
F00:6714                       jsr SHIFTS2_FLAGS
               S06:0000482E:  4E B8 45 EE
F00:6715                       lsr (a0)       
               S06:00004832:  E2 D0
F00:6716                       jsr SHIFTS2_FLAGS
               S06:00004834:  4E B8 45 EE
F00:6717                       move.w (a0),d0
               S06:00004838:  30 10
F00:6718                       cmpi.l #$000003FC,d0     
               S06:0000483A:  0C 80 00 00 03 FC
F00:6719                       bne LSHIFT_FAIL;                 
               S06:00004840:  66 0A
F00:6720                       cmpi.l #$0000000A,d5     
               S06:00004842:  0C 85 00 00 00 0A
F00:6721                       bne LSHIFT_FAIL;                 
               S06:00004848:  66 02
F00:6722       
F00:6723                       rts      
               S06:0000484A:  4E 75
F00:6724       
F00:6725       LSHIFT_FAIL: bra LSHIFT_FAIL
               S06:0000484C:  60 FE


Sections:
S01  seg0
S02  seg60
S03  segf000
S04  segf010
S05  segf020
S06  seg400


Sources:
F00  opcode_tests.asm


Symbols:
SHIFTS2_LOOP6 EXPR(18094=0x46ae) ABS 
SHIFTS2_LOOP5 EXPR(18060=0x468c) ABS 
SHIFTS2_LOOP4 EXPR(18026=0x466a) ABS 
SHIFTS2_LOOP3 EXPR(17992=0x4648) ABS 
SHIFTS2_LOOP2 EXPR(17958=0x4626) ABS 
LSHIFT_FAIL EXPR(18508=0x484c) ABS 
SHIFTS2_LOOP1 EXPR(17924=0x4604) ABS 
SHIFTS2_FLAGS EXPR(17902=0x45ee) ABS 
SHIFTS_LOOP6 EXPR(17482=0x444a) ABS 
SHIFTS_LOOP5 EXPR(17444=0x4424) ABS 
SHIFTS_LOOP4 EXPR(17406=0x43fe) ABS 
SHIFTS_LOOP3 EXPR(17368=0x43d8) ABS 
SHIFTS_LOOP2 EXPR(17330=0x43b2) ABS 
SHIFT_FAIL EXPR(17900=0x45ec) ABS 
SHIFTS_LOOP1 EXPR(17292=0x438c) ABS 
SHIFTS_FLAGS EXPR(17270=0x4376) ABS 
ROXx_LOOP6 EXPR(16862=0x41de) ABS 
ROXx_LOOP5 EXPR(16824=0x41b8) ABS 
ROXx_LOOP4 EXPR(16786=0x4192) ABS 
ROXx_LOOP3 EXPR(16748=0x416c) ABS 
ROXx_LOOP2 EXPR(16710=0x4146) ABS 
ROXX_FAIL EXPR(17268=0x4374) ABS 
ROXx_LOOP1 EXPR(16672=0x4120) ABS 
ROXx_FLAGS EXPR(16650=0x410a) ABS 
ROx_LOOP6 EXPR(16242=0x3f72) ABS 
ROx_LOOP5 EXPR(16204=0x3f4c) ABS 
ROx_LOOP4 EXPR(16166=0x3f26) ABS 
ROx_LOOP3 EXPR(16128=0x3f00) ABS 
ROx_LOOP2 EXPR(16090=0x3eda) ABS 
ROX_FAIL EXPR(16648=0x4108) ABS 
ROx_LOOP1 EXPR(16052=0x3eb4) ABS 
ROx_FLAGS EXPR(16030=0x3e9e) ABS 
EXG_FAIL EXPR(16028=0x3e9c) ABS 
MULS_FAIL EXPR(15928=0x3e38) ABS 
MULS_OUTER1 EXPR(15880=0x3e08) ABS 
MULU_FAIL EXPR(15850=0x3dea) ABS 
MULU_OUTER1 EXPR(15802=0x3dba) ABS 
SUBX_LOOP5 EXPR(15736=0x3d78) ABS 
SUBX_LOOP4 EXPR(15708=0x3d5c) ABS 
SUBX_LOOP3 EXPR(15680=0x3d40) ABS 
SUBX_FAIL EXPR(15772=0x3d9c) ABS 
SUBX_OUTER1 EXPR(15528=0x3ca8) ABS 
ADDX_LOOP5 EXPR(15458=0x3c62) ABS 
ADDX_LOOP4 EXPR(15430=0x3c46) ABS 
ADDX_LOOP3 EXPR(15402=0x3c2a) ABS 
ADDX_FAIL EXPR(15494=0x3c86) ABS 
ADDX_OUTER1 EXPR(15250=0x3b92) ABS 
SUBA_FAIL EXPR(15216=0x3b70) ABS 
SUBA_OUTER1 EXPR(15172=0x3b44) ABS 
ADDA_FAIL EXPR(15132=0x3b1c) ABS 
ADDA_OUTER1 EXPR(15088=0x3af0) ABS 
SUB_OUTER2 EXPR(14962=0x3a72) ABS 
SUB_FAIL EXPR(15048=0x3ac8) ABS 
SUB_OUTER1 EXPR(14846=0x39fe) ABS 
ADD_OUTER2 EXPR(14726=0x3986) ABS 
ADD_FAIL EXPR(14812=0x39dc) ABS 
ADD_OUTER1 EXPR(14610=0x3912) ABS 
CMPM_FAIL EXPR(14576=0x38f0) ABS 
CMPM_LOOP3 EXPR(14534=0x38c6) ABS 
CMPM_LOOP2 EXPR(14508=0x38ac) ABS 
CMPM_LOOP1 EXPR(14482=0x3892) ABS 
CMPA_FAIL EXPR(14408=0x3848) ABS 
CMPA_OUTER1 EXPR(14338=0x3802) ABS 
CMP_FAIL EXPR(14304=0x37e0) ABS 
CMP_OUTER1 EXPR(14218=0x378a) ABS 
EOR_FAIL EXPR(14184=0x3768) ABS 
EOR_OUTER2 EXPR(14098=0x3712) ABS 
AND_OUTER2 EXPR(13978=0x369a) ABS 
AND_FAIL EXPR(14064=0x36f0) ABS 
AND_OUTER1 EXPR(13862=0x3626) ABS 
OR_OUTER2 EXPR(13742=0x35ae) ABS 
OR_FAIL EXPR(13828=0x3604) ABS 
OR_OUTER1 EXPR(13626=0x353a) ABS 
DIVS_FAIL EXPR(13592=0x3518) ABS 
DIVS_OUTER1 EXPR(13538=0x34e2) ABS 
DIVU_FAIL EXPR(13508=0x34c4) ABS 
DIVU_OUTER1 EXPR(13454=0x348e) ABS 
MOVEQ_FAIL EXPR(13424=0x3470) ABS 
SUBQ_LOOP3 EXPR(13344=0x3420) ABS 
SUBQ_LOOP2 EXPR(13290=0x33ea) ABS 
SUBQ_FAIL EXPR(13394=0x3452) ABS 
SUBQ_LOOP1 EXPR(13228=0x33ac) ABS 
ADDQ_LOOP3 EXPR(13152=0x3360) ABS 
ADDQ_LOOP2 EXPR(13098=0x332a) ABS 
ADDQ_FAIL EXPR(13202=0x3392) ABS 
ADDQ_LOOP1 EXPR(13032=0x32e8) ABS 
SCC_FAIL EXPR(13010=0x32d2) ABS 
DBCC_LOOP2 EXPR(12952=0x3298) ABS 
DBCC_FAIL EXPR(12968=0x32a8) ABS 
DBCC_LOOP1 EXPR(12938=0x328a) ABS 
BCC14 EXPR(12926=0x327e) ABS 
BCC13 EXPR(12916=0x3274) ABS 
BCC12 EXPR(12908=0x326c) ABS 
BCC11 EXPR(12898=0x3262) ABS 
BCC10 EXPR(12890=0x325a) ABS 
BCC9 EXPR(12880=0x3250) ABS 
BCC8 EXPR(12872=0x3248) ABS 
BCC7 EXPR(12862=0x323e) ABS 
BCC6 EXPR(12854=0x3236) ABS 
BCC5 EXPR(12844=0x322c) ABS 
BCC4 EXPR(12836=0x3224) ABS 
BCC3 EXPR(12826=0x321a) ABS 
BCC2 EXPR(12818=0x3212) ABS 
BCC_FAIL EXPR(12928=0x3280) ABS 
BCC1 EXPR(12808=0x3208) ABS 
RTR_FAIL EXPR(12798=0x31fe) ABS 
RTR_DONE EXPR(12776=0x31e8) ABS 
TRAPV_FAIL EXPR(12762=0x31da) ABS 
NBCD_NO_Z1 EXPR(12704=0x31a0) ABS 
NBCD_NO_C1 EXPR(12700=0x319c) ABS 
NBCD_LOOP1 EXPR(12680=0x3188) ABS 
NBCD_FAIL EXPR(12732=0x31bc) ABS 
NBCD_NO_Z EXPR(12626=0x3152) ABS 
NBCD_NO_C EXPR(12622=0x314e) ABS 
NBCD_LOOP EXPR(12610=0x3142) ABS 
SBCD_NO_C4 EXPR(12510=0x30de) ABS 
SBCD_NO_C3 EXPR(12502=0x30d6) ABS 
SBCD_INNER2 EXPR(12474=0x30ba) ABS 
SBCD_OUTER2 EXPR(12472=0x30b8) ABS 
SBCD_FAIL EXPR(12584=0x3128) ABS 
SBCD_NO_C2 EXPR(12394=0x306a) ABS 
SBCD_NO_C1 EXPR(12386=0x3062) ABS 
SBCD_INNER1 EXPR(12358=0x3046) ABS 
SBCD_OUTER1 EXPR(12356=0x3044) ABS 
ABCD_NO_C4 EXPR(12248=0x2fd8) ABS 
ABCD_NO_C3 EXPR(12240=0x2fd0) ABS 
ABCD_INNER2 EXPR(12212=0x2fb4) ABS 
ABCD_OUTER2 EXPR(12210=0x2fb2) ABS 
ABCD_FAIL EXPR(12322=0x3022) ABS 
ABCD_NO_C2 EXPR(12132=0x2f64) ABS 
ABCD_NO_C1 EXPR(12124=0x2f5c) ABS 
ABCD_INNER1 EXPR(12096=0x2f40) ABS 
ABCD_OUTER1 EXPR(12094=0x2f3e) ABS 
MOVEM_FAIL EXPR(12060=0x2f1c) ABS 
CLR_FAIL EXPR(11140=0x2b84) ABS 
NEGS_FAIL EXPR(11070=0x2b3e) ABS 
CHK_FAIL EXPR(9886=0x269e) ABS 
MOVE_USP_FAIL EXPR(9826=0x2662) ABS 
LINK_FAIL EXPR(9812=0x2654) ABS 
TST_FAIL EXPR(9780=0x2634) ABS 
TAS_FAIL EXPR(9708=0x25ec) ABS 
LEA1 EXPR(9646=0x25ae) ABS 
LEAPEA_FAIL EXPR(9666=0x25c2) ABS 
SWAP_FAIL EXPR(9488=0x2510) ABS 
EXT_FAIL EXPR(9464=0x24f8) ABS 
MOVE4 EXPR(9156=0x23c4) ABS 
MOVE_FLAGS_FAIL EXPR(9422=0x24ce) ABS 
MOVE3 EXPR(8682=0x21ea) ABS 
MOVE1 EXPR(8538=0x215a) ABS 
MOVE2 EXPR(8392=0x20c8) ABS 
MOVE_FAIL EXPR(8748=0x222c) ABS 
SUB_I_FAIL EXPR(8146=0x1fd2) ABS 
ADD_I_FAIL EXPR(7640=0x1dd8) ABS 
CMP_I_FAIL EXPR(7134=0x1bde) ABS 
BSR_FAIL EXPR(6496=0x1960) ABS 
BSR_FAR2 EXPR(12790=0x31f6) ABS 
BSR_CLOSE2 EXPR(6488=0x1958) ABS 
BSR_CLOSE1 EXPR(6434=0x1922) ABS 
BOOL_I_FAIL EXPR(6432=0x1920) ABS 
MOVEP_FAIL EXPR(5904=0x1710) ABS 
BSET_FAIL EXPR(5754=0x167a) ABS 
BCLR_FAIL EXPR(4664=0x1238) ABS 
BCHG_FAIL EXPR(3660=0xe4c) ABS 
op_BTST32 EXPR(2592=0xa20) UNUSED ABS 
op_BTST31 EXPR(2588=0xa1c) ABS 
op_BTST30 EXPR(2582=0xa16) ABS 
op_BTST29 EXPR(2576=0xa10) ABS 
op_BTST28 EXPR(2570=0xa0a) ABS 
op_BTST27 EXPR(2564=0xa04) ABS 
op_BTST26 EXPR(2558=0x9fe) ABS 
op_BTST25 EXPR(2552=0x9f8) ABS 
op_BTST24 EXPR(2546=0x9f2) ABS 
op_BTST23 EXPR(2540=0x9ec) ABS 
op_BTST22 EXPR(2534=0x9e6) ABS 
op_BTST21 EXPR(2528=0x9e0) ABS 
op_BTST20 EXPR(2518=0x9d6) ABS 
op_BTST11 EXPR(2098=0x832) ABS 
op_BTST10 EXPR(2088=0x828) ABS 
op_BTST9 EXPR(2078=0x81e) ABS 
op_BTST8 EXPR(2068=0x814) ABS 
op_BTST7 EXPR(2058=0x80a) ABS 
op_BTST6 EXPR(2048=0x800) ABS 
op_BTST5 EXPR(2038=0x7f6) ABS 
op_BTST4 EXPR(2028=0x7ec) ABS 
op_BTST3 EXPR(2018=0x7e2) ABS 
op_BTST2 EXPR(2008=0x7d8) ABS 
op_BTST1 EXPR(1998=0x7ce) ABS 
op_BTST12 EXPR(2104=0x838) ABS 
op_BTST0 EXPR(1984=0x7c0) ABS 
BTST_FAIL EXPR(2620=0xa3c) ABS 
ANDI_TO_SR_FAIL EXPR(1516=0x5ec) ABS 
ANDI_TO_CCR_FAIL EXPR(1476=0x5c4) ABS 
EORI_TO_SR_FAIL EXPR(1436=0x59c) ABS 
EORI_TO_CCR_FAIL EXPR(1396=0x574) ABS 
ORI_TO_SR_FAIL EXPR(1356=0x54c) ABS 
ORI_TO_CCR_FAIL EXPR(1320=0x528) ABS 
BSR_FAR1 EXPR(1278=0x4fe) ABS 
op_SHIFTS2 EXPR(17914=0x45fa) ABS 
op_SHIFTS EXPR(17282=0x4382) ABS 
op_ROXx EXPR(16662=0x4116) ABS 
op_ROx EXPR(16042=0x3eaa) ABS 
op_EXG EXPR(15930=0x3e3a) ABS 
op_MULS EXPR(15852=0x3dec) ABS 
op_MULU EXPR(15774=0x3d9e) ABS 
op_SUBX EXPR(15496=0x3c88) ABS 
op_ADDX EXPR(15218=0x3b72) ABS 
op_SUBA EXPR(15134=0x3b1e) ABS 
op_ADDA EXPR(15050=0x3aca) ABS 
op_SUB EXPR(14814=0x39de) ABS 
op_ADD EXPR(14578=0x38f2) ABS 
op_CMPM EXPR(14410=0x384a) ABS 
op_CMPA EXPR(14306=0x37e2) ABS 
op_CMP EXPR(14186=0x376a) ABS 
op_EOR EXPR(14066=0x36f2) ABS 
op_AND EXPR(13830=0x3606) ABS 
op_OR EXPR(13594=0x351a) ABS 
op_DIVS EXPR(13510=0x34c6) ABS 
op_DIVU EXPR(13426=0x3472) ABS 
op_MOVEQ EXPR(13396=0x3454) ABS 
op_SUBQ EXPR(13204=0x3394) ABS 
op_ADDQ EXPR(13012=0x32d4) ABS 
op_SCC EXPR(12970=0x32aa) ABS 
op_DBCC EXPR(12930=0x3282) ABS 
op_BCC EXPR(12800=0x3200) ABS 
op_BSR EXPR(6442=0x192a) ABS 
op_RTR EXPR(12764=0x31dc) ABS 
op_TRAPV EXPR(12734=0x31be) ABS 
op_NBCD EXPR(12586=0x312a) ABS 
op_SBCD EXPR(12324=0x3024) ABS 
op_ABCD EXPR(12062=0x2f1e) ABS 
op_MOVEM EXPR(11142=0x2b86) ABS 
op_CLR EXPR(11072=0x2b40) ABS 
op_NEGS EXPR(9888=0x26a0) ABS 
op_CHK EXPR(9828=0x2664) ABS 
op_MOVE_USP EXPR(9814=0x2656) ABS 
op_LINKS EXPR(9782=0x2636) ABS 
op_TST EXPR(9710=0x25ee) ABS 
op_TAS EXPR(9668=0x25c4) ABS 
op_LEAPEA EXPR(9490=0x2512) ABS 
op_SWAP EXPR(9466=0x24fa) ABS 
op_EXT EXPR(9424=0x24d0) ABS 
op_MOVE_xxx_FLAGS EXPR(8750=0x222e) ABS 
op_MOVE EXPR(8148=0x1fd4) ABS 
op_SUB_I EXPR(7642=0x1dda) ABS 
op_ADD_I EXPR(7136=0x1be0) ABS 
op_CMP_I EXPR(6498=0x1962) ABS 
op_BOOL_I EXPR(5906=0x1712) ABS 
op_MOVEP EXPR(5756=0x167c) ABS 
op_BSET EXPR(4666=0x123a) ABS 
op_BCLR EXPR(3662=0xe4e) ABS 
op_BCHG EXPR(2622=0xa3e) ABS 
op_BTST EXPR(1518=0x5ee) ABS 
op_ANDI_TO_SR EXPR(1478=0x5c6) ABS 
op_ANDI_TO_CCR EXPR(1438=0x59e) ABS 
op_EORI_TO_SR EXPR(1398=0x576) ABS 
op_EORI_TO_CCR EXPR(1358=0x54e) ABS 
op_ORI_TO_SR EXPR(1322=0x52a) ABS 
op_ORI_TO_CCR EXPR(1286=0x506) ABS 
EXCEPTION_7 EXPR(61472=0xf020) UNUSED ABS 
EXCEPTION_6 EXPR(61456=0xf010) UNUSED ABS 
ALL_DONE EXPR(61440=0xf000) ABS 
_MOVEMBYTES EXPR(28=0x1c) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(10837=0x2a55) INTERNAL 
__LINE__ EXPR(6725=0x1a45) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
